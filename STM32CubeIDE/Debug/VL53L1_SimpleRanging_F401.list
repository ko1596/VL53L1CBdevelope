
VL53L1_SimpleRanging_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  0800dea0  0800dea0  0001dea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e54c  0800e54c  0001e54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e554  0800e554  0001e554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e558  0800e558  0001e558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000000  0800e55c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000324c  20000210  0800e768  00020210  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000345c  0800e768  0002345c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0003053f  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   000622d4  00000000  00000000  0005077b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000061a4  00000000  00000000  000b2a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000018d8  00000000  00000000  000b8bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000b808e  00000000  00000000  000ba4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002148  00000000  00000000  00172560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00034c54  00000000  00000000  001746a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7d9  00000000  00000000  001a92fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001c8ad5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000060a0  00000000  00000000  001c8b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000b4  00000000  00000000  001cebc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000183  00000000  00000000  001cec7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800de88 	.word	0x0800de88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800de88 	.word	0x0800de88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9b9 	b.w	8000f4c <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f56:	e003      	b.n	8000f60 <LoopCopyDataInit>

08000f58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f5e:	3104      	adds	r1, #4

08000f60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f68:	d3f6      	bcc.n	8000f58 <CopyDataInit>
  ldr  r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f6c:	e002      	b.n	8000f74 <LoopFillZerobss>

08000f6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f70:	f842 3b04 	str.w	r3, [r2], #4

08000f74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f78:	d3f9      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7a:	f009 f825 	bl	8009fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f00a f99b 	bl	800b2b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f000 f929 	bl	80011d8 <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f88:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000f8c:	0800e55c 	.word	0x0800e55c
  ldr  r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f94:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 8000f98:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8000f9c:	2000345c 	.word	0x2000345c

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>
	...

08000fa4 <fputc>:

/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)

PUTCHAR_PROTOTYPE
{
 8000fa4:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8000faa:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000fac:	2201      	movs	r2, #1
 8000fae:	a901      	add	r1, sp, #4
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <fputc+0x1c>)
 8000fb2:	f00a f925 	bl	800b200 <HAL_UART_Transmit>
  return ch;
}
 8000fb6:	9801      	ldr	r0, [sp, #4]
 8000fb8:	b003      	add	sp, #12
 8000fba:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fbe:	bf00      	nop
 8000fc0:	200031b0 	.word	0x200031b0

08000fc4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin==VL53L1X_INT_Pin)
 8000fc4:	2810      	cmp	r0, #16
  {
    IntCount++;
 8000fc6:	bf01      	itttt	eq
 8000fc8:	4a02      	ldreq	r2, [pc, #8]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x10>)
 8000fca:	6813      	ldreq	r3, [r2, #0]
 8000fcc:	3301      	addeq	r3, #1
 8000fce:	6013      	streq	r3, [r2, #0]
  }
}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200031ac 	.word	0x200031ac

08000fd8 <SystemClock_Config>:
/** System Clock Configuration
*/
#ifdef STM32F401xE

void SystemClock_Config(void)
{
 8000fd8:	b530      	push	{r4, r5, lr}
 8000fda:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  
  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <SystemClock_Config+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	9201      	str	r2, [sp, #4]
 8000fe2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000fe4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fe8:	6419      	str	r1, [r3, #64]	; 0x40
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fec:	4924      	ldr	r1, [pc, #144]	; (8001080 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff6:	9202      	str	r2, [sp, #8]
 8000ff8:	680b      	ldr	r3, [r1, #0]
 8000ffa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001002:	600b      	str	r3, [r1, #0]
 8001004:	680b      	ldr	r3, [r1, #0]
 8001006:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	9b02      	ldr	r3, [sp, #8]
  
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800100e:	2101      	movs	r1, #1
 8001010:	2310      	movs	r3, #16
 8001012:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001016:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001018:	2504      	movs	r5, #4
 800101a:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800101e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001020:	e9cd 3511 	strd	r3, r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001026:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001028:	e9cd 420e 	strd	r4, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800102e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f009 fd8a 	bl	800ab48 <HAL_RCC_OscConfig>
 8001034:	b100      	cbz	r0, 8001038 <SystemClock_Config+0x60>
*/
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8001036:	e7fe      	b.n	8001036 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001048:	4621      	mov	r1, r4
 800104a:	a803      	add	r0, sp, #12
 800104c:	f009 ff52 	bl	800aef4 <HAL_RCC_ClockConfig>
 8001050:	4604      	mov	r4, r0
 8001052:	b100      	cbz	r0, 8001056 <SystemClock_Config+0x7e>
  while(1) 
 8001054:	e7fe      	b.n	8001054 <SystemClock_Config+0x7c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001056:	f009 ffe9 	bl	800b02c <HAL_RCC_GetHCLKFreq>
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001062:	f009 f873 	bl	800a14c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001066:	4628      	mov	r0, r5
 8001068:	f009 f886 	bl	800a178 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800106c:	4622      	mov	r2, r4
 800106e:	4621      	mov	r1, r4
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f009 f82a 	bl	800a0cc <HAL_NVIC_SetPriority>
}
 8001078:	b015      	add	sp, #84	; 0x54
 800107a:	bd30      	pop	{r4, r5, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40007000 	.word	0x40007000

08001084 <Multizones>:
{
 8001084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  status = VL53L1_WaitDeviceBooted(Dev);
 8001088:	4d49      	ldr	r5, [pc, #292]	; (80011b0 <Multizones+0x12c>)
  printf("Multizones loop starts\n");
 800108a:	484a      	ldr	r0, [pc, #296]	; (80011b4 <Multizones+0x130>)
  status = VL53L1_WaitDeviceBooted(Dev);
 800108c:	4c4a      	ldr	r4, [pc, #296]	; (80011b8 <Multizones+0x134>)
{
 800108e:	b0c1      	sub	sp, #260	; 0x104
  uint8_t NewDataReady = 0;
 8001090:	2600      	movs	r6, #0
 8001092:	f88d 6017 	strb.w	r6, [sp, #23]
  printf("Multizones loop starts\n");
 8001096:	f00a fe39 	bl	800bd0c <puts>
  status = VL53L1_WaitDeviceBooted(Dev);
 800109a:	6828      	ldr	r0, [r5, #0]
 800109c:	f000 fdaa 	bl	8001bf4 <VL53L1_WaitDeviceBooted>
 80010a0:	6020      	str	r0, [r4, #0]
  status = VL53L1_DataInit(Dev);
 80010a2:	6828      	ldr	r0, [r5, #0]
 80010a4:	f000 ff40 	bl	8001f28 <VL53L1_DataInit>
 80010a8:	6020      	str	r0, [r4, #0]
  status = VL53L1_StaticInit(Dev);
 80010aa:	6828      	ldr	r0, [r5, #0]
 80010ac:	f001 fb3e 	bl	800272c <VL53L1_StaticInit>
  status = VL53L1_SetPresetMode(Dev, VL53L1_PRESETMODE_MULTIZONES_SCANNING);
 80010b0:	2102      	movs	r1, #2
  status = VL53L1_StaticInit(Dev);
 80010b2:	6020      	str	r0, [r4, #0]
  status = VL53L1_SetPresetMode(Dev, VL53L1_PRESETMODE_MULTIZONES_SCANNING);
 80010b4:	6828      	ldr	r0, [r5, #0]
 80010b6:	f000 fe6d 	bl	8001d94 <VL53L1_SetPresetMode>
  pRoiConfig.NumberOfRoi=NumROI;
 80010ba:	2310      	movs	r3, #16
  status = VL53L1_SetPresetMode(Dev, VL53L1_PRESETMODE_MULTIZONES_SCANNING);
 80010bc:	6020      	str	r0, [r4, #0]
  printf("Start set Roi");
 80010be:	483f      	ldr	r0, [pc, #252]	; (80011bc <Multizones+0x138>)
  pRoiConfig.NumberOfRoi=NumROI;
 80010c0:	f88d 3018 	strb.w	r3, [sp, #24]
  printf("Start set Roi");
 80010c4:	f00a fd9c 	bl	800bc00 <iprintf>
  for(k=0;k<4;k++)
 80010c8:	f10d 0918 	add.w	r9, sp, #24
	  for(j=0;j<4;j++)
 80010cc:	fa5f fb86 	uxtb.w	fp, r6
 80010d0:	1cf3      	adds	r3, r6, #3
 80010d2:	f10b 0a03 	add.w	sl, fp, #3
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	fa5f fa8a 	uxtb.w	sl, sl
		  pRoiConfig.UserRois[k*4+j].TopLeftX=j*4;
 80010dc:	46c8      	mov	r8, r9
 80010de:	2303      	movs	r3, #3
	  for(j=0;j<4;j++)
 80010e0:	2700      	movs	r7, #0
		  printf("set Roi %d\n\rx: %d-%d    y: %d-%d\n\r",k*4+j,j*4,j*4+3,k*4,k*4+3);
 80010e2:	9902      	ldr	r1, [sp, #8]
		  pRoiConfig.UserRois[k*4+j].BotRightX=j*4+3;
 80010e4:	f888 3003 	strb.w	r3, [r8, #3]
		  pRoiConfig.UserRois[k*4+j].TopLeftX=j*4;
 80010e8:	00ba      	lsls	r2, r7, #2
 80010ea:	f888 2001 	strb.w	r2, [r8, #1]
		  pRoiConfig.UserRois[k*4+j].TopLeftY=k*4+3;
 80010ee:	f888 a002 	strb.w	sl, [r8, #2]
		  printf("set Roi %d\n\rx: %d-%d    y: %d-%d\n\r",k*4+j,j*4,j*4+3,k*4,k*4+3);
 80010f2:	4833      	ldr	r0, [pc, #204]	; (80011c0 <Multizones+0x13c>)
		  pRoiConfig.UserRois[k*4+j].BotRightY=k*4;
 80010f4:	f808 bf04 	strb.w	fp, [r8, #4]!
		  printf("set Roi %d\n\rx: %d-%d    y: %d-%d\n\r",k*4+j,j*4,j*4+3,k*4,k*4+3);
 80010f8:	e9cd 6100 	strd	r6, r1, [sp]
 80010fc:	19b9      	adds	r1, r7, r6
 80010fe:	9303      	str	r3, [sp, #12]
	  for(j=0;j<4;j++)
 8001100:	3701      	adds	r7, #1
		  printf("set Roi %d\n\rx: %d-%d    y: %d-%d\n\r",k*4+j,j*4,j*4+3,k*4,k*4+3);
 8001102:	f00a fd7d 	bl	800bc00 <iprintf>
	  for(j=0;j<4;j++)
 8001106:	9b03      	ldr	r3, [sp, #12]
 8001108:	2f04      	cmp	r7, #4
 800110a:	f103 0304 	add.w	r3, r3, #4
 800110e:	d1e8      	bne.n	80010e2 <Multizones+0x5e>
  for(k=0;k<4;k++)
 8001110:	3604      	adds	r6, #4
 8001112:	2e10      	cmp	r6, #16
 8001114:	f109 0910 	add.w	r9, r9, #16
 8001118:	d1d8      	bne.n	80010cc <Multizones+0x48>
  status = VL53L1_SetROI(Dev, &pRoiConfig);
 800111a:	a906      	add	r1, sp, #24
 800111c:	6828      	ldr	r0, [r5, #0]
 800111e:	f000 ff57 	bl	8001fd0 <VL53L1_SetROI>
 8001122:	4601      	mov	r1, r0
 8001124:	6020      	str	r0, [r4, #0]
  if (!status){
 8001126:	2800      	cmp	r0, #0
 8001128:	d13a      	bne.n	80011a0 <Multizones+0x11c>
    status = VL53L1_StartMeasurement(Dev);
 800112a:	6828      	ldr	r0, [r5, #0]
 800112c:	f000 ffbc 	bl	80020a8 <VL53L1_StartMeasurement>
 8001130:	4601      	mov	r1, r0
 8001132:	6020      	str	r0, [r4, #0]
  if(status){
 8001134:	2800      	cmp	r0, #0
 8001136:	d137      	bne.n	80011a8 <Multizones+0x124>
        printf("%1d,", RoiNumber);
 8001138:	4e22      	ldr	r6, [pc, #136]	; (80011c4 <Multizones+0x140>)
        printf("%d", pMultiRangingData->RangeData[0].RangeMilliMeter);
 800113a:	4f23      	ldr	r7, [pc, #140]	; (80011c8 <Multizones+0x144>)
        printf ("\n\r");
 800113c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80011d4 <Multizones+0x150>
      status = VL53L1_GetMeasurementDataReady(Dev, &NewDataReady);
 8001140:	6828      	ldr	r0, [r5, #0]
 8001142:	f10d 0117 	add.w	r1, sp, #23
 8001146:	f000 fffe 	bl	8002146 <VL53L1_GetMeasurementDataReady>
 800114a:	6020      	str	r0, [r4, #0]
      HAL_Delay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f008 ff97 	bl	800a080 <HAL_Delay>
      if((!status)&&(NewDataReady!=0)){
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f3      	bne.n	8001140 <Multizones+0xbc>
 8001158:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0ef      	beq.n	8001140 <Multizones+0xbc>
        status = VL53L1_GetMultiRangingData(Dev, pMultiRangingData);
 8001160:	a920      	add	r1, sp, #128	; 0x80
 8001162:	6828      	ldr	r0, [r5, #0]
 8001164:	f000 fff2 	bl	800214c <VL53L1_GetMultiRangingData>
        RoiStatus=pMultiRangingData->RoiStatus;
 8001168:	f89d 9087 	ldrb.w	r9, [sp, #135]	; 0x87
        printf("%1d,", RoiNumber);
 800116c:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
        status = VL53L1_GetMultiRangingData(Dev, pMultiRangingData);
 8001170:	6020      	str	r0, [r4, #0]
        printf("%1d,", RoiNumber);
 8001172:	4630      	mov	r0, r6
 8001174:	f00a fd44 	bl	800bc00 <iprintf>
        printf("%1d,", RoiStatus);
 8001178:	4649      	mov	r1, r9
 800117a:	4630      	mov	r0, r6
 800117c:	f00a fd40 	bl	800bc00 <iprintf>
        printf("%d", pMultiRangingData->RangeData[0].RangeMilliMeter);
 8001180:	f9bd 109c 	ldrsh.w	r1, [sp, #156]	; 0x9c
 8001184:	4638      	mov	r0, r7
 8001186:	f00a fd3b 	bl	800bc00 <iprintf>
        printf ("\n\r");
 800118a:	4640      	mov	r0, r8
 800118c:	f00a fd38 	bl	800bc00 <iprintf>
        if (status==0){
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1d4      	bne.n	8001140 <Multizones+0xbc>
          status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8001196:	6828      	ldr	r0, [r5, #0]
 8001198:	f000 ffd2 	bl	8002140 <VL53L1_ClearInterruptAndStartMeasurement>
 800119c:	6020      	str	r0, [r4, #0]
 800119e:	e7cf      	b.n	8001140 <Multizones+0xbc>
    printf("VL53L1_SetROI failed: error =%d\n\r", status);
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <Multizones+0x148>)
 80011a2:	f00a fd2d 	bl	800bc00 <iprintf>
    while(1){};
 80011a6:	e7fe      	b.n	80011a6 <Multizones+0x122>
    printf("VL53L1_StartMeasurement failed: error = %d \n\r", status);
 80011a8:	4809      	ldr	r0, [pc, #36]	; (80011d0 <Multizones+0x14c>)
 80011aa:	f00a fd29 	bl	800bc00 <iprintf>
    while(1);
 80011ae:	e7fe      	b.n	80011ae <Multizones+0x12a>
 80011b0:	20000000 	.word	0x20000000
 80011b4:	0800df9c 	.word	0x0800df9c
 80011b8:	200031f0 	.word	0x200031f0
 80011bc:	0800dfb3 	.word	0x0800dfb3
 80011c0:	0800dfc1 	.word	0x0800dfc1
 80011c4:	0800e034 	.word	0x0800e034
 80011c8:	0800e039 	.word	0x0800e039
 80011cc:	0800dfe4 	.word	0x0800dfe4
 80011d0:	0800e006 	.word	0x0800e006
 80011d4:	0800e031 	.word	0x0800e031

080011d8 <main>:
{
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	2400      	movs	r4, #0
  HAL_Init();
 80011de:	f008 ff23 	bl	800a028 <HAL_Init>
  SystemClock_Config();
 80011e2:	f7ff fef9 	bl	8000fd8 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b5d      	ldr	r3, [pc, #372]	; (800135c <main+0x184>)
 80011e8:	9401      	str	r4, [sp, #4]
 80011ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ec:	485c      	ldr	r0, [pc, #368]	; (8001360 <main+0x188>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ee:	4d5d      	ldr	r5, [pc, #372]	; (8001364 <main+0x18c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	f042 0204 	orr.w	r2, r2, #4
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
 80011f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f8:	f002 0204 	and.w	r2, r2, #4
 80011fc:	9201      	str	r2, [sp, #4]
 80011fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001200:	9402      	str	r4, [sp, #8]
 8001202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001204:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
 800120a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800120c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001210:	9202      	str	r2, [sp, #8]
 8001212:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	9403      	str	r4, [sp, #12]
 8001216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001218:	f042 0201 	orr.w	r2, r2, #1
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
 800121e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001220:	f002 0201 	and.w	r2, r2, #1
 8001224:	9203      	str	r2, [sp, #12]
 8001226:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	9404      	str	r4, [sp, #16]
 800122a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122c:	f042 0202 	orr.w	r2, r2, #2
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001238:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800123c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001240:	f009 f87e 	bl	800a340 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001248:	4847      	ldr	r0, [pc, #284]	; (8001368 <main+0x190>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124e:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001252:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001254:	f008 ffa2 	bl	800a19c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 8001258:	2310      	movs	r3, #16
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 800125a:	4841      	ldr	r0, [pc, #260]	; (8001360 <main+0x188>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 800125e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001260:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 8001264:	f008 ff9a 	bl	800a19c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001268:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800126a:	483d      	ldr	r0, [pc, #244]	; (8001360 <main+0x188>)
 800126c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001276:	f008 ff91 	bl	800a19c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800127a:	4621      	mov	r1, r4
 800127c:	4622      	mov	r2, r4
 800127e:	200a      	movs	r0, #10
 8001280:	f008 ff24 	bl	800a0cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001284:	200a      	movs	r0, #10
 8001286:	f008 ff53 	bl	800a130 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 800128a:	4838      	ldr	r0, [pc, #224]	; (800136c <main+0x194>)
  huart2.Init.BaudRate = 115200;
 800128c:	4938      	ldr	r1, [pc, #224]	; (8001370 <main+0x198>)
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8001290:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001294:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800129a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a4:	f009 ff7e 	bl	800b1a4 <HAL_UART_Init>
 80012a8:	b100      	cbz	r0, 80012ac <main+0xd4>
  while(1) 
 80012aa:	e7fe      	b.n	80012aa <main+0xd2>
  hi2c1.Instance = I2C1;
 80012ac:	4c31      	ldr	r4, [pc, #196]	; (8001374 <main+0x19c>)
  hi2c1.Init.ClockSpeed = 100000;
 80012ae:	4a32      	ldr	r2, [pc, #200]	; (8001378 <main+0x1a0>)
 80012b0:	4b32      	ldr	r3, [pc, #200]	; (800137c <main+0x1a4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b2:	6220      	str	r0, [r4, #32]
  hi2c1.Init.ClockSpeed = 100000;
 80012b4:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80012bc:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	e9c4 3004 	strd	r3, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c4:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c8:	4620      	mov	r0, r4
 80012ca:	f009 f94d 	bl	800a568 <HAL_I2C_Init>
 80012ce:	4607      	mov	r7, r0
 80012d0:	b100      	cbz	r0, 80012d4 <main+0xfc>
  while(1) 
 80012d2:	e7fe      	b.n	80012d2 <main+0xfa>
  Dev->I2cHandle = &hi2c1;
 80012d4:	4d2a      	ldr	r5, [pc, #168]	; (8001380 <main+0x1a8>)
  XNUCLEO53L1A1_Init();
 80012d6:	f000 fb21 	bl	800191c <XNUCLEO53L1A1_Init>
  printf("VL53L1X Examples...\n");
 80012da:	482a      	ldr	r0, [pc, #168]	; (8001384 <main+0x1ac>)
 80012dc:	f00a fd16 	bl	800bd0c <puts>
  Dev->I2cHandle = &hi2c1;
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	f642 62e4 	movw	r2, #12004	; 0x2ee4
  Dev->I2cDevAddr = 0x52;
 80012e6:	2152      	movs	r1, #82	; 0x52
  Dev->I2cHandle = &hi2c1;
 80012e8:	509c      	str	r4, [r3, r2]
  Dev->I2cDevAddr = 0x52;
 80012ea:	f642 62e8 	movw	r2, #12008	; 0x2ee8
  status = XNUCLEO53L1A1_ResetId(ToFSensor, 0); // Reset ToF sensor
 80012ee:	4630      	mov	r0, r6
  Dev->I2cDevAddr = 0x52;
 80012f0:	5499      	strb	r1, [r3, r2]
  status = XNUCLEO53L1A1_ResetId(ToFSensor, 0); // Reset ToF sensor
 80012f2:	4639      	mov	r1, r7
 80012f4:	f000 fb58 	bl	80019a8 <XNUCLEO53L1A1_ResetId>
 80012f8:	4c23      	ldr	r4, [pc, #140]	; (8001388 <main+0x1b0>)
 80012fa:	6020      	str	r0, [r4, #0]
  HAL_Delay(2);
 80012fc:	2002      	movs	r0, #2
 80012fe:	f008 febf 	bl	800a080 <HAL_Delay>
  status = XNUCLEO53L1A1_ResetId(ToFSensor, 1); // Reset ToF sensor
 8001302:	4631      	mov	r1, r6
 8001304:	4630      	mov	r0, r6
 8001306:	f000 fb4f 	bl	80019a8 <XNUCLEO53L1A1_ResetId>
 800130a:	6020      	str	r0, [r4, #0]
  HAL_Delay(2);
 800130c:	2002      	movs	r0, #2
 800130e:	f008 feb7 	bl	800a080 <HAL_Delay>
  VL53L1_RdByte(Dev, 0x010F, &byteData);
 8001312:	f10d 0203 	add.w	r2, sp, #3
 8001316:	f240 110f 	movw	r1, #271	; 0x10f
 800131a:	6828      	ldr	r0, [r5, #0]
 800131c:	f000 f960 	bl	80015e0 <VL53L1_RdByte>
  printf("VL53L1X Model_ID: %02X\n\r", byteData);
 8001320:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8001324:	4819      	ldr	r0, [pc, #100]	; (800138c <main+0x1b4>)
 8001326:	f00a fc6b 	bl	800bc00 <iprintf>
  VL53L1_RdByte(Dev, 0x0110, &byteData);
 800132a:	f10d 0203 	add.w	r2, sp, #3
 800132e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001332:	6828      	ldr	r0, [r5, #0]
 8001334:	f000 f954 	bl	80015e0 <VL53L1_RdByte>
  printf("VL53L1X Module_Type: %02X\n\r", byteData);
 8001338:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800133c:	4814      	ldr	r0, [pc, #80]	; (8001390 <main+0x1b8>)
 800133e:	f00a fc5f 	bl	800bc00 <iprintf>
  VL53L1_RdWord(Dev, 0x010F, &wordData);
 8001342:	aa05      	add	r2, sp, #20
 8001344:	f240 110f 	movw	r1, #271	; 0x10f
 8001348:	6828      	ldr	r0, [r5, #0]
 800134a:	f000 f961 	bl	8001610 <VL53L1_RdWord>
  printf("VL53L1X: %02X\n\r", wordData);
 800134e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8001352:	4810      	ldr	r0, [pc, #64]	; (8001394 <main+0x1bc>)
 8001354:	f00a fc54 	bl	800bc00 <iprintf>
  Multizones();
 8001358:	f7ff fe94 	bl	8001084 <Multizones>
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	10210000 	.word	0x10210000
 8001368:	40020800 	.word	0x40020800
 800136c:	200031b0 	.word	0x200031b0
 8001370:	40004400 	.word	0x40004400
 8001374:	20003158 	.word	0x20003158
 8001378:	40005400 	.word	0x40005400
 800137c:	000186a0 	.word	0x000186a0
 8001380:	20000000 	.word	0x20000000
 8001384:	0800e03c 	.word	0x0800e03c
 8001388:	200031f0 	.word	0x200031f0
 800138c:	0800e050 	.word	0x0800e050
 8001390:	0800e069 	.word	0x0800e069
 8001394:	0800e085 	.word	0x0800e085

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800139a:	2007      	movs	r0, #7
 800139c:	f008 fe84 	bl	800a0a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	4611      	mov	r1, r2
 80013a4:	f06f 000b 	mvn.w	r0, #11
 80013a8:	f008 fe90 	bl	800a0cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	4611      	mov	r1, r2
 80013b0:	f06f 000a 	mvn.w	r0, #10
 80013b4:	f008 fe8a 	bl	800a0cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	4611      	mov	r1, r2
 80013bc:	f06f 0009 	mvn.w	r0, #9
 80013c0:	f008 fe84 	bl	800a0cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	4611      	mov	r1, r2
 80013c8:	f06f 0004 	mvn.w	r0, #4
 80013cc:	f008 fe7e 	bl	800a0cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	4611      	mov	r1, r2
 80013d4:	f06f 0003 	mvn.w	r0, #3
 80013d8:	f008 fe78 	bl	800a0cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	4611      	mov	r1, r2
 80013e0:	f06f 0001 	mvn.w	r0, #1
 80013e4:	f008 fe72 	bl	800a0cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013ee:	4611      	mov	r1, r2
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f008 be6a 	b.w	800a0cc <HAL_NVIC_SetPriority>

080013f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80013fa:	6802      	ldr	r2, [r0, #0]
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_I2C_MspInit+0x48>)
 80013fe:	429a      	cmp	r2, r3
 8001400:	d11b      	bne.n	800143a <HAL_I2C_MspInit+0x42>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001402:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001406:	2312      	movs	r3, #18
 8001408:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2101      	movs	r1, #1
 800140e:	2303      	movs	r3, #3
 8001410:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001414:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	eb0d 0103 	add.w	r1, sp, r3
 800141a:	480a      	ldr	r0, [pc, #40]	; (8001444 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f008 febd 	bl	800a19c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_I2C_MspInit+0x50>)
 8001428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800142a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800143a:	b007      	add	sp, #28
 800143c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001440:	40005400 	.word	0x40005400
 8001444:	40020400 	.word	0x40020400
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_UART_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800144e:	6802      	ldr	r2, [r0, #0]
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_UART_MspInit+0x40>)
 8001452:	429a      	cmp	r2, r3
 8001454:	d117      	bne.n	8001486 <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_UART_MspInit+0x44>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	480e      	ldr	r0, [pc, #56]	; (8001494 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001460:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001464:	6411      	str	r1, [r2, #64]	; 0x40
 8001466:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001468:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800146c:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001470:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2202      	movs	r2, #2
 8001474:	e9cd 1201 	strd	r1, r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147e:	2307      	movs	r3, #7
 8001480:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f008 fe8b 	bl	800a19c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001486:	b007      	add	sp, #28
 8001488:	f85d fb04 	ldr.w	pc, [sp], #4
 800148c:	40004400 	.word	0x40004400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000

08001498 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001498:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f008 fddf 	bl	800a05c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80014a2:	f008 be76 	b.w	800a192 <HAL_SYSTICK_IRQHandler>

080014a6 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80014a6:	2010      	movs	r0, #16
 80014a8:	f008 bf50 	b.w	800a34c <HAL_GPIO_EXTI_IRQHandler>

080014ac <_write>:

extern int fputc(int ch) __attribute__((weak));


int _write(int file, char *ptr, int len)
{
 80014ac:	b570      	push	{r4, r5, r6, lr}
 80014ae:	460e      	mov	r6, r1
 80014b0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	2500      	movs	r5, #0
 80014b4:	42a5      	cmp	r5, r4
 80014b6:	db01      	blt.n	80014bc <_write+0x10>
	{
		fputc(*ptr++);
	}
	return len;
}
 80014b8:	4620      	mov	r0, r4
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
		fputc(*ptr++);
 80014bc:	5d70      	ldrb	r0, [r6, r5]
 80014be:	f7ff fd71 	bl	8000fa4 <fputc>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	3501      	adds	r5, #1
 80014c4:	e7f6      	b.n	80014b4 <_write+0x8>
	...

080014c8 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80014c8:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
//    int i;
    i2cwriteCount+=count;
 80014ca:	4c09      	ldr	r4, [pc, #36]	; (80014f0 <_I2CWrite+0x28>)
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	6023      	str	r3, [r4, #0]
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80014d2:	f102 030a 	add.w	r3, r2, #10
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	f642 64e4 	movw	r4, #12004	; 0x2ee4
 80014dc:	b293      	uxth	r3, r2
 80014de:	460a      	mov	r2, r1
 80014e0:	f642 61e8 	movw	r1, #12008	; 0x2ee8
 80014e4:	5c41      	ldrb	r1, [r0, r1]
 80014e6:	5900      	ldr	r0, [r0, r4]
 80014e8:	f009 f8e6 	bl	800a6b8 <HAL_I2C_Master_Transmit>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 80014ec:	b002      	add	sp, #8
 80014ee:	bd10      	pop	{r4, pc}
 80014f0:	2000022c 	.word	0x2000022c

080014f4 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80014f4:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    i2creadCount+=count;
 80014f6:	4c0a      	ldr	r4, [pc, #40]	; (8001520 <_I2CRead+0x2c>)
 80014f8:	6863      	ldr	r3, [r4, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	6063      	str	r3, [r4, #4]
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80014fe:	f642 63e8 	movw	r3, #12008	; 0x2ee8
 8001502:	5cc4      	ldrb	r4, [r0, r3]
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8001504:	f102 030a 	add.w	r3, r2, #10
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	b293      	uxth	r3, r2
 800150c:	460a      	mov	r2, r1
 800150e:	f044 0101 	orr.w	r1, r4, #1
 8001512:	f642 64e4 	movw	r4, #12004	; 0x2ee4
 8001516:	5900      	ldr	r0, [r0, r4]
 8001518:	f009 f9a6 	bl	800a868 <HAL_I2C_Master_Receive>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 800151c:	b002      	add	sp, #8
 800151e:	bd10      	pop	{r4, pc}
 8001520:	2000022c 	.word	0x2000022c

08001524 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    if (count > sizeof(_I2CBuffer) - 1) {
 8001524:	2bff      	cmp	r3, #255	; 0xff
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8001526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001528:	460e      	mov	r6, r1
 800152a:	4607      	mov	r7, r0
 800152c:	4611      	mov	r1, r2
 800152e:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 8001530:	d812      	bhi.n	8001558 <VL53L1_WriteMulti+0x34>
        return VL53L1_ERROR_INVALID_PARAMS;
    }
    _I2CBuffer[0] = index>>8;
 8001532:	4d0b      	ldr	r5, [pc, #44]	; (8001560 <VL53L1_WriteMulti+0x3c>)
 8001534:	0a33      	lsrs	r3, r6, #8
    _I2CBuffer[1] = index&0xFF;
    memcpy(&_I2CBuffer[2], pdata, count);
 8001536:	4622      	mov	r2, r4
 8001538:	1ca8      	adds	r0, r5, #2
    _I2CBuffer[0] = index>>8;
 800153a:	702b      	strb	r3, [r5, #0]
    _I2CBuffer[1] = index&0xFF;
 800153c:	706e      	strb	r6, [r5, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800153e:	f009 fedf 	bl	800b300 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8001542:	1ca2      	adds	r2, r4, #2
 8001544:	4629      	mov	r1, r5
 8001546:	4638      	mov	r0, r7
 8001548:	f7ff ffbe 	bl	80014c8 <_I2CWrite>
    if (status_int != 0) {
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800154c:	2800      	cmp	r0, #0
 800154e:	bf0c      	ite	eq
 8001550:	2000      	moveq	r0, #0
 8001552:	f06f 000c 	mvnne.w	r0, #12
    }
    VL53L1_PutI2cBus();
    return Status;
}
 8001556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L1_ERROR_INVALID_PARAMS;
 8001558:	f06f 0003 	mvn.w	r0, #3
 800155c:	e7fb      	b.n	8001556 <VL53L1_WriteMulti+0x32>
 800155e:	bf00      	nop
 8001560:	200031f4 	.word	0x200031f4

08001564 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001566:	460c      	mov	r4, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001568:	4909      	ldr	r1, [pc, #36]	; (8001590 <VL53L1_ReadMulti+0x2c>)
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800156a:	4616      	mov	r6, r2
 800156c:	461f      	mov	r7, r3
    _I2CBuffer[1] = index&0xFF;
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800156e:	2202      	movs	r2, #2
    _I2CBuffer[0] = index>>8;
 8001570:	0a23      	lsrs	r3, r4, #8
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8001572:	4605      	mov	r5, r0
    _I2CBuffer[0] = index>>8;
 8001574:	700b      	strb	r3, [r1, #0]
    _I2CBuffer[1] = index&0xFF;
 8001576:	704c      	strb	r4, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001578:	f7ff ffa6 	bl	80014c8 <_I2CWrite>
    if (status_int != 0) {
 800157c:	b928      	cbnz	r0, 800158a <VL53L1_ReadMulti+0x26>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, pdata, count);
 800157e:	463a      	mov	r2, r7
 8001580:	4631      	mov	r1, r6
 8001582:	4628      	mov	r0, r5
 8001584:	f7ff ffb6 	bl	80014f4 <_I2CRead>
    if (status_int != 0) {
 8001588:	b108      	cbz	r0, 800158e <VL53L1_ReadMulti+0x2a>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800158a:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 800158e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001590:	200031f4 	.word	0x200031f4

08001594 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8001594:	460b      	mov	r3, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001596:	4907      	ldr	r1, [pc, #28]	; (80015b4 <VL53L1_WrByte+0x20>)
VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8001598:	b510      	push	{r4, lr}
    _I2CBuffer[0] = index>>8;
 800159a:	0a1c      	lsrs	r4, r3, #8
    _I2CBuffer[1] = index&0xFF;
    _I2CBuffer[2] = data;
 800159c:	708a      	strb	r2, [r1, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800159e:	2203      	movs	r2, #3
    _I2CBuffer[0] = index>>8;
 80015a0:	700c      	strb	r4, [r1, #0]
    _I2CBuffer[1] = index&0xFF;
 80015a2:	704b      	strb	r3, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80015a4:	f7ff ff90 	bl	80014c8 <_I2CWrite>
    if (status_int != 0) {
 80015a8:	2800      	cmp	r0, #0
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    VL53L1_PutI2cBus();
    return Status;
}
 80015aa:	bf14      	ite	ne
 80015ac:	f06f 000c 	mvnne.w	r0, #12
 80015b0:	2000      	moveq	r0, #0
 80015b2:	bd10      	pop	{r4, pc}
 80015b4:	200031f4 	.word	0x200031f4

080015b8 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 80015b8:	460b      	mov	r3, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <VL53L1_WrWord+0x24>)
VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 80015bc:	b510      	push	{r4, lr}
    _I2CBuffer[0] = index>>8;
 80015be:	0a1c      	lsrs	r4, r3, #8
    _I2CBuffer[1] = index&0xFF;
 80015c0:	704b      	strb	r3, [r1, #1]
    _I2CBuffer[2] = data >> 8;
    _I2CBuffer[3] = data & 0x00FF;
 80015c2:	70ca      	strb	r2, [r1, #3]
    _I2CBuffer[2] = data >> 8;
 80015c4:	0a13      	lsrs	r3, r2, #8

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80015c6:	2204      	movs	r2, #4
    _I2CBuffer[0] = index>>8;
 80015c8:	700c      	strb	r4, [r1, #0]
    _I2CBuffer[2] = data >> 8;
 80015ca:	708b      	strb	r3, [r1, #2]
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80015cc:	f7ff ff7c 	bl	80014c8 <_I2CWrite>
    if (status_int != 0) {
 80015d0:	2800      	cmp	r0, #0
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    VL53L1_PutI2cBus();
    return Status;
}
 80015d2:	bf14      	ite	ne
 80015d4:	f06f 000c 	mvnne.w	r0, #12
 80015d8:	2000      	moveq	r0, #0
 80015da:	bd10      	pop	{r4, pc}
 80015dc:	200031f4 	.word	0x200031f4

080015e0 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80015e0:	b538      	push	{r3, r4, r5, lr}
 80015e2:	460b      	mov	r3, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80015e4:	4909      	ldr	r1, [pc, #36]	; (800160c <VL53L1_RdByte+0x2c>)
VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80015e6:	4615      	mov	r5, r2
	_I2CBuffer[0] = index>>8;
 80015e8:	0a1a      	lsrs	r2, r3, #8
 80015ea:	700a      	strb	r2, [r1, #0]
	_I2CBuffer[1] = index&0xFF;
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80015ec:	2202      	movs	r2, #2
VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80015ee:	4604      	mov	r4, r0
	_I2CBuffer[1] = index&0xFF;
 80015f0:	704b      	strb	r3, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80015f2:	f7ff ff69 	bl	80014c8 <_I2CWrite>
    if( status_int ){
 80015f6:	b928      	cbnz	r0, 8001604 <VL53L1_RdByte+0x24>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	4629      	mov	r1, r5
 80015fc:	4620      	mov	r0, r4
 80015fe:	f7ff ff79 	bl	80014f4 <_I2CRead>
    if (status_int != 0) {
 8001602:	b108      	cbz	r0, 8001608 <VL53L1_RdByte+0x28>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001604:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 8001608:	bd38      	pop	{r3, r4, r5, pc}
 800160a:	bf00      	nop
 800160c:	200031f4 	.word	0x200031f4

08001610 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8001610:	b570      	push	{r4, r5, r6, lr}
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001612:	4c0d      	ldr	r4, [pc, #52]	; (8001648 <VL53L1_RdWord+0x38>)
 8001614:	0a0b      	lsrs	r3, r1, #8
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8001616:	4615      	mov	r5, r2
	_I2CBuffer[1] = index&0xFF;
 8001618:	7061      	strb	r1, [r4, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800161a:	2202      	movs	r2, #2
 800161c:	4621      	mov	r1, r4
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800161e:	4606      	mov	r6, r0
    _I2CBuffer[0] = index>>8;
 8001620:	7023      	strb	r3, [r4, #0]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001622:	f7ff ff51 	bl	80014c8 <_I2CWrite>

    if( status_int ){
 8001626:	b110      	cbz	r0, 800162e <VL53L1_RdWord+0x1e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001628:	f06f 000c 	mvn.w	r0, #12

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    VL53L1_PutI2cBus();
    return Status;
}
 800162c:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800162e:	2202      	movs	r2, #2
 8001630:	4621      	mov	r1, r4
 8001632:	4630      	mov	r0, r6
 8001634:	f7ff ff5e 	bl	80014f4 <_I2CRead>
    if (status_int != 0) {
 8001638:	2800      	cmp	r0, #0
 800163a:	d1f5      	bne.n	8001628 <VL53L1_RdWord+0x18>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800163c:	7822      	ldrb	r2, [r4, #0]
 800163e:	7863      	ldrb	r3, [r4, #1]
 8001640:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001644:	802b      	strh	r3, [r5, #0]
 8001646:	e7f1      	b.n	800162c <VL53L1_RdWord+0x1c>
 8001648:	200031f4 	.word	0x200031f4

0800164c <VL53L1_WaitUs>:
	(void)pdev;
	HAL_Delay(wait_ms);
    return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800164c:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800164e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001652:	fb91 f0f0 	sdiv	r0, r1, r0
 8001656:	f008 fd13 	bl	800a080 <HAL_Delay>
    return VL53L1_ERROR_NONE;
}
 800165a:	2000      	movs	r0, #0
 800165c:	bd08      	pop	{r3, pc}
	...

08001660 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8001660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001664:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8001668:	4606      	mov	r6, r0
 800166a:	460f      	mov	r7, r1
 800166c:	4690      	mov	r8, r2

	VL53L1_Error status         = VL53L1_ERROR_NONE;
	uint32_t     start_time_ms = 0;
	uint32_t     current_time_ms = 0;
	uint32_t     polling_time_ms = 0;
	uint8_t      byte_value      = 0;
 800166e:	2400      	movs	r4, #0
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8001670:	4919      	ldr	r1, [pc, #100]	; (80016d8 <VL53L1_WaitValueMaskEx+0x78>)
{
 8001672:	f89d b230 	ldrb.w	fp, [sp, #560]	; 0x230
 8001676:	f8dd a234 	ldr.w	sl, [sp, #564]	; 0x234
	uint8_t      byte_value      = 0;
 800167a:	f88d 4007 	strb.w	r4, [sp, #7]
	VL53L1_COPYSTRING(register_name, "");
 800167e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001682:	a802      	add	r0, sp, #8
{
 8001684:	4699      	mov	r9, r3
	VL53L1_COPYSTRING(register_name, "");
 8001686:	f00a fb49 	bl	800bd1c <strncpy>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800168a:	b1f7      	cbz	r7, 80016ca <VL53L1_WaitValueMaskEx+0x6a>
		   (polling_time_ms < timeout_ms) &&
 800168c:	b124      	cbz	r4, 8001698 <VL53L1_WaitValueMaskEx+0x38>
 800168e:	2000      	movs	r0, #0

	if (found == 0 && status == VL53L1_ERROR_NONE)
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 8001690:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8001694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			status = VL53L1_RdByte(
 8001698:	f10d 0207 	add.w	r2, sp, #7
 800169c:	4641      	mov	r1, r8
 800169e:	4630      	mov	r0, r6
 80016a0:	f7ff ff9e 	bl	80015e0 <VL53L1_RdByte>
		if ((byte_value & mask) == value)
 80016a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016a8:	ea0b 0303 	and.w	r3, fp, r3
 80016ac:	454b      	cmp	r3, r9
 80016ae:	d103      	bne.n	80016b8 <VL53L1_WaitValueMaskEx+0x58>
	while ((status == VL53L1_ERROR_NONE) &&
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d1ed      	bne.n	8001690 <VL53L1_WaitValueMaskEx+0x30>
 80016b4:	2401      	movs	r4, #1
 80016b6:	e7e8      	b.n	800168a <VL53L1_WaitValueMaskEx+0x2a>
		if (status == VL53L1_ERROR_NONE  &&
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d1e9      	bne.n	8001690 <VL53L1_WaitValueMaskEx+0x30>
			found == 0 &&
 80016bc:	f1ba 0f00 	cmp.w	sl, #0
 80016c0:	d0e3      	beq.n	800168a <VL53L1_WaitValueMaskEx+0x2a>
	HAL_Delay(wait_ms);
 80016c2:	4650      	mov	r0, sl
 80016c4:	f008 fcdc 	bl	800a080 <HAL_Delay>
	while ((status == VL53L1_ERROR_NONE) &&
 80016c8:	e7df      	b.n	800168a <VL53L1_WaitValueMaskEx+0x2a>
		status = VL53L1_ERROR_TIME_OUT;
 80016ca:	2c00      	cmp	r4, #0
 80016cc:	bf14      	ite	ne
 80016ce:	2000      	movne	r0, #0
 80016d0:	f06f 0006 	mvneq.w	r0, #6
 80016d4:	e7dc      	b.n	8001690 <VL53L1_WaitValueMaskEx+0x30>
 80016d6:	bf00      	nop
 80016d8:	0800e114 	.word	0x0800e114

080016dc <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 80016dc:	b4f0      	push	{r4, r5, r6, r7}
 80016de:	4608      	mov	r0, r1
 80016e0:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 80016e4:	4611      	mov	r1, r2
 80016e6:	461a      	mov	r2, r3
 80016e8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
	VL53L1_Error status         = VL53L1_ERROR_NONE;

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 80016ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80016ee:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80016f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
}
 80016f6:	bcf0      	pop	{r4, r5, r6, r7}
		VL53L1_hist_process_data(
 80016f8:	f007 bae9 	b.w	8008cce <VL53L1_hist_process_data>

080016fc <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80016fc:	b570      	push	{r4, r5, r6, lr}
 80016fe:	b086      	sub	sp, #24
    int status;
    uint8_t RegAddr;
    RegAddr = index;
    XNUCLEO53L1A1_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8001700:	2564      	movs	r5, #100	; 0x64
    RegAddr = index;
 8001702:	f88d 1017 	strb.w	r1, [sp, #23]
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8001706:	4616      	mov	r6, r2
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8001708:	b281      	uxth	r1, r0
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 800170a:	461c      	mov	r4, r3
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <_ExpanderRd+0x38>)
 800170e:	9500      	str	r5, [sp, #0]
 8001710:	2301      	movs	r3, #1
 8001712:	f10d 0217 	add.w	r2, sp, #23
 8001716:	9103      	str	r1, [sp, #12]
 8001718:	f008 ffce 	bl	800a6b8 <HAL_I2C_Master_Transmit>
        if (status)
 800171c:	9903      	ldr	r1, [sp, #12]
 800171e:	b930      	cbnz	r0, 800172e <_ExpanderRd+0x32>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8001720:	4365      	muls	r5, r4
 8001722:	4804      	ldr	r0, [pc, #16]	; (8001734 <_ExpanderRd+0x38>)
 8001724:	9500      	str	r5, [sp, #0]
 8001726:	b2a3      	uxth	r3, r4
 8001728:	4632      	mov	r2, r6
 800172a:	f009 f89d 	bl	800a868 <HAL_I2C_Master_Receive>
    } while (0);
    XNUCLEO53L1A1_PutI2cBus();
    return status;
}
 800172e:	b006      	add	sp, #24
 8001730:	bd70      	pop	{r4, r5, r6, pc}
 8001732:	bf00      	nop
 8001734:	200033f4 	.word	0x200033f4

08001738 <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8001738:	b530      	push	{r4, r5, lr}
 800173a:	b087      	sub	sp, #28
 800173c:	4605      	mov	r5, r0
 800173e:	4608      	mov	r0, r1
 8001740:	461c      	mov	r4, r3
 8001742:	4611      	mov	r1, r2

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 8001744:	f88d 0008 	strb.w	r0, [sp, #8]
    memcpy(RegAddr + 1, data, n_data);
 8001748:	461a      	mov	r2, r3
 800174a:	f10d 0009 	add.w	r0, sp, #9
 800174e:	f009 fdd7 	bl	800b300 <memcpy>
    XNUCLEO53L1A1_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001752:	1c63      	adds	r3, r4, #1
 8001754:	2264      	movs	r2, #100	; 0x64
 8001756:	9200      	str	r2, [sp, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	aa02      	add	r2, sp, #8
 800175c:	b2a9      	uxth	r1, r5
 800175e:	4802      	ldr	r0, [pc, #8]	; (8001768 <_ExpanderWR+0x30>)
 8001760:	f008 ffaa 	bl	800a6b8 <HAL_I2C_Master_Transmit>
    XNUCLEO53L1A1_PutI2cBus();
    return status;
}
 8001764:	b007      	add	sp, #28
 8001766:	bd30      	pop	{r4, r5, pc}
 8001768:	200033f4 	.word	0x200033f4

0800176c <_ExpandersSetAllIO>:
static int _ExpandersSetAllIO(void){
 800176c:	b510      	push	{r4, lr}
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <_ExpandersSetAllIO+0x24>)
 8001770:	2302      	movs	r3, #2
 8001772:	2112      	movs	r1, #18
 8001774:	2086      	movs	r0, #134	; 0x86
 8001776:	f7ff ffdf 	bl	8001738 <_ExpanderWR>
    if( status ){
 800177a:	b938      	cbnz	r0, 800178c <_ExpandersSetAllIO+0x20>
}
 800177c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <_ExpandersSetAllIO+0x28>)
 8001782:	2302      	movs	r3, #2
 8001784:	2112      	movs	r1, #18
 8001786:	2084      	movs	r0, #132	; 0x84
 8001788:	f7ff bfd6 	b.w	8001738 <_ExpanderWR>
}
 800178c:	bd10      	pop	{r4, pc}
 800178e:	bf00      	nop
 8001790:	20000234 	.word	0x20000234
 8001794:	20000236 	.word	0x20000236

08001798 <XNUCLEO53L1A1_I2C1Configure>:
int XNUCLEO53L1A1_I2C1Configure() {
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	b088      	sub	sp, #32
    __GPIOB_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	4b58      	ldr	r3, [pc, #352]	; (8001904 <XNUCLEO53L1A1_I2C1Configure+0x16c>)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80017a2:	4859      	ldr	r0, [pc, #356]	; (8001908 <XNUCLEO53L1A1_I2C1Configure+0x170>)
    __GPIOB_CLK_ENABLE();
 80017a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a6:	f042 0202 	orr.w	r2, r2, #2
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 7180 	mov.w	r1, #256	; 0x100
    __GPIOB_CLK_ENABLE();
 80017ba:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80017bc:	f008 fdc0 	bl	800a340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80017c0:	4851      	ldr	r0, [pc, #324]	; (8001908 <XNUCLEO53L1A1_I2C1Configure+0x170>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c8:	f008 fdba 	bl	800a340 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017cc:	f44f 7540 	mov.w	r5, #768	; 0x300
 80017d0:	2311      	movs	r3, #17
 80017d2:	e9cd 5303 	strd	r5, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	484c      	ldr	r0, [pc, #304]	; (8001908 <XNUCLEO53L1A1_I2C1Configure+0x170>)
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80017d8:	4d4b      	ldr	r5, [pc, #300]	; (8001908 <XNUCLEO53L1A1_I2C1Configure+0x170>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017da:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017de:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	f008 fcdc 	bl	800a19c <HAL_GPIO_Init>
 80017e4:	2408      	movs	r4, #8
 80017e6:	260a      	movs	r6, #10
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ee:	4628      	mov	r0, r5
 80017f0:	f008 fda6 	bl	800a340 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f008 fc43 	bl	800a080 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001800:	4628      	mov	r0, r5
 8001802:	f008 fd9d 	bl	800a340 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001806:	2001      	movs	r0, #1
 8001808:	f008 fc3a 	bl	800a080 <HAL_Delay>
        for( i=0; i<10; i++){
 800180c:	3e01      	subs	r6, #1
 800180e:	d1eb      	bne.n	80017e8 <XNUCLEO53L1A1_I2C1Configure+0x50>
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 8001810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001814:	4628      	mov	r0, r5
 8001816:	f008 fd8d 	bl	800a334 <HAL_GPIO_ReadPin>
 800181a:	b908      	cbnz	r0, 8001820 <XNUCLEO53L1A1_I2C1Configure+0x88>
 800181c:	3c01      	subs	r4, #1
 800181e:	d1e2      	bne.n	80017e6 <XNUCLEO53L1A1_I2C1Configure+0x4e>
    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 8001820:	4839      	ldr	r0, [pc, #228]	; (8001908 <XNUCLEO53L1A1_I2C1Configure+0x170>)
 8001822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001826:	f008 fd85 	bl	800a334 <HAL_GPIO_ReadPin>
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <XNUCLEO53L1A1_I2C1Configure+0x16c>)
 800182c:	bba8      	cbnz	r0, 800189a <XNUCLEO53L1A1_I2C1Configure+0x102>
        __GPIOA_CLK_ENABLE();
 800182e:	9002      	str	r0, [sp, #8]
 8001830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	9005      	str	r0, [sp, #20]
        __GPIOA_CLK_ENABLE();
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	9b02      	ldr	r3, [sp, #8]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	4831      	ldr	r0, [pc, #196]	; (800190c <XNUCLEO53L1A1_I2C1Configure+0x174>)
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2420      	movs	r4, #32
 8001848:	2301      	movs	r3, #1
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	a903      	add	r1, sp, #12
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	e9cd 4303 	strd	r4, r3, [sp, #12]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f008 fca4 	bl	800a19c <HAL_GPIO_Init>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001854:	4c2d      	ldr	r4, [pc, #180]	; (800190c <XNUCLEO53L1A1_I2C1Configure+0x174>)
 8001856:	2201      	movs	r2, #1
 8001858:	2120      	movs	r1, #32
 800185a:	4620      	mov	r0, r4
 800185c:	f008 fd70 	bl	800a340 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8001860:	2021      	movs	r0, #33	; 0x21
 8001862:	f008 fc0d 	bl	800a080 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2120      	movs	r1, #32
 800186a:	4620      	mov	r0, r4
 800186c:	f008 fd68 	bl	800a340 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8001870:	2021      	movs	r0, #33	; 0x21
 8001872:	f008 fc05 	bl	800a080 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	2120      	movs	r1, #32
 800187a:	4620      	mov	r0, r4
 800187c:	f008 fd60 	bl	800a340 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8001880:	2021      	movs	r0, #33	; 0x21
 8001882:	f008 fbfd 	bl	800a080 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001886:	4620      	mov	r0, r4
 8001888:	2200      	movs	r2, #0
 800188a:	2120      	movs	r1, #32
 800188c:	f008 fd58 	bl	800a340 <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 8001890:	f44f 7025 	mov.w	r0, #660	; 0x294
 8001894:	f008 fbf4 	bl	800a080 <HAL_Delay>
        }while(1);
 8001898:	e7dd      	b.n	8001856 <XNUCLEO53L1A1_I2C1Configure+0xbe>
    __GPIOB_CLK_ENABLE();
 800189a:	2400      	movs	r4, #0
 800189c:	9400      	str	r4, [sp, #0]
 800189e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	4819      	ldr	r0, [pc, #100]	; (8001908 <XNUCLEO53L1A1_I2C1Configure+0x170>)
    __GPIOB_CLK_ENABLE();
 80018a2:	f042 0202 	orr.w	r2, r2, #2
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
 80018a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018aa:	f002 0202 	and.w	r2, r2, #2
 80018ae:	9200      	str	r2, [sp, #0]
 80018b0:	9a00      	ldr	r2, [sp, #0]
    __I2C1_CLK_ENABLE();
 80018b2:	9402      	str	r4, [sp, #8]
 80018b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c4:	f44f 7240 	mov.w	r2, #768	; 0x300
    __I2C1_CLK_ENABLE();
 80018c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ca:	2312      	movs	r3, #18
 80018cc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018d2:	2304      	movs	r3, #4
 80018d4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80018d6:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f008 fc5f 	bl	800a19c <HAL_GPIO_Init>
    XNUCLEO53L1A1_hi2c.Instance = I2C1;
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <XNUCLEO53L1A1_I2C1Configure+0x178>)
    XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <XNUCLEO53L1A1_I2C1Configure+0x17c>)
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <XNUCLEO53L1A1_I2C1Configure+0x180>)
    XNUCLEO53L1A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80018e4:	6204      	str	r4, [r0, #32]
    XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 80018e6:	e9c0 1300 	strd	r1, r3, [r0]
    XNUCLEO53L1A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    XNUCLEO53L1A1_hi2c.Init.OwnAddress1 = 0;
 80018ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
    XNUCLEO53L1A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80018f2:	e9c0 3404 	strd	r3, r4, [r0, #16]
    XNUCLEO53L1A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80018f6:	e9c0 4406 	strd	r4, r4, [r0, #24]
    status = HAL_I2C_Init(&XNUCLEO53L1A1_hi2c);
 80018fa:	f008 fe35 	bl	800a568 <HAL_I2C_Init>
}
 80018fe:	b008      	add	sp, #32
 8001900:	bd70      	pop	{r4, r5, r6, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400
 800190c:	40020000 	.word	0x40020000
 8001910:	200033f4 	.word	0x200033f4
 8001914:	40005400 	.word	0x40005400
 8001918:	00061a80 	.word	0x00061a80

0800191c <XNUCLEO53L1A1_Init>:
int XNUCLEO53L1A1_Init(void) {
 800191c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    XNUCLEO53L1A1_I2C1Configure();
 800191e:	f7ff ff3b 	bl	8001798 <XNUCLEO53L1A1_I2C1Configure>
    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 8001922:	2302      	movs	r3, #2
 8001924:	aa01      	add	r2, sp, #4
 8001926:	2100      	movs	r1, #0
 8001928:	2086      	movs	r0, #134	; 0x86
 800192a:	f7ff fee7 	bl	80016fc <_ExpanderRd>
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 800192e:	4604      	mov	r4, r0
 8001930:	bba0      	cbnz	r0, 800199c <XNUCLEO53L1A1_Init+0x80>
 8001932:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001936:	bb8b      	cbnz	r3, 800199c <XNUCLEO53L1A1_Init+0x80>
 8001938:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800193c:	2b16      	cmp	r3, #22
 800193e:	d12d      	bne.n	800199c <XNUCLEO53L1A1_Init+0x80>
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 8001940:	4601      	mov	r1, r0
 8001942:	2302      	movs	r3, #2
 8001944:	aa01      	add	r2, sp, #4
 8001946:	2084      	movs	r0, #132	; 0x84
 8001948:	f7ff fed8 	bl	80016fc <_ExpanderRd>
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 800194c:	bb28      	cbnz	r0, 800199a <XNUCLEO53L1A1_Init+0x7e>
 800194e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001952:	bb1b      	cbnz	r3, 800199c <XNUCLEO53L1A1_Init+0x80>
 8001954:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001958:	2b16      	cmp	r3, #22
 800195a:	d11f      	bne.n	800199c <XNUCLEO53L1A1_Init+0x80>
    ExpanderData[0] = 0xFF;
 800195c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    CurIOVal.u32=0x0;
 8001960:	4d10      	ldr	r5, [pc, #64]	; (80019a4 <XNUCLEO53L1A1_Init+0x88>)
    ExpanderData[0] = 0xFF;
 8001962:	f8ad 3004 	strh.w	r3, [sp, #4]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8001966:	aa01      	add	r2, sp, #4
 8001968:	2302      	movs	r3, #2
 800196a:	2114      	movs	r1, #20
 800196c:	2086      	movs	r0, #134	; 0x86
    CurIOVal.u32=0x0;
 800196e:	602c      	str	r4, [r5, #0]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8001970:	f7ff fee2 	bl	8001738 <_ExpanderWR>
    if (status) {
 8001974:	4604      	mov	r4, r0
 8001976:	b988      	cbnz	r0, 800199c <XNUCLEO53L1A1_Init+0x80>
    ExpanderData[0] = 0xFF;
 8001978:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800197c:	f8ad 3004 	strh.w	r3, [sp, #4]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8001980:	aa01      	add	r2, sp, #4
 8001982:	2302      	movs	r3, #2
 8001984:	2114      	movs	r1, #20
 8001986:	2084      	movs	r0, #132	; 0x84
 8001988:	f7ff fed6 	bl	8001738 <_ExpanderWR>
    if (status) {
 800198c:	4604      	mov	r4, r0
 800198e:	b928      	cbnz	r0, 800199c <XNUCLEO53L1A1_Init+0x80>
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8001990:	f06f 23c0 	mvn.w	r3, #3221274624	; 0xc000c000
 8001994:	602b      	str	r3, [r5, #0]
    status= _ExpandersSetAllIO();
 8001996:	f7ff fee9 	bl	800176c <_ExpandersSetAllIO>
 800199a:	4604      	mov	r4, r0
}
 800199c:	4620      	mov	r0, r4
 800199e:	b003      	add	sp, #12
 80019a0:	bd30      	pop	{r4, r5, pc}
 80019a2:	bf00      	nop
 80019a4:	20000234 	.word	0x20000234

080019a8 <XNUCLEO53L1A1_ResetId>:
    switch( DevNo ){
 80019a8:	2863      	cmp	r0, #99	; 0x63
 80019aa:	d014      	beq.n	80019d6 <XNUCLEO53L1A1_ResetId+0x2e>
 80019ac:	dc07      	bgt.n	80019be <XNUCLEO53L1A1_ResetId+0x16>
 80019ae:	2801      	cmp	r0, #1
 80019b0:	d011      	beq.n	80019d6 <XNUCLEO53L1A1_ResetId+0x2e>
 80019b2:	2802      	cmp	r0, #2
 80019b4:	d007      	beq.n	80019c6 <XNUCLEO53L1A1_ResetId+0x1e>
 80019b6:	b1e8      	cbz	r0, 80019f4 <XNUCLEO53L1A1_ResetId+0x4c>
}
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	4770      	bx	lr
    switch( DevNo ){
 80019be:	286c      	cmp	r0, #108	; 0x6c
 80019c0:	d018      	beq.n	80019f4 <XNUCLEO53L1A1_ResetId+0x4c>
 80019c2:	2872      	cmp	r0, #114	; 0x72
 80019c4:	d1f8      	bne.n	80019b8 <XNUCLEO53L1A1_ResetId+0x10>
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <XNUCLEO53L1A1_ResetId+0x68>)
 80019c8:	7853      	ldrb	r3, [r2, #1]
 80019ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        if( state )
 80019ce:	b1b1      	cbz	r1, 80019fe <XNUCLEO53L1A1_ResetId+0x56>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 80019d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019d4:	e013      	b.n	80019fe <XNUCLEO53L1A1_ResetId+0x56>
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 80019d6:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <XNUCLEO53L1A1_ResetId+0x68>)
 80019d8:	78d3      	ldrb	r3, [r2, #3]
 80019da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        if( state )
 80019de:	b931      	cbnz	r1, 80019ee <XNUCLEO53L1A1_ResetId+0x46>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 80019e0:	70d3      	strb	r3, [r2, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 80019e2:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <XNUCLEO53L1A1_ResetId+0x6c>)
 80019e4:	2301      	movs	r3, #1
 80019e6:	2113      	movs	r1, #19
 80019e8:	2084      	movs	r0, #132	; 0x84
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 80019ea:	f7ff bea5 	b.w	8001738 <_ExpanderWR>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 80019ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019f2:	e7f5      	b.n	80019e0 <XNUCLEO53L1A1_ResetId+0x38>
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 80019f4:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <XNUCLEO53L1A1_ResetId+0x68>)
 80019f6:	7853      	ldrb	r3, [r2, #1]
 80019f8:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
        if( state )
 80019fc:	b929      	cbnz	r1, 8001a0a <XNUCLEO53L1A1_ResetId+0x62>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 80019fe:	7053      	strb	r3, [r2, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8001a00:	2113      	movs	r1, #19
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <XNUCLEO53L1A1_ResetId+0x70>)
 8001a04:	2301      	movs	r3, #1
 8001a06:	2086      	movs	r0, #134	; 0x86
 8001a08:	e7ef      	b.n	80019ea <XNUCLEO53L1A1_ResetId+0x42>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 8001a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0e:	e7f6      	b.n	80019fe <XNUCLEO53L1A1_ResetId+0x56>
 8001a10:	20000234 	.word	0x20000234
 8001a14:	20000237 	.word	0x20000237
 8001a18:	20000235 	.word	0x20000235

08001a1c <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001a20:	2903      	cmp	r1, #3
{
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	4604      	mov	r4, r0
 8001a26:	460d      	mov	r5, r1
 8001a28:	461e      	mov	r6, r3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001a2a:	d037      	beq.n	8001a9c <SetPresetMode+0x80>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8001a2c:	2908      	cmp	r1, #8
 8001a2e:	bf14      	ite	ne
 8001a30:	2720      	movne	r7, #32
 8001a32:	2740      	moveq	r7, #64	; 0x40
	VL53L1_DevicePresetModes LightModes[3] = {
 8001a34:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <SetPresetMode+0x110>)
 8001a36:	8819      	ldrh	r1, [r3, #0]
 8001a38:	789b      	ldrb	r3, [r3, #2]
 8001a3a:	f88d 3016 	strb.w	r3, [sp, #22]
	VL53L1_DevicePresetModes RangingModes[3] = {
 8001a3e:	4b3c      	ldr	r3, [pc, #240]	; (8001b30 <SetPresetMode+0x114>)
	VL53L1_DevicePresetModes LightModes[3] = {
 8001a40:	f8ad 1014 	strh.w	r1, [sp, #20]
	VL53L1_DevicePresetModes RangingModes[3] = {
 8001a44:	8819      	ldrh	r1, [r3, #0]
 8001a46:	789b      	ldrb	r3, [r3, #2]
 8001a48:	f88d 301a 	strb.w	r3, [sp, #26]
	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <SetPresetMode+0x118>)
	VL53L1_DevicePresetModes RangingModes[3] = {
 8001a4e:	f8ad 1018 	strh.w	r1, [sp, #24]
	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001a52:	8819      	ldrh	r1, [r3, #0]
 8001a54:	f8ad 101c 	strh.w	r1, [sp, #28]
	VL53L1_DevicePresetModes TimedModes[3] = {
 8001a58:	4937      	ldr	r1, [pc, #220]	; (8001b38 <SetPresetMode+0x11c>)
	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001a5a:	789b      	ldrb	r3, [r3, #2]
	VL53L1_DevicePresetModes TimedModes[3] = {
 8001a5c:	8808      	ldrh	r0, [r1, #0]
	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001a5e:	f88d 301e 	strb.w	r3, [sp, #30]
	VL53L1_DevicePresetModes TimedModes[3] = {
 8001a62:	ab08      	add	r3, sp, #32
 8001a64:	7889      	ldrb	r1, [r1, #2]
 8001a66:	f8ad 0020 	strh.w	r0, [sp, #32]
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001a6a:	4834      	ldr	r0, [pc, #208]	; (8001b3c <SetPresetMode+0x120>)
	VL53L1_DevicePresetModes TimedModes[3] = {
 8001a6c:	7099      	strb	r1, [r3, #2]
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001a6e:	a909      	add	r1, sp, #36	; 0x24
 8001a70:	f8b0 c000 	ldrh.w	ip, [r0]
 8001a74:	7880      	ldrb	r0, [r0, #2]
 8001a76:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
	switch (DistanceMode) {
 8001a7a:	2a01      	cmp	r2, #1
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001a7c:	7088      	strb	r0, [r1, #2]
	switch (DistanceMode) {
 8001a7e:	d00f      	beq.n	8001aa0 <SetPresetMode+0x84>
 8001a80:	2a02      	cmp	r2, #2
 8001a82:	bf14      	ite	ne
 8001a84:	2202      	movne	r2, #2
 8001a86:	2201      	moveq	r2, #1
	switch (PresetMode) {
 8001a88:	1e68      	subs	r0, r5, #1
 8001a8a:	2808      	cmp	r0, #8
 8001a8c:	d80a      	bhi.n	8001aa4 <SetPresetMode+0x88>
 8001a8e:	e8df f000 	tbb	[pc, r0]
 8001a92:	3833      	.short	0x3833
 8001a94:	0909123d 	.word	0x0909123d
 8001a98:	424a      	.short	0x424a
 8001a9a:	47          	.byte	0x47
 8001a9b:	00          	.byte	0x00
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8001a9c:	2740      	movs	r7, #64	; 0x40
 8001a9e:	e7c9      	b.n	8001a34 <SetPresetMode+0x18>
		DistIdx = 0;
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	e7f1      	b.n	8001a88 <SetPresetMode+0x6c>
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001aa4:	f06f 0007 	mvn.w	r0, #7
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001aa8:	f642 63c5 	movw	r3, #11973	; 0x2ec5
 8001aac:	2201      	movs	r2, #1
 8001aae:	54e2      	strb	r2, [r4, r3]
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
}
 8001ab0:	b00a      	add	sp, #40	; 0x28
 8001ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*pDevicePresetMode = LightModes[DistIdx];
 8001ab6:	a80a      	add	r0, sp, #40	; 0x28
 8001ab8:	4402      	add	r2, r0
 8001aba:	f812 8c14 	ldrb.w	r8, [r2, #-20]
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8001abe:	e9cd 3100 	strd	r3, r1, [sp]
 8001ac2:	aa06      	add	r2, sp, #24
 8001ac4:	ab07      	add	r3, sp, #28
 8001ac6:	4641      	mov	r1, r8
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f000 ffc4 	bl	8002a56 <VL53L1_get_preset_mode_timing_cfg>
	if (Status == VL53L1_ERROR_NONE)
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d1ea      	bne.n	8001aa8 <SetPresetMode+0x8c>
		Status = VL53L1_set_preset_mode(
 8001ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	9b08      	ldr	r3, [sp, #32]
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001ade:	9b07      	ldr	r3, [sp, #28]
 8001ae0:	9602      	str	r6, [sp, #8]
 8001ae2:	4641      	mov	r1, r8
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f001 f82e 	bl	8002b46 <VL53L1_set_preset_mode>
	if (Status == VL53L1_ERROR_NONE)
 8001aea:	2800      	cmp	r0, #0
 8001aec:	d1dc      	bne.n	8001aa8 <SetPresetMode+0x8c>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001aee:	f642 63c4 	movw	r3, #11972	; 0x2ec4
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8001af2:	70e7      	strb	r7, [r4, #3]
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001af4:	54e5      	strb	r5, [r4, r3]
 8001af6:	e7d7      	b.n	8001aa8 <SetPresetMode+0x8c>
		*pDevicePresetMode = RangingModes[DistIdx];
 8001af8:	a80a      	add	r0, sp, #40	; 0x28
 8001afa:	4402      	add	r2, r0
 8001afc:	f812 8c10 	ldrb.w	r8, [r2, #-16]
	if (Status == VL53L1_ERROR_NONE)
 8001b00:	e7dd      	b.n	8001abe <SetPresetMode+0xa2>
		*pDevicePresetMode = ScanningModes[DistIdx];
 8001b02:	a80a      	add	r0, sp, #40	; 0x28
 8001b04:	4402      	add	r2, r0
 8001b06:	f812 8c0c 	ldrb.w	r8, [r2, #-12]
	if (Status == VL53L1_ERROR_NONE)
 8001b0a:	e7d8      	b.n	8001abe <SetPresetMode+0xa2>
		*pDevicePresetMode = TimedModes[DistIdx];
 8001b0c:	a80a      	add	r0, sp, #40	; 0x28
 8001b0e:	4402      	add	r2, r0
 8001b10:	f812 8c08 	ldrb.w	r8, [r2, #-8]
	if (Status == VL53L1_ERROR_NONE)
 8001b14:	e7d3      	b.n	8001abe <SetPresetMode+0xa2>
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8001b16:	a80a      	add	r0, sp, #40	; 0x28
 8001b18:	4402      	add	r2, r0
 8001b1a:	f812 8c04 	ldrb.w	r8, [r2, #-4]
	if (Status == VL53L1_ERROR_NONE)
 8001b1e:	e7ce      	b.n	8001abe <SetPresetMode+0xa2>
		*pDevicePresetMode =
 8001b20:	f04f 0827 	mov.w	r8, #39	; 0x27
 8001b24:	e7cb      	b.n	8001abe <SetPresetMode+0xa2>
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8001b26:	f04f 0811 	mov.w	r8, #17
 8001b2a:	e7c8      	b.n	8001abe <SetPresetMode+0xa2>
 8001b2c:	0800e111 	.word	0x0800e111
 8001b30:	0800e115 	.word	0x0800e115
 8001b34:	0800e119 	.word	0x0800e119
 8001b38:	0800e11d 	.word	0x0800e11d
 8001b3c:	0800e121 	.word	0x0800e121

08001b40 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8001b40:	b510      	push	{r4, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001b42:	b121      	cbz	r1, 8001b4e <SetLimitValue+0xe>
 8001b44:	2901      	cmp	r1, #1
 8001b46:	d008      	beq.n	8001b5a <SetLimitValue+0x1a>
 8001b48:	f06f 0003 	mvn.w	r0, #3
		Status = VL53L1_ERROR_INVALID_PARAMS;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001b4c:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8001b4e:	f3c2 318f 	ubfx	r1, r2, #14, #16
 8001b52:	f001 faee 	bl	8003132 <VL53L1_set_lite_sigma_threshold>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001b56:	2000      	movs	r0, #0
		break;
 8001b58:	e7f8      	b.n	8001b4c <SetLimitValue+0xc>
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8001b5a:	f3c2 214f 	ubfx	r1, r2, #9, #16
 8001b5e:	f001 faf1 	bl	8003144 <VL53L1_set_lite_min_count_rate>
 8001b62:	e7f8      	b.n	8001b56 <SetLimitValue+0x16>

08001b64 <GenNewPresetMode>:
	uint16_t HRLI = 600;
	uint16_t HRLH = 700;
	uint16_t MRLI = 1400;
	uint16_t MRLH = 1500;

	switch (InternalDistanceMode) {
 8001b64:	2901      	cmp	r1, #1
 8001b66:	d008      	beq.n	8001b7a <GenNewPresetMode+0x16>
 8001b68:	2902      	cmp	r1, #2
 8001b6a:	d012      	beq.n	8001b92 <GenNewPresetMode+0x2e>
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
	default:

		if (RefRange < HRLI)
 8001b6c:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8001b70:	db16      	blt.n	8001ba0 <GenNewPresetMode+0x3c>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		else if (RefRange < MRLI)
 8001b72:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
 8001b76:	db0a      	blt.n	8001b8e <GenNewPresetMode+0x2a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
	}
}
 8001b78:	4770      	bx	lr
		if (RefRange > MRLH)
 8001b7a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001b7e:	4298      	cmp	r0, r3
 8001b80:	dd02      	ble.n	8001b88 <GenNewPresetMode+0x24>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8001b82:	2303      	movs	r3, #3
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8001b84:	7013      	strb	r3, [r2, #0]
 8001b86:	4770      	bx	lr
		else if (RefRange > HRLH)
 8001b88:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
 8001b8c:	ddf4      	ble.n	8001b78 <GenNewPresetMode+0x14>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e7f8      	b.n	8001b84 <GenNewPresetMode+0x20>
		if (RefRange > MRLH)
 8001b92:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001b96:	4298      	cmp	r0, r3
 8001b98:	dcf3      	bgt.n	8001b82 <GenNewPresetMode+0x1e>
		else if (RefRange < HRLI)
 8001b9a:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8001b9e:	daeb      	bge.n	8001b78 <GenNewPresetMode+0x14>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e7ef      	b.n	8001b84 <GenNewPresetMode+0x20>

08001ba4 <ComputeRQL.part.0>:
	else if (((presults_data->max_range_mm -
			presults_data->min_range_mm) >= T_Wide) ||
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
	else {
		if (presults_data->median_range_mm < SRL)
 8001ba4:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
 8001ba8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
			RAS = SRAS * 65536;
		else
			RAS = LRAP * presults_data->median_range_mm;
 8001bac:	bfa6      	itte	ge
 8001bae:	f641 129a 	movwge	r2, #6554	; 0x199a
 8001bb2:	fb13 f202 	smulbbge	r2, r3, r2
			RAS = SRAS * 65536;
 8001bb6:	f44f 12f0 	movlt.w	r2, #1966080	; 0x1e0000


		if (RAS != 0) {
			partial = (GGm * presults_data->VL53L1_p_005);
 8001bba:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
			partial = partial + (RAS >> 1);
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <ComputeRQL.part.0+0x48>)
 8001bbe:	0851      	lsrs	r1, r2, #1
 8001bc0:	fb00 1303 	mla	r3, r0, r3, r1
			partial = partial / RAS;
			partial = partial * 65536;
			if (partial <= GI)
 8001bc4:	480a      	ldr	r0, [pc, #40]	; (8001bf0 <ComputeRQL.part.0+0x4c>)
			partial = partial / RAS;
 8001bc6:	fbb3 f3f2 	udiv	r3, r3, r2
			if (partial <= GI)
 8001bca:	ebb0 4f03 	cmp.w	r0, r3, lsl #16
			partial = partial * 65536;
 8001bce:	ea4f 4203 	mov.w	r2, r3, lsl #16
				SRQL = GI - partial;
 8001bd2:	bf2c      	ite	cs
 8001bd4:	1a80      	subcs	r0, r0, r2
			else
				SRQL = 50 * 65536;
 8001bd6:	f44f 1048 	movcc.w	r0, #3276800	; 0x320000
		} else
			SRQL = 100 * 65536;

		finalvalue = (uint8_t)(SRQL >> 16);
		returnvalue = MAX(50, MIN(100, finalvalue));
 8001bda:	f3c0 4007 	ubfx	r0, r0, #16, #8
	}

	return returnvalue;
 8001bde:	2864      	cmp	r0, #100	; 0x64
 8001be0:	bf28      	it	cs
 8001be2:	2064      	movcs	r0, #100	; 0x64
}
 8001be4:	2832      	cmp	r0, #50	; 0x32
 8001be6:	bf38      	it	cc
 8001be8:	2032      	movcc	r0, #50	; 0x32
 8001bea:	4770      	bx	lr
 8001bec:	0030cccd 	.word	0x0030cccd
 8001bf0:	0075b333 	.word	0x0075b333

08001bf4 <VL53L1_WaitDeviceBooted>:
	Status = VL53L1_poll_for_boot_completion(Dev,
 8001bf4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bf8:	f008 b868 	b.w	8009ccc <VL53L1_poll_for_boot_completion>

08001bfc <VL53L1_SetDistanceMode>:
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8001bfe:	f642 63c4 	movw	r3, #11972	; 0x2ec4
{
 8001c02:	b0ab      	sub	sp, #172	; 0xac
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8001c04:	5cc6      	ldrb	r6, [r0, r3]
	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8001c06:	2e09      	cmp	r6, #9
{
 8001c08:	4604      	mov	r4, r0
 8001c0a:	460d      	mov	r5, r1
	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8001c0c:	d104      	bne.n	8001c18 <VL53L1_SetDistanceMode+0x1c>
 8001c0e:	2901      	cmp	r1, #1
 8001c10:	d005      	beq.n	8001c1e <VL53L1_SetDistanceMode+0x22>
		return VL53L1_ERROR_INVALID_PARAMS;
 8001c12:	f06f 0003 	mvn.w	r0, #3
 8001c16:	e026      	b.n	8001c66 <VL53L1_SetDistanceMode+0x6a>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8001c18:	1e4b      	subs	r3, r1, #1
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d8f9      	bhi.n	8001c12 <VL53L1_SetDistanceMode+0x16>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8001c1e:	a903      	add	r1, sp, #12
 8001c20:	4620      	mov	r0, r4
 8001c22:	f000 ff0e 	bl	8002a42 <VL53L1_get_zone_config>
	if (Status == VL53L1_ERROR_NONE)
 8001c26:	b9f0      	cbnz	r0, 8001c66 <VL53L1_SetDistanceMode+0x6a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001c28:	466b      	mov	r3, sp
 8001c2a:	aa01      	add	r2, sp, #4
 8001c2c:	a902      	add	r1, sp, #8
 8001c2e:	4620      	mov	r0, r4
	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8001c30:	6967      	ldr	r7, [r4, #20]
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001c32:	f000 fdc8 	bl	80027c6 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 8001c36:	b9b0      	cbnz	r0, 8001c66 <VL53L1_SetDistanceMode+0x6a>
		Status = SetPresetMode(Dev,
 8001c38:	463b      	mov	r3, r7
 8001c3a:	462a      	mov	r2, r5
 8001c3c:	4631      	mov	r1, r6
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff feec 	bl	8001a1c <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8001c44:	b978      	cbnz	r0, 8001c66 <VL53L1_SetDistanceMode+0x6a>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8001c46:	f642 63c6 	movw	r3, #11974	; 0x2ec6
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001c4a:	9902      	ldr	r1, [sp, #8]
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8001c4c:	54e5      	strb	r5, [r4, r3]
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001c4e:	4620      	mov	r0, r4
 8001c50:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001c54:	f000 fd9f 	bl	8002796 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 8001c58:	b928      	cbnz	r0, 8001c66 <VL53L1_SetDistanceMode+0x6a>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8001c5a:	9b00      	ldr	r3, [sp, #0]
 8001c5c:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 8001c5e:	a903      	add	r1, sp, #12
 8001c60:	4620      	mov	r0, r4
 8001c62:	f000 fed2 	bl	8002a0a <VL53L1_set_zone_config>
}
 8001c66:	b02b      	add	sp, #172	; 0xac
 8001c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
{
 8001c6c:	b570      	push	{r4, r5, r6, lr}
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>)
 8001c70:	4299      	cmp	r1, r3
{
 8001c72:	b086      	sub	sp, #24
 8001c74:	4604      	mov	r4, r0
 8001c76:	460d      	mov	r5, r1
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001c78:	d903      	bls.n	8001c82 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001c7a:	f06f 0003 	mvn.w	r0, #3
}
 8001c7e:	b006      	add	sp, #24
 8001c80:	bd70      	pop	{r4, r5, r6, pc}
	Status = VL53L1_get_sequence_config_bit(Dev,
 8001c82:	f10d 0206 	add.w	r2, sp, #6
 8001c86:	2105      	movs	r1, #5
 8001c88:	f000 fdd2 	bl	8002830 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE) {
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	d1f6      	bne.n	8001c7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
	Status = VL53L1_get_sequence_config_bit(Dev,
 8001c90:	f10d 0207 	add.w	r2, sp, #7
 8001c94:	2106      	movs	r1, #6
 8001c96:	4620      	mov	r0, r4
 8001c98:	f000 fdca 	bl	8002830 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d1ee      	bne.n	8001c7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		Status = VL53L1_get_timeouts_us(Dev,
 8001ca0:	ab02      	add	r3, sp, #8
 8001ca2:	aa03      	add	r2, sp, #12
 8001ca4:	a904      	add	r1, sp, #16
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f000 fd8d 	bl	80027c6 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d1e6      	bne.n	8001c7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		PresetMode = VL53L1DevDataGet(Dev,
 8001cb0:	f642 63c4 	movw	r3, #11972	; 0x2ec4
 8001cb4:	5ce3      	ldrb	r3, [r4, r3]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d852      	bhi.n	8001d62 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
 8001cbc:	e8df f003 	tbb	[pc, r3]
 8001cc0:	05285656 	.word	0x05285656
 8001cc4:	384a5151 	.word	0x384a5151
 8001cc8:	56          	.byte	0x56
 8001cc9:	00          	.byte	0x00
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001cca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d051      	beq.n	8001d76 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10a>
 8001cd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001cd6:	492d      	ldr	r1, [pc, #180]	; (8001d8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x120>)
 8001cd8:	2301      	movs	r3, #1
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	bf18      	it	ne
 8001ce2:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001ce6:	4295      	cmp	r5, r2
 8001ce8:	d9c7      	bls.n	8001c7a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
					- TimingGuard);
 8001cea:	1aaa      	subs	r2, r5, r2
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8001cec:	428a      	cmp	r2, r1
 8001cee:	d8c4      	bhi.n	8001c7a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
				TimingBudget /= divisor;
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
				Status = VL53L1_set_timeouts_us(
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
				TimingBudget /= divisor;
 8001cfa:	9302      	str	r3, [sp, #8]
				Status = VL53L1_set_timeouts_us(
 8001cfc:	f000 fd4b 	bl	8002796 <VL53L1_set_timeouts_us>
			if (Status == VL53L1_ERROR_NONE)
 8001d00:	2800      	cmp	r0, #0
 8001d02:	d1bc      	bne.n	8001c7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
				VL53L1DevDataSet(Dev,
 8001d04:	9b02      	ldr	r3, [sp, #8]
 8001d06:	6123      	str	r3, [r4, #16]
		VL53L1DevDataSet(Dev,
 8001d08:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 8001d0c:	50e5      	str	r5, [r4, r3]
	return Status;
 8001d0e:	e7b6      	b.n	8001c7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001d10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d032      	beq.n	8001d7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x112>
 8001d18:	f89d 6007 	ldrb.w	r6, [sp, #7]
			FDAMaxTimingBudgetUs *= 2;
 8001d1c:	491c      	ldr	r1, [pc, #112]	; (8001d90 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x124>)
 8001d1e:	f246 72e8 	movw	r2, #26600	; 0x67e8
 8001d22:	f245 4060 	movw	r0, #21600	; 0x5460
 8001d26:	2302      	movs	r3, #2
 8001d28:	2e01      	cmp	r6, #1
 8001d2a:	bf18      	it	ne
 8001d2c:	4602      	movne	r2, r0
 8001d2e:	e7da      	b.n	8001ce6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
			VL53L1_get_tuning_parm(Dev,
 8001d30:	aa05      	add	r2, sp, #20
 8001d32:	f248 0188 	movw	r1, #32904	; 0x8088
 8001d36:	4620      	mov	r0, r4
 8001d38:	f001 fc47 	bl	80035ca <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8001d3c:	9b05      	ldr	r3, [sp, #20]
			FDAMaxTimingBudgetUs *= 2;
 8001d3e:	4914      	ldr	r1, [pc, #80]	; (8001d90 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x124>)
			if (vhv_loops > 0) {
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f04f 02f5 	mov.w	r2, #245	; 0xf5
				vhv += vhv_loops *
 8001d46:	bfc4      	itt	gt
 8001d48:	435a      	mulgt	r2, r3
 8001d4a:	32f5      	addgt	r2, #245	; 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8001d4c:	f602 52dc 	addw	r2, r2, #3548	; 0xddc
			divisor = 2;
 8001d50:	2302      	movs	r3, #2
		break;
 8001d52:	e7c8      	b.n	8001ce6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
			TimingGuard = MmTimeoutUs + 5000;
 8001d54:	9a03      	ldr	r2, [sp, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001d56:	490d      	ldr	r1, [pc, #52]	; (8001d8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x120>)
			TimingGuard = MmTimeoutUs + 5000;
 8001d58:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
 8001d5c:	3208      	adds	r2, #8
		divisor = 1;
 8001d5e:	2301      	movs	r3, #1
		break;
 8001d60:	e7c1      	b.n	8001ce6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001d62:	2d00      	cmp	r5, #0
 8001d64:	d089      	beq.n	8001c7a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
 8001d66:	f06f 0007 	mvn.w	r0, #7
 8001d6a:	e788      	b.n	8001c7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001d6c:	4907      	ldr	r1, [pc, #28]	; (8001d8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x120>)
			divisor = 6;
 8001d6e:	2306      	movs	r3, #6
			TimingGuard = 1700;
 8001d70:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001d74:	e7b7      	b.n	8001ce6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001d76:	4905      	ldr	r1, [pc, #20]	; (8001d8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x120>)
				TimingGuard = 5000;
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	e7b3      	b.n	8001ce6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
			FDAMaxTimingBudgetUs *= 2;
 8001d7e:	4904      	ldr	r1, [pc, #16]	; (8001d90 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x124>)
			divisor = 2;
 8001d80:	2302      	movs	r3, #2
				TimingGuard = 26600;
 8001d82:	f246 72e8 	movw	r2, #26600	; 0x67e8
 8001d86:	e7ae      	b.n	8001ce6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
 8001d88:	00989680 	.word	0x00989680
 8001d8c:	00086470 	.word	0x00086470
 8001d90:	0010c8e0 	.word	0x0010c8e0

08001d94 <VL53L1_SetPresetMode>:
{
 8001d94:	b538      	push	{r3, r4, r5, lr}
 8001d96:	460d      	mov	r5, r1
 8001d98:	4604      	mov	r4, r0
	Status = VL53L1_low_power_auto_data_init(Dev);
 8001d9a:	f005 f97a 	bl	8007092 <VL53L1_low_power_auto_data_init>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8001d9e:	2d09      	cmp	r5, #9
	Status = SetPresetMode(Dev,
 8001da0:	bf14      	ite	ne
 8001da2:	2203      	movne	r2, #3
 8001da4:	2201      	moveq	r2, #1
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	4629      	mov	r1, r5
 8001dac:	4620      	mov	r0, r4
 8001dae:	f7ff fe35 	bl	8001a1c <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8001db2:	b9a0      	cbnz	r0, 8001dde <VL53L1_SetPresetMode+0x4a>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8001db4:	1eeb      	subs	r3, r5, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d901      	bls.n	8001dbe <VL53L1_SetPresetMode+0x2a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001dba:	2d08      	cmp	r5, #8
 8001dbc:	d10c      	bne.n	8001dd8 <VL53L1_SetPresetMode+0x44>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001dbe:	f24a 0128 	movw	r1, #41000	; 0xa028
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f7ff ff52 	bl	8001c6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L1_ERROR_NONE) {
 8001dc8:	b948      	cbnz	r0, 8001dde <VL53L1_SetPresetMode+0x4a>
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f44f 6185 	mov.w	r1, #1064	; 0x428
}
 8001dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8001dd4:	f000 bcc4 	b.w	8002760 <VL53L1_set_inter_measurement_period_ms>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001dd8:	f248 2135 	movw	r1, #33333	; 0x8235
 8001ddc:	e7f1      	b.n	8001dc2 <VL53L1_SetPresetMode+0x2e>
}
 8001dde:	bd38      	pop	{r3, r4, r5, pc}

08001de0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 8001de0:	b570      	push	{r4, r5, r6, lr}
	uint8_t Mm1Enabled = 0;
 8001de2:	2300      	movs	r3, #0
{
 8001de4:	b086      	sub	sp, #24
	*pMeasurementTimingBudgetMicroSeconds = 0;
 8001de6:	600b      	str	r3, [r1, #0]
{
 8001de8:	460c      	mov	r4, r1
	Status = VL53L1_get_sequence_config_bit(Dev,
 8001dea:	f10d 0206 	add.w	r2, sp, #6
 8001dee:	2105      	movs	r1, #5
	uint32_t  RangeTimeoutUs = 0;
 8001df0:	e9cd 3302 	strd	r3, r3, [sp, #8]
{
 8001df4:	4606      	mov	r6, r0
	uint8_t Mm1Enabled = 0;
 8001df6:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t Mm2Enabled = 0;
 8001dfa:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t PhaseCalTimeoutUs = 0;
 8001dfe:	9304      	str	r3, [sp, #16]
	Status = VL53L1_get_sequence_config_bit(Dev,
 8001e00:	f000 fd16 	bl	8002830 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8001e04:	4605      	mov	r5, r0
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d160      	bne.n	8001ecc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xec>
	Status = VL53L1_get_sequence_config_bit(Dev,
 8001e0a:	f10d 0207 	add.w	r2, sp, #7
 8001e0e:	2106      	movs	r1, #6
 8001e10:	4630      	mov	r0, r6
 8001e12:	f000 fd0d 	bl	8002830 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8001e16:	4605      	mov	r5, r0
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	d157      	bne.n	8001ecc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xec>
		Status = VL53L1_get_timeouts_us(Dev,
 8001e1c:	ab03      	add	r3, sp, #12
 8001e1e:	aa02      	add	r2, sp, #8
 8001e20:	a904      	add	r1, sp, #16
 8001e22:	4630      	mov	r0, r6
 8001e24:	f000 fccf 	bl	80027c6 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 8001e28:	4605      	mov	r5, r0
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	d14e      	bne.n	8001ecc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xec>
		PresetMode = VL53L1DevDataGet(Dev,
 8001e2e:	f642 63c4 	movw	r3, #11972	; 0x2ec4
 8001e32:	5cf3      	ldrb	r3, [r6, r3]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d846      	bhi.n	8001ec8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
 8001e3a:	e8df f003 	tbb	[pc, r3]
 8001e3e:	3b3b      	.short	0x3b3b
 8001e40:	45450516 	.word	0x45450516
 8001e44:	2841      	.short	0x2841
 8001e46:	3b          	.byte	0x3b
 8001e47:	00          	.byte	0x00
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001e48:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001e4c:	9b03      	ldr	r3, [sp, #12]
 8001e4e:	2a01      	cmp	r2, #1
 8001e50:	d003      	beq.n	8001e5a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x7a>
 8001e52:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001e56:	2a01      	cmp	r2, #1
 8001e58:	d103      	bne.n	8001e62 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x82>
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 8001e5a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001e5e:	3308      	adds	r3, #8
		break;
 8001e60:	e001      	b.n	8001e66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8001e62:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8001e66:	6023      	str	r3, [r4, #0]
	return Status;
 8001e68:	e030      	b.n	8001ecc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xec>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001e6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001e6e:	9b03      	ldr	r3, [sp, #12]
 8001e70:	2a01      	cmp	r2, #1
 8001e72:	d003      	beq.n	8001e7c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x9c>
 8001e74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001e78:	2a01      	cmp	r2, #1
 8001e7a:	d104      	bne.n	8001e86 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa6>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8001e7c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8001e80:	3334      	adds	r3, #52	; 0x34
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	e7ef      	b.n	8001e66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
 8001e86:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001e8a:	3330      	adds	r3, #48	; 0x30
 8001e8c:	e7f9      	b.n	8001e82 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa2>
			VL53L1_get_tuning_parm(Dev,
 8001e8e:	aa05      	add	r2, sp, #20
 8001e90:	f248 0188 	movw	r1, #32904	; 0x8088
 8001e94:	4630      	mov	r0, r6
 8001e96:	f001 fb98 	bl	80035ca <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8001e9a:	9a05      	ldr	r2, [sp, #20]
 8001e9c:	23f5      	movs	r3, #245	; 0xf5
 8001e9e:	2a00      	cmp	r2, #0
				vhv += vhv_loops *
 8001ea0:	bfc8      	it	gt
 8001ea2:	4353      	mulgt	r3, r2
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8001ea4:	9a03      	ldr	r2, [sp, #12]
				vhv += vhv_loops *
 8001ea6:	bfc8      	it	gt
 8001ea8:	33f5      	addgt	r3, #245	; 0xf5
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8001eaa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001eae:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
		break;
 8001eb2:	e7d8      	b.n	8001e66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 8001eb4:	9a03      	ldr	r2, [sp, #12]
 8001eb6:	2306      	movs	r3, #6
 8001eb8:	4353      	muls	r3, r2
 8001eba:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
		break;
 8001ebe:	e7d2      	b.n	8001e66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 8001ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	e7c8      	b.n	8001e5a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x7a>
		PresetMode = VL53L1DevDataGet(Dev,
 8001ec8:	f06f 0507 	mvn.w	r5, #7
}
 8001ecc:	4628      	mov	r0, r5
 8001ece:	b006      	add	sp, #24
 8001ed0:	bd70      	pop	{r4, r5, r6, pc}

08001ed2 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:
{
 8001ed2:	b513      	push	{r0, r1, r4, lr}
 8001ed4:	460c      	mov	r4, r1
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8001ed6:	a901      	add	r1, sp, #4
 8001ed8:	f000 fc4f 	bl	800277a <VL53L1_get_inter_measurement_period_ms>
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8001edc:	9b01      	ldr	r3, [sp, #4]
 8001ede:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ee2:	019a      	lsls	r2, r3, #6
 8001ee4:	fbb2 f2f1 	udiv	r2, r2, r1
 8001ee8:	1a9b      	subs	r3, r3, r2
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8001eea:	6023      	str	r3, [r4, #0]
}
 8001eec:	b002      	add	sp, #8
 8001eee:	bd10      	pop	{r4, pc}

08001ef0 <VL53L1_SetLimitCheckEnable>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001ef0:	2901      	cmp	r1, #1
{
 8001ef2:	b570      	push	{r4, r5, r6, lr}
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	460e      	mov	r6, r1
 8001ef8:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001efa:	d812      	bhi.n	8001f22 <VL53L1_SetLimitCheckEnable+0x32>
		if (LimitCheckEnable == 0)
 8001efc:	b122      	cbz	r2, 8001f08 <VL53L1_SetLimitCheckEnable+0x18>
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001efe:	f601 33b2 	addw	r3, r1, #2994	; 0xbb2
 8001f02:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001f06:	689a      	ldr	r2, [r3, #8]
		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8001f08:	4631      	mov	r1, r6
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7ff fe18 	bl	8001b40 <SetLimitValue>
	if (Status == VL53L1_ERROR_NONE)
 8001f10:	b930      	cbnz	r0, 8001f20 <VL53L1_SetLimitCheckEnable+0x30>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001f12:	3d00      	subs	r5, #0
 8001f14:	4434      	add	r4, r6
 8001f16:	f642 63cc 	movw	r3, #11980	; 0x2ecc
 8001f1a:	bf18      	it	ne
 8001f1c:	2501      	movne	r5, #1
 8001f1e:	54e5      	strb	r5, [r4, r3]
}
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001f22:	f06f 0003 	mvn.w	r0, #3
 8001f26:	e7fb      	b.n	8001f20 <VL53L1_SetLimitCheckEnable+0x30>

08001f28 <VL53L1_DataInit>:
{
 8001f28:	b538      	push	{r3, r4, r5, lr}
		Status = VL53L1_data_init(Dev, 1);
 8001f2a:	2101      	movs	r1, #1
{
 8001f2c:	4604      	mov	r4, r0
		Status = VL53L1_data_init(Dev, 1);
 8001f2e:	f001 f827 	bl	8002f80 <VL53L1_data_init>
 8001f32:	4601      	mov	r1, r0
	if (Status == VL53L1_ERROR_NONE) {
 8001f34:	b9d0      	cbnz	r0, 8001f6c <VL53L1_DataInit+0x44>
		memset(&pdev->per_vcsel_cal_data, 0,
 8001f36:	f641 4270 	movw	r2, #7280	; 0x1c70
 8001f3a:	18a3      	adds	r3, r4, r2
 8001f3c:	50a0      	str	r0, [r4, r2]
 8001f3e:	6058      	str	r0, [r3, #4]
 8001f40:	6098      	str	r0, [r3, #8]
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001f42:	f504 533b 	add.w	r3, r4, #11968	; 0x2ec0
 8001f46:	2501      	movs	r5, #1
 8001f48:	701d      	strb	r5, [r3, #0]
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001f4a:	462a      	mov	r2, r5
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f7ff ffcf 	bl	8001ef0 <VL53L1_SetLimitCheckEnable>
		if (Status == VL53L1_ERROR_NONE)
 8001f52:	b958      	cbnz	r0, 8001f6c <VL53L1_DataInit+0x44>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001f54:	462a      	mov	r2, r5
 8001f56:	4629      	mov	r1, r5
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7ff ffc9 	bl	8001ef0 <VL53L1_SetLimitCheckEnable>
	if (Status == VL53L1_ERROR_NONE) {
 8001f5e:	b928      	cbnz	r0, 8001f6c <VL53L1_DataInit+0x44>
		Status = VL53L1_set_dmax_mode(Dev,
 8001f60:	4620      	mov	r0, r4
 8001f62:	2102      	movs	r1, #2
}
 8001f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L1_set_dmax_mode(Dev,
 8001f68:	f001 bb01 	b.w	800356e <VL53L1_set_dmax_mode>
}
 8001f6c:	bd38      	pop	{r3, r4, r5, pc}

08001f6e <VL53L1_GetLimitCheckValue>:
{
 8001f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f70:	4606      	mov	r6, r0
 8001f72:	4615      	mov	r5, r2
	switch (LimitCheckId) {
 8001f74:	460c      	mov	r4, r1
 8001f76:	b129      	cbz	r1, 8001f84 <VL53L1_GetLimitCheckValue+0x16>
 8001f78:	2901      	cmp	r1, #1
 8001f7a:	d018      	beq.n	8001fae <VL53L1_GetLimitCheckValue+0x40>
 8001f7c:	f06f 0003 	mvn.w	r0, #3
}
 8001f80:	b002      	add	sp, #8
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8001f84:	f10d 0106 	add.w	r1, sp, #6
 8001f88:	f001 f8ce 	bl	8003128 <VL53L1_get_lite_sigma_threshold>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8001f8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001f90:	039b      	lsls	r3, r3, #14
	if (Status == VL53L1_ERROR_NONE) {
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d1f4      	bne.n	8001f80 <VL53L1_GetLimitCheckValue+0x12>
		if (TempFix1616 == 0) {
 8001f96:	f604 32b2 	addw	r2, r4, #2994	; 0xbb2
 8001f9a:	4434      	add	r4, r6
 8001f9c:	b973      	cbnz	r3, 8001fbc <VL53L1_GetLimitCheckValue+0x4e>
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8001f9e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8001fa2:	68b3      	ldr	r3, [r6, #8]
			*pLimitCheckValue = TempFix1616;
 8001fa4:	602b      	str	r3, [r5, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001fa6:	f642 63cc 	movw	r3, #11980	; 0x2ecc
 8001faa:	54e0      	strb	r0, [r4, r3]
 8001fac:	e7e8      	b.n	8001f80 <VL53L1_GetLimitCheckValue+0x12>
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8001fae:	a901      	add	r1, sp, #4
 8001fb0:	f001 f8c3 	bl	800313a <VL53L1_get_lite_min_count_rate>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8001fb4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001fb8:	025b      	lsls	r3, r3, #9
		break;
 8001fba:	e7ea      	b.n	8001f92 <VL53L1_GetLimitCheckValue+0x24>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001fbc:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			*pLimitCheckValue = TempFix1616;
 8001fc0:	602b      	str	r3, [r5, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001fc2:	60b3      	str	r3, [r6, #8]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001fc4:	f642 63cc 	movw	r3, #11980	; 0x2ecc
 8001fc8:	2201      	movs	r2, #1
 8001fca:	54e2      	strb	r2, [r4, r3]
 8001fcc:	e7d8      	b.n	8001f80 <VL53L1_GetLimitCheckValue+0x12>
	...

08001fd0 <VL53L1_SetROI>:
{
 8001fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8001fd4:	f642 63c4 	movw	r3, #11972	; 0x2ec4
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8001fd8:	f891 c000 	ldrb.w	ip, [r1]
	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 8001fdc:	5cc3      	ldrb	r3, [r0, r3]
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2319      	moveq	r3, #25
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8001fe6:	459c      	cmp	ip, r3
{
 8001fe8:	b0a9      	sub	sp, #164	; 0xa4
 8001fea:	4607      	mov	r7, r0
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8001fec:	d820      	bhi.n	8002030 <VL53L1_SetROI+0x60>
 8001fee:	f1bc 0f00 	cmp.w	ip, #0
 8001ff2:	d01d      	beq.n	8002030 <VL53L1_SetROI+0x60>
		zone_cfg.max_zones = MaxNumberOfROI;
 8001ff4:	f88d 3004 	strb.w	r3, [sp, #4]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 8001ff8:	ad01      	add	r5, sp, #4
 8001ffa:	f10c 33ff 	add.w	r3, ip, #4294967295
 8001ffe:	f88d 3005 	strb.w	r3, [sp, #5]
 8002002:	f04f 0e00 	mov.w	lr, #0
 8002006:	460b      	mov	r3, r1
 8002008:	4629      	mov	r1, r5
			CurrROI = pRoiConfig->UserRois[i];
 800200a:	f893 9001 	ldrb.w	r9, [r3, #1]
 800200e:	789a      	ldrb	r2, [r3, #2]
 8002010:	78dc      	ldrb	r4, [r3, #3]
 8002012:	f893 8004 	ldrb.w	r8, [r3, #4]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002016:	f1b9 0f0f 	cmp.w	r9, #15
 800201a:	d80e      	bhi.n	800203a <VL53L1_SetROI+0x6a>
 800201c:	2a0f      	cmp	r2, #15
 800201e:	d80c      	bhi.n	800203a <VL53L1_SetROI+0x6a>
 8002020:	2c0f      	cmp	r4, #15
 8002022:	d80d      	bhi.n	8002040 <VL53L1_SetROI+0x70>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002024:	f1b8 0f0f 	cmp.w	r8, #15
 8002028:	d802      	bhi.n	8002030 <VL53L1_SetROI+0x60>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800202a:	2000      	movs	r0, #0
	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 800202c:	454c      	cmp	r4, r9
 800202e:	d209      	bcs.n	8002044 <VL53L1_SetROI+0x74>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002030:	f06f 0003 	mvn.w	r0, #3
}
 8002034:	b029      	add	sp, #164	; 0xa4
 8002036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800203a:	f06f 0003 	mvn.w	r0, #3
 800203e:	e7f5      	b.n	800202c <VL53L1_SetROI+0x5c>
 8002040:	f06f 0003 	mvn.w	r0, #3
	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8002044:	4542      	cmp	r2, r8
 8002046:	d3f3      	bcc.n	8002030 <VL53L1_SetROI+0x60>
			if (Status != VL53L1_ERROR_NONE)
 8002048:	2800      	cmp	r0, #0
 800204a:	d1f3      	bne.n	8002034 <VL53L1_SetROI+0x64>
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 800204c:	eb04 0009 	add.w	r0, r4, r9
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8002050:	eba4 0409 	sub.w	r4, r4, r9
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002054:	eb02 0608 	add.w	r6, r2, r8
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8002058:	b2e4      	uxtb	r4, r4
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 800205a:	3001      	adds	r0, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 800205c:	3601      	adds	r6, #1
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 800205e:	eba2 0208 	sub.w	r2, r2, r8
			if ((width < 3) || (height < 3)) {
 8002062:	2c02      	cmp	r4, #2
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8002064:	f3c0 0047 	ubfx	r0, r0, #1, #8
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002068:	f3c6 0647 	ubfx	r6, r6, #1, #8
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 800206c:	b2d2      	uxtb	r2, r2
			if ((width < 3) || (height < 3)) {
 800206e:	d804      	bhi.n	800207a <VL53L1_SetROI+0xaa>
				printf("width: %d    height: %d\n\r", width, height);
 8002070:	4621      	mov	r1, r4
 8002072:	480c      	ldr	r0, [pc, #48]	; (80020a4 <VL53L1_SetROI+0xd4>)
 8002074:	f009 fdc4 	bl	800bc00 <iprintf>
	if (Status == VL53L1_ERROR_NONE)
 8002078:	e7da      	b.n	8002030 <VL53L1_SetROI+0x60>
			if ((width < 3) || (height < 3)) {
 800207a:	2a02      	cmp	r2, #2
 800207c:	d9f8      	bls.n	8002070 <VL53L1_SetROI+0xa0>
			zone_cfg.user_zones[i].x_centre = x_centre;
 800207e:	f10e 0e01 	add.w	lr, lr, #1
			zone_cfg.user_zones[i].height = height;
 8002082:	77ea      	strb	r2, [r5, #31]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8002084:	fa5f f28e 	uxtb.w	r2, lr
 8002088:	4594      	cmp	ip, r2
			zone_cfg.user_zones[i].x_centre = x_centre;
 800208a:	7728      	strb	r0, [r5, #28]
			zone_cfg.user_zones[i].y_centre = y_centre;
 800208c:	776e      	strb	r6, [r5, #29]
			zone_cfg.user_zones[i].width = width;
 800208e:	77ac      	strb	r4, [r5, #30]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8002090:	f103 0304 	add.w	r3, r3, #4
 8002094:	f105 0504 	add.w	r5, r5, #4
 8002098:	d8b7      	bhi.n	800200a <VL53L1_SetROI+0x3a>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 800209a:	4638      	mov	r0, r7
 800209c:	f000 fcb5 	bl	8002a0a <VL53L1_set_zone_config>
	return Status;
 80020a0:	e7c8      	b.n	8002034 <VL53L1_SetROI+0x64>
 80020a2:	bf00      	nop
 80020a4:	0800e148 	.word	0x0800e148

080020a8 <VL53L1_StartMeasurement>:
{
 80020a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020aa:	4604      	mov	r4, r0
	VL53L1_load_patch(Dev);
 80020ac:	f001 ff22 	bl	8003ef4 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80020b0:	f504 5104 	add.w	r1, r4, #8448	; 0x2100
 80020b4:	460b      	mov	r3, r1
 80020b6:	3308      	adds	r3, #8
 80020b8:	4618      	mov	r0, r3
		pdev->PreviousRangeMilliMeter[i] = 0;
 80020ba:	2200      	movs	r2, #0
		pdev->PreviousRangeStatus[i] = 255;
 80020bc:	25ff      	movs	r5, #255	; 0xff
		pdev->PreviousRangeMilliMeter[i] = 0;
 80020be:	f821 2b02 	strh.w	r2, [r1], #2
		pdev->PreviousRangeStatus[i] = 255;
 80020c2:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80020c6:	4288      	cmp	r0, r1
		pdev->PreviousExtendedRange[i] = 0;
 80020c8:	70da      	strb	r2, [r3, #3]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80020ca:	d1f8      	bne.n	80020be <VL53L1_StartMeasurement+0x16>
	pdev->PreviousStreamCount = 0;
 80020cc:	f242 1310 	movw	r3, #8464	; 0x2110
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 80020d0:	f504 553b 	add.w	r5, r4, #11968	; 0x2ec0
	pdev->PreviousStreamCount = 0;
 80020d4:	54e2      	strb	r2, [r4, r3]
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 80020d6:	782b      	ldrb	r3, [r5, #0]
	switch (CurrPalState) {
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d00b      	beq.n	80020f4 <VL53L1_StartMeasurement+0x4c>
 80020dc:	d92a      	bls.n	8002134 <VL53L1_StartMeasurement+0x8c>
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d928      	bls.n	8002134 <VL53L1_StartMeasurement+0x8c>
 80020e2:	3b62      	subs	r3, #98	; 0x62
		Status = VL53L1_ERROR_UNDEFINED;
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	bf94      	ite	ls
 80020e8:	f06f 000d 	mvnls.w	r0, #13
 80020ec:	f06f 0002 	mvnhi.w	r0, #2
}
 80020f0:	b002      	add	sp, #8
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80020f4:	78e6      	ldrb	r6, [r4, #3]
	if ((Status == VL53L1_ERROR_NONE) &&
 80020f6:	2e40      	cmp	r6, #64	; 0x40
 80020f8:	d112      	bne.n	8002120 <VL53L1_StartMeasurement+0x78>
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80020fa:	4669      	mov	r1, sp
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff fe6f 	bl	8001de0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002102:	a901      	add	r1, sp, #4
 8002104:	4620      	mov	r0, r4
		MTBus /= 1000;
 8002106:	9b00      	ldr	r3, [sp, #0]
 8002108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800210c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002110:	9300      	str	r3, [sp, #0]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002112:	f7ff fede 	bl	8001ed2 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	9a01      	ldr	r2, [sp, #4]
 800211a:	3304      	adds	r3, #4
 800211c:	4293      	cmp	r3, r2
 800211e:	d80c      	bhi.n	800213a <VL53L1_StartMeasurement+0x92>
		Status = VL53L1_init_and_start_range(
 8002120:	2206      	movs	r2, #6
 8002122:	4631      	mov	r1, r6
 8002124:	4620      	mov	r0, r4
 8002126:	f001 f927 	bl	8003378 <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 800212a:	2800      	cmp	r0, #0
 800212c:	d1e0      	bne.n	80020f0 <VL53L1_StartMeasurement+0x48>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800212e:	2304      	movs	r3, #4
 8002130:	702b      	strb	r3, [r5, #0]
 8002132:	e7dd      	b.n	80020f0 <VL53L1_StartMeasurement+0x48>
	switch (CurrPalState) {
 8002134:	f06f 000d 	mvn.w	r0, #13
 8002138:	e7da      	b.n	80020f0 <VL53L1_StartMeasurement+0x48>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800213a:	f06f 0003 	mvn.w	r0, #3
 800213e:	e7d7      	b.n	80020f0 <VL53L1_StartMeasurement+0x48>

08002140 <VL53L1_ClearInterruptAndStartMeasurement>:
	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8002140:	78c1      	ldrb	r1, [r0, #3]
 8002142:	f001 ba11 	b.w	8003568 <VL53L1_clear_interrupt_and_enable_next_range>

08002146 <VL53L1_GetMeasurementDataReady>:
	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8002146:	f007 bda7 	b.w	8009c98 <VL53L1_is_new_data_ready>
	...

0800214c <VL53L1_GetMultiRangingData>:
	return Status;
}

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 800214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002150:	4604      	mov	r4, r0
 8002152:	460e      	mov	r6, r1
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8002154:	f504 58a3 	add.w	r8, r4, #5216	; 0x1460
{
 8002158:	b08f      	sub	sp, #60	; 0x3c
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	21ff      	movs	r1, #255	; 0xff
 800215e:	4630      	mov	r0, r6
	VL53L1_range_results_t *presults =
 8002160:	f108 0810 	add.w	r8, r8, #16
	memset(pMultiRangingData, 0xFF,
 8002164:	f009 f8da 	bl	800b31c <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8002168:	4642      	mov	r2, r8
 800216a:	2102      	movs	r1, #2
 800216c:	4620      	mov	r0, r4
 800216e:	f002 f8fd 	bl	800436c <VL53L1_get_device_results>
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 8002172:	9004      	str	r0, [sp, #16]
 8002174:	2800      	cmp	r0, #0
 8002176:	f040 8182 	bne.w	800247e <VL53L1_GetMultiRangingData+0x332>
		switch (presults->rd_device_state) {
 800217a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800217e:	2b07      	cmp	r3, #7
 8002180:	d003      	beq.n	800218a <VL53L1_GetMultiRangingData+0x3e>
 8002182:	2b08      	cmp	r3, #8
 8002184:	d07c      	beq.n	8002280 <VL53L1_GetMultiRangingData+0x134>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
					VL53L1_ROISTATUS_VALID_LAST;
			break;
		default:
			pMultiRangingData->RoiStatus =
 8002186:	9b04      	ldr	r3, [sp, #16]
 8002188:	e000      	b.n	800218c <VL53L1_GetMultiRangingData+0x40>
			pMultiRangingData->RoiStatus =
 800218a:	2301      	movs	r3, #1
			pMultiRangingData->RoiStatus =
 800218c:	71f3      	strb	r3, [r6, #7]
	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 800218e:	f898 b012 	ldrb.w	fp, [r8, #18]
 8002192:	f886 b006 	strb.w	fp, [r6, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 8002196:	f898 3002 	ldrb.w	r3, [r8, #2]
 800219a:	7173      	strb	r3, [r6, #5]
	pMultiRangingData->HasXtalkValueChanged =
 800219c:	f898 3196 	ldrb.w	r3, [r8, #406]	; 0x196
 80021a0:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 80021a4:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 80021a8:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 80021ac:	4293      	cmp	r3, r2
 80021ae:	bfa8      	it	ge
 80021b0:	4613      	movge	r3, r2
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 80021b2:	f8a6 307c 	strh.w	r3, [r6, #124]	; 0x7c
	pMultiRangingData->TimeStamp = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	6033      	str	r3, [r6, #0]
	pMultiRangingData->StreamCount = presults->stream_count;
 80021ba:	f898 2003 	ldrb.w	r2, [r8, #3]
 80021be:	7132      	strb	r2, [r6, #4]
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 80021c0:	f642 62c6 	movw	r2, #11974	; 0x2ec6
	pMultiRangingData->RecommendedDistanceMode =
 80021c4:	4699      	mov	r9, r3
 80021c6:	5ca2      	ldrb	r2, [r4, r2]
 80021c8:	f886 207e 	strb.w	r2, [r6, #126]	; 0x7e
	if (ActiveResults < 1)
 80021cc:	465a      	mov	r2, fp
 80021ce:	2a01      	cmp	r2, #1
 80021d0:	bf38      	it	cc
 80021d2:	2201      	movcc	r2, #1
 80021d4:	9201      	str	r2, [sp, #4]
	uint8_t Furthest_idx = 0;
 80021d6:	9302      	str	r3, [sp, #8]
 80021d8:	f504 5204 	add.w	r2, r4, #8448	; 0x2100
	int16_t Furthest_range = 0;
 80021dc:	9306      	str	r3, [sp, #24]
		PresetMode = VL53L1DevDataGet(Dev,
 80021de:	f504 533b 	add.w	r3, r4, #11968	; 0x2ec0
 80021e2:	f504 57a4 	add.w	r7, r4, #5248	; 0x1480
 80021e6:	9203      	str	r2, [sp, #12]
 80021e8:	3304      	adds	r3, #4
 80021ea:	3208      	adds	r2, #8
 80021ec:	371a      	adds	r7, #26
 80021ee:	4635      	mov	r5, r6
 80021f0:	9200      	str	r2, [sp, #0]
 80021f2:	9305      	str	r3, [sp, #20]
 80021f4:	fa5f f389 	uxtb.w	r3, r9
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80021f8:	f897 a034 	ldrb.w	sl, [r7, #52]	; 0x34
 80021fc:	9308      	str	r3, [sp, #32]
	int32_t ExtendedRangeEnabled = 0;
 80021fe:	2200      	movs	r2, #0
			Status = SetTargetData(Dev, ActiveResults,
 8002200:	7933      	ldrb	r3, [r6, #4]
 8002202:	9307      	str	r3, [sp, #28]
	int32_t ExtendedRangeEnabled = 0;
 8002204:	920d      	str	r2, [sp, #52]	; 0x34
			Status = SetTargetData(Dev, ActiveResults,
 8002206:	f898 3010 	ldrb.w	r3, [r8, #16]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800220a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800220e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8002212:	f00a 0a1f 	and.w	sl, sl, #31
	if (active_results == 0)
 8002216:	f1bb 0f00 	cmp.w	fp, #0
 800221a:	d033      	beq.n	8002284 <VL53L1_GetMultiRangingData+0x138>
	else if (((presults_data->max_range_mm -
 800221c:	1a88      	subs	r0, r1, r2
 800221e:	2895      	cmp	r0, #149	; 0x95
 8002220:	dc32      	bgt.n	8002288 <VL53L1_GetMultiRangingData+0x13c>
			presults_data->min_range_mm) >= T_Wide) ||
 8002222:	f1ba 0f07 	cmp.w	sl, #7
 8002226:	d02f      	beq.n	8002288 <VL53L1_GetMultiRangingData+0x13c>
 8002228:	f1a7 0016 	sub.w	r0, r7, #22
 800222c:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8002230:	9309      	str	r3, [sp, #36]	; 0x24
 8002232:	f7ff fcb7 	bl	8001ba4 <ComputeRQL.part.0>
 8002236:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	; 0x24
 800223a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800223c:	f8b7 c01e 	ldrh.w	ip, [r7, #30]
	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8002240:	7228      	strb	r0, [r5, #8]
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002242:	ea4f 2c4c 	mov.w	ip, ip, lsl #9
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002246:	8b78      	ldrh	r0, [r7, #26]
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002248:	f8c5 c014 	str.w	ip, [r5, #20]
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800224c:	f8b7 c026 	ldrh.w	ip, [r7, #38]	; 0x26
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002250:	f8b7 e030 	ldrh.w	lr, [r7, #48]	; 0x30
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002254:	81aa      	strh	r2, [r5, #12]
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002256:	0240      	lsls	r0, r0, #9
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002258:	ea4f 2c4c 	mov.w	ip, ip, lsl #9
	pRangeData->RangeFractionalPart = 0;
 800225c:	f04f 0200 	mov.w	r2, #0
	switch (device_status) {
 8002260:	2b0d      	cmp	r3, #13
		= SignalRate;
 8002262:	6128      	str	r0, [r5, #16]
	pRangeData->SigmaMilliMeter = TempFix1616;
 8002264:	f8c5 c018 	str.w	ip, [r5, #24]
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002268:	f8a5 e01c 	strh.w	lr, [r5, #28]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 800226c:	8169      	strh	r1, [r5, #10]
	pRangeData->RangeFractionalPart = 0;
 800226e:	77aa      	strb	r2, [r5, #30]
	switch (device_status) {
 8002270:	d004      	beq.n	800227c <VL53L1_GetMultiRangingData+0x130>
 8002272:	d80b      	bhi.n	800228c <VL53L1_GetMultiRangingData+0x140>
 8002274:	3b01      	subs	r3, #1
 8002276:	2b02      	cmp	r3, #2
 8002278:	d80a      	bhi.n	8002290 <VL53L1_GetMultiRangingData+0x144>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800227a:	2305      	movs	r3, #5
			pRangeData->RangeStatus =
 800227c:	77eb      	strb	r3, [r5, #31]
 800227e:	e024      	b.n	80022ca <VL53L1_GetMultiRangingData+0x17e>
			pMultiRangingData->RoiStatus =
 8002280:	2302      	movs	r3, #2
 8002282:	e783      	b.n	800218c <VL53L1_GetMultiRangingData+0x40>
		returnvalue = 0;
 8002284:	4658      	mov	r0, fp
 8002286:	e7d9      	b.n	800223c <VL53L1_GetMultiRangingData+0xf0>
		returnvalue = 50;
 8002288:	2032      	movs	r0, #50	; 0x32
 800228a:	e7d7      	b.n	800223c <VL53L1_GetMultiRangingData+0xf0>
	switch (device_status) {
 800228c:	2b11      	cmp	r3, #17
 800228e:	d0f4      	beq.n	800227a <VL53L1_GetMultiRangingData+0x12e>
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002290:	f1bb 0f00 	cmp.w	fp, #0
 8002294:	d00e      	beq.n	80022b4 <VL53L1_GetMultiRangingData+0x168>
		PresetMode = VL53L1DevDataGet(Dev,
 8002296:	9b05      	ldr	r3, [sp, #20]
 8002298:	781b      	ldrb	r3, [r3, #0]
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 800229a:	1e5a      	subs	r2, r3, #1
 800229c:	2a01      	cmp	r2, #1
 800229e:	f200 80f2 	bhi.w	8002486 <VL53L1_GetMultiRangingData+0x33a>
	switch (FilteredRangeStatus) {
 80022a2:	f1aa 0305 	sub.w	r3, sl, #5
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b12      	cmp	r3, #18
 80022aa:	f200 80f8 	bhi.w	800249e <VL53L1_GetMultiRangingData+0x352>
 80022ae:	4ab5      	ldr	r2, [pc, #724]	; (8002584 <VL53L1_GetMultiRangingData+0x438>)
 80022b0:	5cd3      	ldrb	r3, [r2, r3]
 80022b2:	e7e3      	b.n	800227c <VL53L1_GetMultiRangingData+0x130>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 80022b4:	23ff      	movs	r3, #255	; 0xff
 80022b6:	77eb      	strb	r3, [r5, #31]
		pRangeData->RangeMilliMeter = 8191;
 80022b8:	f641 73ff 	movw	r3, #8191	; 0x1fff
		pRangeData->SignalRateRtnMegaCps = 0;
 80022bc:	f8c5 b010 	str.w	fp, [r5, #16]
		pRangeData->SigmaMilliMeter = 0;
 80022c0:	f8c5 b018 	str.w	fp, [r5, #24]
		pRangeData->RangeMilliMeter = 8191;
 80022c4:	83ab      	strh	r3, [r5, #28]
		pRangeData->RangeMaxMilliMeter = 8191;
 80022c6:	816b      	strh	r3, [r5, #10]
		pRangeData->RangeMinMilliMeter = 8191;
 80022c8:	81ab      	strh	r3, [r5, #12]
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80022ca:	f642 63d8 	movw	r3, #11992	; 0x2ed8
	VL53L1_GetLimitCheckValue(Dev,
 80022ce:	aa0c      	add	r2, sp, #48	; 0x30
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80022d0:	f844 c003 	str.w	ip, [r4, r3]
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80022d4:	f642 63dc 	movw	r3, #11996	; 0x2edc
	VL53L1_GetLimitCheckValue(Dev,
 80022d8:	2100      	movs	r1, #0
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80022da:	50e0      	str	r0, [r4, r3]
	VL53L1_GetLimitCheckValue(Dev,
 80022dc:	4620      	mov	r0, r4
 80022de:	f7ff fe46 	bl	8001f6e <VL53L1_GetLimitCheckValue>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80022e2:	f642 63cc 	movw	r3, #11980	; 0x2ecc
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80022e6:	5ce3      	ldrb	r3, [r4, r3]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	f040 80da 	bne.w	80024a2 <VL53L1_GetMultiRangingData+0x356>
 80022ee:	f1aa 0206 	sub.w	r2, sl, #6
 80022f2:	4253      	negs	r3, r2
 80022f4:	4153      	adcs	r3, r2
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80022f6:	f642 62ce 	movw	r2, #11982	; 0x2ece
	VL53L1_GetLimitCheckValue(Dev,
 80022fa:	2101      	movs	r1, #1
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80022fc:	54a3      	strb	r3, [r4, r2]
	VL53L1_GetLimitCheckValue(Dev,
 80022fe:	4620      	mov	r0, r4
 8002300:	aa0c      	add	r2, sp, #48	; 0x30
 8002302:	f7ff fe34 	bl	8001f6e <VL53L1_GetLimitCheckValue>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002306:	f642 63cd 	movw	r3, #11981	; 0x2ecd
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800230a:	5ce3      	ldrb	r3, [r4, r3]
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 80ca 	bne.w	80024a6 <VL53L1_GetMultiRangingData+0x35a>
 8002312:	f1aa 0304 	sub.w	r3, sl, #4
 8002316:	f1d3 0a00 	rsbs	sl, r3, #0
 800231a:	eb4a 0a03 	adc.w	sl, sl, r3
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800231e:	f642 63cf 	movw	r3, #11983	; 0x2ecf
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8002322:	f804 a003 	strb.w	sl, [r4, r3]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002326:	7feb      	ldrb	r3, [r5, #31]
 8002328:	b953      	cbnz	r3, 8002340 <VL53L1_GetMultiRangingData+0x1f4>
	Range = pRangeData->RangeMilliMeter;
 800232a:	f9b5 201c 	ldrsh.w	r2, [r5, #28]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800232e:	2a00      	cmp	r2, #0
 8002330:	da06      	bge.n	8002340 <VL53L1_GetMultiRangingData+0x1f4>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8002332:	4995      	ldr	r1, [pc, #596]	; (8002588 <VL53L1_GetMultiRangingData+0x43c>)
 8002334:	6849      	ldr	r1, [r1, #4]
 8002336:	428a      	cmp	r2, r1
			pRangeData->RangeStatus =
 8002338:	bfba      	itte	lt
 800233a:	230e      	movlt	r3, #14
 800233c:	77eb      	strblt	r3, [r5, #31]
			pRangeData->RangeMilliMeter = 0;
 800233e:	83ab      	strhge	r3, [r5, #28]
	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8002340:	aa0d      	add	r2, sp, #52	; 0x34
 8002342:	f248 0191 	movw	r1, #32913	; 0x8091
 8002346:	4620      	mov	r0, r4
 8002348:	f001 f93f 	bl	80035ca <VL53L1_get_tuning_parm>
	pRangeData->ExtendedRange = 0;
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	f885 3020 	strb.w	r3, [r5, #32]
	if (ExtendedRangeEnabled &&
 8002354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002356:	f9b5 e01c 	ldrsh.w	lr, [r5, #28]
	if (ExtendedRangeEnabled &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d047      	beq.n	80023ee <VL53L1_GetMultiRangingData+0x2a2>
		(pRangeData->RangeStatus ==
 800235e:	7feb      	ldrb	r3, [r5, #31]
	if (ExtendedRangeEnabled &&
 8002360:	2b07      	cmp	r3, #7
 8002362:	d001      	beq.n	8002368 <VL53L1_GetMultiRangingData+0x21c>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002364:	2b04      	cmp	r3, #4
 8002366:	d142      	bne.n	80023ee <VL53L1_GetMultiRangingData+0x2a2>
		&& (pdev->PreviousRangeStatus[iteration] ==
 8002368:	9b00      	ldr	r3, [sp, #0]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b07      	cmp	r3, #7
 800236e:	d007      	beq.n	8002380 <VL53L1_GetMultiRangingData+0x234>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002370:	2b04      	cmp	r3, #4
 8002372:	d005      	beq.n	8002380 <VL53L1_GetMultiRangingData+0x234>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002374:	2b00      	cmp	r3, #0
 8002376:	d13a      	bne.n	80023ee <VL53L1_GetMultiRangingData+0x2a2>
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8002378:	9b00      	ldr	r3, [sp, #0]
 800237a:	791b      	ldrb	r3, [r3, #4]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d136      	bne.n	80023ee <VL53L1_GetMultiRangingData+0x2a2>
		if (((pdev->PreviousStreamCount) ==
 8002380:	f242 1310 	movw	r3, #8464	; 0x2110
 8002384:	5ce2      	ldrb	r2, [r4, r3]
			(pdev->hist_data.result__stream_count - 1 ))
 8002386:	f894 34ab 	ldrb.w	r3, [r4, #1195]	; 0x4ab
 800238a:	1e59      	subs	r1, r3, #1
		if (((pdev->PreviousStreamCount) ==
 800238c:	428a      	cmp	r2, r1
 800238e:	d002      	beq.n	8002396 <VL53L1_GetMultiRangingData+0x24a>
			(pdev->hist_data.result__stream_count + 127)))
 8002390:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8002392:	429a      	cmp	r2, r3
 8002394:	d12b      	bne.n	80023ee <VL53L1_GetMultiRangingData+0x2a2>
	sequency = streamcount % 2;
 8002396:	9b07      	ldr	r3, [sp, #28]
		switch (pdev->preset_mode) {
 8002398:	7860      	ldrb	r0, [r4, #1]
	sequency = streamcount % 2;
 800239a:	f003 0201 	and.w	r2, r3, #1
		RangeDiff = pRangeData->RangeMilliMeter -
 800239e:	9b03      	ldr	r3, [sp, #12]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	fa1f f18e 	uxth.w	r1, lr
 80023a6:	1acb      	subs	r3, r1, r3
		switch (pdev->preset_mode) {
 80023a8:	281b      	cmp	r0, #27
		RangeDiff = pRangeData->RangeMilliMeter -
 80023aa:	b21b      	sxth	r3, r3
		switch (pdev->preset_mode) {
 80023ac:	f000 8100 	beq.w	80025b0 <VL53L1_GetMultiRangingData+0x464>
 80023b0:	281e      	cmp	r0, #30
 80023b2:	d11c      	bne.n	80023ee <VL53L1_GetMultiRangingData+0x2a2>
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80023b4:	f9b4 01ea 	ldrsh.w	r0, [r4, #490]	; 0x1ea
 80023b8:	4283      	cmp	r3, r0
 80023ba:	dd77      	ble.n	80024ac <VL53L1_GetMultiRangingData+0x360>
 80023bc:	f9b4 c1ec 	ldrsh.w	ip, [r4, #492]	; 0x1ec
 80023c0:	459c      	cmp	ip, r3
 80023c2:	dd73      	ble.n	80024ac <VL53L1_GetMultiRangingData+0x360>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80023c4:	2a00      	cmp	r2, #0
 80023c6:	d071      	beq.n	80024ac <VL53L1_GetMultiRangingData+0x360>
					AddOffset =
 80023c8:	f9b4 3204 	ldrsh.w	r3, [r4, #516]	; 0x204
			pRangeData->RangeMinMilliMeter += AddOffset;
 80023cc:	89aa      	ldrh	r2, [r5, #12]
 80023ce:	fa12 f283 	uxtah	r2, r2, r3
 80023d2:	81aa      	strh	r2, [r5, #12]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80023d4:	896a      	ldrh	r2, [r5, #10]
			pRangeData->RangeMilliMeter += AddOffset;
 80023d6:	fa11 f183 	uxtah	r1, r1, r3
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80023da:	fa12 f383 	uxtah	r3, r2, r3
 80023de:	816b      	strh	r3, [r5, #10]
			pRangeData->ExtendedRange = 1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f885 3020 	strb.w	r3, [r5, #32]
			pRangeData->RangeStatus = 0;
 80023e6:	f04f 0300 	mov.w	r3, #0
			pRangeData->RangeMilliMeter += AddOffset;
 80023ea:	83a9      	strh	r1, [r5, #28]
			pRangeData->RangeStatus = 0;
 80023ec:	77eb      	strb	r3, [r5, #31]
	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80023ee:	9b03      	ldr	r3, [sp, #12]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80023f0:	9a00      	ldr	r2, [sp, #0]
	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80023f2:	f823 eb02 	strh.w	lr, [r3], #2
 80023f6:	9303      	str	r3, [sp, #12]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80023f8:	7feb      	ldrb	r3, [r5, #31]
 80023fa:	f802 3b01 	strb.w	r3, [r2], #1
 80023fe:	9200      	str	r2, [sp, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8002400:	9900      	ldr	r1, [sp, #0]
 8002402:	f895 2020 	ldrb.w	r2, [r5, #32]
 8002406:	70ca      	strb	r2, [r1, #3]
		pMultiRangingData->EffectiveSpadRtnCount =
 8002408:	883a      	ldrh	r2, [r7, #0]
 800240a:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 800240e:	b93b      	cbnz	r3, 8002420 <VL53L1_GetMultiRangingData+0x2d4>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8002410:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
 8002414:	9a06      	ldr	r2, [sp, #24]
 8002416:	4293      	cmp	r3, r2
 8002418:	bfc2      	ittt	gt
 800241a:	9306      	strgt	r3, [sp, #24]
 800241c:	9b08      	ldrgt	r3, [sp, #32]
 800241e:	9302      	strgt	r3, [sp, #8]
	for (i = 0; i < iteration; i++) {
 8002420:	9a01      	ldr	r2, [sp, #4]
 8002422:	f109 0901 	add.w	r9, r9, #1
 8002426:	fa5f f389 	uxtb.w	r3, r9
 800242a:	429a      	cmp	r2, r3
 800242c:	f107 074c 	add.w	r7, r7, #76	; 0x4c
 8002430:	f105 051c 	add.w	r5, r5, #28
 8002434:	f63f aede 	bhi.w	80021f4 <VL53L1_GetMultiRangingData+0xa8>
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8002438:	f242 1310 	movw	r3, #8464	; 0x2110
 800243c:	f894 24ab 	ldrb.w	r2, [r4, #1195]	; 0x4ab
 8002440:	54e2      	strb	r2, [r4, r3]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002442:	9b01      	ldr	r3, [sp, #4]
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002444:	4951      	ldr	r1, [pc, #324]	; (800258c <VL53L1_GetMultiRangingData+0x440>)
 8002446:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800244a:	330c      	adds	r3, #12
 800244c:	4423      	add	r3, r4
 800244e:	1b09      	subs	r1, r1, r4
 8002450:	2200      	movs	r2, #0
		pdev->PreviousRangeStatus[i] = 255;
 8002452:	20ff      	movs	r0, #255	; 0xff
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002454:	9d01      	ldr	r5, [sp, #4]
 8002456:	2d04      	cmp	r5, #4
 8002458:	f040 8101 	bne.w	800265e <VL53L1_GetMultiRangingData+0x512>
	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 800245c:	f1bb 0f00 	cmp.w	fp, #0
 8002460:	d00d      	beq.n	800247e <VL53L1_GetMultiRangingData+0x332>
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8002462:	9a02      	ldr	r2, [sp, #8]
 8002464:	231c      	movs	r3, #28
 8002466:	fb03 6302 	mla	r3, r3, r2, r6
 800246a:	7fdb      	ldrb	r3, [r3, #31]
	switch (RangeStatus) {
 800246c:	2b0c      	cmp	r3, #12
 800246e:	f200 8101 	bhi.w	8002674 <VL53L1_GetMultiRangingData+0x528>
 8002472:	2b09      	cmp	r3, #9
 8002474:	d803      	bhi.n	800247e <VL53L1_GetMultiRangingData+0x332>
 8002476:	1f9a      	subs	r2, r3, #6
 8002478:	2a01      	cmp	r2, #1
 800247a:	f200 80fe 	bhi.w	800267a <VL53L1_GetMultiRangingData+0x52e>

	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800247e:	9804      	ldr	r0, [sp, #16]
 8002480:	b00f      	add	sp, #60	; 0x3c
 8002482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8002486:	2b09      	cmp	r3, #9
 8002488:	f43f af0b 	beq.w	80022a2 <VL53L1_GetMultiRangingData+0x156>
	switch (FilteredRangeStatus) {
 800248c:	f1aa 0304 	sub.w	r3, sl, #4
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b0f      	cmp	r3, #15
 8002494:	d803      	bhi.n	800249e <VL53L1_GetMultiRangingData+0x352>
 8002496:	4a3b      	ldr	r2, [pc, #236]	; (8002584 <VL53L1_GetMultiRangingData+0x438>)
 8002498:	4413      	add	r3, r2
 800249a:	7cdb      	ldrb	r3, [r3, #19]
 800249c:	e6ee      	b.n	800227c <VL53L1_GetMultiRangingData+0x130>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 800249e:	23ff      	movs	r3, #255	; 0xff
 80024a0:	e6ec      	b.n	800227c <VL53L1_GetMultiRangingData+0x130>
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e727      	b.n	80022f6 <VL53L1_GetMultiRangingData+0x1aa>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80024a6:	f04f 0a00 	mov.w	sl, #0
 80024aa:	e738      	b.n	800231e <VL53L1_GetMultiRangingData+0x1d2>
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80024ac:	4240      	negs	r0, r0
 80024ae:	4283      	cmp	r3, r0
 80024b0:	da08      	bge.n	80024c4 <VL53L1_GetMultiRangingData+0x378>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80024b2:	f9b4 01ec 	ldrsh.w	r0, [r4, #492]	; 0x1ec
 80024b6:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80024b8:	4283      	cmp	r3, r0
 80024ba:	dd03      	ble.n	80024c4 <VL53L1_GetMultiRangingData+0x378>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80024bc:	b912      	cbnz	r2, 80024c4 <VL53L1_GetMultiRangingData+0x378>
					AddOffset =
 80024be:	f9b4 3202 	ldrsh.w	r3, [r4, #514]	; 0x202
		if (uwr_status) {
 80024c2:	e783      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80024c4:	f9b4 01ee 	ldrsh.w	r0, [r4, #494]	; 0x1ee
 80024c8:	4283      	cmp	r3, r0
 80024ca:	dd07      	ble.n	80024dc <VL53L1_GetMultiRangingData+0x390>
 80024cc:	f9b4 c1f0 	ldrsh.w	ip, [r4, #496]	; 0x1f0
 80024d0:	459c      	cmp	ip, r3
 80024d2:	dd03      	ble.n	80024dc <VL53L1_GetMultiRangingData+0x390>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80024d4:	b912      	cbnz	r2, 80024dc <VL53L1_GetMultiRangingData+0x390>
					AddOffset =
 80024d6:	f9b4 3206 	ldrsh.w	r3, [r4, #518]	; 0x206
		if (uwr_status) {
 80024da:	e777      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80024dc:	4240      	negs	r0, r0
 80024de:	4283      	cmp	r3, r0
 80024e0:	da08      	bge.n	80024f4 <VL53L1_GetMultiRangingData+0x3a8>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80024e2:	f9b4 01f0 	ldrsh.w	r0, [r4, #496]	; 0x1f0
 80024e6:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80024e8:	4283      	cmp	r3, r0
 80024ea:	dd03      	ble.n	80024f4 <VL53L1_GetMultiRangingData+0x3a8>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80024ec:	b112      	cbz	r2, 80024f4 <VL53L1_GetMultiRangingData+0x3a8>
					AddOffset =
 80024ee:	f9b4 3208 	ldrsh.w	r3, [r4, #520]	; 0x208
		if (uwr_status) {
 80024f2:	e76b      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80024f4:	f9b4 01f2 	ldrsh.w	r0, [r4, #498]	; 0x1f2
 80024f8:	4283      	cmp	r3, r0
 80024fa:	dd07      	ble.n	800250c <VL53L1_GetMultiRangingData+0x3c0>
 80024fc:	f9b4 c1f4 	ldrsh.w	ip, [r4, #500]	; 0x1f4
 8002500:	459c      	cmp	ip, r3
 8002502:	dd03      	ble.n	800250c <VL53L1_GetMultiRangingData+0x3c0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002504:	b112      	cbz	r2, 800250c <VL53L1_GetMultiRangingData+0x3c0>
					AddOffset =
 8002506:	f9b4 320c 	ldrsh.w	r3, [r4, #524]	; 0x20c
		if (uwr_status) {
 800250a:	e75f      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800250c:	4240      	negs	r0, r0
 800250e:	4283      	cmp	r3, r0
 8002510:	da08      	bge.n	8002524 <VL53L1_GetMultiRangingData+0x3d8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002512:	f9b4 01f4 	ldrsh.w	r0, [r4, #500]	; 0x1f4
 8002516:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002518:	4283      	cmp	r3, r0
 800251a:	dd03      	ble.n	8002524 <VL53L1_GetMultiRangingData+0x3d8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800251c:	b912      	cbnz	r2, 8002524 <VL53L1_GetMultiRangingData+0x3d8>
					AddOffset =
 800251e:	f9b4 320a 	ldrsh.w	r3, [r4, #522]	; 0x20a
		if (uwr_status) {
 8002522:	e753      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002524:	f9b4 01f6 	ldrsh.w	r0, [r4, #502]	; 0x1f6
 8002528:	4283      	cmp	r3, r0
 800252a:	dd07      	ble.n	800253c <VL53L1_GetMultiRangingData+0x3f0>
 800252c:	f9b4 c1f8 	ldrsh.w	ip, [r4, #504]	; 0x1f8
 8002530:	459c      	cmp	ip, r3
 8002532:	dd03      	ble.n	800253c <VL53L1_GetMultiRangingData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002534:	b912      	cbnz	r2, 800253c <VL53L1_GetMultiRangingData+0x3f0>
					AddOffset =
 8002536:	f9b4 320e 	ldrsh.w	r3, [r4, #526]	; 0x20e
		if (uwr_status) {
 800253a:	e747      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800253c:	4240      	negs	r0, r0
 800253e:	4283      	cmp	r3, r0
 8002540:	da08      	bge.n	8002554 <VL53L1_GetMultiRangingData+0x408>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002542:	f9b4 01f8 	ldrsh.w	r0, [r4, #504]	; 0x1f8
 8002546:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002548:	4283      	cmp	r3, r0
 800254a:	dd03      	ble.n	8002554 <VL53L1_GetMultiRangingData+0x408>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800254c:	b112      	cbz	r2, 8002554 <VL53L1_GetMultiRangingData+0x408>
					AddOffset =
 800254e:	f9b4 3210 	ldrsh.w	r3, [r4, #528]	; 0x210
		if (uwr_status) {
 8002552:	e73b      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002554:	f9b4 01fc 	ldrsh.w	r0, [r4, #508]	; 0x1fc
 8002558:	4298      	cmp	r0, r3
 800255a:	dd06      	ble.n	800256a <VL53L1_GetMultiRangingData+0x41e>
 800255c:	f9b4 01fa 	ldrsh.w	r0, [r4, #506]	; 0x1fa
 8002560:	4298      	cmp	r0, r3
 8002562:	da02      	bge.n	800256a <VL53L1_GetMultiRangingData+0x41e>
					AddOffset =
 8002564:	f9b4 3212 	ldrsh.w	r3, [r4, #530]	; 0x212
		if (uwr_status) {
 8002568:	e730      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 800256a:	f9b4 01fe 	ldrsh.w	r0, [r4, #510]	; 0x1fe
 800256e:	4283      	cmp	r3, r0
 8002570:	dd0e      	ble.n	8002590 <VL53L1_GetMultiRangingData+0x444>
 8002572:	f9b4 c200 	ldrsh.w	ip, [r4, #512]	; 0x200
 8002576:	459c      	cmp	ip, r3
 8002578:	dd0a      	ble.n	8002590 <VL53L1_GetMultiRangingData+0x444>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 800257a:	b14a      	cbz	r2, 8002590 <VL53L1_GetMultiRangingData+0x444>
					AddOffset =
 800257c:	f9b4 3218 	ldrsh.w	r3, [r4, #536]	; 0x218
		if (uwr_status) {
 8002580:	e724      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
 8002582:	bf00      	nop
 8002584:	0800dea0 	.word	0x0800dea0
 8002588:	20000004 	.word	0x20000004
 800258c:	ffffdee8 	.word	0xffffdee8
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8002590:	4240      	negs	r0, r0
 8002592:	4283      	cmp	r3, r0
 8002594:	f6bf af2b 	bge.w	80023ee <VL53L1_GetMultiRangingData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8002598:	f9b4 0200 	ldrsh.w	r0, [r4, #512]	; 0x200
 800259c:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 800259e:	4283      	cmp	r3, r0
 80025a0:	f77f af25 	ble.w	80023ee <VL53L1_GetMultiRangingData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 80025a4:	2a00      	cmp	r2, #0
 80025a6:	f47f af22 	bne.w	80023ee <VL53L1_GetMultiRangingData+0x2a2>
					AddOffset =
 80025aa:	f9b4 3216 	ldrsh.w	r3, [r4, #534]	; 0x216
		if (uwr_status) {
 80025ae:	e70d      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80025b0:	f9b4 021a 	ldrsh.w	r0, [r4, #538]	; 0x21a
 80025b4:	4283      	cmp	r3, r0
 80025b6:	dd07      	ble.n	80025c8 <VL53L1_GetMultiRangingData+0x47c>
 80025b8:	f9b4 c21c 	ldrsh.w	ip, [r4, #540]	; 0x21c
 80025bc:	459c      	cmp	ip, r3
 80025be:	dd03      	ble.n	80025c8 <VL53L1_GetMultiRangingData+0x47c>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80025c0:	b912      	cbnz	r2, 80025c8 <VL53L1_GetMultiRangingData+0x47c>
					AddOffset =
 80025c2:	f9b4 322e 	ldrsh.w	r3, [r4, #558]	; 0x22e
		if (uwr_status) {
 80025c6:	e701      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80025c8:	4240      	negs	r0, r0
 80025ca:	4283      	cmp	r3, r0
 80025cc:	da08      	bge.n	80025e0 <VL53L1_GetMultiRangingData+0x494>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80025ce:	f9b4 021c 	ldrsh.w	r0, [r4, #540]	; 0x21c
 80025d2:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80025d4:	4283      	cmp	r3, r0
 80025d6:	dd03      	ble.n	80025e0 <VL53L1_GetMultiRangingData+0x494>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80025d8:	b112      	cbz	r2, 80025e0 <VL53L1_GetMultiRangingData+0x494>
					AddOffset =
 80025da:	f9b4 3230 	ldrsh.w	r3, [r4, #560]	; 0x230
		if (uwr_status) {
 80025de:	e6f5      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80025e0:	f9b4 021e 	ldrsh.w	r0, [r4, #542]	; 0x21e
 80025e4:	4283      	cmp	r3, r0
 80025e6:	dd07      	ble.n	80025f8 <VL53L1_GetMultiRangingData+0x4ac>
 80025e8:	f9b4 c220 	ldrsh.w	ip, [r4, #544]	; 0x220
 80025ec:	459c      	cmp	ip, r3
 80025ee:	dd03      	ble.n	80025f8 <VL53L1_GetMultiRangingData+0x4ac>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80025f0:	b112      	cbz	r2, 80025f8 <VL53L1_GetMultiRangingData+0x4ac>
					AddOffset =
 80025f2:	f9b4 3234 	ldrsh.w	r3, [r4, #564]	; 0x234
		if (uwr_status) {
 80025f6:	e6e9      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80025f8:	4240      	negs	r0, r0
 80025fa:	4283      	cmp	r3, r0
 80025fc:	da08      	bge.n	8002610 <VL53L1_GetMultiRangingData+0x4c4>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80025fe:	f9b4 0220 	ldrsh.w	r0, [r4, #544]	; 0x220
 8002602:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8002604:	4283      	cmp	r3, r0
 8002606:	dd03      	ble.n	8002610 <VL53L1_GetMultiRangingData+0x4c4>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8002608:	b912      	cbnz	r2, 8002610 <VL53L1_GetMultiRangingData+0x4c4>
					AddOffset =
 800260a:	f9b4 3232 	ldrsh.w	r3, [r4, #562]	; 0x232
		if (uwr_status) {
 800260e:	e6dd      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8002610:	f9b4 0224 	ldrsh.w	r0, [r4, #548]	; 0x224
 8002614:	4298      	cmp	r0, r3
 8002616:	dd06      	ble.n	8002626 <VL53L1_GetMultiRangingData+0x4da>
 8002618:	f9b4 0222 	ldrsh.w	r0, [r4, #546]	; 0x222
 800261c:	4298      	cmp	r0, r3
 800261e:	da02      	bge.n	8002626 <VL53L1_GetMultiRangingData+0x4da>
					AddOffset =
 8002620:	f9b4 3236 	ldrsh.w	r3, [r4, #566]	; 0x236
		if (uwr_status) {
 8002624:	e6d2      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8002626:	f9b4 0226 	ldrsh.w	r0, [r4, #550]	; 0x226
 800262a:	4283      	cmp	r3, r0
 800262c:	dd07      	ble.n	800263e <VL53L1_GetMultiRangingData+0x4f2>
 800262e:	f9b4 c228 	ldrsh.w	ip, [r4, #552]	; 0x228
 8002632:	459c      	cmp	ip, r3
 8002634:	dd03      	ble.n	800263e <VL53L1_GetMultiRangingData+0x4f2>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8002636:	b112      	cbz	r2, 800263e <VL53L1_GetMultiRangingData+0x4f2>
					AddOffset =
 8002638:	f9b4 323c 	ldrsh.w	r3, [r4, #572]	; 0x23c
		if (uwr_status) {
 800263c:	e6c6      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 800263e:	4240      	negs	r0, r0
 8002640:	4283      	cmp	r3, r0
 8002642:	f6bf aed4 	bge.w	80023ee <VL53L1_GetMultiRangingData+0x2a2>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8002646:	f9b4 0228 	ldrsh.w	r0, [r4, #552]	; 0x228
 800264a:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 800264c:	4283      	cmp	r3, r0
 800264e:	f77f aece 	ble.w	80023ee <VL53L1_GetMultiRangingData+0x2a2>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8002652:	2a00      	cmp	r2, #0
 8002654:	f47f aecb 	bne.w	80023ee <VL53L1_GetMultiRangingData+0x2a2>
					AddOffset =
 8002658:	f9b4 323a 	ldrsh.w	r3, [r4, #570]	; 0x23a
		if (uwr_status) {
 800265c:	e6b6      	b.n	80023cc <VL53L1_GetMultiRangingData+0x280>
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800265e:	9d01      	ldr	r5, [sp, #4]
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002660:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002664:	3501      	adds	r5, #1
 8002666:	b2ed      	uxtb	r5, r5
		pdev->PreviousRangeStatus[i] = 255;
 8002668:	f803 0c04 	strb.w	r0, [r3, #-4]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800266c:	9501      	str	r5, [sp, #4]
		pdev->PreviousExtendedRange[i] = 0;
 800266e:	f803 2b01 	strb.w	r2, [r3], #1
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002672:	e6ef      	b.n	8002454 <VL53L1_GetMultiRangingData+0x308>
	switch (RangeStatus) {
 8002674:	2bff      	cmp	r3, #255	; 0xff
 8002676:	f43f af02 	beq.w	800247e <VL53L1_GetMultiRangingData+0x332>
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <VL53L1_GetMultiRangingData+0x578>)
		CheckAndChangeDistanceMode(Dev, pRangeData,
 800267c:	f9b8 000c 	ldrsh.w	r0, [r8, #12]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8002680:	6911      	ldr	r1, [r2, #16]
 8002682:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	; 0x4d4
 8002686:	4291      	cmp	r1, r2
 8002688:	dc13      	bgt.n	80026b2 <VL53L1_GetMultiRangingData+0x566>
		DmaxValid = 0;
 800268a:	1e05      	subs	r5, r0, #0
 800268c:	bf18      	it	ne
 800268e:	2501      	movne	r5, #1
	DistanceMode = VL53L1DevDataGet(Dev,
 8002690:	f642 61c6 	movw	r1, #11974	; 0x2ec6
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8002694:	f106 027e 	add.w	r2, r6, #126	; 0x7e
	DistanceMode = VL53L1DevDataGet(Dev,
 8002698:	5c61      	ldrb	r1, [r4, r1]
	*pNewDistanceMode = DistanceMode;
 800269a:	f886 107e 	strb.w	r1, [r6, #126]	; 0x7e
	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 800269e:	b953      	cbnz	r3, 80026b6 <VL53L1_GetMultiRangingData+0x56a>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 80026a0:	9802      	ldr	r0, [sp, #8]
 80026a2:	231c      	movs	r3, #28
 80026a4:	fb03 6600 	mla	r6, r3, r0, r6
 80026a8:	f9b6 001c 	ldrsh.w	r0, [r6, #28]
			GenNewPresetMode(Ambient100DmaxMm,
 80026ac:	f7ff fa5a 	bl	8001b64 <GenNewPresetMode>
 80026b0:	e6e5      	b.n	800247e <VL53L1_GetMultiRangingData+0x332>
		DmaxValid = 0;
 80026b2:	2500      	movs	r5, #0
 80026b4:	e7ec      	b.n	8002690 <VL53L1_GetMultiRangingData+0x544>
		if (DmaxValid)
 80026b6:	2d00      	cmp	r5, #0
 80026b8:	d1f8      	bne.n	80026ac <VL53L1_GetMultiRangingData+0x560>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 80026ba:	2303      	movs	r3, #3
 80026bc:	f886 307e 	strb.w	r3, [r6, #126]	; 0x7e
 80026c0:	e6dd      	b.n	800247e <VL53L1_GetMultiRangingData+0x332>
 80026c2:	bf00      	nop
 80026c4:	20000004 	.word	0x20000004

080026c8 <VL53L1_SmudgeCorrectionEnable>:
	return Status;
}

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	4605      	mov	r5, r0
 80026cc:	2903      	cmp	r1, #3
 80026ce:	d82a      	bhi.n	8002726 <VL53L1_SmudgeCorrectionEnable+0x5e>
 80026d0:	e8df f001 	tbb	[pc, r1]
 80026d4:	21140902 	.word	0x21140902

	LOG_FUNCTION_START("");

	switch (Mode) {
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 80026d8:	f002 f8e7 	bl	80048aa <VL53L1_dynamic_xtalk_correction_disable>
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
		break;
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80026dc:	4606      	mov	r6, r0
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 80026de:	4628      	mov	r0, r5
 80026e0:	f002 f8ee 	bl	80048c0 <VL53L1_dynamic_xtalk_correction_apply_disable>
 80026e4:	e005      	b.n	80026f2 <VL53L1_SmudgeCorrectionEnable+0x2a>
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80026e6:	f002 f8da 	bl	800489e <VL53L1_dynamic_xtalk_correction_enable>
 80026ea:	4606      	mov	r6, r0
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 80026ec:	4628      	mov	r0, r5
 80026ee:	f002 f8e1 	bl	80048b4 <VL53L1_dynamic_xtalk_correction_apply_enable>
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 80026f2:	4604      	mov	r4, r0
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80026f4:	4628      	mov	r0, r5
 80026f6:	f002 f8ef 	bl	80048d8 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
		break;
 80026fa:	e009      	b.n	8002710 <VL53L1_SmudgeCorrectionEnable+0x48>
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80026fc:	f002 f8cf 	bl	800489e <VL53L1_dynamic_xtalk_correction_enable>
 8002700:	4606      	mov	r6, r0
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8002702:	4628      	mov	r0, r5
 8002704:	f002 f8d6 	bl	80048b4 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8002708:	4604      	mov	r4, r0
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 800270a:	4628      	mov	r0, r5
 800270c:	f002 f8de 	bl	80048cc <VL53L1_dynamic_xtalk_correction_single_apply_enable>
		break;
	}

	if (Status == VL53L1_ERROR_NONE) {
		Status = s1;
		if (Status == VL53L1_ERROR_NONE)
 8002710:	b126      	cbz	r6, 800271c <VL53L1_SmudgeCorrectionEnable+0x54>
 8002712:	4634      	mov	r4, r6
		if (Status == VL53L1_ERROR_NONE)
			Status = s3;
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002714:	e005      	b.n	8002722 <VL53L1_SmudgeCorrectionEnable+0x5a>
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8002716:	f002 f8c2 	bl	800489e <VL53L1_dynamic_xtalk_correction_enable>
 800271a:	e7df      	b.n	80026dc <VL53L1_SmudgeCorrectionEnable+0x14>
		if (Status == VL53L1_ERROR_NONE)
 800271c:	2c00      	cmp	r4, #0
 800271e:	bf08      	it	eq
 8002720:	4604      	moveq	r4, r0
}
 8002722:	4620      	mov	r0, r4
 8002724:	bd70      	pop	{r4, r5, r6, pc}
		if (Status == VL53L1_ERROR_NONE)
 8002726:	f06f 0403 	mvn.w	r4, #3
 800272a:	e7fa      	b.n	8002722 <VL53L1_SmudgeCorrectionEnable+0x5a>

0800272c <VL53L1_StaticInit>:
{
 800272c:	b538      	push	{r3, r4, r5, lr}
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800272e:	f500 533b 	add.w	r3, r0, #11968	; 0x2ec0
 8002732:	2203      	movs	r2, #3
 8002734:	701a      	strb	r2, [r3, #0]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8002736:	2320      	movs	r3, #32
 8002738:	70c3      	strb	r3, [r0, #3]
	Status = VL53L1_SetPresetMode(Dev,
 800273a:	2101      	movs	r1, #1
{
 800273c:	4604      	mov	r4, r0
	Status = VL53L1_SetPresetMode(Dev,
 800273e:	f7ff fb29 	bl	8001d94 <VL53L1_SetPresetMode>
	VL53L1_SetDistanceMode(Dev,
 8002742:	2102      	movs	r1, #2
	Status = VL53L1_SetPresetMode(Dev,
 8002744:	4605      	mov	r5, r0
	VL53L1_SetDistanceMode(Dev,
 8002746:	4620      	mov	r0, r4
 8002748:	f7ff fa58 	bl	8001bfc <VL53L1_SetDistanceMode>
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 800274c:	f642 63c5 	movw	r3, #11973	; 0x2ec5
 8002750:	2201      	movs	r2, #1
 8002752:	54e2      	strb	r2, [r4, r3]
	VL53L1_SmudgeCorrectionEnable(Dev,
 8002754:	2100      	movs	r1, #0
 8002756:	4620      	mov	r0, r4
 8002758:	f7ff ffb6 	bl	80026c8 <VL53L1_SmudgeCorrectionEnable>
}
 800275c:	4628      	mov	r0, r5
 800275e:	bd38      	pop	{r3, r4, r5, pc}

08002760 <VL53L1_set_inter_measurement_period_ms>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8002760:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8002764:	5ac3      	ldrh	r3, [r0, r3]
 8002766:	b12b      	cbz	r3, 8002774 <VL53L1_set_inter_measurement_period_ms+0x14>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8002768:	6141      	str	r1, [r0, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
 800276a:	4359      	muls	r1, r3
		pdev->tim_cfg.system__intermeasurement_period =
 800276c:	f8c0 13b0 	str.w	r1, [r0, #944]	; 0x3b0
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002770:	2000      	movs	r0, #0
 8002772:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8002774:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002778:	4770      	bx	lr

0800277a <VL53L1_get_inter_measurement_period_ms>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800277a:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800277e:	5ac2      	ldrh	r2, [r0, r3]
 8002780:	b132      	cbz	r2, 8002790 <VL53L1_get_inter_measurement_period_ms+0x16>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE)
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8002782:	f8d0 33b0 	ldr.w	r3, [r0, #944]	; 0x3b0
 8002786:	fbb3 f3f2 	udiv	r3, r3, r2
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800278a:	2000      	movs	r0, #0
		*pinter_measurement_period_ms =
 800278c:	600b      	str	r3, [r1, #0]
 800278e:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8002790:	f06f 000e 	mvn.w	r0, #14


	LOG_FUNCTION_END(status);

	return status;
}
 8002794:	4770      	bx	lr

08002796 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8002796:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002798:	4604      	mov	r4, r0
 800279a:	4608      	mov	r0, r1
 800279c:	4611      	mov	r1, r2
 800279e:	461a      	mov	r2, r3
	VL53L1_LLDriverData_t *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80027a0:	f8b4 334a 	ldrh.w	r3, [r4, #842]	; 0x34a
 80027a4:	b163      	cbz	r3, 80027c0 <VL53L1_set_timeouts_us+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80027a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80027aa:	6122      	str	r2, [r4, #16]

		status =
		VL53L1_calc_timeout_register_values(
 80027ac:	f504 7568 	add.w	r5, r4, #928	; 0x3a0
 80027b0:	f204 348a 	addw	r4, r4, #906	; 0x38a
 80027b4:	9501      	str	r5, [sp, #4]
 80027b6:	9400      	str	r4, [sp, #0]
 80027b8:	f003 fcef 	bl	800619a <VL53L1_calc_timeout_register_values>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80027bc:	b003      	add	sp, #12
 80027be:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80027c0:	f06f 000e 	mvn.w	r0, #14
 80027c4:	e7fa      	b.n	80027bc <VL53L1_set_timeouts_us+0x26>

080027c6 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80027c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027c8:	4604      	mov	r4, r0
	uint32_t  macro_period_us = 0;
	uint16_t  timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80027ca:	f8b0 034a 	ldrh.w	r0, [r0, #842]	; 0x34a
{
 80027ce:	460f      	mov	r7, r1
 80027d0:	4616      	mov	r6, r2
 80027d2:	461d      	mov	r5, r3
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80027d4:	b348      	cbz	r0, 800282a <VL53L1_get_timeouts_us+0x64>

	if (status == VL53L1_ERROR_NONE) {


		macro_period_us =
			VL53L1_calc_macro_period_us(
 80027d6:	f894 13a6 	ldrb.w	r1, [r4, #934]	; 0x3a6
 80027da:	f003 fc70 	bl	80060be <VL53L1_calc_macro_period_us>
 80027de:	4601      	mov	r1, r0
			pdev->tim_cfg.range_config__vcsel_period_a);



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
 80027e0:	9001      	str	r0, [sp, #4]
 80027e2:	f894 0391 	ldrb.w	r0, [r4, #913]	; 0x391
 80027e6:	f003 fca3 	bl	8006130 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 80027ea:	6038      	str	r0, [r7, #0]
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
			macro_period_us);



		timeout_encoded =
 80027ec:	f894 33a0 	ldrb.w	r3, [r4, #928]	; 0x3a0
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80027f0:	f894 03a1 	ldrb.w	r0, [r4, #929]	; 0x3a1

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80027f4:	9901      	ldr	r1, [sp, #4]
		timeout_encoded = (timeout_encoded << 8) +
 80027f6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 80027fa:	b280      	uxth	r0, r0
 80027fc:	f003 fcc1 	bl	8006182 <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8002800:	6030      	str	r0, [r6, #0]
				timeout_encoded,
				macro_period_us);



		timeout_encoded =
 8002802:	f894 33a4 	ldrb.w	r3, [r4, #932]	; 0x3a4
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8002806:	f894 03a5 	ldrb.w	r0, [r4, #933]	; 0x3a5

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800280a:	9901      	ldr	r1, [sp, #4]
		timeout_encoded = (timeout_encoded << 8) +
 800280c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 8002810:	b280      	uxth	r0, r0
 8002812:	f003 fcb6 	bl	8006182 <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 8002816:	6028      	str	r0, [r5, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800281c:	6833      	ldr	r3, [r6, #0]
 800281e:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8002820:	682b      	ldr	r3, [r5, #0]
 8002822:	6123      	str	r3, [r4, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002824:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002826:	b003      	add	sp, #12
 8002828:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800282a:	f06f 000e 	mvn.w	r0, #14
 800282e:	e7fa      	b.n	8002826 <VL53L1_get_timeouts_us+0x60>

08002830 <VL53L1_get_sequence_config_bit>:
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8002830:	2907      	cmp	r1, #7
 8002832:	d80e      	bhi.n	8002852 <VL53L1_get_sequence_config_bit+0x22>

		if (bit_id > 0)
 8002834:	2301      	movs	r3, #1
 8002836:	b109      	cbz	r1, 800283c <VL53L1_get_sequence_config_bit+0xc>
			bit_mask  = 0x01 << bit_id;
 8002838:	408b      	lsls	r3, r1
 800283a:	b2db      	uxtb	r3, r3

		*pvalue =
 800283c:	f890 03c9 	ldrb.w	r0, [r0, #969]	; 0x3c9
 8002840:	4018      	ands	r0, r3
			pdev->dyn_cfg.system__sequence_config & bit_mask;

		if (bit_id > 0)
 8002842:	b911      	cbnz	r1, 800284a <VL53L1_get_sequence_config_bit+0x1a>
		*pvalue =
 8002844:	7010      	strb	r0, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002846:	2000      	movs	r0, #0
 8002848:	4770      	bx	lr
			*pvalue  = *pvalue >> bit_id;
 800284a:	fa40 f101 	asr.w	r1, r0, r1
 800284e:	7011      	strb	r1, [r2, #0]
 8002850:	e7f9      	b.n	8002846 <VL53L1_get_sequence_config_bit+0x16>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8002852:	f06f 0003 	mvn.w	r0, #3
	}

	return status;
}
 8002856:	4770      	bx	lr

08002858 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8002858:	b538      	push	{r3, r4, r5, lr}
 800285a:	460c      	mov	r4, r1
 800285c:	4605      	mov	r5, r0
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 800285e:	f200 32c7 	addw	r2, r0, #967	; 0x3c7
 8002862:	7809      	ldrb	r1, [r1, #0]
 8002864:	7860      	ldrb	r0, [r4, #1]
 8002866:	f003 ff75 	bl	8006754 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 800286a:	78a0      	ldrb	r0, [r4, #2]
 800286c:	78e1      	ldrb	r1, [r4, #3]
 800286e:	f505 7272 	add.w	r2, r5, #968	; 0x3c8
 8002872:	f003 ff7b 	bl	800676c <VL53L1_encode_zone_size>


	LOG_FUNCTION_END(status);

	return status;
}
 8002876:	2000      	movs	r0, #0
 8002878:	bd38      	pop	{r3, r4, r5, pc}

0800287a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800287a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800287c:	460c      	mov	r4, r1


	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  x       = 0;
 800287e:	2600      	movs	r6, #0
{
 8002880:	4605      	mov	r5, r0
	uint8_t  xy_size = 0;

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8002882:	f10d 0206 	add.w	r2, sp, #6
 8002886:	f890 042e 	ldrb.w	r0, [r0, #1070]	; 0x42e
	uint8_t  x       = 0;
 800288a:	f88d 6006 	strb.w	r6, [sp, #6]
	VL53L1_decode_row_col(
 800288e:	f10d 0107 	add.w	r1, sp, #7
	uint8_t  y       = 0;
 8002892:	f88d 6007 	strb.w	r6, [sp, #7]
	VL53L1_decode_row_col(
 8002896:	f005 f875 	bl	8007984 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800289a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800289e:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 80028a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028a4:	7063      	strb	r3, [r4, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 80028a6:	f895 342f 	ldrb.w	r3, [r5, #1071]	; 0x42f
	pmm_roi->width  = xy_size & 0x0F;

	LOG_FUNCTION_END(status);

	return status;
}
 80028aa:	4630      	mov	r0, r6
	pmm_roi->height = xy_size >> 4;
 80028ac:	091a      	lsrs	r2, r3, #4
	pmm_roi->width  = xy_size & 0x0F;
 80028ae:	f003 030f 	and.w	r3, r3, #15
	pmm_roi->height = xy_size >> 4;
 80028b2:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80028b4:	70a3      	strb	r3, [r4, #2]
}
 80028b6:	b002      	add	sp, #8
 80028b8:	bd70      	pop	{r4, r5, r6, pc}

080028ba <VL53L1_read_p2p_data>:
{
 80028ba:	b5f0      	push	{r4, r5, r6, r7, lr}
		status = VL53L1_get_static_nvm_managed(
 80028bc:	f500 7151 	add.w	r1, r0, #836	; 0x344
{
 80028c0:	b089      	sub	sp, #36	; 0x24
 80028c2:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 80028c4:	f006 fc70 	bl	80091a8 <VL53L1_get_static_nvm_managed>
	if (status == VL53L1_ERROR_NONE)
 80028c8:	4605      	mov	r5, r0
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d17d      	bne.n	80029ca <VL53L1_read_p2p_data+0x110>
		status = VL53L1_get_customer_nvm_managed(
 80028ce:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80028d2:	4620      	mov	r0, r4
 80028d4:	f006 fd15 	bl	8009302 <VL53L1_get_customer_nvm_managed>
	if (status == VL53L1_ERROR_NONE) {
 80028d8:	4605      	mov	r5, r0
 80028da:	2800      	cmp	r0, #0
 80028dc:	d175      	bne.n	80029ca <VL53L1_read_p2p_data+0x110>
		status = VL53L1_get_nvm_copy_data(
 80028de:	f204 37fe 	addw	r7, r4, #1022	; 0x3fe
 80028e2:	4639      	mov	r1, r7
 80028e4:	4620      	mov	r0, r4
 80028e6:	f007 f8b5 	bl	8009a54 <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 80028ea:	4605      	mov	r5, r0
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d16c      	bne.n	80029ca <VL53L1_read_p2p_data+0x110>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80028f0:	f504 7611 	add.w	r6, r4, #580	; 0x244
 80028f4:	4631      	mov	r1, r6
 80028f6:	4638      	mov	r0, r7
 80028f8:	f003 fa5f 	bl	8005dba <VL53L1_copy_rtn_good_spads_to_buffer>
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 80028fc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002900:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8002904:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 8002908:	f8a4 32b0 	strh.w	r3, [r4, #688]	; 0x2b0
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800290c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8002910:	f8a4 32b2 	strh.w	r3, [r4, #690]	; 0x2b2
			VL53L1_read_nvm_optical_centre(
 8002914:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 8002918:	4620      	mov	r0, r4
 800291a:	f006 fba5 	bl	8009068 <VL53L1_read_nvm_optical_centre>
	if (status == VL53L1_ERROR_NONE)
 800291e:	4605      	mov	r5, r0
 8002920:	2800      	cmp	r0, #0
 8002922:	d152      	bne.n	80029ca <VL53L1_read_p2p_data+0x110>
			VL53L1_read_nvm_cal_peak_rate_map(
 8002924:	f104 0160 	add.w	r1, r4, #96	; 0x60
 8002928:	4620      	mov	r0, r4
 800292a:	f006 fbb4 	bl	8009096 <VL53L1_read_nvm_cal_peak_rate_map>
	if (status == VL53L1_ERROR_NONE) {
 800292e:	4605      	mov	r5, r0
 8002930:	2800      	cmp	r0, #0
 8002932:	d14a      	bne.n	80029ca <VL53L1_read_p2p_data+0x110>
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8002934:	f104 079c 	add.w	r7, r4, #156	; 0x9c
			VL53L1_read_nvm_additional_offset_cal_data(
 8002938:	4639      	mov	r1, r7
 800293a:	4620      	mov	r0, r4
 800293c:	f006 fbbb 	bl	80090b6 <VL53L1_read_nvm_additional_offset_cal_data>
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8002940:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
			VL53L1_read_nvm_additional_offset_cal_data(
 8002944:	4605      	mov	r5, r0
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8002946:	b9c3      	cbnz	r3, 800297a <VL53L1_read_p2p_data+0xc0>
 8002948:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 800294c:	b9ab      	cbnz	r3, 800297a <VL53L1_read_p2p_data+0xc0>
					= 0x0080;
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
					= 0x0180;
 8002954:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002958:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			VL53L1_calc_mm_effective_spads(
 800295c:	f104 039e 	add.w	r3, r4, #158	; 0x9e
 8002960:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8002964:	2338      	movs	r3, #56	; 0x38
 8002966:	e9cd 6300 	strd	r6, r3, [sp]
 800296a:	f894 142f 	ldrb.w	r1, [r4, #1071]	; 0x42f
 800296e:	f894 042e 	ldrb.w	r0, [r4, #1070]	; 0x42e
 8002972:	23ff      	movs	r3, #255	; 0xff
 8002974:	22c7      	movs	r2, #199	; 0xc7
 8002976:	f003 ff90 	bl	800689a <VL53L1_calc_mm_effective_spads>
	if (status == VL53L1_ERROR_NONE) {
 800297a:	bb35      	cbnz	r5, 80029ca <VL53L1_read_p2p_data+0x110>
			VL53L1_read_nvm_fmt_range_results_data(
 800297c:	aa04      	add	r2, sp, #16
 800297e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002982:	4620      	mov	r0, r4
 8002984:	f006 fba6 	bl	80090d4 <VL53L1_read_nvm_fmt_range_results_data>
		if (status == VL53L1_ERROR_NONE) {
 8002988:	4605      	mov	r5, r0
 800298a:	b9f0      	cbnz	r0, 80029ca <VL53L1_read_p2p_data+0x110>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 800298c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002990:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8002994:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8002998:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
 800299c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80029a0:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 80029a4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80029a8:	2b00      	cmp	r3, #0
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80029aa:	bf08      	it	eq
 80029ac:	2314      	moveq	r3, #20
 80029ae:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			VL53L1_RdWord(
 80029b2:	f504 529e 	add.w	r2, r4, #5056	; 0x13c0
			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80029b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ba:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			VL53L1_RdWord(
 80029be:	3210      	adds	r2, #16
 80029c0:	21de      	movs	r1, #222	; 0xde
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7fe fe24 	bl	8001610 <VL53L1_RdWord>
 80029c8:	4605      	mov	r5, r0
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80029ca:	f8b4 334a 	ldrh.w	r3, [r4, #842]	; 0x34a
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80029d2:	bf3c      	itt	cc
 80029d4:	f64b 43cc 	movwcc	r3, #48332	; 0xbccc
 80029d8:	f8a4 334a 	strhcc.w	r3, [r4, #842]	; 0x34a
	if (status == VL53L1_ERROR_NONE)
 80029dc:	b92d      	cbnz	r5, 80029ea <VL53L1_read_p2p_data+0x130>
			VL53L1_get_mode_mitigation_roi(
 80029de:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
 80029e2:	4620      	mov	r0, r4
 80029e4:	f7ff ff49 	bl	800287a <VL53L1_get_mode_mitigation_roi>
 80029e8:	4605      	mov	r5, r0
	if (pdev->optical_centre.x_centre == 0 &&
 80029ea:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
 80029ee:	b94b      	cbnz	r3, 8002a04 <VL53L1_read_p2p_data+0x14a>
				pdev->mm_roi.x_centre << 4;
 80029f0:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80029f4:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 80029f6:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
				pdev->mm_roi.y_centre << 4;
 80029fa:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 80029fe:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 8002a00:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
}
 8002a04:	4628      	mov	r0, r5
 8002a06:	b009      	add	sp, #36	; 0x24
 8002a08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a0a <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8002a0a:	b538      	push	{r3, r4, r5, lr}
 8002a0c:	460d      	mov	r5, r1
 8002a0e:	4604      	mov	r4, r0
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8002a10:	2264      	movs	r2, #100	; 0x64
 8002a12:	311c      	adds	r1, #28
 8002a14:	30de      	adds	r0, #222	; 0xde
 8002a16:	f008 fc73 	bl	800b300 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8002a1a:	782b      	ldrb	r3, [r5, #0]
 8002a1c:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8002a20:	786b      	ldrb	r3, [r5, #1]
 8002a22:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8002a26:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
 8002a2a:	f007 fa62 	bl	8009ef2 <VL53L1_init_zone_config_histogram_bins>



	if (pzone_cfg->active_zones == 0)
 8002a2e:	786b      	ldrb	r3, [r5, #1]
 8002a30:	b913      	cbnz	r3, 8002a38 <VL53L1_set_zone_config+0x2e>
		pdev->gen_cfg.global_config__stream_divider = 0;
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
	else
		pdev->gen_cfg.global_config__stream_divider =
 8002a32:	f884 338b 	strb.w	r3, [r4, #907]	; 0x38b

	LOG_FUNCTION_END(status);

	return status;

}
 8002a36:	bd38      	pop	{r3, r4, r5, pc}
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8002a38:	2b18      	cmp	r3, #24
				pzone_cfg->active_zones + 1;
 8002a3a:	bf94      	ite	ls
 8002a3c:	3301      	addls	r3, #1
		pdev->gen_cfg.global_config__stream_divider =
 8002a3e:	231a      	movhi	r3, #26
 8002a40:	e7f7      	b.n	8002a32 <VL53L1_set_zone_config+0x28>

08002a42 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8002a42:	b508      	push	{r3, lr}
 8002a44:	460b      	mov	r3, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8002a46:	229a      	movs	r2, #154	; 0x9a
 8002a48:	f100 01c2 	add.w	r1, r0, #194	; 0xc2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f008 fc57 	bl	800b300 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
}
 8002a52:	2000      	movs	r0, #0
 8002a54:	bd08      	pop	{r3, pc}

08002a56 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8002a56:	b530      	push	{r4, r5, lr}
 8002a58:	3901      	subs	r1, #1
 8002a5a:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 8002a5e:	2926      	cmp	r1, #38	; 0x26
 8002a60:	d86e      	bhi.n	8002b40 <VL53L1_get_preset_mode_timing_cfg+0xea>
 8002a62:	e8df f001 	tbb	[pc, r1]
 8002a66:	1414      	.short	0x1414
 8002a68:	22141414 	.word	0x22141414
 8002a6c:	6d6d2222 	.word	0x6d6d2222
 8002a70:	6d3a5e3a 	.word	0x6d3a5e3a
 8002a74:	22146d6d 	.word	0x22146d6d
 8002a78:	3a3a3a3a 	.word	0x3a3a3a3a
 8002a7c:	5852463a 	.word	0x5852463a
 8002a80:	643a3a3a 	.word	0x643a3a3a
 8002a84:	5e5e6464 	.word	0x5e5e6464
 8002a88:	2e2e2e5e 	.word	0x2e2e2e5e
 8002a8c:	6a          	.byte	0x6a
 8002a8d:	00          	.byte	0x00
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8002a8e:	f8b0 1188 	ldrh.w	r1, [r0, #392]	; 0x188
		*pdss_config__target_total_rate_mcps =
 8002a92:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8002a94:	f8d0 2194 	ldr.w	r2, [r0, #404]	; 0x194
		*pphasecal_config_timeout_us =
 8002a98:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8002a9a:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
		*pmm_config_timeout_us =
 8002a9e:	602b      	str	r3, [r5, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8002aa0:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
		*prange_config_timeout_us =
 8002aa4:	6023      	str	r3, [r4, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002aa6:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002aa8:	bd30      	pop	{r4, r5, pc}
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8002aaa:	f8b0 118e 	ldrh.w	r1, [r0, #398]	; 0x18e
		*pdss_config__target_total_rate_mcps =
 8002aae:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8002ab0:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
		*pphasecal_config_timeout_us =
 8002ab4:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8002ab6:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
		*pmm_config_timeout_us =
 8002aba:	602b      	str	r3, [r5, #0]
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8002abc:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
 8002ac0:	e7f0      	b.n	8002aa4 <VL53L1_get_preset_mode_timing_cfg+0x4e>
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8002ac2:	f8b0 118e 	ldrh.w	r1, [r0, #398]	; 0x18e
		*pdss_config__target_total_rate_mcps =
 8002ac6:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8002ac8:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
		*pphasecal_config_timeout_us =
 8002acc:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8002ace:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
		*pmm_config_timeout_us =
 8002ad2:	602b      	str	r3, [r5, #0]
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8002ad4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 8002ad8:	e7e4      	b.n	8002aa4 <VL53L1_get_preset_mode_timing_cfg+0x4e>
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8002ada:	f8b0 118a 	ldrh.w	r1, [r0, #394]	; 0x18a
		*pdss_config__target_total_rate_mcps =
 8002ade:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8002ae0:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
		*pphasecal_config_timeout_us =
 8002ae4:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8002ae6:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
		*pmm_config_timeout_us =
 8002aea:	602b      	str	r3, [r5, #0]
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8002aec:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
 8002af0:	e7d8      	b.n	8002aa4 <VL53L1_get_preset_mode_timing_cfg+0x4e>
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8002af2:	f8b0 118c 	ldrh.w	r1, [r0, #396]	; 0x18c
		*pdss_config__target_total_rate_mcps =
 8002af6:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8002af8:	f8d0 21a8 	ldr.w	r2, [r0, #424]	; 0x1a8
		*pphasecal_config_timeout_us =
 8002afc:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8002afe:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
		*pmm_config_timeout_us =
 8002b02:	602b      	str	r3, [r5, #0]
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8002b04:	f8d0 31d0 	ldr.w	r3, [r0, #464]	; 0x1d0
 8002b08:	e7cc      	b.n	8002aa4 <VL53L1_get_preset_mode_timing_cfg+0x4e>
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8002b0a:	f8b0 118c 	ldrh.w	r1, [r0, #396]	; 0x18c
		*pdss_config__target_total_rate_mcps =
 8002b0e:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8002b10:	f8d0 21ac 	ldr.w	r2, [r0, #428]	; 0x1ac
 8002b14:	e7f2      	b.n	8002afc <VL53L1_get_preset_mode_timing_cfg+0xa6>
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8002b16:	f8b0 118c 	ldrh.w	r1, [r0, #396]	; 0x18c
		*pdss_config__target_total_rate_mcps =
 8002b1a:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8002b1c:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 8002b20:	e7ec      	b.n	8002afc <VL53L1_get_preset_mode_timing_cfg+0xa6>
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8002b22:	f8b0 118a 	ldrh.w	r1, [r0, #394]	; 0x18a
		*pdss_config__target_total_rate_mcps =
 8002b26:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8002b28:	f8d0 21a0 	ldr.w	r2, [r0, #416]	; 0x1a0
 8002b2c:	e7da      	b.n	8002ae4 <VL53L1_get_preset_mode_timing_cfg+0x8e>
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8002b2e:	f8b0 118a 	ldrh.w	r1, [r0, #394]	; 0x18a
		*pdss_config__target_total_rate_mcps =
 8002b32:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8002b34:	f8d0 219c 	ldr.w	r2, [r0, #412]	; 0x19c
 8002b38:	e7d4      	b.n	8002ae4 <VL53L1_get_preset_mode_timing_cfg+0x8e>
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8002b3a:	f8b0 1190 	ldrh.w	r1, [r0, #400]	; 0x190
 8002b3e:	e7f2      	b.n	8002b26 <VL53L1_get_preset_mode_timing_cfg+0xd0>
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002b40:	f06f 0003 	mvn.w	r0, #3
 8002b44:	e7b0      	b.n	8002aa8 <VL53L1_get_preset_mode_timing_cfg+0x52>

08002b46 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8002b46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4a:	ed2d 8b02 	vpush	{d8}
 8002b4e:	b08d      	sub	sp, #52	; 0x34
 8002b50:	ee08 3a10 	vmov	s16, r3
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8002b54:	f500 7368 	add.w	r3, r0, #928	; 0x3a0
 8002b58:	930a      	str	r3, [sp, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
	VL53L1_low_power_auto_data_t  *plpadata      =
 8002b5a:	f500 53a3 	add.w	r3, r0, #5216	; 0x1460
 8002b5e:	9307      	str	r3, [sp, #28]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8002b60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002b62:	60c3      	str	r3, [r0, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8002b64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002b66:	6103      	str	r3, [r0, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8002b68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	pdev->preset_mode                 = device_preset_mode;
 8002b6a:	7041      	strb	r1, [r0, #1]
{
 8002b6c:	e9cd 1208 	strd	r1, r2, [sp, #32]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8002b70:	6143      	str	r3, [r0, #20]
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8002b72:	f200 328a 	addw	r2, r0, #906	; 0x38a



	VL53L1_init_ll_driver_state(
 8002b76:	2103      	movs	r1, #3
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8002b78:	920b      	str	r2, [sp, #44]	; 0x2c
{
 8002b7a:	4681      	mov	r9, r0
	VL53L1_hist_post_process_config_t *phistpostprocess =
 8002b7c:	f500 7820 	add.w	r8, r0, #640	; 0x280
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8002b80:	f200 346a 	addw	r4, r0, #874	; 0x36a
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8002b84:	f500 7554 	add.w	r5, r0, #848	; 0x350
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8002b88:	f500 766e 	add.w	r6, r0, #952	; 0x3b8
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8002b8c:	f500 7773 	add.w	r7, r0, #972	; 0x3cc
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8002b90:	f100 0bc2 	add.w	fp, r0, #194	; 0xc2
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8002b94:	f500 7aae 	add.w	sl, r0, #348	; 0x15c
	VL53L1_init_ll_driver_state(
 8002b98:	f003 f8a9 	bl	8005cee <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8002b9c:	9b08      	ldr	r3, [sp, #32]
 8002b9e:	1e59      	subs	r1, r3, #1
 8002ba0:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 8002ba4:	2926      	cmp	r1, #38	; 0x26
 8002ba6:	f200 81e7 	bhi.w	8002f78 <VL53L1_set_preset_mode+0x432>
 8002baa:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002bae:	0027      	.short	0x0027
 8002bb0:	005c0053 	.word	0x005c0053
 8002bb4:	006e0065 	.word	0x006e0065
 8002bb8:	00800077 	.word	0x00800077
 8002bbc:	01e50089 	.word	0x01e50089
 8002bc0:	009201e5 	.word	0x009201e5
 8002bc4:	017600fe 	.word	0x017600fe
 8002bc8:	018e0182 	.word	0x018e0182
 8002bcc:	01a6019a 	.word	0x01a6019a
 8002bd0:	00f201af 	.word	0x00f201af
 8002bd4:	00aa009e 	.word	0x00aa009e
 8002bd8:	00c200b6 	.word	0x00c200b6
 8002bdc:	00da00ce 	.word	0x00da00ce
 8002be0:	010a00e6 	.word	0x010a00e6
 8002be4:	01220116 	.word	0x01220116
 8002be8:	013a012e 	.word	0x013a012e
 8002bec:	01520146 	.word	0x01520146
 8002bf0:	016a015e 	.word	0x016a015e
 8002bf4:	01c301b8 	.word	0x01c301b8
 8002bf8:	01d901ce 	.word	0x01d901ce

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8002bfc:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002c00:	e9cd 6700 	strd	r6, r7, [sp]
 8002c04:	4629      	mov	r1, r5
 8002c06:	4620      	mov	r0, r4
 8002c08:	f001 fffa 	bl	8004c00 <VL53L1_preset_mode_standard_ranging>
					plpadata);
		break;


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8002c0c:	4604      	mov	r4, r0

	}



	if (status == VL53L1_ERROR_NONE) {
 8002c0e:	b990      	cbnz	r0, 8002c36 <VL53L1_set_preset_mode+0xf0>

		pstatic->dss_config__target_total_rate_mcps =
 8002c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c12:	f8a9 336a 	strh.w	r3, [r9, #874]	; 0x36a
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8002c16:	f8a9 3018 	strh.w	r3, [r9, #24]



	if (status == VL53L1_ERROR_NONE)
		status =
			VL53L1_set_timeouts_us(
 8002c1a:	ee18 1a10 	vmov	r1, s16
 8002c1e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8002c22:	4648      	mov	r0, r9
 8002c24:	f7ff fdb7 	bl	8002796 <VL53L1_set_timeouts_us>
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8002c28:	4604      	mov	r4, r0
 8002c2a:	b920      	cbnz	r0, 8002c36 <VL53L1_set_preset_mode+0xf0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8002c2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002c2e:	4648      	mov	r0, r9
 8002c30:	f7ff fd96 	bl	8002760 <VL53L1_set_inter_measurement_period_ms>
 8002c34:	4604      	mov	r4, r0
				Dev,
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
 8002c36:	f899 00c3 	ldrb.w	r0, [r9, #195]	; 0xc3
 8002c3a:	f509 510e 	add.w	r1, r9, #9088	; 0x2380
 8002c3e:	3001      	adds	r0, #1
 8002c40:	3134      	adds	r1, #52	; 0x34
 8002c42:	b2c0      	uxtb	r0, r0
 8002c44:	f003 f924 	bl	8005e90 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
}
 8002c48:	4620      	mov	r0, r4
 8002c4a:	b00d      	add	sp, #52	; 0x34
 8002c4c:	ecbd 8b02 	vpop	{d8}
 8002c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8002c54:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002c58:	e9cd 6700 	strd	r6, r7, [sp]
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f002 f87e 	bl	8004d60 <VL53L1_preset_mode_standard_ranging_short_range>
 8002c64:	e7d2      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8002c66:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002c6a:	e9cd 6700 	strd	r6, r7, [sp]
 8002c6e:	4629      	mov	r1, r5
 8002c70:	4620      	mov	r0, r4
 8002c72:	f002 f897 	bl	8004da4 <VL53L1_preset_mode_standard_ranging_long_range>
 8002c76:	e7c9      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8002c78:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002c7c:	e9cd 6700 	strd	r6, r7, [sp]
 8002c80:	4629      	mov	r1, r5
 8002c82:	4620      	mov	r0, r4
 8002c84:	f002 f8b0 	bl	8004de8 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8002c88:	e7c0      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8002c8a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002c8e:	e9cd 6700 	strd	r6, r7, [sp]
 8002c92:	4629      	mov	r1, r5
 8002c94:	4620      	mov	r0, r4
 8002c96:	f002 f8ba 	bl	8004e0e <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8002c9a:	e7b7      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_timed_ranging(
 8002c9c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002ca0:	e9cd 6700 	strd	r6, r7, [sp]
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f002 f8c4 	bl	8004e34 <VL53L1_preset_mode_timed_ranging>
 8002cac:	e7ae      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8002cae:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002cb2:	e9cd 6700 	strd	r6, r7, [sp]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f002 f8dc 	bl	8004e76 <VL53L1_preset_mode_timed_ranging_short_range>
 8002cbe:	e7a5      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8002cc0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002cc4:	e9cd 6700 	strd	r6, r7, [sp]
 8002cc8:	4629      	mov	r1, r5
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f002 f8f5 	bl	8004eba <VL53L1_preset_mode_timed_ranging_long_range>
 8002cd0:	e79c      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging(
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002cde:	462a      	mov	r2, r5
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	4640      	mov	r0, r8
 8002ce4:	f002 f9b8 	bl	8005058 <VL53L1_preset_mode_histogram_ranging>
 8002ce8:	e790      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002cf6:	462a      	mov	r2, r5
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	4640      	mov	r0, r8
 8002cfc:	f002 fa33 	bl	8005166 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8002d00:	e784      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002d0e:	462a      	mov	r2, r5
 8002d10:	4621      	mov	r1, r4
 8002d12:	4640      	mov	r0, r8
 8002d14:	f002 fa78 	bl	8005208 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 8002d18:	e778      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002d20:	4613      	mov	r3, r2
 8002d22:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002d26:	462a      	mov	r2, r5
 8002d28:	4621      	mov	r1, r4
 8002d2a:	4640      	mov	r0, r8
 8002d2c:	f002 fa7f 	bl	800522e <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8002d30:	e76c      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002d3e:	462a      	mov	r2, r5
 8002d40:	4621      	mov	r1, r4
 8002d42:	4640      	mov	r0, r8
 8002d44:	f002 fac3 	bl	80052ce <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8002d48:	e760      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_multizone(
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002d56:	462a      	mov	r2, r5
 8002d58:	4621      	mov	r1, r4
 8002d5a:	4640      	mov	r0, r8
 8002d5c:	f002 fe60 	bl	8005a20 <VL53L1_preset_mode_histogram_multizone>
 8002d60:	e754      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002d6e:	462a      	mov	r2, r5
 8002d70:	4621      	mov	r1, r4
 8002d72:	4640      	mov	r0, r8
 8002d74:	f002 fe8c 	bl	8005a90 <VL53L1_preset_mode_histogram_multizone_short_range>
 8002d78:	e748      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002d80:	4613      	mov	r3, r2
 8002d82:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002d86:	462a      	mov	r2, r5
 8002d88:	4621      	mov	r1, r4
 8002d8a:	4640      	mov	r0, r8
 8002d8c:	f002 feb8 	bl	8005b00 <VL53L1_preset_mode_histogram_multizone_long_range>
 8002d90:	e73c      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_ref(
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002d9e:	462a      	mov	r2, r5
 8002da0:	4621      	mov	r1, r4
 8002da2:	4640      	mov	r0, r8
 8002da4:	f002 ff76 	bl	8005c94 <VL53L1_preset_mode_histogram_ranging_ref>
 8002da8:	e730      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002db6:	462a      	mov	r2, r5
 8002db8:	4621      	mov	r1, r4
 8002dba:	4640      	mov	r0, r8
 8002dbc:	f002 fa9a 	bl	80052f4 <VL53L1_preset_mode_histogram_ranging_short_timing>
 8002dc0:	e724      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_long_range(
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002dce:	462a      	mov	r2, r5
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	4640      	mov	r0, r8
 8002dd4:	f002 faf0 	bl	80053b8 <VL53L1_preset_mode_histogram_long_range>
 8002dd8:	e718      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002de6:	462a      	mov	r2, r5
 8002de8:	4621      	mov	r1, r4
 8002dea:	4640      	mov	r0, r8
 8002dec:	f002 fb50 	bl	8005490 <VL53L1_preset_mode_histogram_long_range_mm1>
 8002df0:	e70c      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002dfe:	462a      	mov	r2, r5
 8002e00:	4621      	mov	r1, r4
 8002e02:	4640      	mov	r0, r8
 8002e04:	f002 fb92 	bl	800552c <VL53L1_preset_mode_histogram_long_range_mm2>
 8002e08:	e700      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_medium_range(
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002e10:	4613      	mov	r3, r2
 8002e12:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002e16:	462a      	mov	r2, r5
 8002e18:	4621      	mov	r1, r4
 8002e1a:	4640      	mov	r0, r8
 8002e1c:	f002 fb9a 	bl	8005554 <VL53L1_preset_mode_histogram_medium_range>
 8002e20:	e6f4      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002e2e:	462a      	mov	r2, r5
 8002e30:	4621      	mov	r1, r4
 8002e32:	4640      	mov	r0, r8
 8002e34:	f002 fbf6 	bl	8005624 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8002e38:	e6e8      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002e46:	462a      	mov	r2, r5
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4640      	mov	r0, r8
 8002e4c:	f002 fc3b 	bl	80056c6 <VL53L1_preset_mode_histogram_medium_range_mm2>
 8002e50:	e6dc      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_short_range(
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002e5e:	462a      	mov	r2, r5
 8002e60:	4621      	mov	r1, r4
 8002e62:	4640      	mov	r0, r8
 8002e64:	f002 fc42 	bl	80056ec <VL53L1_preset_mode_histogram_short_range>
 8002e68:	e6d0      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002e76:	462a      	mov	r2, r5
 8002e78:	4621      	mov	r1, r4
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	f002 fcf8 	bl	8005870 <VL53L1_preset_mode_histogram_short_range_mm1>
 8002e80:	e6c4      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002e8e:	462a      	mov	r2, r5
 8002e90:	4621      	mov	r1, r4
 8002e92:	4640      	mov	r0, r8
 8002e94:	f002 fd35 	bl	8005902 <VL53L1_preset_mode_histogram_short_range_mm2>
 8002e98:	e6b8      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_characterisation(
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002ea6:	462a      	mov	r2, r5
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	4640      	mov	r0, r8
 8002eac:	f002 f942 	bl	8005134 <VL53L1_preset_mode_histogram_characterisation>
 8002eb0:	e6ac      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	4640      	mov	r0, r8
 8002ec4:	f002 fe54 	bl	8005b70 <VL53L1_preset_mode_histogram_xtalk_planar>
 8002ec8:	e6a0      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002ed6:	462a      	mov	r2, r5
 8002ed8:	4621      	mov	r1, r4
 8002eda:	4640      	mov	r0, r8
 8002edc:	f002 fd24 	bl	8005928 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8002ee0:	e694      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002eee:	462a      	mov	r2, r5
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4640      	mov	r0, r8
 8002ef4:	f002 fd82 	bl	80059fc <VL53L1_preset_mode_histogram_xtalk_mm2>
 8002ef8:	e688      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_olt(
 8002efa:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002efe:	e9cd 6700 	strd	r6, r7, [sp]
 8002f02:	4629      	mov	r1, r5
 8002f04:	4620      	mov	r0, r4
 8002f06:	f002 f862 	bl	8004fce <VL53L1_preset_mode_olt>
 8002f0a:	e67f      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_singleshot_ranging(
 8002f0c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002f10:	e9cd 6700 	strd	r6, r7, [sp]
 8002f14:	4629      	mov	r1, r5
 8002f16:	4620      	mov	r0, r4
 8002f18:	f002 f83b 	bl	8004f92 <VL53L1_preset_mode_singleshot_ranging>
 8002f1c:	e676      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8002f1e:	9907      	ldr	r1, [sp, #28]
 8002f20:	9600      	str	r6, [sp, #0]
 8002f22:	e9cd b103 	strd	fp, r1, [sp, #12]
 8002f26:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f001 fffe 	bl	8004f2e <VL53L1_preset_mode_low_power_auto_short_ranging>
 8002f32:	e66b      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8002f34:	9907      	ldr	r1, [sp, #28]
 8002f36:	9600      	str	r6, [sp, #0]
 8002f38:	e9cd b103 	strd	fp, r1, [sp, #12]
 8002f3c:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8002f40:	4629      	mov	r1, r5
 8002f42:	4620      	mov	r0, r4
 8002f44:	f001 ffda 	bl	8004efc <VL53L1_preset_mode_low_power_auto_ranging>
 8002f48:	e660      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8002f4a:	9907      	ldr	r1, [sp, #28]
 8002f4c:	9600      	str	r6, [sp, #0]
 8002f4e:	e9cd b103 	strd	fp, r1, [sp, #12]
 8002f52:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8002f56:	4629      	mov	r1, r5
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f002 f801 	bl	8004f60 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8002f5e:	e655      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
		status = VL53L1_preset_mode_special_histogram_short_range(
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002f66:	4613      	mov	r3, r2
 8002f68:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002f6c:	462a      	mov	r2, r5
 8002f6e:	4621      	mov	r1, r4
 8002f70:	4640      	mov	r0, r8
 8002f72:	f002 fc23 	bl	80057bc <VL53L1_preset_mode_special_histogram_short_range>
 8002f76:	e649      	b.n	8002c0c <VL53L1_set_preset_mode+0xc6>
	VL53L1_init_ll_driver_state(
 8002f78:	f06f 0403 	mvn.w	r4, #3
 8002f7c:	e65b      	b.n	8002c36 <VL53L1_set_preset_mode+0xf0>
	...

08002f80 <VL53L1_data_init>:
{
 8002f80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002f82:	4604      	mov	r4, r0
 8002f84:	460e      	mov	r6, r1
	VL53L1_init_ll_driver_state(
 8002f86:	2162      	movs	r1, #98	; 0x62
 8002f88:	f002 feb1 	bl	8005cee <VL53L1_init_ll_driver_state>
	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 8002f8c:	f504 5004 	add.w	r0, r4, #8448	; 0x2100
 8002f90:	3018      	adds	r0, #24
 8002f92:	2304      	movs	r3, #4
 8002f94:	7443      	strb	r3, [r0, #17]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8002f96:	f242 33b4 	movw	r3, #9140	; 0x23b4
 8002f9a:	2119      	movs	r1, #25
	pres->range_results.active_results = 0;
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	7482      	strb	r2, [r0, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8002fa0:	52e1      	strh	r1, [r4, r3]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8002fa2:	f504 530f 	add.w	r3, r4, #9152	; 0x23c0
 8002fa6:	f504 512a 	add.w	r1, r4, #10880	; 0x2a80
 8002faa:	3330      	adds	r3, #48	; 0x30
 8002fac:	3114      	adds	r1, #20
		pobjects->xmonitor.VL53L1_p_014          = 0;
 8002fae:	811a      	strh	r2, [r3, #8]
		pobjects->xmonitor.range_status =
 8002fb0:	729a      	strb	r2, [r3, #10]
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8002fb2:	e9c3 2200 	strd	r2, r2, [r3]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8002fb6:	3344      	adds	r3, #68	; 0x44
 8002fb8:	4299      	cmp	r1, r3
 8002fba:	d1f8      	bne.n	8002fae <VL53L1_data_init+0x2e>
	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8002fbc:	f642 215c 	movw	r1, #10844	; 0x2a5c
 8002fc0:	2319      	movs	r3, #25
 8002fc2:	5263      	strh	r3, [r4, r1]
	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 8002fc4:	f880 3ae7 	strb.w	r3, [r0, #2791]	; 0xae7
	pres->zone_cal.active_zones        = 0;
 8002fc8:	f504 5330 	add.w	r3, r4, #11264	; 0x2c00
 8002fcc:	f880 2ae8 	strb.w	r2, [r0, #2792]	; 0xae8
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	f504 523b 	add.w	r2, r4, #11968	; 0x2ec0
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 8002fd6:	2500      	movs	r5, #0
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 8002fd8:	609d      	str	r5, [r3, #8]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 8002fda:	e9c3 5500 	strd	r5, r5, [r3]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8002fde:	e9c3 5505 	strd	r5, r5, [r3, #20]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8002fe2:	331c      	adds	r3, #28
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d1f7      	bne.n	8002fd8 <VL53L1_data_init+0x58>
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8002fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fec:	6023      	str	r3, [r4, #0]
	pdev->offset_calibration_mode =
 8002fee:	f240 1301 	movw	r3, #257	; 0x101
 8002ff2:	80a3      	strh	r3, [r4, #4]
	pdev->dmax_mode  =
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	71a3      	strb	r3, [r4, #6]
	pdev->mm_config_timeout_us        =  2000;
 8002ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ffc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003000:	e9c4 2302 	strd	r2, r3, [r4, #8]
	pdev->inter_measurement_period_ms =   100;
 8003004:	f243 21c8 	movw	r1, #13000	; 0x32c8
 8003008:	2364      	movs	r3, #100	; 0x64
 800300a:	e9c4 1304 	strd	r1, r3, [r4, #16]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800300e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003012:	8323      	strh	r3, [r4, #24]
	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 8003014:	f241 334e 	movw	r3, #4942	; 0x134e
 8003018:	2203      	movs	r2, #3
	pdev->debug_mode                  =  0x00;
 800301a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 800301e:	52e2      	strh	r2, [r4, r3]
	pdev->gain_cal.standard_ranging_gain_factor =
 8003020:	4b40      	ldr	r3, [pc, #256]	; (8003124 <VL53L1_data_init+0x1a4>)
 8003022:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	VL53L1_init_version(Dev);
 8003026:	4620      	mov	r0, r4
 8003028:	f002 fe57 	bl	8005cda <VL53L1_init_version>
	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800302c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003030:	2100      	movs	r1, #0
 8003032:	f504 50e4 	add.w	r0, r4, #7296	; 0x1c80
 8003036:	f008 f971 	bl	800b31c <memset>
	pdev->bin_rec_pos = 0;
 800303a:	f641 437c 	movw	r3, #7292	; 0x1c7c
 800303e:	52e5      	strh	r5, [r4, r3]
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 8003040:	2e00      	cmp	r6, #0
 8003042:	d14a      	bne.n	80030da <VL53L1_data_init+0x15a>
		status = VL53L1_init_refspadchar_config_struct(
 8003044:	f504 7019 	add.w	r0, r4, #612	; 0x264
 8003048:	f001 fc4c 	bl	80048e4 <VL53L1_init_refspadchar_config_struct>
	if (status == VL53L1_ERROR_NONE)
 800304c:	4605      	mov	r5, r0
 800304e:	2800      	cmp	r0, #0
 8003050:	d149      	bne.n	80030e6 <VL53L1_data_init+0x166>
		status = VL53L1_init_ssc_config_struct(
 8003052:	f504 701d 	add.w	r0, r4, #628	; 0x274
 8003056:	f001 fc55 	bl	8004904 <VL53L1_init_ssc_config_struct>
	if (status == VL53L1_ERROR_NONE)
 800305a:	4605      	mov	r5, r0
 800305c:	2800      	cmp	r0, #0
 800305e:	d142      	bne.n	80030e6 <VL53L1_data_init+0x166>
		status = VL53L1_init_xtalk_config_struct(
 8003060:	f504 713e 	add.w	r1, r4, #760	; 0x2f8
 8003064:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8003068:	f001 fc58 	bl	800491c <VL53L1_init_xtalk_config_struct>
	if (status == VL53L1_ERROR_NONE)
 800306c:	4605      	mov	r5, r0
 800306e:	2800      	cmp	r0, #0
 8003070:	d139      	bne.n	80030e6 <VL53L1_data_init+0x166>
		status = VL53L1_init_xtalk_extract_config_struct(
 8003072:	f504 7037 	add.w	r0, r4, #732	; 0x2dc
 8003076:	f001 fc7d 	bl	8004974 <VL53L1_init_xtalk_extract_config_struct>
	if (status == VL53L1_ERROR_NONE)
 800307a:	4605      	mov	r5, r0
 800307c:	bb98      	cbnz	r0, 80030e6 <VL53L1_data_init+0x166>
		status = VL53L1_init_offset_cal_config_struct(
 800307e:	f504 7047 	add.w	r0, r4, #796	; 0x31c
 8003082:	f001 fc91 	bl	80049a8 <VL53L1_init_offset_cal_config_struct>
	if (status == VL53L1_ERROR_NONE)
 8003086:	4605      	mov	r5, r0
 8003088:	bb68      	cbnz	r0, 80030e6 <VL53L1_data_init+0x166>
		status = VL53L1_init_zone_cal_config_struct(
 800308a:	f504 704c 	add.w	r0, r4, #816	; 0x330
 800308e:	f001 fc9d 	bl	80049cc <VL53L1_init_zone_cal_config_struct>
	if (status == VL53L1_ERROR_NONE)
 8003092:	4605      	mov	r5, r0
 8003094:	bb38      	cbnz	r0, 80030e6 <VL53L1_data_init+0x166>
		status = VL53L1_init_hist_post_process_config_struct(
 8003096:	f894 0308 	ldrb.w	r0, [r4, #776]	; 0x308
 800309a:	f504 7120 	add.w	r1, r4, #640	; 0x280
 800309e:	f001 fca7 	bl	80049f0 <VL53L1_init_hist_post_process_config_struct>
	if (status == VL53L1_ERROR_NONE)
 80030a2:	4605      	mov	r5, r0
 80030a4:	b9f8      	cbnz	r0, 80030e6 <VL53L1_data_init+0x166>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 80030a6:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
 80030aa:	f001 fd8f 	bl	8004bcc <VL53L1_init_hist_gen3_dmax_config_struct>
	if (status == VL53L1_ERROR_NONE)
 80030ae:	4605      	mov	r5, r0
 80030b0:	b9c8      	cbnz	r0, 80030e6 <VL53L1_data_init+0x166>
		status = VL53L1_init_tuning_parm_storage_struct(
 80030b2:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 80030b6:	f001 fccf 	bl	8004a58 <VL53L1_init_tuning_parm_storage_struct>
	if (status == VL53L1_ERROR_NONE)
 80030ba:	4605      	mov	r5, r0
 80030bc:	b998      	cbnz	r0, 80030e6 <VL53L1_data_init+0x166>
		status = VL53L1_set_preset_mode(
 80030be:	6963      	ldr	r3, [r4, #20]
 80030c0:	9302      	str	r3, [sp, #8]
 80030c2:	6923      	ldr	r3, [r4, #16]
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	68e3      	ldr	r3, [r4, #12]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	8b22      	ldrh	r2, [r4, #24]
 80030cc:	68a3      	ldr	r3, [r4, #8]
 80030ce:	7861      	ldrb	r1, [r4, #1]
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff fd38 	bl	8002b46 <VL53L1_set_preset_mode>
 80030d6:	4605      	mov	r5, r0
 80030d8:	e005      	b.n	80030e6 <VL53L1_data_init+0x166>
		status = VL53L1_read_p2p_data(Dev);
 80030da:	4620      	mov	r0, r4
 80030dc:	f7ff fbed 	bl	80028ba <VL53L1_read_p2p_data>
	if (status == VL53L1_ERROR_NONE)
 80030e0:	4605      	mov	r5, r0
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d0ae      	beq.n	8003044 <VL53L1_data_init+0xc4>
	VL53L1_init_histogram_bin_data_struct(
 80030e6:	f504 6286 	add.w	r2, r4, #1072	; 0x430
 80030ea:	2118      	movs	r1, #24
 80030ec:	2000      	movs	r0, #0
 80030ee:	f004 fc11 	bl	8007914 <VL53L1_init_histogram_bin_data_struct>
	VL53L1_init_histogram_bin_data_struct(
 80030f2:	f204 42dc 	addw	r2, r4, #1244	; 0x4dc
 80030f6:	2118      	movs	r1, #24
 80030f8:	2000      	movs	r0, #0
 80030fa:	f004 fc0b 	bl	8007914 <VL53L1_init_histogram_bin_data_struct>
	VL53L1_init_xtalk_bin_data_struct(
 80030fe:	f504 62b1 	add.w	r2, r4, #1416	; 0x588
 8003102:	210c      	movs	r1, #12
 8003104:	2000      	movs	r0, #0
 8003106:	f002 ff5f 	bl	8005fc8 <VL53L1_init_xtalk_bin_data_struct>
	VL53L1_xtalk_cal_data_init(
 800310a:	4620      	mov	r0, r4
 800310c:	f003 ffb0 	bl	8007070 <VL53L1_xtalk_cal_data_init>
	VL53L1_dynamic_xtalk_correction_data_init(
 8003110:	4620      	mov	r0, r4
 8003112:	f003 ff3d 	bl	8006f90 <VL53L1_dynamic_xtalk_correction_data_init>
	VL53L1_low_power_auto_data_init(
 8003116:	4620      	mov	r0, r4
 8003118:	f003 ffbb 	bl	8007092 <VL53L1_low_power_auto_data_init>
}
 800311c:	4628      	mov	r0, r5
 800311e:	b004      	add	sp, #16
 8003120:	bd70      	pop	{r4, r5, r6, pc}
 8003122:	bf00      	nop
 8003124:	07c307db 	.word	0x07c307db

08003128 <VL53L1_get_lite_sigma_threshold>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8003128:	f8b0 33aa 	ldrh.w	r3, [r0, #938]	; 0x3aa
	*plite_sigma =
 800312c:	800b      	strh	r3, [r1, #0]

	LOG_FUNCTION_END(status);

	return status;

}
 800312e:	2000      	movs	r0, #0
 8003130:	4770      	bx	lr

08003132 <VL53L1_set_lite_sigma_threshold>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8003132:	f8a0 13aa 	strh.w	r1, [r0, #938]	; 0x3aa

	LOG_FUNCTION_END(status);

	return status;

}
 8003136:	2000      	movs	r0, #0
 8003138:	4770      	bx	lr

0800313a <VL53L1_get_lite_min_count_rate>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800313a:	f8b0 33ac 	ldrh.w	r3, [r0, #940]	; 0x3ac
	*plite_mincountrate =
 800313e:	800b      	strh	r3, [r1, #0]

	LOG_FUNCTION_END(status);

	return status;

}
 8003140:	2000      	movs	r0, #0
 8003142:	4770      	bx	lr

08003144 <VL53L1_set_lite_min_count_rate>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8003144:	f8a0 13ac 	strh.w	r1, [r0, #940]	; 0x3ac

	LOG_FUNCTION_END(status);

	return status;

}
 8003148:	2000      	movs	r0, #0
 800314a:	4770      	bx	lr

0800314c <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800314c:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 800314e:	2901      	cmp	r1, #1
{
 8003150:	b0c1      	sub	sp, #260	; 0x104
 8003152:	4604      	mov	r4, r0
 8003154:	460d      	mov	r5, r1
	switch (device_results_level) {
 8003156:	d01c      	beq.n	8003192 <VL53L1_get_measurement_results+0x46>
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
	default:
		i2c_buffer_size_bytes =
 8003158:	2902      	cmp	r1, #2
 800315a:	bf0c      	ite	eq
 800315c:	2386      	moveq	r3, #134	; 0x86
 800315e:	232c      	movne	r3, #44	; 0x2c



	if (status == VL53L1_ERROR_NONE)
		status =
			VL53L1_ReadMulti(
 8003160:	466a      	mov	r2, sp
 8003162:	2188      	movs	r1, #136	; 0x88
 8003164:	4620      	mov	r0, r4
 8003166:	f7fe f9fd 	bl	8001564 <VL53L1_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800316a:	2d01      	cmp	r5, #1
 800316c:	d913      	bls.n	8003196 <VL53L1_get_measurement_results+0x4a>
 800316e:	b9d8      	cbnz	r0, 80031a8 <VL53L1_get_measurement_results+0x5c>

		i2c_buffer_offset_bytes =
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
 8003170:	f504 529e 	add.w	r2, r4, #5056	; 0x13c0
 8003174:	3208      	adds	r2, #8
 8003176:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 800317a:	2038      	movs	r0, #56	; 0x38
 800317c:	f006 faec 	bl	8009758 <VL53L1_i2c_decode_debug_results>
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8003180:	b990      	cbnz	r0, 80031a8 <VL53L1_get_measurement_results+0x5c>

		i2c_buffer_offset_bytes =
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
 8003182:	f504 529d 	add.w	r2, r4, #5024	; 0x13a0
 8003186:	3204      	adds	r2, #4
 8003188:	a90b      	add	r1, sp, #44	; 0x2c
 800318a:	2021      	movs	r0, #33	; 0x21
 800318c:	f006 faa9 	bl	80096e2 <VL53L1_i2c_decode_core_results>
 8003190:	e003      	b.n	800319a <VL53L1_get_measurement_results+0x4e>
		i2c_buffer_size_bytes =
 8003192:	234d      	movs	r3, #77	; 0x4d
 8003194:	e7e4      	b.n	8003160 <VL53L1_get_measurement_results+0x14>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8003196:	2d00      	cmp	r5, #0
 8003198:	d1f2      	bne.n	8003180 <VL53L1_get_measurement_results+0x34>
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800319a:	b928      	cbnz	r0, 80031a8 <VL53L1_get_measurement_results+0x5c>

		i2c_buffer_offset_bytes = 0;
		status =
			VL53L1_i2c_decode_system_results(
 800319c:	f204 32d2 	addw	r2, r4, #978	; 0x3d2
 80031a0:	4669      	mov	r1, sp
 80031a2:	202c      	movs	r0, #44	; 0x2c
 80031a4:	f006 fa0e 	bl	80095c4 <VL53L1_i2c_decode_system_results>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80031a8:	b041      	add	sp, #260	; 0x104
 80031aa:	bd30      	pop	{r4, r5, pc}

080031ac <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 80031ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80031b0:	2500      	movs	r5, #0
 80031b2:	709d      	strb	r5, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
	presults->wrap_dmax_mm    = 0;
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 80031b4:	2404      	movs	r4, #4
	presults->stream_count    = psys->result__stream_count;
 80031b6:	f891 8003 	ldrb.w	r8, [r1, #3]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 80031ba:	745c      	strb	r4, [r3, #17]
	presults->active_results  = 1;
 80031bc:	2401      	movs	r4, #1
	presults->stream_count    = psys->result__stream_count;
 80031be:	f883 8003 	strb.w	r8, [r3, #3]
	presults->active_results  = 1;
 80031c2:	749c      	strb	r4, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80031c4:	8a0c      	ldrh	r4, [r1, #16]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80031c6:	f8b1 9014 	ldrh.w	r9, [r1, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 80031ca:	f8b1 a012 	ldrh.w	sl, [r1, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80031ce:	9401      	str	r4, [sp, #4]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
		presults->VL53L1_p_007[i] = 0;
 80031d0:	e9c3 5501 	strd	r5, r5, [r3, #4]
{
 80031d4:	9000      	str	r0, [sp, #0]
		presults->VL53L1_p_007[i] = 0;
 80031d6:	60dd      	str	r5, [r3, #12]

	pdata = &(presults->VL53L1_p_002[0]);

	for (i = 0; i < 2; i++) {
 80031d8:	f103 0460 	add.w	r4, r3, #96	; 0x60

		pdata->range_id     = i;
		pdata->time_stamp   = 0;
 80031dc:	462f      	mov	r7, r5

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
			pdata->avg_signal_count_rate_mcps =
 80031de:	f64f 7eff 	movw	lr, #65535	; 0xffff
		pdata->range_id     = i;
 80031e2:	f804 5c4c 	strb.w	r5, [r4, #-76]
		pdata->time_stamp   = 0;
 80031e6:	f844 7c48 	str.w	r7, [r4, #-72]
		if ((psys->result__stream_count == 0) &&
 80031ea:	784e      	ldrb	r6, [r1, #1]
 80031ec:	f006 061f 	and.w	r6, r6, #31
 80031f0:	f1b8 0f00 	cmp.w	r8, #0
 80031f4:	d168      	bne.n	80032c8 <VL53L1_copy_sys_and_core_results_to_range_results+0x11c>
 80031f6:	2e09      	cmp	r6, #9
 80031f8:	bf14      	ite	ne
 80031fa:	46b4      	movne	ip, r6
 80031fc:	f04f 0c13 	moveq.w	ip, #19
 8003200:	f804 cc02 	strb.w	ip, [r4, #-2]
		pdata->VL53L1_p_015 = 0;
 8003204:	f804 7c44 	strb.w	r7, [r4, #-68]
		pdata->VL53L1_p_022    = 0;
 8003208:	f804 7c43 	strb.w	r7, [r4, #-67]
		pdata->VL53L1_p_025   = 0;
 800320c:	f804 7c42 	strb.w	r7, [r4, #-66]
		pdata->VL53L1_p_026     = 0;
 8003210:	f804 7c41 	strb.w	r7, [r4, #-65]
		pdata->VL53L1_p_016   = 0;
 8003214:	f804 7c40 	strb.w	r7, [r4, #-64]
		pdata->VL53L1_p_027    = 0;
 8003218:	f804 7c3f 	strb.w	r7, [r4, #-63]
		switch (i) {
 800321c:	2d00      	cmp	r5, #0
 800321e:	d15f      	bne.n	80032e0 <VL53L1_copy_sys_and_core_results_to_range_results+0x134>
			if (psys->result__report_status ==
 8003220:	f891 c002 	ldrb.w	ip, [r1, #2]
 8003224:	f1bc 0f07 	cmp.w	ip, #7
 8003228:	d150      	bne.n	80032cc <VL53L1_copy_sys_and_core_results_to_range_results+0x120>
				pdata->VL53L1_p_006 =
 800322a:	f824 ac36 	strh.w	sl, [r4, #-54]
			pdata->peak_signal_count_rate_mcps =
 800322e:	9801      	ldr	r0, [sp, #4]
 8003230:	f824 0c1c 	strh.w	r0, [r4, #-28]
				psys->result__avg_signal_count_rate_mcps_sd0;
 8003234:	f8b1 c016 	ldrh.w	ip, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 8003238:	f824 cc1a 	strh.w	ip, [r4, #-26]
				psys->result__ambient_count_rate_mcps_sd0;
 800323c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
			pdata->ambient_count_rate_mcps =
 8003240:	f824 cc18 	strh.w	ip, [r4, #-24]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8003244:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
			range_mm *= gain_factor;
 8003248:	9800      	ldr	r0, [sp, #0]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800324a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 800324e:	45f4      	cmp	ip, lr
 8003250:	bf28      	it	cs
 8003252:	46f4      	movcs	ip, lr
 8003254:	f824 cc10 	strh.w	ip, [r4, #-16]
				psys->result__phase_sd0;
 8003258:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
			pdata->VL53L1_p_014 =
 800325c:	f824 cc0c 	strh.w	ip, [r4, #-12]
			range_mm = (int32_t)(
 8003260:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			range_mm *= gain_factor;
 8003264:	fb0c fc00 	mul.w	ip, ip, r0
			pdata->VL53L1_p_021 =
 8003268:	6850      	ldr	r0, [r2, #4]
 800326a:	f844 0c24 	str.w	r0, [r4, #-36]
			pdata->VL53L1_p_013 =
 800326e:	6890      	ldr	r0, [r2, #8]
 8003270:	f844 0c20 	str.w	r0, [r4, #-32]
			pdata->total_periods_elapsed =
 8003274:	68d0      	ldr	r0, [r2, #12]
 8003276:	f844 0c34 	str.w	r0, [r4, #-52]
			range_mm /= 0x0800;
 800327a:	f51c 6b80 	adds.w	fp, ip, #1024	; 0x400
 800327e:	bf48      	it	mi
 8003280:	f60c 3bff 	addwmi	fp, ip, #3071	; 0xbff
 8003284:	ea4f 2beb 	mov.w	fp, fp, asr #11
			pdata->VL53L1_p_020 =
 8003288:	6810      	ldr	r0, [r2, #0]
			pdata->median_range_mm = (int16_t)range_mm;
 800328a:	f824 bc06 	strh.w	fp, [r4, #-6]

			break;
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 800328e:	f834 cc0c 	ldrh.w	ip, [r4, #-12]
 8003292:	f824 cc0e 	strh.w	ip, [r4, #-14]
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 8003296:	f824 cc0a 	strh.w	ip, [r4, #-10]
		pdata->min_range_mm = pdata->median_range_mm;
 800329a:	f934 cc06 	ldrsh.w	ip, [r4, #-6]
			pdata->VL53L1_p_020 =
 800329e:	f844 0c28 	str.w	r0, [r4, #-40]
		pdata->min_range_mm = pdata->median_range_mm;
 80032a2:	f824 cc08 	strh.w	ip, [r4, #-8]
		pdata->max_range_mm = pdata->median_range_mm;
 80032a6:	f824 cc04 	strh.w	ip, [r4, #-4]
	for (i = 0; i < 2; i++) {
 80032aa:	344c      	adds	r4, #76	; 0x4c
 80032ac:	b155      	cbz	r5, 80032c4 <VL53L1_copy_sys_and_core_results_to_range_results+0x118>

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;



	switch (psys->result__range_status &
 80032ae:	2e11      	cmp	r6, #17
 80032b0:	d803      	bhi.n	80032ba <VL53L1_copy_sys_and_core_results_to_range_results+0x10e>
 80032b2:	4a28      	ldr	r2, [pc, #160]	; (8003354 <VL53L1_copy_sys_and_core_results_to_range_results+0x1a8>)
 80032b4:	40b5      	lsls	r5, r6
 80032b6:	4215      	tst	r5, r2
 80032b8:	d146      	bne.n	8003348 <VL53L1_copy_sys_and_core_results_to_range_results+0x19c>
	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80032ba:	2200      	movs	r2, #0
 80032bc:	741a      	strb	r2, [r3, #16]
	break;

	}

	LOG_FUNCTION_END(0);
}
 80032be:	b003      	add	sp, #12
 80032c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c4:	2501      	movs	r5, #1
 80032c6:	e78c      	b.n	80031e2 <VL53L1_copy_sys_and_core_results_to_range_results+0x36>
 80032c8:	46b4      	mov	ip, r6
 80032ca:	e799      	b.n	8003200 <VL53L1_copy_sys_and_core_results_to_range_results+0x54>
			else if (psys->result__report_status ==
 80032cc:	f1bc 0f08 	cmp.w	ip, #8
				psys->result__dss_actual_effective_spads_sd0;
 80032d0:	bf16      	itet	ne
 80032d2:	f8b1 c004 	ldrhne.w	ip, [r1, #4]
				pdata->VL53L1_p_006 =
 80032d6:	f824 9c36 	strheq.w	r9, [r4, #-54]
				pdata->VL53L1_p_006 =
 80032da:	f824 cc36 	strhne.w	ip, [r4, #-54]
 80032de:	e7a6      	b.n	800322e <VL53L1_copy_sys_and_core_results_to_range_results+0x82>
				psys->result__dss_actual_effective_spads_sd1;
 80032e0:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			pdata->VL53L1_p_006 =
 80032e4:	f824 cc36 	strh.w	ip, [r4, #-54]
				psys->result__peak_signal_count_rate_mcps_sd1;
 80032e8:	f8b1 c01a 	ldrh.w	ip, [r1, #26]
			pdata->peak_signal_count_rate_mcps =
 80032ec:	f824 cc1c 	strh.w	ip, [r4, #-28]
			pdata->avg_signal_count_rate_mcps =
 80032f0:	f824 ec1a 	strh.w	lr, [r4, #-26]
				psys->result__ambient_count_rate_mcps_sd1;
 80032f4:	f8b1 c01c 	ldrh.w	ip, [r1, #28]
			pdata->ambient_count_rate_mcps =
 80032f8:	f824 cc18 	strh.w	ip, [r4, #-24]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80032fc:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			range_mm *= gain_factor;
 8003300:	9800      	ldr	r0, [sp, #0]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8003302:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8003306:	45f4      	cmp	ip, lr
 8003308:	bf28      	it	cs
 800330a:	46f4      	movcs	ip, lr
 800330c:	f824 cc10 	strh.w	ip, [r4, #-16]
				psys->result__phase_sd1;
 8003310:	f8b1 c020 	ldrh.w	ip, [r1, #32]
			pdata->VL53L1_p_014 =
 8003314:	f824 cc0c 	strh.w	ip, [r4, #-12]
			range_mm = (int32_t)(
 8003318:	f8b1 c022 	ldrh.w	ip, [r1, #34]	; 0x22
			range_mm *= gain_factor;
 800331c:	fb00 fc0c 	mul.w	ip, r0, ip
			pdata->VL53L1_p_021 =
 8003320:	6950      	ldr	r0, [r2, #20]
 8003322:	f844 0c24 	str.w	r0, [r4, #-36]
			pdata->VL53L1_p_013 =
 8003326:	6990      	ldr	r0, [r2, #24]
 8003328:	f844 0c20 	str.w	r0, [r4, #-32]
			range_mm /= 0x0800;
 800332c:	f51c 6b80 	adds.w	fp, ip, #1024	; 0x400
			pdata->total_periods_elapsed  =
 8003330:	69d0      	ldr	r0, [r2, #28]
 8003332:	f844 0c34 	str.w	r0, [r4, #-52]
			range_mm /= 0x0800;
 8003336:	bf48      	it	mi
 8003338:	f60c 3bff 	addwmi	fp, ip, #3071	; 0xbff
 800333c:	ea4f 2beb 	mov.w	fp, fp, asr #11
			pdata->VL53L1_p_020 =
 8003340:	6910      	ldr	r0, [r2, #16]
			pdata->median_range_mm = (int16_t)range_mm;
 8003342:	f824 bc06 	strh.w	fp, [r4, #-6]
			pdata->VL53L1_p_020 =
 8003346:	e7a2      	b.n	800328e <VL53L1_copy_sys_and_core_results_to_range_results+0xe2>
		presults->VL53L1_p_002[0].range_status =
 8003348:	2200      	movs	r2, #0
		presults->device_status = (psys->result__range_status &
 800334a:	741e      	strb	r6, [r3, #16]
		presults->VL53L1_p_002[0].range_status =
 800334c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 8003350:	e7b5      	b.n	80032be <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
 8003352:	bf00      	nop
 8003354:	0002200e 	.word	0x0002200e

08003358 <VL53L1_set_zone_dss_config>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8003358:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800335c:	2b05      	cmp	r3, #5
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800335e:	bf01      	itttt	eq
 8003360:	2302      	moveq	r3, #2
 8003362:	f880 3394 	strbeq.w	r3, [r0, #916]	; 0x394
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8003366:	888b      	ldrheq	r3, [r1, #4]
 8003368:	f8a0 339a 	strheq.w	r3, [r0, #922]	; 0x39a
			pzone_dyn_cfg->dss_requested_effective_spad_count;
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800336c:	bf1c      	itt	ne
 800336e:	2301      	movne	r3, #1
 8003370:	f880 3394 	strbne.w	r3, [r0, #916]	; 0x394
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
}
 8003374:	2000      	movs	r0, #0
 8003376:	4770      	bx	lr

08003378 <VL53L1_init_and_start_range>:
{
 8003378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		(psystem->system__mode_start &
 800337c:	f890 33d0 	ldrb.w	r3, [r0, #976]	; 0x3d0
	pdev->measurement_mode = measurement_mode;
 8003380:	70c1      	strb	r1, [r0, #3]
		(psystem->system__mode_start &
 8003382:	f003 030f 	and.w	r3, r3, #15
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003386:	4319      	orrs	r1, r3
	psystem->system__mode_start =
 8003388:	f880 13d0 	strb.w	r1, [r0, #976]	; 0x3d0
		VL53L1_set_user_zone(
 800338c:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
{
 8003390:	4604      	mov	r4, r0
		VL53L1_set_user_zone(
 8003392:	eb00 0181 	add.w	r1, r0, r1, lsl #2
{
 8003396:	b0c0      	sub	sp, #256	; 0x100
		VL53L1_set_user_zone(
 8003398:	31de      	adds	r1, #222	; 0xde
{
 800339a:	4615      	mov	r5, r2
		VL53L1_set_user_zone(
 800339c:	f7ff fa5c 	bl	8002858 <VL53L1_set_user_zone>
	if (pdev->zone_cfg.active_zones > 0) {
 80033a0:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 80033a4:	b153      	cbz	r3, 80033bc <VL53L1_init_and_start_range+0x44>
		VL53L1_set_zone_dss_config(
 80033a6:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 80033aa:	230a      	movs	r3, #10
 80033ac:	fb03 4101 	mla	r1, r3, r1, r4
 80033b0:	f501 510a 	add.w	r1, r1, #8832	; 0x2280
 80033b4:	313a      	adds	r1, #58	; 0x3a
 80033b6:	4620      	mov	r0, r4
 80033b8:	f7ff ffce 	bl	8003358 <VL53L1_set_zone_dss_config>
	if (((pdev->sys_ctrl.system__mode_start &
 80033bc:	f894 33d0 	ldrb.w	r3, [r4, #976]	; 0x3d0
 80033c0:	079a      	lsls	r2, r3, #30
 80033c2:	d407      	bmi.n	80033d4 <VL53L1_init_and_start_range+0x5c>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 80033c4:	f894 3308 	ldrb.w	r3, [r4, #776]	; 0x308
 80033c8:	2b01      	cmp	r3, #1
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80033ca:	bf04      	itt	eq
 80033cc:	f8b4 3310 	ldrheq.w	r3, [r4, #784]	; 0x310
 80033d0:	f8a4 3382 	strheq.w	r3, [r4, #898]	; 0x382
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 80033d4:	f241 4362 	movw	r3, #5218	; 0x1462
 80033d8:	5ce2      	ldrb	r2, [r4, r3]
 80033da:	2aff      	cmp	r2, #255	; 0xff
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80033dc:	bf04      	itt	eq
 80033de:	2200      	moveq	r2, #0
 80033e0:	54e2      	strbeq	r2, [r4, r3]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80033e2:	f504 52a3 	add.w	r2, r4, #5216	; 0x1460
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f4:	d116      	bne.n	8003424 <VL53L1_init_and_start_range+0xac>
		pdev->low_power_auto_data.saved_interrupt_config =
 80033f6:	f241 4363 	movw	r3, #5219	; 0x1463
 80033fa:	f894 138c 	ldrb.w	r1, [r4, #908]	; 0x38c
 80033fe:	54e1      	strb	r1, [r4, r3]
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8003400:	2320      	movs	r3, #32
 8003402:	f884 338c 	strb.w	r3, [r4, #908]	; 0x38c
		if ((pdev->dyn_cfg.system__sequence_config & (
 8003406:	f894 33c9 	ldrb.w	r3, [r4, #969]	; 0x3c9
 800340a:	f013 0f60 	tst.w	r3, #96	; 0x60
			(pN->mm_config__outer_offset_mm << 2);
 800340e:	bf03      	ittte	eq
 8003410:	f9b4 305e 	ldrsheq.w	r3, [r4, #94]	; 0x5e
 8003414:	009b      	lsleq	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8003416:	b21b      	sxtheq	r3, r3
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8003418:	2300      	movne	r3, #0
 800341a:	2d05      	cmp	r5, #5
 800341c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
		if (device_config_level <
 8003420:	bf38      	it	cc
 8003422:	2505      	movcc	r5, #5
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003424:	6813      	ldr	r3, [r2, #0]
 8003426:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <VL53L1_init_and_start_range+0x1e8>)
 8003428:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800342c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003430:	4293      	cmp	r3, r2
			pdev->low_power_auto_data.saved_interrupt_config;
 8003432:	bf01      	itttt	eq
 8003434:	f241 4363 	movweq	r3, #5219	; 0x1463
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8003438:	2506      	moveq	r5, #6
		pdev->gen_cfg.system__interrupt_config_gpio =
 800343a:	5ce3      	ldrbeq	r3, [r4, r3]
 800343c:	f884 338c 	strbeq.w	r3, [r4, #908]	; 0x38c
	if (status == VL53L1_ERROR_NONE)
 8003440:	b910      	cbnz	r0, 8003448 <VL53L1_init_and_start_range+0xd0>
		status = VL53L1_save_cfg_data(Dev);
 8003442:	4620      	mov	r0, r4
 8003444:	f003 fb4f 	bl	8006ae6 <VL53L1_save_cfg_data>
	switch (device_config_level) {
 8003448:	1e6b      	subs	r3, r5, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b05      	cmp	r3, #5
 800344e:	bf9a      	itte	ls
 8003450:	4a44      	ldrls	r2, [pc, #272]	; (8003564 <VL53L1_init_and_start_range+0x1ec>)
 8003452:	5cd6      	ldrbls	r6, [r2, r3]
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8003454:	2683      	movhi	r6, #131	; 0x83
	i2c_buffer_size_bytes =
 8003456:	f1c6 0888 	rsb	r8, r6, #136	; 0x88
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800345a:	2300      	movs	r3, #0
	pbuffer = &buffer[0];
 800345c:	466a      	mov	r2, sp
	i2c_buffer_size_bytes =
 800345e:	fa1f f888 	uxth.w	r8, r8
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8003462:	4617      	mov	r7, r2
		*pbuffer++ = 0;
 8003464:	4619      	mov	r1, r3
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8003466:	3301      	adds	r3, #1
 8003468:	b29b      	uxth	r3, r3
 800346a:	4598      	cmp	r8, r3
		*pbuffer++ = 0;
 800346c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8003470:	d1f9      	bne.n	8003466 <VL53L1_init_and_start_range+0xee>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8003472:	2d05      	cmp	r5, #5
 8003474:	d94f      	bls.n	8003516 <VL53L1_init_and_start_range+0x19e>
 8003476:	2800      	cmp	r0, #0
 8003478:	d16f      	bne.n	800355a <VL53L1_init_and_start_range+0x1e2>
		i2c_buffer_offset_bytes =
 800347a:	f1c6 0201 	rsb	r2, r6, #1
			VL53L1_i2c_encode_static_nvm_managed(
 800347e:	fa17 f282 	uxtah	r2, r7, r2
 8003482:	210b      	movs	r1, #11
 8003484:	f504 7051 	add.w	r0, r4, #836	; 0x344
 8003488:	f005 fe34 	bl	80090f4 <VL53L1_i2c_encode_static_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800348c:	2800      	cmp	r0, #0
 800348e:	d164      	bne.n	800355a <VL53L1_init_and_start_range+0x1e2>
		i2c_buffer_offset_bytes =
 8003490:	f1c6 020d 	rsb	r2, r6, #13
			VL53L1_i2c_encode_customer_nvm_managed(
 8003494:	fa17 f282 	uxtah	r2, r7, r2
 8003498:	2117      	movs	r1, #23
 800349a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800349e:	f005 fe92 	bl	80091c6 <VL53L1_i2c_encode_customer_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80034a2:	2800      	cmp	r0, #0
 80034a4:	d159      	bne.n	800355a <VL53L1_init_and_start_range+0x1e2>
		i2c_buffer_offset_bytes =
 80034a6:	f1c6 0224 	rsb	r2, r6, #36	; 0x24
			VL53L1_i2c_encode_static_config(
 80034aa:	fa17 f282 	uxtah	r2, r7, r2
 80034ae:	2120      	movs	r1, #32
 80034b0:	f204 306a 	addw	r0, r4, #874	; 0x36a
 80034b4:	f005 ff35 	bl	8009322 <VL53L1_i2c_encode_static_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d14e      	bne.n	800355a <VL53L1_init_and_start_range+0x1e2>
		i2c_buffer_offset_bytes =
 80034bc:	f1c6 0244 	rsb	r2, r6, #68	; 0x44
			VL53L1_i2c_encode_general_config(
 80034c0:	fa17 f282 	uxtah	r2, r7, r2
 80034c4:	2116      	movs	r1, #22
 80034c6:	f204 308a 	addw	r0, r4, #906	; 0x38a
 80034ca:	f005 ff98 	bl	80093fe <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d143      	bne.n	800355a <VL53L1_init_and_start_range+0x1e2>
		i2c_buffer_offset_bytes =
 80034d2:	f1c6 025a 	rsb	r2, r6, #90	; 0x5a
			VL53L1_i2c_encode_timing_config(
 80034d6:	fa17 f282 	uxtah	r2, r7, r2
 80034da:	2117      	movs	r1, #23
 80034dc:	f504 7068 	add.w	r0, r4, #928	; 0x3a0
 80034e0:	f005 ffd2 	bl	8009488 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80034e4:	bbc8      	cbnz	r0, 800355a <VL53L1_init_and_start_range+0x1e2>
		if ((psystem->system__mode_start &
 80034e6:	f894 33d0 	ldrb.w	r3, [r4, #976]	; 0x3d0
		i2c_buffer_offset_bytes =
 80034ea:	f1c6 0271 	rsb	r2, r6, #113	; 0x71
		if ((psystem->system__mode_start &
 80034ee:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes =
 80034f0:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 80034f2:	d509      	bpl.n	8003508 <VL53L1_init_and_start_range+0x190>
					pstate->cfg_gph_id | 0x01;
 80034f4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
			pdynamic->system__grouped_parameter_hold   =
 80034f8:	f884 33ca 	strb.w	r3, [r4, #970]	; 0x3ca
			pdynamic->system__grouped_parameter_hold_0 =
 80034fc:	f043 0101 	orr.w	r1, r3, #1
 8003500:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
			pdynamic->system__grouped_parameter_hold_1 =
 8003504:	f884 13c4 	strb.w	r1, [r4, #964]	; 0x3c4
			VL53L1_i2c_encode_dynamic_config(
 8003508:	443a      	add	r2, r7
 800350a:	2112      	movs	r1, #18
 800350c:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
 8003510:	f005 fffd 	bl	800950e <VL53L1_i2c_encode_dynamic_config>
 8003514:	e008      	b.n	8003528 <VL53L1_init_and_start_range+0x1b0>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8003516:	d0b9      	beq.n	800348c <VL53L1_init_and_start_range+0x114>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8003518:	2d04      	cmp	r5, #4
 800351a:	d0c2      	beq.n	80034a2 <VL53L1_init_and_start_range+0x12a>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800351c:	2d03      	cmp	r5, #3
 800351e:	d0cb      	beq.n	80034b8 <VL53L1_init_and_start_range+0x140>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8003520:	2d02      	cmp	r5, #2
 8003522:	d0d4      	beq.n	80034ce <VL53L1_init_and_start_range+0x156>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8003524:	2d00      	cmp	r5, #0
 8003526:	d1dd      	bne.n	80034e4 <VL53L1_init_and_start_range+0x16c>
	if (status == VL53L1_ERROR_NONE) {
 8003528:	b9b8      	cbnz	r0, 800355a <VL53L1_init_and_start_range+0x1e2>
		i2c_buffer_offset_bytes =
 800352a:	f1c6 0283 	rsb	r2, r6, #131	; 0x83
			VL53L1_i2c_encode_system_control(
 800352e:	fa17 f282 	uxtah	r2, r7, r2
 8003532:	2105      	movs	r1, #5
 8003534:	f504 7073 	add.w	r0, r4, #972	; 0x3cc
 8003538:	f006 f82b 	bl	8009592 <VL53L1_i2c_encode_system_control>
	if (status == VL53L1_ERROR_NONE) {
 800353c:	b968      	cbnz	r0, 800355a <VL53L1_init_and_start_range+0x1e2>
			VL53L1_WriteMulti(
 800353e:	4643      	mov	r3, r8
 8003540:	463a      	mov	r2, r7
 8003542:	4631      	mov	r1, r6
 8003544:	4620      	mov	r0, r4
 8003546:	f7fd ffed 	bl	8001524 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 800354a:	b930      	cbnz	r0, 800355a <VL53L1_init_and_start_range+0x1e2>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800354c:	4620      	mov	r0, r4
 800354e:	f003 fb63 	bl	8006c18 <VL53L1_update_ll_driver_rd_state>
	if (status == VL53L1_ERROR_NONE)
 8003552:	b910      	cbnz	r0, 800355a <VL53L1_init_and_start_range+0x1e2>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8003554:	4620      	mov	r0, r4
 8003556:	f003 fbe7 	bl	8006d28 <VL53L1_update_ll_driver_cfg_state>
}
 800355a:	b040      	add	sp, #256	; 0x100
 800355c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003560:	00010100 	.word	0x00010100
 8003564:	0800dec3 	.word	0x0800dec3

08003568 <VL53L1_clear_interrupt_and_enable_next_range>:
		status = VL53L1_init_and_start_range(
 8003568:	2203      	movs	r2, #3
 800356a:	f7ff bf05 	b.w	8003378 <VL53L1_init_and_start_range>

0800356e <VL53L1_set_dmax_mode>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 800356e:	7181      	strb	r1, [r0, #6]

	LOG_FUNCTION_END(status);

	return status;
}
 8003570:	2000      	movs	r0, #0
 8003572:	4770      	bx	lr

08003574 <VL53L1_get_dmax_calibration_data>:
	VL53L1_LLDriverResults_t *pres =
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8003574:	2902      	cmp	r1, #2
 8003576:	d01d      	beq.n	80035b4 <VL53L1_get_dmax_calibration_data+0x40>
 8003578:	2903      	cmp	r1, #3
 800357a:	d004      	beq.n	8003586 <VL53L1_get_dmax_calibration_data+0x12>
 800357c:	2901      	cmp	r1, #1
 800357e:	d021      	beq.n	80035c4 <VL53L1_get_dmax_calibration_data+0x50>
 8003580:	f06f 0003 	mvn.w	r0, #3
 8003584:	4770      	bx	lr

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 8003586:	f500 5004 	add.w	r0, r0, #8448	; 0x2100
 800358a:	3018      	adds	r0, #24
 800358c:	211c      	movs	r1, #28
 800358e:	fb01 0202 	mla	r2, r1, r2, r0
 8003592:	f8d2 1af0 	ldr.w	r1, [r2, #2800]	; 0xaf0
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 8003596:	f8d2 2af4 	ldr.w	r2, [r2, #2804]	; 0xaf4
 800359a:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
 800359c:	f8b0 2ade 	ldrh.w	r2, [r0, #2782]	; 0xade
 80035a0:	809a      	strh	r2, [r3, #4]
		pres->zone_cal.cal_distance_mm;
		pdmax_cal->ref_reflectance_pc =
 80035a2:	f8b0 2ae0 	ldrh.w	r2, [r0, #2784]	; 0xae0
 80035a6:	80da      	strh	r2, [r3, #6]
		pres->zone_cal.cal_reflectance_pc;
		pdmax_cal->coverglass_transmission = 0x0100;
 80035a8:	f44f 7280 	mov.w	r2, #256	; 0x100
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 80035ac:	8019      	strh	r1, [r3, #0]
		pdmax_cal->coverglass_transmission = 0x0100;
 80035ae:	811a      	strh	r2, [r3, #8]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80035b0:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80035b2:	4770      	bx	lr
		memcpy(
 80035b4:	f850 2fae 	ldr.w	r2, [r0, #174]!
		memcpy(
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	6842      	ldr	r2, [r0, #4]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	8902      	ldrh	r2, [r0, #8]
 80035c0:	811a      	strh	r2, [r3, #8]
 80035c2:	e7f5      	b.n	80035b0 <VL53L1_get_dmax_calibration_data+0x3c>
 80035c4:	f850 2fa4 	ldr.w	r2, [r0, #164]!
 80035c8:	e7f6      	b.n	80035b8 <VL53L1_get_dmax_calibration_data+0x44>

080035ca <VL53L1_get_tuning_parm>:
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80035ca:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80035ce:	29bd      	cmp	r1, #189	; 0xbd
 80035d0:	f200 848a 	bhi.w	8003ee8 <VL53L1_get_tuning_parm+0x91e>
 80035d4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80035d8:	00c300be 	.word	0x00c300be
 80035dc:	00cd00c8 	.word	0x00cd00c8
 80035e0:	00d700d2 	.word	0x00d700d2
 80035e4:	00e100dc 	.word	0x00e100dc
 80035e8:	00eb00e6 	.word	0x00eb00e6
 80035ec:	00f500f0 	.word	0x00f500f0
 80035f0:	00ff00fa 	.word	0x00ff00fa
 80035f4:	01090104 	.word	0x01090104
 80035f8:	0113010e 	.word	0x0113010e
 80035fc:	011d0118 	.word	0x011d0118
 8003600:	01270122 	.word	0x01270122
 8003604:	0131012c 	.word	0x0131012c
 8003608:	013b0136 	.word	0x013b0136
 800360c:	01450140 	.word	0x01450140
 8003610:	014f014a 	.word	0x014f014a
 8003614:	01590154 	.word	0x01590154
 8003618:	0163015e 	.word	0x0163015e
 800361c:	016d0168 	.word	0x016d0168
 8003620:	01770172 	.word	0x01770172
 8003624:	0181017c 	.word	0x0181017c
 8003628:	018b0186 	.word	0x018b0186
 800362c:	01950190 	.word	0x01950190
 8003630:	019f019a 	.word	0x019f019a
 8003634:	01a901a4 	.word	0x01a901a4
 8003638:	01b301ae 	.word	0x01b301ae
 800363c:	01bd01b8 	.word	0x01bd01b8
 8003640:	01c701c2 	.word	0x01c701c2
 8003644:	01d101cc 	.word	0x01d101cc
 8003648:	01db01d6 	.word	0x01db01d6
 800364c:	01e501e0 	.word	0x01e501e0
 8003650:	01ef01ea 	.word	0x01ef01ea
 8003654:	01f901f4 	.word	0x01f901f4
 8003658:	020301fe 	.word	0x020301fe
 800365c:	020d0208 	.word	0x020d0208
 8003660:	02170212 	.word	0x02170212
 8003664:	0221021c 	.word	0x0221021c
 8003668:	022b0226 	.word	0x022b0226
 800366c:	02350230 	.word	0x02350230
 8003670:	023f023a 	.word	0x023f023a
 8003674:	02490244 	.word	0x02490244
 8003678:	0253024e 	.word	0x0253024e
 800367c:	025d0258 	.word	0x025d0258
 8003680:	02670262 	.word	0x02670262
 8003684:	0271026c 	.word	0x0271026c
 8003688:	027b0276 	.word	0x027b0276
 800368c:	02850280 	.word	0x02850280
 8003690:	028f028a 	.word	0x028f028a
 8003694:	02990294 	.word	0x02990294
 8003698:	02a3029e 	.word	0x02a3029e
 800369c:	02ad02a8 	.word	0x02ad02a8
 80036a0:	02b702b2 	.word	0x02b702b2
 80036a4:	02c102bc 	.word	0x02c102bc
 80036a8:	02cb02c6 	.word	0x02cb02c6
 80036ac:	02d502d0 	.word	0x02d502d0
 80036b0:	02df02da 	.word	0x02df02da
 80036b4:	02e902e4 	.word	0x02e902e4
 80036b8:	02f302ee 	.word	0x02f302ee
 80036bc:	02fd02f8 	.word	0x02fd02f8
 80036c0:	03070302 	.word	0x03070302
 80036c4:	0312030c 	.word	0x0312030c
 80036c8:	031e0318 	.word	0x031e0318
 80036cc:	032a0324 	.word	0x032a0324
 80036d0:	03360330 	.word	0x03360330
 80036d4:	0342033c 	.word	0x0342033c
 80036d8:	034e0348 	.word	0x034e0348
 80036dc:	035a0354 	.word	0x035a0354
 80036e0:	03660360 	.word	0x03660360
 80036e4:	0372036c 	.word	0x0372036c
 80036e8:	037e0378 	.word	0x037e0378
 80036ec:	03880383 	.word	0x03880383
 80036f0:	0392038d 	.word	0x0392038d
 80036f4:	039c0397 	.word	0x039c0397
 80036f8:	03a703a1 	.word	0x03a703a1
 80036fc:	03b103ac 	.word	0x03b103ac
 8003700:	03bb03b6 	.word	0x03bb03b6
 8003704:	03c503c0 	.word	0x03c503c0
 8003708:	03cf03ca 	.word	0x03cf03ca
 800370c:	03d903d4 	.word	0x03d903d4
 8003710:	03e303de 	.word	0x03e303de
 8003714:	03ed03e8 	.word	0x03ed03e8
 8003718:	03f703f2 	.word	0x03f703f2
 800371c:	040103fc 	.word	0x040103fc
 8003720:	040b0406 	.word	0x040b0406
 8003724:	04150410 	.word	0x04150410
 8003728:	041f041a 	.word	0x041f041a
 800372c:	04290424 	.word	0x04290424
 8003730:	0433042e 	.word	0x0433042e
 8003734:	043d0438 	.word	0x043d0438
 8003738:	04470442 	.word	0x04470442
 800373c:	0451044c 	.word	0x0451044c
 8003740:	045b0456 	.word	0x045b0456
 8003744:	04650460 	.word	0x04650460
 8003748:	046f046a 	.word	0x046f046a
 800374c:	04790474 	.word	0x04790474
 8003750:	0483047e 	.word	0x0483047e

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8003754:	f8b0 315c 	ldrh.w	r3, [r0, #348]	; 0x15c
 8003758:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800375a:	2000      	movs	r0, #0
	break;
 800375c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800375e:	f8b0 315e 	ldrh.w	r3, [r0, #350]	; 0x15e
 8003762:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003764:	2000      	movs	r0, #0
	break;
 8003766:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8003768:	f8b0 3160 	ldrh.w	r3, [r0, #352]	; 0x160
 800376c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800376e:	2000      	movs	r0, #0
	break;
 8003770:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8003772:	f890 3280 	ldrb.w	r3, [r0, #640]	; 0x280
 8003776:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003778:	2000      	movs	r0, #0
	break;
 800377a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800377c:	f890 3281 	ldrb.w	r3, [r0, #641]	; 0x281
 8003780:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003782:	2000      	movs	r0, #0
	break;
 8003784:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8003786:	f890 3282 	ldrb.w	r3, [r0, #642]	; 0x282
 800378a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800378c:	2000      	movs	r0, #0
	break;
 800378e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8003790:	f890 3283 	ldrb.w	r3, [r0, #643]	; 0x283
 8003794:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003796:	2000      	movs	r0, #0
	break;
 8003798:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 800379a:	f890 3284 	ldrb.w	r3, [r0, #644]	; 0x284
 800379e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037a0:	2000      	movs	r0, #0
	break;
 80037a2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 80037a4:	f890 3285 	ldrb.w	r3, [r0, #645]	; 0x285
 80037a8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037aa:	2000      	movs	r0, #0
	break;
 80037ac:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 80037ae:	f890 3286 	ldrb.w	r3, [r0, #646]	; 0x286
 80037b2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037b4:	2000      	movs	r0, #0
	break;
 80037b6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 80037b8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
		*ptuning_parm_value =
 80037bc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037be:	2000      	movs	r0, #0
	break;
 80037c0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 80037c2:	f8b0 3288 	ldrh.w	r3, [r0, #648]	; 0x288
 80037c6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037c8:	2000      	movs	r0, #0
	break;
 80037ca:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 80037cc:	f8b0 3290 	ldrh.w	r3, [r0, #656]	; 0x290
 80037d0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037d2:	2000      	movs	r0, #0
	break;
 80037d4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 80037d6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
		*ptuning_parm_value =
 80037da:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037dc:	2000      	movs	r0, #0
	break;
 80037de:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 80037e0:	f890 3298 	ldrb.w	r3, [r0, #664]	; 0x298
 80037e4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037e6:	2000      	movs	r0, #0
	break;
 80037e8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 80037ea:	f8b0 329a 	ldrh.w	r3, [r0, #666]	; 0x29a
 80037ee:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037f0:	2000      	movs	r0, #0
	break;
 80037f2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 80037f4:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 80037f8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037fa:	2000      	movs	r0, #0
	break;
 80037fc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 80037fe:	f890 32a2 	ldrb.w	r3, [r0, #674]	; 0x2a2
 8003802:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003804:	2000      	movs	r0, #0
	break;
 8003806:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8003808:	f8b0 32a6 	ldrh.w	r3, [r0, #678]	; 0x2a6
 800380c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800380e:	2000      	movs	r0, #0
	break;
 8003810:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8003812:	f890 32a3 	ldrb.w	r3, [r0, #675]	; 0x2a3
 8003816:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003818:	2000      	movs	r0, #0
	break;
 800381a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 800381c:	f8b0 32a4 	ldrh.w	r3, [r0, #676]	; 0x2a4
 8003820:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003822:	2000      	movs	r0, #0
	break;
 8003824:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8003826:	f890 3168 	ldrb.w	r3, [r0, #360]	; 0x168
 800382a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800382c:	2000      	movs	r0, #0
	break;
 800382e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8003830:	f890 3169 	ldrb.w	r3, [r0, #361]	; 0x169
 8003834:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003836:	2000      	movs	r0, #0
	break;
 8003838:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800383a:	f890 316a 	ldrb.w	r3, [r0, #362]	; 0x16a
 800383e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003840:	2000      	movs	r0, #0
	break;
 8003842:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8003844:	f890 316b 	ldrb.w	r3, [r0, #363]	; 0x16b
 8003848:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800384a:	2000      	movs	r0, #0
	break;
 800384c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 800384e:	f890 316c 	ldrb.w	r3, [r0, #364]	; 0x16c
 8003852:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003854:	2000      	movs	r0, #0
	break;
 8003856:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8003858:	f890 316d 	ldrb.w	r3, [r0, #365]	; 0x16d
 800385c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800385e:	2000      	movs	r0, #0
	break;
 8003860:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
 8003862:	f9b0 3312 	ldrsh.w	r3, [r0, #786]	; 0x312
 8003866:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003868:	2000      	movs	r0, #0
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
	break;
 800386a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
 800386c:	f9b0 3314 	ldrsh.w	r3, [r0, #788]	; 0x314
 8003870:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003872:	2000      	movs	r0, #0
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
	break;
 8003874:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8003876:	f8b0 3318 	ldrh.w	r3, [r0, #792]	; 0x318
 800387a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800387c:	2000      	movs	r0, #0
	break;
 800387e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8003880:	f8b0 32be 	ldrh.w	r3, [r0, #702]	; 0x2be
 8003884:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003886:	2000      	movs	r0, #0
	break;
 8003888:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
 800388a:	f8b0 3316 	ldrh.w	r3, [r0, #790]	; 0x316
 800388e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003890:	2000      	movs	r0, #0
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
	break;
 8003892:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8003894:	f890 32bc 	ldrb.w	r3, [r0, #700]	; 0x2bc
 8003898:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800389a:	2000      	movs	r0, #0
	break;
 800389c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 800389e:	f9b0 330a 	ldrsh.w	r3, [r0, #778]	; 0x30a
 80038a2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038a4:	2000      	movs	r0, #0
	break;
 80038a6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80038a8:	f890 316e 	ldrb.w	r3, [r0, #366]	; 0x16e
 80038ac:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038ae:	2000      	movs	r0, #0
	break;
 80038b0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80038b2:	f890 316f 	ldrb.w	r3, [r0, #367]	; 0x16f
 80038b6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038b8:	2000      	movs	r0, #0
	break;
 80038ba:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80038bc:	f8b0 3170 	ldrh.w	r3, [r0, #368]	; 0x170
 80038c0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038c2:	2000      	movs	r0, #0
	break;
 80038c4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80038c6:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 80038ca:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038cc:	2000      	movs	r0, #0
	break;
 80038ce:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80038d0:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
 80038d4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038d6:	2000      	movs	r0, #0
	break;
 80038d8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80038da:	f8b0 3174 	ldrh.w	r3, [r0, #372]	; 0x174
 80038de:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038e0:	2000      	movs	r0, #0
	break;
 80038e2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 80038e4:	f8b0 3176 	ldrh.w	r3, [r0, #374]	; 0x176
 80038e8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038ea:	2000      	movs	r0, #0
	break;
 80038ec:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 80038ee:	f8b0 3178 	ldrh.w	r3, [r0, #376]	; 0x178
 80038f2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038f4:	2000      	movs	r0, #0
	break;
 80038f6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
 80038f8:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
 80038fc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038fe:	2000      	movs	r0, #0
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
	break;
 8003900:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8003902:	f8b0 317c 	ldrh.w	r3, [r0, #380]	; 0x17c
 8003906:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003908:	2000      	movs	r0, #0
	break;
 800390a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
 800390c:	f8b0 317e 	ldrh.w	r3, [r0, #382]	; 0x17e
 8003910:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003912:	2000      	movs	r0, #0
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
	break;
 8003914:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8003916:	f890 3180 	ldrb.w	r3, [r0, #384]	; 0x180
 800391a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800391c:	2000      	movs	r0, #0
	break;
 800391e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8003920:	f890 3181 	ldrb.w	r3, [r0, #385]	; 0x181
 8003924:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003926:	2000      	movs	r0, #0
	break;
 8003928:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800392a:	f890 3182 	ldrb.w	r3, [r0, #386]	; 0x182
 800392e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003930:	2000      	movs	r0, #0
	break;
 8003932:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8003934:	f890 330e 	ldrb.w	r3, [r0, #782]	; 0x30e
 8003938:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800393a:	2000      	movs	r0, #0
	break;
 800393c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 800393e:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
 8003942:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003944:	2000      	movs	r0, #0
	break;
 8003946:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8003948:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
 800394c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800394e:	2000      	movs	r0, #0
	break;
 8003950:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8003952:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
 8003956:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003958:	2000      	movs	r0, #0
	break;
 800395a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800395c:	f9b0 330c 	ldrsh.w	r3, [r0, #780]	; 0x30c
 8003960:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003962:	2000      	movs	r0, #0
	break;
 8003964:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8003966:	f890 3162 	ldrb.w	r3, [r0, #354]	; 0x162
 800396a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800396c:	2000      	movs	r0, #0
	break;
 800396e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8003970:	f890 3163 	ldrb.w	r3, [r0, #355]	; 0x163
 8003974:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003976:	2000      	movs	r0, #0
	break;
 8003978:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800397a:	f890 3164 	ldrb.w	r3, [r0, #356]	; 0x164
 800397e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003980:	2000      	movs	r0, #0
	break;
 8003982:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8003984:	f890 3165 	ldrb.w	r3, [r0, #357]	; 0x165
 8003988:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800398a:	2000      	movs	r0, #0
	break;
 800398c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800398e:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
 8003992:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003994:	2000      	movs	r0, #0
	break;
 8003996:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8003998:	f890 3167 	ldrb.w	r3, [r0, #359]	; 0x167
 800399c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800399e:	2000      	movs	r0, #0
	break;
 80039a0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 80039a2:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
 80039a6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039a8:	2000      	movs	r0, #0
	break;
 80039aa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 80039ac:	f890 32c0 	ldrb.w	r3, [r0, #704]	; 0x2c0
 80039b0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039b2:	2000      	movs	r0, #0
	break;
 80039b4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 80039b6:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
 80039ba:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039bc:	2000      	movs	r0, #0
	break;
 80039be:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 80039c0:	f8b0 32ce 	ldrh.w	r3, [r0, #718]	; 0x2ce
 80039c4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039c6:	2000      	movs	r0, #0
	break;
 80039c8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 80039ca:	f8b0 32d0 	ldrh.w	r3, [r0, #720]	; 0x2d0
 80039ce:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039d0:	2000      	movs	r0, #0
	break;
 80039d2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 80039d4:	f8b0 32d2 	ldrh.w	r3, [r0, #722]	; 0x2d2
 80039d8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039da:	2000      	movs	r0, #0
	break;
 80039dc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 80039de:	f8b0 32d4 	ldrh.w	r3, [r0, #724]	; 0x2d4
 80039e2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039e4:	2000      	movs	r0, #0
	break;
 80039e6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80039e8:	f890 334c 	ldrb.w	r3, [r0, #844]	; 0x34c
 80039ec:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039ee:	2000      	movs	r0, #0
	break;
 80039f0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 80039f2:	f890 3264 	ldrb.w	r3, [r0, #612]	; 0x264
 80039f6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039f8:	2000      	movs	r0, #0
	break;
 80039fa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 80039fc:	f890 3265 	ldrb.w	r3, [r0, #613]	; 0x265
 8003a00:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a02:	2000      	movs	r0, #0
	break;
 8003a04:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8003a06:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8003a0a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a0c:	2000      	movs	r0, #0
		(int32_t)pdev->refspadchar.timeout_us;
	break;
 8003a0e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8003a10:	f8b0 326c 	ldrh.w	r3, [r0, #620]	; 0x26c
 8003a14:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a16:	2000      	movs	r0, #0
	break;
 8003a18:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8003a1a:	f8b0 326e 	ldrh.w	r3, [r0, #622]	; 0x26e
 8003a1e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a20:	2000      	movs	r0, #0
	break;
 8003a22:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8003a24:	f8b0 3270 	ldrh.w	r3, [r0, #624]	; 0x270
 8003a28:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a2a:	2000      	movs	r0, #0
	break;
 8003a2c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8003a2e:	f890 32ec 	ldrb.w	r3, [r0, #748]	; 0x2ec
 8003a32:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a34:	2000      	movs	r0, #0
	break;
 8003a36:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8003a38:	f9b0 32ee 	ldrsh.w	r3, [r0, #750]	; 0x2ee
 8003a3c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a3e:	2000      	movs	r0, #0
	break;
 8003a40:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8003a42:	f9b0 32f0 	ldrsh.w	r3, [r0, #752]	; 0x2f0
 8003a46:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a48:	2000      	movs	r0, #0
	break;
 8003a4a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8003a4c:	f8b0 32dc 	ldrh.w	r3, [r0, #732]	; 0x2dc
 8003a50:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a52:	2000      	movs	r0, #0
	break;
 8003a54:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8003a56:	f8d0 32e0 	ldr.w	r3, [r0, #736]	; 0x2e0
 8003a5a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a5c:	2000      	movs	r0, #0
		(int32_t)pXC->phasecal_config_timeout_us;
	break;
 8003a5e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8003a60:	f8b0 32f2 	ldrh.w	r3, [r0, #754]	; 0x2f2
 8003a64:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a66:	2000      	movs	r0, #0
	break;
 8003a68:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8003a6a:	f8b0 32f4 	ldrh.w	r3, [r0, #756]	; 0x2f4
 8003a6e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a70:	2000      	movs	r0, #0
	break;
 8003a72:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
 8003a74:	f8d0 32e4 	ldr.w	r3, [r0, #740]	; 0x2e4
 8003a78:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a7a:	2000      	movs	r0, #0
		(int32_t)pXC->mm_config_timeout_us;
	break;
 8003a7c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
 8003a7e:	f8d0 32e8 	ldr.w	r3, [r0, #744]	; 0x2e8
 8003a82:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a84:	2000      	movs	r0, #0
		(int32_t)pXC->range_config_timeout_us;
	break;
 8003a86:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8003a88:	f8b0 331c 	ldrh.w	r3, [r0, #796]	; 0x31c
 8003a8c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a8e:	2000      	movs	r0, #0
	break;
 8003a90:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8003a92:	f8d0 3320 	ldr.w	r3, [r0, #800]	; 0x320
 8003a96:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a98:	2000      	movs	r0, #0
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
	break;
 8003a9a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
 8003a9c:	f8d0 3328 	ldr.w	r3, [r0, #808]	; 0x328
 8003aa0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003aa2:	2000      	movs	r0, #0
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
	break;
 8003aa4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 8003aa6:	f8d0 3324 	ldr.w	r3, [r0, #804]	; 0x324
 8003aaa:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003aac:	2000      	movs	r0, #0
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
	break;
 8003aae:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8003ab0:	f890 332c 	ldrb.w	r3, [r0, #812]	; 0x32c
 8003ab4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ab6:	2000      	movs	r0, #0
	break;
 8003ab8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8003aba:	f890 332d 	ldrb.w	r3, [r0, #813]	; 0x32d
 8003abe:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ac0:	2000      	movs	r0, #0
	break;
 8003ac2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8003ac4:	f890 332e 	ldrb.w	r3, [r0, #814]	; 0x32e
 8003ac8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003aca:	2000      	movs	r0, #0
	break;
 8003acc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8003ace:	f8b0 3330 	ldrh.w	r3, [r0, #816]	; 0x330
 8003ad2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ad4:	2000      	movs	r0, #0
	break;
 8003ad6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8003ad8:	f8d0 3334 	ldr.w	r3, [r0, #820]	; 0x334
 8003adc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ade:	2000      	movs	r0, #0
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
	break;
 8003ae0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
 8003ae2:	f8d0 3338 	ldr.w	r3, [r0, #824]	; 0x338
 8003ae6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ae8:	2000      	movs	r0, #0
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
	break;
 8003aea:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8003aec:	f8b0 3340 	ldrh.w	r3, [r0, #832]	; 0x340
 8003af0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003af2:	2000      	movs	r0, #0
	break;
 8003af4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 8003af6:	f8d0 333c 	ldr.w	r3, [r0, #828]	; 0x33c
 8003afa:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003afc:	2000      	movs	r0, #0
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
	break;
 8003afe:	4770      	bx	lr
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8003b00:	f8b0 3342 	ldrh.w	r3, [r0, #834]	; 0x342
 8003b04:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b06:	2000      	movs	r0, #0
	break;
 8003b08:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8003b0a:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8003b0e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b10:	2000      	movs	r0, #0
	break;
 8003b12:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8003b14:	f890 3276 	ldrb.w	r3, [r0, #630]	; 0x276
 8003b18:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b1a:	2000      	movs	r0, #0
	break;
 8003b1c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8003b1e:	f8b0 327c 	ldrh.w	r3, [r0, #636]	; 0x27c
 8003b22:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b24:	2000      	movs	r0, #0
	break;
 8003b26:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8003b28:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
 8003b2c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b2e:	2000      	movs	r0, #0
	break;
 8003b30:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003b32:	f8b0 318a 	ldrh.w	r3, [r0, #394]	; 0x18a
 8003b36:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b38:	2000      	movs	r0, #0
	break;
 8003b3a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8003b3c:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
 8003b40:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b42:	2000      	movs	r0, #0
	break;
 8003b44:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8003b46:	f8b0 318e 	ldrh.w	r3, [r0, #398]	; 0x18e
 8003b4a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b4c:	2000      	movs	r0, #0
	break;
 8003b4e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003b50:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8003b54:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b56:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
	break;
 8003b58:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003b5a:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
 8003b5e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b60:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
	break;
 8003b62:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003b64:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
 8003b68:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b6a:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
	break;
 8003b6c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003b6e:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 8003b72:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b74:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
	break;
 8003b76:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003b78:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8003b7c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b7e:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
	break;
 8003b80:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003b82:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
 8003b86:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b88:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
	break;
 8003b8a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003b8c:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 8003b90:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b92:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
	break;
 8003b94:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003b96:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 8003b9a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b9c:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
	break;
 8003b9e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003ba0:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
 8003ba4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ba6:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
	break;
 8003ba8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003baa:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 8003bae:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003bb0:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
	break;
 8003bb2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003bb4:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
 8003bb8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003bba:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
	break;
 8003bbc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003bbe:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 8003bc2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003bc4:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
	break;
 8003bc6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003bc8:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 8003bcc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003bce:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
	break;
 8003bd0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003bd2:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
 8003bd6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003bd8:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
	break;
 8003bda:	4770      	bx	lr
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003bdc:	f8d0 31d0 	ldr.w	r3, [r0, #464]	; 0x1d0
 8003be0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003be2:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
	break;
 8003be4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003be6:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
 8003bea:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003bec:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
	break;
 8003bee:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8003bf0:	f241 4304 	movw	r3, #5124	; 0x1404
 8003bf4:	5ac3      	ldrh	r3, [r0, r3]
 8003bf6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003bf8:	2000      	movs	r0, #0
	break;
 8003bfa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8003bfc:	f241 4308 	movw	r3, #5128	; 0x1408
		*ptuning_parm_value =
 8003c00:	58c3      	ldr	r3, [r0, r3]
 8003c02:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c04:	2000      	movs	r0, #0
	break;
 8003c06:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8003c08:	f241 430c 	movw	r3, #5132	; 0x140c
		*ptuning_parm_value =
 8003c0c:	58c3      	ldr	r3, [r0, r3]
 8003c0e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c10:	2000      	movs	r0, #0
	break;
 8003c12:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8003c14:	f241 4310 	movw	r3, #5136	; 0x1410
 8003c18:	5cc3      	ldrb	r3, [r0, r3]
 8003c1a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c1c:	2000      	movs	r0, #0
	break;
 8003c1e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8003c20:	f241 4314 	movw	r3, #5140	; 0x1414
		*ptuning_parm_value =
 8003c24:	58c3      	ldr	r3, [r0, r3]
 8003c26:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c28:	2000      	movs	r0, #0
	break;
 8003c2a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8003c2c:	f241 4318 	movw	r3, #5144	; 0x1418
		*ptuning_parm_value =
 8003c30:	58c3      	ldr	r3, [r0, r3]
 8003c32:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c34:	2000      	movs	r0, #0
	break;
 8003c36:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8003c38:	f241 431c 	movw	r3, #5148	; 0x141c
		*ptuning_parm_value =
 8003c3c:	58c3      	ldr	r3, [r0, r3]
 8003c3e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c40:	2000      	movs	r0, #0
	break;
 8003c42:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8003c44:	f500 50a1 	add.w	r0, r0, #5152	; 0x1420
		*ptuning_parm_value =
 8003c48:	6803      	ldr	r3, [r0, #0]
 8003c4a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c4c:	2000      	movs	r0, #0
	break;
 8003c4e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8003c50:	f241 4328 	movw	r3, #5160	; 0x1428
 8003c54:	5cc3      	ldrb	r3, [r0, r3]
 8003c56:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c58:	2000      	movs	r0, #0
	break;
 8003c5a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8003c5c:	f241 432a 	movw	r3, #5162	; 0x142a
 8003c60:	5ec3      	ldrsh	r3, [r0, r3]
 8003c62:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c64:	2000      	movs	r0, #0
	break;
 8003c66:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8003c68:	f241 432c 	movw	r3, #5164	; 0x142c
 8003c6c:	5ec3      	ldrsh	r3, [r0, r3]
 8003c6e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c70:	2000      	movs	r0, #0
	break;
 8003c72:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8003c74:	f241 432e 	movw	r3, #5166	; 0x142e
 8003c78:	5cc3      	ldrb	r3, [r0, r3]
 8003c7a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c7c:	2000      	movs	r0, #0
	break;
 8003c7e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8003c80:	f241 4302 	movw	r3, #5122	; 0x1402
 8003c84:	5cc3      	ldrb	r3, [r0, r3]
 8003c86:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c88:	2000      	movs	r0, #0
	break;
 8003c8a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8003c8c:	f241 4324 	movw	r3, #5156	; 0x1424
		*ptuning_parm_value = (int32_t)(
 8003c90:	58c3      	ldr	r3, [r0, r3]
 8003c92:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c94:	2000      	movs	r0, #0
	break;
 8003c96:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8003c98:	f241 4330 	movw	r3, #5168	; 0x1430
		*ptuning_parm_value =
 8003c9c:	58c3      	ldr	r3, [r0, r3]
 8003c9e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ca0:	2000      	movs	r0, #0
	break;
 8003ca2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8003ca4:	f241 4334 	movw	r3, #5172	; 0x1434
		*ptuning_parm_value =
 8003ca8:	58c3      	ldr	r3, [r0, r3]
 8003caa:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003cac:	2000      	movs	r0, #0
	break;
 8003cae:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8003cb0:	f241 4338 	movw	r3, #5176	; 0x1438
		*ptuning_parm_value =
 8003cb4:	58c3      	ldr	r3, [r0, r3]
 8003cb6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003cb8:	2000      	movs	r0, #0
	break;
 8003cba:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8003cbc:	f241 433c 	movw	r3, #5180	; 0x143c
 8003cc0:	5ac3      	ldrh	r3, [r0, r3]
 8003cc2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003cc4:	2000      	movs	r0, #0
	break;
 8003cc6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8003cc8:	f500 50a3 	add.w	r0, r0, #5216	; 0x1460
 8003ccc:	7803      	ldrb	r3, [r0, #0]
 8003cce:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003cd0:	2000      	movs	r0, #0
	break;
 8003cd2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003cd4:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
 8003cd8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003cda:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
	break;
 8003cdc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8003cde:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 8003ce2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ce4:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
	break;
 8003ce6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8003ce8:	f8b0 3190 	ldrh.w	r3, [r0, #400]	; 0x190
 8003cec:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003cee:	2000      	movs	r0, #0
	break;
 8003cf0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
 8003cf2:	f8d0 31dc 	ldr.w	r3, [r0, #476]	; 0x1dc
 8003cf6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003cf8:	2000      	movs	r0, #0
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
	break;
 8003cfa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8003cfc:	f890 31e0 	ldrb.w	r3, [r0, #480]	; 0x1e0
 8003d00:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d02:	2000      	movs	r0, #0
	break;
 8003d04:	4770      	bx	lr
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
 8003d06:	f8d0 31e4 	ldr.w	r3, [r0, #484]	; 0x1e4
 8003d0a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d0c:	2000      	movs	r0, #0
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
	break;
 8003d0e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8003d10:	f890 31e8 	ldrb.w	r3, [r0, #488]	; 0x1e8
 8003d14:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d16:	2000      	movs	r0, #0
	break;
 8003d18:	4770      	bx	lr
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8003d1a:	f500 50a2 	add.w	r0, r0, #5184	; 0x1440
		*ptuning_parm_value =
 8003d1e:	6803      	ldr	r3, [r0, #0]
 8003d20:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d22:	2000      	movs	r0, #0
	break;
 8003d24:	4770      	bx	lr

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8003d26:	f890 31e9 	ldrb.w	r3, [r0, #489]	; 0x1e9
 8003d2a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d2c:	2000      	movs	r0, #0
	break;
 8003d2e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8003d30:	f9b0 31ea 	ldrsh.w	r3, [r0, #490]	; 0x1ea
 8003d34:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d36:	2000      	movs	r0, #0
	break;
 8003d38:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8003d3a:	f9b0 31ec 	ldrsh.w	r3, [r0, #492]	; 0x1ec
 8003d3e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d40:	2000      	movs	r0, #0
	break;
 8003d42:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8003d44:	f9b0 31ee 	ldrsh.w	r3, [r0, #494]	; 0x1ee
 8003d48:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d4a:	2000      	movs	r0, #0
	break;
 8003d4c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8003d4e:	f9b0 31f0 	ldrsh.w	r3, [r0, #496]	; 0x1f0
 8003d52:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d54:	2000      	movs	r0, #0
	break;
 8003d56:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8003d58:	f9b0 31f2 	ldrsh.w	r3, [r0, #498]	; 0x1f2
 8003d5c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d5e:	2000      	movs	r0, #0
	break;
 8003d60:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8003d62:	f9b0 31f4 	ldrsh.w	r3, [r0, #500]	; 0x1f4
 8003d66:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d68:	2000      	movs	r0, #0
	break;
 8003d6a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8003d6c:	f9b0 31f6 	ldrsh.w	r3, [r0, #502]	; 0x1f6
 8003d70:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d72:	2000      	movs	r0, #0
	break;
 8003d74:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8003d76:	f9b0 31f8 	ldrsh.w	r3, [r0, #504]	; 0x1f8
 8003d7a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d7c:	2000      	movs	r0, #0
	break;
 8003d7e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8003d80:	f9b0 31fa 	ldrsh.w	r3, [r0, #506]	; 0x1fa
 8003d84:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d86:	2000      	movs	r0, #0
	break;
 8003d88:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8003d8a:	f9b0 31fc 	ldrsh.w	r3, [r0, #508]	; 0x1fc
 8003d8e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d90:	2000      	movs	r0, #0
	break;
 8003d92:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 8003d94:	f9b0 31fe 	ldrsh.w	r3, [r0, #510]	; 0x1fe
 8003d98:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003d9a:	2000      	movs	r0, #0
	break;
 8003d9c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8003d9e:	f9b0 3200 	ldrsh.w	r3, [r0, #512]	; 0x200
 8003da2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003da4:	2000      	movs	r0, #0
	break;
 8003da6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8003da8:	f9b0 3202 	ldrsh.w	r3, [r0, #514]	; 0x202
 8003dac:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003dae:	2000      	movs	r0, #0
	break;
 8003db0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8003db2:	f9b0 3204 	ldrsh.w	r3, [r0, #516]	; 0x204
 8003db6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003db8:	2000      	movs	r0, #0
	break;
 8003dba:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8003dbc:	f9b0 3206 	ldrsh.w	r3, [r0, #518]	; 0x206
 8003dc0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003dc2:	2000      	movs	r0, #0
	break;
 8003dc4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8003dc6:	f9b0 3208 	ldrsh.w	r3, [r0, #520]	; 0x208
 8003dca:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003dcc:	2000      	movs	r0, #0
	break;
 8003dce:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8003dd0:	f9b0 320a 	ldrsh.w	r3, [r0, #522]	; 0x20a
 8003dd4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003dd6:	2000      	movs	r0, #0
	break;
 8003dd8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8003dda:	f9b0 320c 	ldrsh.w	r3, [r0, #524]	; 0x20c
 8003dde:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003de0:	2000      	movs	r0, #0
	break;
 8003de2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8003de4:	f9b0 320e 	ldrsh.w	r3, [r0, #526]	; 0x20e
 8003de8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003dea:	2000      	movs	r0, #0
	break;
 8003dec:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8003dee:	f9b0 3210 	ldrsh.w	r3, [r0, #528]	; 0x210
 8003df2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003df4:	2000      	movs	r0, #0
	break;
 8003df6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8003df8:	f9b0 3212 	ldrsh.w	r3, [r0, #530]	; 0x212
 8003dfc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003dfe:	2000      	movs	r0, #0
	break;
 8003e00:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8003e02:	f9b0 3214 	ldrsh.w	r3, [r0, #532]	; 0x214
 8003e06:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e08:	2000      	movs	r0, #0
	break;
 8003e0a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 8003e0c:	f9b0 3216 	ldrsh.w	r3, [r0, #534]	; 0x216
 8003e10:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e12:	2000      	movs	r0, #0
	break;
 8003e14:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 8003e16:	f9b0 3218 	ldrsh.w	r3, [r0, #536]	; 0x218
 8003e1a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e1c:	2000      	movs	r0, #0
	break;
 8003e1e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8003e20:	f9b0 321a 	ldrsh.w	r3, [r0, #538]	; 0x21a
 8003e24:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e26:	2000      	movs	r0, #0
	break;
 8003e28:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8003e2a:	f9b0 321c 	ldrsh.w	r3, [r0, #540]	; 0x21c
 8003e2e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e30:	2000      	movs	r0, #0
	break;
 8003e32:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8003e34:	f9b0 321e 	ldrsh.w	r3, [r0, #542]	; 0x21e
 8003e38:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e3a:	2000      	movs	r0, #0
	break;
 8003e3c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8003e3e:	f9b0 3220 	ldrsh.w	r3, [r0, #544]	; 0x220
 8003e42:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e44:	2000      	movs	r0, #0
	break;
 8003e46:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8003e48:	f9b0 3222 	ldrsh.w	r3, [r0, #546]	; 0x222
 8003e4c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e4e:	2000      	movs	r0, #0
	break;
 8003e50:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8003e52:	f9b0 3224 	ldrsh.w	r3, [r0, #548]	; 0x224
 8003e56:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e58:	2000      	movs	r0, #0
	break;
 8003e5a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8003e5c:	f9b0 3226 	ldrsh.w	r3, [r0, #550]	; 0x226
 8003e60:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e62:	2000      	movs	r0, #0
	break;
 8003e64:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8003e66:	f9b0 3228 	ldrsh.w	r3, [r0, #552]	; 0x228
 8003e6a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e6c:	2000      	movs	r0, #0
	break;
 8003e6e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8003e70:	f9b0 322a 	ldrsh.w	r3, [r0, #554]	; 0x22a
 8003e74:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e76:	2000      	movs	r0, #0
	break;
 8003e78:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8003e7a:	f9b0 322c 	ldrsh.w	r3, [r0, #556]	; 0x22c
 8003e7e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e80:	2000      	movs	r0, #0
	break;
 8003e82:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8003e84:	f9b0 322e 	ldrsh.w	r3, [r0, #558]	; 0x22e
 8003e88:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e8a:	2000      	movs	r0, #0
	break;
 8003e8c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8003e8e:	f9b0 3230 	ldrsh.w	r3, [r0, #560]	; 0x230
 8003e92:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e94:	2000      	movs	r0, #0
	break;
 8003e96:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8003e98:	f9b0 3232 	ldrsh.w	r3, [r0, #562]	; 0x232
 8003e9c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003e9e:	2000      	movs	r0, #0
	break;
 8003ea0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8003ea2:	f9b0 3234 	ldrsh.w	r3, [r0, #564]	; 0x234
 8003ea6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ea8:	2000      	movs	r0, #0
	break;
 8003eaa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8003eac:	f9b0 3236 	ldrsh.w	r3, [r0, #566]	; 0x236
 8003eb0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003eb2:	2000      	movs	r0, #0
	break;
 8003eb4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8003eb6:	f9b0 3238 	ldrsh.w	r3, [r0, #568]	; 0x238
 8003eba:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ebc:	2000      	movs	r0, #0
	break;
 8003ebe:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8003ec0:	f9b0 323a 	ldrsh.w	r3, [r0, #570]	; 0x23a
 8003ec4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ec6:	2000      	movs	r0, #0
	break;
 8003ec8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8003eca:	f9b0 323c 	ldrsh.w	r3, [r0, #572]	; 0x23c
 8003ece:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ed0:	2000      	movs	r0, #0
	break;
 8003ed2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8003ed4:	f9b0 323e 	ldrsh.w	r3, [r0, #574]	; 0x23e
 8003ed8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003eda:	2000      	movs	r0, #0
	break;
 8003edc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8003ede:	f9b0 3240 	ldrsh.w	r3, [r0, #576]	; 0x240
 8003ee2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ee4:	2000      	movs	r0, #0
	break;
 8003ee6:	4770      	bx	lr

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8003ee8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003eec:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003eee:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8003ef2:	4770      	bx	lr

08003ef4 <VL53L1_load_patch>:
	VL53L1_DEV Dev) {
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	b0c2      	sub	sp, #264	; 0x108
	int32_t patch_tuning = 0;
 8003ef8:	2200      	movs	r2, #0
		status = VL53L1_WrByte(Dev,
 8003efa:	2185      	movs	r1, #133	; 0x85
	VL53L1_DEV Dev) {
 8003efc:	4605      	mov	r5, r0
	int32_t patch_tuning = 0;
 8003efe:	9201      	str	r2, [sp, #4]
		status = VL53L1_WrByte(Dev,
 8003f00:	f7fd fb48 	bl	8001594 <VL53L1_WrByte>
	if (status == VL53L1_ERROR_NONE)
 8003f04:	4604      	mov	r4, r0
 8003f06:	b910      	cbnz	r0, 8003f0e <VL53L1_load_patch+0x1a>
		VL53L1_enable_powerforce(Dev);
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f002 f8d2 	bl	80060b2 <VL53L1_enable_powerforce>
	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8003f0e:	aa01      	add	r2, sp, #4
 8003f10:	f248 018c 	movw	r1, #32908	; 0x808c
 8003f14:	4628      	mov	r0, r5
 8003f16:	f7ff fb58 	bl	80035ca <VL53L1_get_tuning_parm>
	switch (patch_tuning) {
 8003f1a:	9b01      	ldr	r3, [sp, #4]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	bf9b      	ittet	ls
 8003f22:	4a27      	ldrls	r2, [pc, #156]	; (8003fc0 <VL53L1_load_patch+0xcc>)
 8003f24:	189b      	addls	r3, r3, r2
 8003f26:	2300      	movhi	r3, #0
 8003f28:	799b      	ldrbls	r3, [r3, #6]
	if (status == VL53L1_ERROR_NONE) {
 8003f2a:	2c00      	cmp	r4, #0
 8003f2c:	d144      	bne.n	8003fb8 <VL53L1_load_patch+0xc4>
		comms_buffer[0] = 0x29;
 8003f2e:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <VL53L1_load_patch+0xd0>)
 8003f30:	9202      	str	r2, [sp, #8]
		comms_buffer[4] = 0x28;
 8003f32:	2228      	movs	r2, #40	; 0x28
 8003f34:	f88d 200c 	strb.w	r2, [sp, #12]
		comms_buffer[5] = patch_power;
 8003f38:	f88d 300d 	strb.w	r3, [sp, #13]
		status = VL53L1_WriteMulti(Dev,
 8003f3c:	aa02      	add	r2, sp, #8
 8003f3e:	2306      	movs	r3, #6
 8003f40:	f240 4176 	movw	r1, #1142	; 0x476
 8003f44:	4628      	mov	r0, r5
 8003f46:	f7fd faed 	bl	8001524 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE) {
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	bba0      	cbnz	r0, 8003fb8 <VL53L1_load_patch+0xc4>
		comms_buffer[0] = 0x03;
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <VL53L1_load_patch+0xd4>)
 8003f50:	9302      	str	r3, [sp, #8]
		comms_buffer[4] = 0x07;
 8003f52:	f642 1307 	movw	r3, #10503	; 0x2907
 8003f56:	f8ad 300c 	strh.w	r3, [sp, #12]
		status = VL53L1_WriteMulti(Dev,
 8003f5a:	aa02      	add	r2, sp, #8
 8003f5c:	2306      	movs	r3, #6
 8003f5e:	f240 4196 	movw	r1, #1174	; 0x496
 8003f62:	4628      	mov	r0, r5
 8003f64:	f7fd fade 	bl	8001524 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE) {
 8003f68:	4604      	mov	r4, r0
 8003f6a:	bb28      	cbnz	r0, 8003fb8 <VL53L1_load_patch+0xc4>
		comms_buffer[0] = 0x00;
 8003f6c:	f44f 66e0 	mov.w	r6, #1792	; 0x700
		status = VL53L1_WriteMulti(Dev,
 8003f70:	2302      	movs	r3, #2
 8003f72:	aa02      	add	r2, sp, #8
 8003f74:	f240 4172 	movw	r1, #1138	; 0x472
 8003f78:	4628      	mov	r0, r5
		comms_buffer[0] = 0x00;
 8003f7a:	f8ad 6008 	strh.w	r6, [sp, #8]
		status = VL53L1_WriteMulti(Dev,
 8003f7e:	f7fd fad1 	bl	8001524 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE) {
 8003f82:	4604      	mov	r4, r0
 8003f84:	b9c0      	cbnz	r0, 8003fb8 <VL53L1_load_patch+0xc4>
		status = VL53L1_WriteMulti(Dev,
 8003f86:	2302      	movs	r3, #2
 8003f88:	aa02      	add	r2, sp, #8
 8003f8a:	f240 4174 	movw	r1, #1140	; 0x474
 8003f8e:	4628      	mov	r0, r5
		comms_buffer[0] = 0x00;
 8003f90:	f8ad 6008 	strh.w	r6, [sp, #8]
		status = VL53L1_WriteMulti(Dev,
 8003f94:	f7fd fac6 	bl	8001524 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 8003f98:	4604      	mov	r4, r0
 8003f9a:	b968      	cbnz	r0, 8003fb8 <VL53L1_load_patch+0xc4>
		status = VL53L1_WrByte(Dev,
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	f7fd faf6 	bl	8001594 <VL53L1_WrByte>
	if (status == VL53L1_ERROR_NONE)
 8003fa8:	4604      	mov	r4, r0
 8003faa:	b928      	cbnz	r0, 8003fb8 <VL53L1_load_patch+0xc4>
		status = VL53L1_WrByte(Dev,
 8003fac:	2201      	movs	r2, #1
 8003fae:	2185      	movs	r1, #133	; 0x85
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	f7fd faef 	bl	8001594 <VL53L1_WrByte>
 8003fb6:	4604      	mov	r4, r0
}
 8003fb8:	4620      	mov	r0, r4
 8003fba:	b042      	add	sp, #264	; 0x108
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
 8003fbe:	bf00      	nop
 8003fc0:	0800dec3 	.word	0x0800dec3
 8003fc4:	400ec929 	.word	0x400ec929
 8003fc8:	6f036d03 	.word	0x6f036d03

08003fcc <VL53L1_get_histogram_bin_data>:
{
 8003fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd0:	b0cb      	sub	sp, #300	; 0x12c
	int32_t    hist_merge				= 0;
 8003fd2:	2300      	movs	r3, #0
{
 8003fd4:	460d      	mov	r5, r1
		status = VL53L1_ReadMulti(
 8003fd6:	aa0a      	add	r2, sp, #40	; 0x28
	int32_t    hist_merge				= 0;
 8003fd8:	9307      	str	r3, [sp, #28]
		status = VL53L1_ReadMulti(
 8003fda:	2188      	movs	r1, #136	; 0x88
 8003fdc:	2353      	movs	r3, #83	; 0x53
{
 8003fde:	4604      	mov	r4, r0
		status = VL53L1_ReadMulti(
 8003fe0:	f7fd fac0 	bl	8001564 <VL53L1_ReadMulti>
	pdata->result__interrupt_status               = *(pbuffer +   0);
 8003fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe6:	67ab      	str	r3, [r5, #120]	; 0x78
		status = VL53L1_ReadMulti(
 8003fe8:	9005      	str	r0, [sp, #20]
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8003fea:	a90b      	add	r1, sp, #44	; 0x2c
 8003fec:	2002      	movs	r0, #2
 8003fee:	f002 f80d 	bl	800600c <VL53L1_i2c_decode_uint16_t>
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8003ff2:	f10d 0176 	add.w	r1, sp, #118	; 0x76
	pdata->result__dss_actual_effective_spads =
 8003ff6:	f8a5 007c 	strh.w	r0, [r5, #124]	; 0x7c
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8003ffa:	2002      	movs	r0, #2
 8003ffc:	f002 f806 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8004000:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8004004:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	pdev->dbg_results.phasecal_result__reference_phase =
 8004008:	f241 33c8 	movw	r3, #5064	; 0x13c8
	pdata->phasecal_result__reference_phase =
 800400c:	f8a5 007e 	strh.w	r0, [r5, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8004010:	52e0      	strh	r0, [r4, r3]
	pdev->dbg_results.phasecal_result__vcsel_start =
 8004012:	f241 33ca 	movw	r3, #5066	; 0x13ca
			pdata->phasecal_result__vcsel_start;
 8004016:	f895 2080 	ldrb.w	r2, [r5, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 800401a:	54e2      	strb	r2, [r4, r3]
	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 800401c:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8004020:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8004024:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004028:	f105 0618 	add.w	r6, r5, #24
	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 800402c:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004030:	f105 0378 	add.w	r3, r5, #120	; 0x78
 8004034:	46b0      	mov	r8, r6
 8004036:	9303      	str	r3, [sp, #12]
	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8004038:	4637      	mov	r7, r6
	pbuffer = &buffer[i2c_buffer_offset_bytes];
 800403a:	f10d 092e 	add.w	r9, sp, #46	; 0x2e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 800403e:	4649      	mov	r1, r9
 8004040:	2003      	movs	r0, #3
 8004042:	f002 f80d 	bl	8006060 <VL53L1_i2c_decode_uint32_t>
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004046:	9b03      	ldr	r3, [sp, #12]
		pdata->bin_data[bin] =
 8004048:	f847 0b04 	str.w	r0, [r7], #4
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 800404c:	429f      	cmp	r7, r3
		pbuffer += 3;
 800404e:	f109 0903 	add.w	r9, r9, #3
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004052:	d1f4      	bne.n	800403e <VL53L1_get_histogram_bin_data+0x72>
	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8004054:	aa07      	add	r2, sp, #28
 8004056:	f248 018d 	movw	r1, #32909	; 0x808d
 800405a:	4620      	mov	r0, r4
 800405c:	f7ff fab5 	bl	80035ca <VL53L1_get_tuning_parm>
	if (pdata->result__stream_count == 0) {
 8004060:	f895 707b 	ldrb.w	r7, [r5, #123]	; 0x7b
 8004064:	b94f      	cbnz	r7, 800407a <VL53L1_get_histogram_bin_data+0xae>
		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8004066:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800406a:	4639      	mov	r1, r7
 800406c:	f504 50e4 	add.w	r0, r4, #7296	; 0x1c80
 8004070:	f007 f954 	bl	800b31c <memset>
		pdev->bin_rec_pos = 0;
 8004074:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8004078:	52e7      	strh	r7, [r4, r3]
	if (hist_merge == 1)
 800407a:	9b07      	ldr	r3, [sp, #28]
 800407c:	2b01      	cmp	r3, #1
 800407e:	f040 80e1 	bne.w	8004244 <VL53L1_get_histogram_bin_data+0x278>
	int32_t    TuningBinRecSize		    = 0;
 8004082:	2300      	movs	r3, #0
	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8004084:	aa08      	add	r2, sp, #32
 8004086:	f248 018f 	movw	r1, #32911	; 0x808f
 800408a:	4620      	mov	r0, r4
	int32_t    rmt  = 0;
 800408c:	e9cd 3308 	strd	r3, r3, [sp, #32]
	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8004090:	f7ff fa9b 	bl	80035ca <VL53L1_get_tuning_parm>
	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8004094:	f248 018e 	movw	r1, #32910	; 0x808e
 8004098:	aa09      	add	r2, sp, #36	; 0x24
 800409a:	4620      	mov	r0, r4
 800409c:	f7ff fa95 	bl	80035ca <VL53L1_get_tuning_parm>
	if (pdev->pos_before_next_recom == 0) {
 80040a0:	f641 437d 	movw	r3, #7293	; 0x1c7d
 80040a4:	5ce1      	ldrb	r1, [r4, r3]
 80040a6:	2900      	cmp	r1, #0
 80040a8:	f040 814d 	bne.w	8004346 <VL53L1_get_histogram_bin_data+0x37a>
		if (pdev->bin_rec_pos > 0)
 80040ac:	f641 437c 	movw	r3, #7292	; 0x1c7c
 80040b0:	f895 707b 	ldrb.w	r7, [r5, #123]	; 0x7b
 80040b4:	5ce3      	ldrb	r3, [r4, r3]
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	9b08      	ldr	r3, [sp, #32]
 80040ba:	9302      	str	r3, [sp, #8]
 80040bc:	9b01      	ldr	r3, [sp, #4]
 80040be:	f007 0701 	and.w	r7, r7, #1
 80040c2:	f087 0901 	eor.w	r9, r7, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d079      	beq.n	80041be <VL53L1_get_histogram_bin_data+0x1f2>
			prev_pos = (TuningBinRecSize - 1);
 80040ca:	1e58      	subs	r0, r3, #1
 80040cc:	b2c0      	uxtb	r0, r0
		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 80040ce:	23c0      	movs	r3, #192	; 0xc0
 80040d0:	f04f 0c60 	mov.w	ip, #96	; 0x60
 80040d4:	4343      	muls	r3, r0
 80040d6:	fb0c 3309 	mla	r3, ip, r9, r3
 80040da:	4423      	add	r3, r4
 80040dc:	f641 4290 	movw	r2, #7312	; 0x1c90
 80040e0:	589b      	ldr	r3, [r3, r2]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	dd75      	ble.n	80041d2 <VL53L1_get_histogram_bin_data+0x206>
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80040e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80040ea:	0180      	lsls	r0, r0, #6
		HighIndex = BuffSize - timing * 4;
 80040ec:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80040f0:	fb1c 0c09 	smlabb	ip, ip, r9, r0
 80040f4:	f1c3 0218 	rsb	r2, r3, #24
 80040f8:	f50c 5ce4 	add.w	ip, ip, #7296	; 0x1c80
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	eb04 0b0c 	add.w	fp, r4, ip
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8004104:	4618      	mov	r0, r3
	total_rate_cur = 0;
 8004106:	f04f 0c00 	mov.w	ip, #0
	for (bin = timing * 4; bin < HighIndex; bin++) {
 800410a:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
	total_rate_pre = 0;
 800410e:	46e6      	mov	lr, ip
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8004110:	9304      	str	r3, [sp, #16]
 8004112:	9b04      	ldr	r3, [sp, #16]
 8004114:	b282      	uxth	r2, r0
 8004116:	4293      	cmp	r3, r2
 8004118:	d853      	bhi.n	80041c2 <VL53L1_get_histogram_bin_data+0x1f6>
	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 800411a:	f1be 0f00 	cmp.w	lr, #0
 800411e:	d058      	beq.n	80041d2 <VL53L1_get_histogram_bin_data+0x206>
 8004120:	f1bc 0f00 	cmp.w	ip, #0
 8004124:	d058      	beq.n	80041d8 <VL53L1_get_histogram_bin_data+0x20c>
		diff_histo_stddev = 0;
 8004126:	f04f 0a00 	mov.w	sl, #0
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 800412a:	9b00      	ldr	r3, [sp, #0]
 800412c:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
 8004130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004134:	4603      	mov	r3, r0
 8004136:	4342      	muls	r2, r0
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8004138:	9800      	ldr	r0, [sp, #0]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 800413a:	fb92 f2fe 	sdiv	r2, r2, lr
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 800413e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8004142:	4358      	muls	r0, r3
 8004144:	9b00      	ldr	r3, [sp, #0]
 8004146:	fb90 f0fc 	sdiv	r0, r0, ip
 800414a:	3301      	adds	r3, #1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800414c:	1a12      	subs	r2, r2, r0
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	fb02 aa02 	mla	sl, r2, r2, sl
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8004154:	9b04      	ldr	r3, [sp, #16]
 8004156:	f8bd 2000 	ldrh.w	r2, [sp]
 800415a:	4293      	cmp	r3, r2
 800415c:	d8e5      	bhi.n	800412a <VL53L1_get_histogram_bin_data+0x15e>
		if (diff_histo_stddev >= rmt) {
 800415e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004160:	4553      	cmp	r3, sl
 8004162:	dc3f      	bgt.n	80041e4 <VL53L1_get_histogram_bin_data+0x218>
			memset(pdev->multi_bins_rec, 0,
 8004164:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004168:	2100      	movs	r1, #0
 800416a:	f504 50e4 	add.w	r0, r4, #7296	; 0x1c80
 800416e:	f007 f8d5 	bl	800b31c <memset>
			pdev->bin_rec_pos = 0;
 8004172:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8004176:	2200      	movs	r2, #0
 8004178:	54e2      	strb	r2, [r4, r3]
			if (timing == 0)
 800417a:	f641 437d 	movw	r3, #7293	; 0x1c7d
 800417e:	b36f      	cbz	r7, 80041dc <VL53L1_get_histogram_bin_data+0x210>
				pdev->pos_before_next_recom =
 8004180:	2206      	movs	r2, #6
 8004182:	54e2      	strb	r2, [r4, r3]
			recom_been_reset = 1;
 8004184:	4639      	mov	r1, r7
		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8004186:	f641 427c 	movw	r2, #7292	; 0x1c7c
 800418a:	9802      	ldr	r0, [sp, #8]
 800418c:	5ca3      	ldrb	r3, [r4, r2]
 800418e:	3801      	subs	r0, #1
 8004190:	4283      	cmp	r3, r0
 8004192:	d13a      	bne.n	800420a <VL53L1_get_histogram_bin_data+0x23e>
 8004194:	2f00      	cmp	r7, #0
 8004196:	f040 80e3 	bne.w	8004360 <VL53L1_get_histogram_bin_data+0x394>
			pdev->bin_rec_pos = 0;
 800419a:	54a7      	strb	r7, [r4, r2]
			 (pdev->pos_before_next_recom == 0)) {
 800419c:	f641 437d 	movw	r3, #7293	; 0x1c7d
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80041a0:	5ce3      	ldrb	r3, [r4, r3]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d14e      	bne.n	8004244 <VL53L1_get_histogram_bin_data+0x278>
				pdata->bin_data[bin] = 0;
 80041a6:	f846 3b04 	str.w	r3, [r6], #4
			for (bin = 0; bin < BuffSize; bin++)
 80041aa:	9a03      	ldr	r2, [sp, #12]
 80041ac:	4296      	cmp	r6, r2
 80041ae:	d1fa      	bne.n	80041a6 <VL53L1_get_histogram_bin_data+0x1da>
					(pdev->multi_bins_rec[i][timing][bin]);
 80041b0:	2318      	movs	r3, #24
 80041b2:	2200      	movs	r2, #0
 80041b4:	fb03 f909 	mul.w	r9, r3, r9
 80041b8:	2630      	movs	r6, #48	; 0x30
 80041ba:	2000      	movs	r0, #0
 80041bc:	e037      	b.n	800422e <VL53L1_get_histogram_bin_data+0x262>
			prev_pos = (TuningBinRecSize - 1);
 80041be:	9b02      	ldr	r3, [sp, #8]
 80041c0:	e783      	b.n	80040ca <VL53L1_get_histogram_bin_data+0xfe>
		total_rate_pre +=
 80041c2:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
 80041c6:	4496      	add	lr, r2
		total_rate_cur += pdata->bin_data[bin];
 80041c8:	f856 2020 	ldr.w	r2, [r6, r0, lsl #2]
 80041cc:	3001      	adds	r0, #1
 80041ce:	4494      	add	ip, r2
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80041d0:	e79f      	b.n	8004112 <VL53L1_get_histogram_bin_data+0x146>
		diff_histo_stddev = 0;
 80041d2:	f04f 0a00 	mov.w	sl, #0
 80041d6:	e7c2      	b.n	800415e <VL53L1_get_histogram_bin_data+0x192>
 80041d8:	46e2      	mov	sl, ip
 80041da:	e7c0      	b.n	800415e <VL53L1_get_histogram_bin_data+0x192>
				pdev->pos_before_next_recom =
 80041dc:	2207      	movs	r2, #7
 80041de:	54e2      	strb	r2, [r4, r3]
			recom_been_reset = 1;
 80041e0:	2101      	movs	r1, #1
 80041e2:	e7d0      	b.n	8004186 <VL53L1_get_histogram_bin_data+0x1ba>
 80041e4:	9801      	ldr	r0, [sp, #4]
 80041e6:	23c0      	movs	r3, #192	; 0xc0
 80041e8:	f44f 52e4 	mov.w	r2, #7296	; 0x1c80
 80041ec:	fb13 2200 	smlabb	r2, r3, r0, r2
 80041f0:	2360      	movs	r3, #96	; 0x60
 80041f2:	fb13 2309 	smlabb	r3, r3, r9, r2
 80041f6:	4423      	add	r3, r4
		if (diff_histo_stddev >= rmt) {
 80041f8:	4632      	mov	r2, r6
					pdata->bin_data[i];
 80041fa:	f852 0b04 	ldr.w	r0, [r2], #4
				pdev->multi_bins_rec[pos][timing][i] =
 80041fe:	f843 0b04 	str.w	r0, [r3], #4
			for (i = 0; i < BuffSize; i++)
 8004202:	9803      	ldr	r0, [sp, #12]
 8004204:	4282      	cmp	r2, r0
 8004206:	d1f8      	bne.n	80041fa <VL53L1_get_histogram_bin_data+0x22e>
 8004208:	e7bd      	b.n	8004186 <VL53L1_get_histogram_bin_data+0x1ba>
		else if (timing == 1)
 800420a:	2f00      	cmp	r7, #0
 800420c:	f040 80a8 	bne.w	8004360 <VL53L1_get_histogram_bin_data+0x394>
			pdev->bin_rec_pos++;
 8004210:	3301      	adds	r3, #1
 8004212:	54a3      	strb	r3, [r4, r2]
 8004214:	e7c2      	b.n	800419c <VL53L1_get_histogram_bin_data+0x1d0>
					(pdev->multi_bins_rec[i][timing][bin]);
 8004216:	fb06 9303 	mla	r3, r6, r3, r9
 800421a:	4413      	add	r3, r2
 800421c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
					pdata->bin_data[bin] +=
 8004220:	f8d8 1000 	ldr.w	r1, [r8]
 8004224:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004228:	4419      	add	r1, r3
 800422a:	f8c8 1000 	str.w	r1, [r8]
				for (i = 0; i < TuningBinRecSize; i++)
 800422e:	9902      	ldr	r1, [sp, #8]
 8004230:	b2c3      	uxtb	r3, r0
 8004232:	428b      	cmp	r3, r1
 8004234:	f100 0001 	add.w	r0, r0, #1
 8004238:	dbed      	blt.n	8004216 <VL53L1_get_histogram_bin_data+0x24a>
			for (bin = 0; bin < BuffSize; bin++)
 800423a:	3201      	adds	r2, #1
 800423c:	2a18      	cmp	r2, #24
 800423e:	f108 0804 	add.w	r8, r8, #4
 8004242:	d1ba      	bne.n	80041ba <VL53L1_get_histogram_bin_data+0x1ee>
	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8004244:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8004248:	70ab      	strb	r3, [r5, #2]
	pdata->VL53L1_p_022               = 0;
 800424a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800424e:	812b      	strh	r3, [r5, #8]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8004250:	2318      	movs	r3, #24
 8004252:	72ab      	strb	r3, [r5, #10]
	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8004254:	f894 338d 	ldrb.w	r3, [r4, #909]	; 0x38d
 8004258:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 800425c:	f894 2390 	ldrb.w	r2, [r4, #912]	; 0x390
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8004260:	f894 337a 	ldrb.w	r3, [r4, #890]	; 0x37a
	pdata->vcsel_width +=
 8004264:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004268:	f8a5 3082 	strh.w	r3, [r5, #130]	; 0x82
	pdata->VL53L1_p_019 =
 800426c:	f8b4 334a 	ldrh.w	r3, [r4, #842]	; 0x34a
 8004270:	f8a5 3086 	strh.w	r3, [r5, #134]	; 0x86
	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8004274:	4629      	mov	r1, r5
 8004276:	4620      	mov	r0, r4
 8004278:	f002 f812 	bl	80062a0 <VL53L1_hist_get_bin_sequence_config>
	if (pdev->ll_state.rd_timing_status == 0) {
 800427c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004280:	2b00      	cmp	r3, #0
 8004282:	d163      	bne.n	800434c <VL53L1_get_histogram_bin_data+0x380>
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8004284:	f894 33a4 	ldrb.w	r3, [r4, #932]	; 0x3a4
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8004288:	f894 03a5 	ldrb.w	r0, [r4, #933]	; 0x3a5
		encoded_timeout =
 800428c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8004290:	f894 33a6 	ldrb.w	r3, [r4, #934]	; 0x3a6
		encoded_timeout =
 8004294:	b280      	uxth	r0, r0
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8004296:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
	pdata->number_of_ambient_bins  = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	72eb      	strb	r3, [r5, #11]
	for (i = 0; i < 6; i++) {
 800429e:	f105 0112 	add.w	r1, r5, #18
 80042a2:	f105 030c 	add.w	r3, r5, #12
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 80042a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042aa:	f002 0207 	and.w	r2, r2, #7
 80042ae:	2a07      	cmp	r2, #7
					pdata->number_of_ambient_bins + 0x04;
 80042b0:	bf02      	ittt	eq
 80042b2:	7aea      	ldrbeq	r2, [r5, #11]
 80042b4:	3204      	addeq	r2, #4
			pdata->number_of_ambient_bins  =
 80042b6:	72ea      	strbeq	r2, [r5, #11]
	for (i = 0; i < 6; i++) {
 80042b8:	4299      	cmp	r1, r3
 80042ba:	d1f4      	bne.n	80042a6 <VL53L1_get_histogram_bin_data+0x2da>
		VL53L1_decode_timeout(encoded_timeout);
 80042bc:	f001 ff5b 	bl	8006176 <VL53L1_decode_timeout>
	pdata->total_periods_elapsed =
 80042c0:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 80042c4:	f8b5 0086 	ldrh.w	r0, [r5, #134]	; 0x86
 80042c8:	f003 f9c4 	bl	8007654 <VL53L1_calc_pll_period_us>
	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 80042cc:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
		VL53L1_duration_maths(
 80042d0:	f8b5 1082 	ldrh.w	r1, [r5, #130]	; 0x82
 80042d4:	3301      	adds	r3, #1
 80042d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042da:	f003 f9c1 	bl	8007660 <VL53L1_duration_maths>
	pdata->woi_duration_us     = 0;
 80042de:	2600      	movs	r6, #0
	pdata->peak_duration_us =
 80042e0:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
	pdata->woi_duration_us     = 0;
 80042e4:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
	VL53L1_hist_calc_zero_distance_phase(pdata);
 80042e8:	4628      	mov	r0, r5
 80042ea:	f003 f9ff 	bl	80076ec <VL53L1_hist_calc_zero_distance_phase>
	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 80042ee:	4628      	mov	r0, r5
 80042f0:	f003 fbaf 	bl	8007a52 <VL53L1_hist_estimate_ambient_from_ambient_bins>
	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80042f4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80042f8:	702b      	strb	r3, [r5, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 80042fa:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80042fe:	706b      	strb	r3, [r5, #1]
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8004300:	f504 5404 	add.w	r4, r4, #8448	; 0x2100
	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8004304:	78ab      	ldrb	r3, [r5, #2]
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8004306:	3418      	adds	r4, #24
 8004308:	220a      	movs	r2, #10
 800430a:	fb02 4303 	mla	r3, r2, r3, r4
	pdata->roi_config__user_roi_centre_spad =
 800430e:	f893 21aa 	ldrb.w	r2, [r3, #426]	; 0x1aa
 8004312:	f885 20a8 	strb.w	r2, [r5, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
 8004316:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 800431a:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800431e:	7426      	strb	r6, [r4, #16]
	switch (pdata->result__range_status &
 8004320:	f895 3079 	ldrb.w	r3, [r5, #121]	; 0x79
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	2b11      	cmp	r3, #17
 800432a:	d808      	bhi.n	800433e <VL53L1_get_histogram_bin_data+0x372>
 800432c:	490e      	ldr	r1, [pc, #56]	; (8004368 <VL53L1_get_histogram_bin_data+0x39c>)
 800432e:	2201      	movs	r2, #1
 8004330:	409a      	lsls	r2, r3
 8004332:	420a      	tst	r2, r1
 8004334:	d003      	beq.n	800433e <VL53L1_get_histogram_bin_data+0x372>
		presults->device_status = (pdata->result__range_status &
 8004336:	7423      	strb	r3, [r4, #16]
		status = VL53L1_ERROR_RANGE_ERROR;
 8004338:	f06f 0305 	mvn.w	r3, #5
 800433c:	9305      	str	r3, [sp, #20]
}
 800433e:	9805      	ldr	r0, [sp, #20]
 8004340:	b04b      	add	sp, #300	; 0x12c
 8004342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pdev->pos_before_next_recom--;
 8004346:	3901      	subs	r1, #1
 8004348:	54e1      	strb	r1, [r4, r3]
}
 800434a:	e77b      	b.n	8004244 <VL53L1_get_histogram_bin_data+0x278>
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 800434c:	f894 33a7 	ldrb.w	r3, [r4, #935]	; 0x3a7
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8004350:	f894 03a8 	ldrb.w	r0, [r4, #936]	; 0x3a8
		encoded_timeout =
 8004354:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8004358:	b280      	uxth	r0, r0
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 800435a:	f894 33a9 	ldrb.w	r3, [r4, #937]	; 0x3a9
 800435e:	e79a      	b.n	8004296 <VL53L1_get_histogram_bin_data+0x2ca>
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004360:	2901      	cmp	r1, #1
 8004362:	f47f af1b 	bne.w	800419c <VL53L1_get_histogram_bin_data+0x1d0>
 8004366:	e76d      	b.n	8004244 <VL53L1_get_histogram_bin_data+0x278>
 8004368:	0002200e 	.word	0x0002200e

0800436c <VL53L1_get_device_results>:
{
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	ed2d 8b02 	vpush	{d8}
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8004374:	f890 31e0 	ldrb.w	r3, [r0, #480]	; 0x1e0
	VL53L1_range_results_t   *presults =
 8004378:	f500 5604 	add.w	r6, r0, #8448	; 0x2100
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800437c:	2b01      	cmp	r3, #1
{
 800437e:	ee08 2a10 	vmov	s16, r2
 8004382:	b08b      	sub	sp, #44	; 0x2c
 8004384:	4604      	mov	r4, r0
	VL53L1_range_results_t   *presults =
 8004386:	f106 0618 	add.w	r6, r6, #24
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800438a:	f040 8139 	bne.w	8004600 <VL53L1_get_device_results+0x294>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800438e:	f642 63c4 	movw	r3, #11972	; 0x2ec4
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8004392:	f810 8003 	ldrb.w	r8, [r0, r3]
 8004396:	f108 32ff 	add.w	r2, r8, #4294967295
 800439a:	f1d2 0800 	rsbs	r8, r2, #0
 800439e:	eb48 0802 	adc.w	r8, r8, r2
	if ((pdev->sys_ctrl.system__mode_start &
 80043a2:	f894 33d0 	ldrb.w	r3, [r4, #976]	; 0x3d0
 80043a6:	079b      	lsls	r3, r3, #30
 80043a8:	f140 81f8 	bpl.w	800479c <VL53L1_get_device_results+0x430>
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80043ac:	f504 6986 	add.w	r9, r4, #1072	; 0x430
		status = VL53L1_get_histogram_bin_data(
 80043b0:	4649      	mov	r1, r9
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7ff fe0a 	bl	8003fcc <VL53L1_get_histogram_bin_data>
		if (status == VL53L1_ERROR_NONE &&
 80043b8:	4605      	mov	r5, r0
 80043ba:	2800      	cmp	r0, #0
 80043bc:	f040 8131 	bne.w	8004622 <VL53L1_get_device_results+0x2b6>
 80043c0:	f894 343b 	ldrb.w	r3, [r4, #1083]	; 0x43b
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 811e 	beq.w	8004606 <VL53L1_get_device_results+0x29a>
		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80043ca:	f10d 0a1b 	add.w	sl, sp, #27
 80043ce:	4651      	mov	r1, sl
 80043d0:	4620      	mov	r0, r4
 80043d2:	f002 fece 	bl	8007172 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80043d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8170 	beq.w	80046c0 <VL53L1_get_device_results+0x354>
		if (merge_enabled)
 80043e0:	f1b8 0f00 	cmp.w	r8, #0
 80043e4:	d00b      	beq.n	80043fe <VL53L1_get_device_results+0x92>
		idx = histo_merge_nb - 1;
 80043e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80043ea:	3b01      	subs	r3, #1
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80043ec:	f504 5295 	add.w	r2, r4, #4768	; 0x12a0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	3208      	adds	r2, #8
 80043f4:	3302      	adds	r3, #2
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80043f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043fa:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
		pHP->gain_factor =
 80043fe:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 8004402:	f9b4 130a 	ldrsh.w	r1, [r4, #778]	; 0x30a
		pHP->gain_factor =
 8004406:	f8a4 329e 	strh.w	r3, [r4, #670]	; 0x29e
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 800440a:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
 800440e:	f001 fe98 	bl	8006142 <VL53L1_calc_crosstalk_plane_offset_with_margin>
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004412:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8004416:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
		pdev->dmax_cfg.ambient_thresh_sigma =
 800441a:	f894 3286 	ldrb.w	r3, [r4, #646]	; 0x286
 800441e:	f884 32c1 	strb.w	r3, [r4, #705]	; 0x2c1
		pdev->dmax_cfg.min_ambient_thresh_events =
 8004422:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004426:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
		pdev->dmax_cfg.signal_total_events_limit =
 800442a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800442e:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8004432:	f8b4 336a 	ldrh.w	r3, [r4, #874]	; 0x36a
 8004436:	f8a4 32d8 	strh.w	r3, [r4, #728]	; 0x2d8
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800443a:	f894 339d 	ldrb.w	r3, [r4, #925]	; 0x39d
 800443e:	f884 32da 	strb.w	r3, [r4, #730]	; 0x2da
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8004442:	f8b4 3314 	ldrh.w	r3, [r4, #788]	; 0x314
 8004446:	f8a4 32b6 	strh.w	r3, [r4, #694]	; 0x2b6
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800444a:	f8b4 3312 	ldrh.w	r3, [r4, #786]	; 0x312
 800444e:	f8a4 32b4 	strh.w	r3, [r4, #692]	; 0x2b4
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8004452:	f8b4 3316 	ldrh.w	r3, [r4, #790]	; 0x316
 8004456:	f8a4 32b8 	strh.w	r3, [r4, #696]	; 0x2b8
		VL53L1_copy_rtn_good_spads_to_buffer(
 800445a:	f504 7511 	add.w	r5, r4, #580	; 0x244
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800445e:	f8b4 3318 	ldrh.w	r3, [r4, #792]	; 0x318
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004462:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8004466:	f8a4 32ba 	strh.w	r3, [r4, #698]	; 0x2ba
		VL53L1_copy_rtn_good_spads_to_buffer(
 800446a:	4629      	mov	r1, r5
 800446c:	f204 30fe 	addw	r0, r4, #1022	; 0x3fe
 8004470:	f001 fca3 	bl	8005dba <VL53L1_copy_rtn_good_spads_to_buffer>
		switch (pdev->offset_correction_mode) {
 8004474:	7963      	ldrb	r3, [r4, #5]
 8004476:	2b02      	cmp	r3, #2
 8004478:	f000 8126 	beq.w	80046c8 <VL53L1_get_device_results+0x35c>
 800447c:	2b03      	cmp	r3, #3
 800447e:	f000 812d 	beq.w	80046dc <VL53L1_get_device_results+0x370>
 8004482:	2b01      	cmp	r3, #1
 8004484:	f040 8151 	bne.w	800472a <VL53L1_get_device_results+0x3be>
			VL53L1_hist_combine_mm1_mm2_offsets(
 8004488:	f504 7327 	add.w	r3, r4, #668	; 0x29c
 800448c:	9305      	str	r3, [sp, #20]
 800448e:	f894 339d 	ldrb.w	r3, [r4, #925]	; 0x39d
 8004492:	f894 242e 	ldrb.w	r2, [r4, #1070]	; 0x42e
 8004496:	f9b4 105e 	ldrsh.w	r1, [r4, #94]	; 0x5e
 800449a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800449e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80044a2:	f104 039c 	add.w	r3, r4, #156	; 0x9c
 80044a6:	9302      	str	r3, [sp, #8]
 80044a8:	f894 34d9 	ldrb.w	r3, [r4, #1241]	; 0x4d9
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	f894 34d8 	ldrb.w	r3, [r4, #1240]	; 0x4d8
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	f894 342f 	ldrb.w	r3, [r4, #1071]	; 0x42f
 80044b8:	f002 fa6e 	bl	8006998 <VL53L1_hist_combine_mm1_mm2_offsets>
		VL53L1_calc_max_effective_spads(
 80044bc:	f204 23d6 	addw	r3, r4, #726	; 0x2d6
 80044c0:	462a      	mov	r2, r5
 80044c2:	f894 14d9 	ldrb.w	r1, [r4, #1241]	; 0x4d9
 80044c6:	f894 04d8 	ldrb.w	r0, [r4, #1240]	; 0x4d8
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	f894 339d 	ldrb.w	r3, [r4, #925]	; 0x39d
 80044d0:	f002 f992 	bl	80067f8 <VL53L1_calc_max_effective_spads>
			VL53L1_get_dmax_calibration_data(
 80044d4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80044d8:	79a1      	ldrb	r1, [r4, #6]
 80044da:	ab07      	add	r3, sp, #28
 80044dc:	4620      	mov	r0, r4
 80044de:	f7ff f849 	bl	8003574 <VL53L1_get_dmax_calibration_data>
		if (status != VL53L1_ERROR_NONE)
 80044e2:	4605      	mov	r5, r0
 80044e4:	2800      	cmp	r0, #0
 80044e6:	f040 809c 	bne.w	8004622 <VL53L1_get_device_results+0x2b6>
				pdev->wArea2,
 80044ea:	f504 53d3 	add.w	r3, r4, #6752	; 0x1a60
 80044ee:	3310      	adds	r3, #16
		status = VL53L1_ipp_hist_process_data(
 80044f0:	9303      	str	r3, [sp, #12]
				pdev->wArea1,
 80044f2:	f504 53a3 	add.w	r3, r4, #5216	; 0x1460
 80044f6:	3310      	adds	r3, #16
		status = VL53L1_ipp_hist_process_data(
 80044f8:	9302      	str	r3, [sp, #8]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80044fa:	f504 7720 	add.w	r7, r4, #640	; 0x280
		status = VL53L1_ipp_hist_process_data(
 80044fe:	f504 63b1 	add.w	r3, r4, #1416	; 0x588
 8004502:	e9cd 9300 	strd	r9, r3, [sp]
 8004506:	e9cd a604 	strd	sl, r6, [sp, #16]
 800450a:	463b      	mov	r3, r7
 800450c:	f504 7230 	add.w	r2, r4, #704	; 0x2c0
 8004510:	a907      	add	r1, sp, #28
 8004512:	4620      	mov	r0, r4
 8004514:	f7fd f8e2 	bl	80016dc <VL53L1_ipp_hist_process_data>
 8004518:	4605      	mov	r5, r0
		if ((merge_enabled) && (histo_merge_nb > 1))
 800451a:	f1b8 0f00 	cmp.w	r8, #0
 800451e:	f040 8106 	bne.w	800472e <VL53L1_get_device_results+0x3c2>
		if (status != VL53L1_ERROR_NONE)
 8004522:	2d00      	cmp	r5, #0
 8004524:	d17d      	bne.n	8004622 <VL53L1_get_device_results+0x2b6>
		status = VL53L1_hist_wrap_dmax(
 8004526:	f106 020e 	add.w	r2, r6, #14
 800452a:	4649      	mov	r1, r9
 800452c:	4638      	mov	r0, r7
 800452e:	f002 f8fd 	bl	800672c <VL53L1_hist_wrap_dmax>
		if (status != VL53L1_ERROR_NONE)
 8004532:	4605      	mov	r5, r0
 8004534:	2800      	cmp	r0, #0
 8004536:	d174      	bne.n	8004622 <VL53L1_get_device_results+0x2b6>
		zid = pdev->ll_state.rd_zone_id;
 8004538:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
		status = VL53L1_hist_phase_consistency_check(
 800453c:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8004540:	2010      	movs	r0, #16
 8004542:	2504      	movs	r5, #4
 8004544:	f642 2b5c 	movw	fp, #10844	; 0x2a5c
 8004548:	f04f 0a44 	mov.w	sl, #68	; 0x44
 800454c:	fb1a 3201 	smlabb	r2, sl, r1, r3
 8004550:	eb04 070b 	add.w	r7, r4, fp
 8004554:	fb10 5101 	smlabb	r1, r0, r1, r5
 8004558:	4633      	mov	r3, r6
 800455a:	4432      	add	r2, r6
 800455c:	4439      	add	r1, r7
 800455e:	4620      	mov	r0, r4
 8004560:	f002 f832 	bl	80065c8 <VL53L1_hist_phase_consistency_check>
		if (status != VL53L1_ERROR_NONE)
 8004564:	4605      	mov	r5, r0
 8004566:	2800      	cmp	r0, #0
 8004568:	d15b      	bne.n	8004622 <VL53L1_get_device_results+0x2b6>
		zid = pdev->ll_state.rd_zone_id;
 800456a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
		status = VL53L1_hist_xmonitor_consistency_check(
 800456e:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8004572:	2010      	movs	r0, #16
 8004574:	2504      	movs	r5, #4
 8004576:	fb1a 3201 	smlabb	r2, sl, r1, r3
 800457a:	fb10 5101 	smlabb	r1, r0, r1, r5
 800457e:	f506 73a2 	add.w	r3, r6, #324	; 0x144
 8004582:	4432      	add	r2, r6
 8004584:	4439      	add	r1, r7
 8004586:	4620      	mov	r0, r4
 8004588:	f002 f8a4 	bl	80066d4 <VL53L1_hist_xmonitor_consistency_check>
		if (status != VL53L1_ERROR_NONE)
 800458c:	4605      	mov	r5, r0
 800458e:	2800      	cmp	r0, #0
 8004590:	d147      	bne.n	8004622 <VL53L1_get_device_results+0x2b6>
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 8004592:	2219      	movs	r2, #25
		zid = pdev->ll_state.rd_zone_id;
 8004594:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 8004598:	f804 200b 	strb.w	r2, [r4, fp]
				pdev->zone_cfg.active_zones+1;
 800459c:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
 80045a0:	3201      	adds	r2, #1
		pZH->active_zones =
 80045a2:	707a      	strb	r2, [r7, #1]
		pHD->zone_id       = zid;
 80045a4:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
		if (zid <
 80045a8:	f896 229c 	ldrb.w	r2, [r6, #668]	; 0x29c
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d91d      	bls.n	80045ec <VL53L1_get_device_results+0x280>
			phist_info->rd_device_state =
 80045b0:	eb04 1203 	add.w	r2, r4, r3, lsl #4
 80045b4:	f642 2160 	movw	r1, #10848	; 0x2a60
 80045b8:	f894 0431 	ldrb.w	r0, [r4, #1073]	; 0x431
 80045bc:	5450      	strb	r0, [r2, r1]
			phist_info->number_of_ambient_bins =
 80045be:	f642 2161 	movw	r1, #10849	; 0x2a61
 80045c2:	f894 043b 	ldrb.w	r0, [r4, #1083]	; 0x43b
 80045c6:	5450      	strb	r0, [r2, r1]
			phist_info->result__dss_actual_effective_spads =
 80045c8:	f642 2162 	movw	r1, #10850	; 0x2a62
 80045cc:	f8b4 04ac 	ldrh.w	r0, [r4, #1196]	; 0x4ac
 80045d0:	5250      	strh	r0, [r2, r1]
			phist_info->total_periods_elapsed =
 80045d2:	eb07 1703 	add.w	r7, r7, r3, lsl #4
			phist_info->VL53L1_p_009 =
 80045d6:	f642 2164 	movw	r1, #10852	; 0x2a64
 80045da:	f894 04b4 	ldrb.w	r0, [r4, #1204]	; 0x4b4
			phist_info->total_periods_elapsed =
 80045de:	f8d4 34b8 	ldr.w	r3, [r4, #1208]	; 0x4b8
			phist_info->VL53L1_p_009 =
 80045e2:	5450      	strb	r0, [r2, r1]
			phist_info->total_periods_elapsed =
 80045e4:	60fb      	str	r3, [r7, #12]
			phist_info->ambient_events_sum =
 80045e6:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 80045ea:	613b      	str	r3, [r7, #16]
		VL53L1_hist_copy_results_to_sys_and_core(
 80045ec:	f504 539d 	add.w	r3, r4, #5024	; 0x13a0
 80045f0:	3304      	adds	r3, #4
 80045f2:	f204 32d2 	addw	r2, r4, #978	; 0x3d2
 80045f6:	4631      	mov	r1, r6
 80045f8:	4648      	mov	r0, r9
 80045fa:	f002 fa25 	bl	8006a48 <VL53L1_hist_copy_results_to_sys_and_core>
 80045fe:	e010      	b.n	8004622 <VL53L1_get_device_results+0x2b6>
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8004600:	f04f 0800 	mov.w	r8, #0
 8004604:	e6cd      	b.n	80043a2 <VL53L1_get_device_results+0x36>
			status = VL53L1_hist_copy_and_scale_ambient_info(
 8004606:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 800460a:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 800460e:	f500 5029 	add.w	r0, r0, #10816	; 0x2a40
 8004612:	4649      	mov	r1, r9
 8004614:	3020      	adds	r0, #32
 8004616:	f001 fdfc 	bl	8006212 <VL53L1_hist_copy_and_scale_ambient_info>
		if (status != VL53L1_ERROR_NONE)
 800461a:	4605      	mov	r5, r0
 800461c:	2800      	cmp	r0, #0
 800461e:	f43f aed4 	beq.w	80043ca <VL53L1_get_device_results+0x5e>
		if (pzone_cfg->active_zones > 0) {
 8004622:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8004626:	b1eb      	cbz	r3, 8004664 <VL53L1_get_device_results+0x2f8>
			if (pstate->rd_device_state !=
 8004628:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800462c:	2b06      	cmp	r3, #6
 800462e:	d005      	beq.n	800463c <VL53L1_get_device_results+0x2d0>
				if (status == VL53L1_ERROR_NONE) {
 8004630:	b925      	cbnz	r5, 800463c <VL53L1_get_device_results+0x2d0>
					status = VL53L1_dynamic_zone_update(
 8004632:	4631      	mov	r1, r6
 8004634:	4620      	mov	r0, r4
 8004636:	f002 fa70 	bl	8006b1a <VL53L1_dynamic_zone_update>
 800463a:	4605      	mov	r5, r0
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800463c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8004640:	f013 0f01 	tst.w	r3, #1
 8004644:	bf14      	ite	ne
 8004646:	2103      	movne	r1, #3
 8004648:	2101      	moveq	r1, #1
 800464a:	f504 73a1 	add.w	r3, r4, #322	; 0x142
 800464e:	f204 125b 	addw	r2, r4, #347	; 0x15b
				pzone_cfg->bin_config[i] =
 8004652:	f803 1b01 	strb.w	r1, [r3], #1
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004656:	429a      	cmp	r2, r3
 8004658:	d1fb      	bne.n	8004652 <VL53L1_get_device_results+0x2e6>
			if (status == VL53L1_ERROR_NONE)
 800465a:	b945      	cbnz	r5, 800466e <VL53L1_get_device_results+0x302>
				status = VL53L1_multizone_hist_bins_update(Dev);
 800465c:	4620      	mov	r0, r4
 800465e:	f002 fa87 	bl	8006b70 <VL53L1_multizone_hist_bins_update>
 8004662:	4605      	mov	r5, r0
		if (status == VL53L1_ERROR_NONE)
 8004664:	b91d      	cbnz	r5, 800466e <VL53L1_get_device_results+0x302>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 8004666:	4620      	mov	r0, r4
 8004668:	f002 fe92 	bl	8007390 <VL53L1_dynamic_xtalk_correction_corrector>
 800466c:	4605      	mov	r5, r0
		if (merge_enabled)
 800466e:	f1b8 0f00 	cmp.w	r8, #0
 8004672:	d005      	beq.n	8004680 <VL53L1_get_device_results+0x314>
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8004674:	f504 5395 	add.w	r3, r4, #4768	; 0x12a0
 8004678:	3308      	adds	r3, #8
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8004680:	f242 1318 	movw	r3, #8472	; 0x2118
 8004684:	f894 702c 	ldrb.w	r7, [r4, #44]	; 0x2c
 8004688:	54e7      	strb	r7, [r4, r3]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800468a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
 800468e:	7070      	strb	r0, [r6, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8004690:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8004694:	70b3      	strb	r3, [r6, #2]
	if (status == VL53L1_ERROR_NONE) {
 8004696:	2d00      	cmp	r5, #0
 8004698:	f000 80b1 	beq.w	80047fe <VL53L1_get_device_results+0x492>
	memcpy(
 800469c:	ee18 0a10 	vmov	r0, s16
 80046a0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80046a4:	4631      	mov	r1, r6
 80046a6:	f006 fe2b 	bl	800b300 <memcpy>
	if (status == VL53L1_ERROR_NONE)
 80046aa:	b91d      	cbnz	r5, 80046b4 <VL53L1_get_device_results+0x348>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 80046ac:	4620      	mov	r0, r4
 80046ae:	f001 fb35 	bl	8005d1c <VL53L1_check_ll_driver_rd_state>
 80046b2:	4605      	mov	r5, r0
}
 80046b4:	4628      	mov	r0, r5
 80046b6:	b00b      	add	sp, #44	; 0x2c
 80046b8:	ecbd 8b02 	vpop	{d8}
 80046bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			histo_merge_nb = 1;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f88d 301b 	strb.w	r3, [sp, #27]
 80046c6:	e68b      	b.n	80043e0 <VL53L1_get_device_results+0x74>
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 80046c8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80046cc:	221c      	movs	r2, #28
 80046ce:	fb02 6303 	mla	r3, r2, r3, r6
			pHP->range_offset_mm = (int16_t)(
 80046d2:	f8d3 3b04 	ldr.w	r3, [r3, #2820]	; 0xb04
			pHP->range_offset_mm = 0;
 80046d6:	f8a4 329c 	strh.w	r3, [r4, #668]	; 0x29c
		break;
 80046da:	e6ef      	b.n	80044bc <VL53L1_get_device_results+0x150>
	switch (pdev->preset_mode) {
 80046dc:	7863      	ldrb	r3, [r4, #1]
 80046de:	2b1e      	cmp	r3, #30
 80046e0:	d01b      	beq.n	800471a <VL53L1_get_device_results+0x3ae>
 80046e2:	2b21      	cmp	r3, #33	; 0x21
 80046e4:	d007      	beq.n	80046f6 <VL53L1_get_device_results+0x38a>
 80046e6:	2b1b      	cmp	r3, #27
 80046e8:	d11d      	bne.n	8004726 <VL53L1_get_device_results+0x3ba>
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80046ea:	f641 4378 	movw	r3, #7288	; 0x1c78
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80046ee:	f641 427a 	movw	r2, #7290	; 0x1c7a
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80046f2:	5ee3      	ldrsh	r3, [r4, r3]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80046f4:	e004      	b.n	8004700 <VL53L1_get_device_results+0x394>
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80046f6:	f641 4370 	movw	r3, #7280	; 0x1c70
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 80046fa:	f641 4272 	movw	r2, #7282	; 0x1c72
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80046fe:	5ee3      	ldrsh	r3, [r4, r3]
		*poffset = (isc & 0x01) ? tA : tB;
 8004700:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8004704:	5ea2      	ldrsh	r2, [r4, r2]
		*poffset = (isc & 0x01) ? tA : tB;
 8004706:	f011 0f01 	tst.w	r1, #1
 800470a:	bf08      	it	eq
 800470c:	4613      	moveq	r3, r2
		*poffset = 0;
 800470e:	f8a4 329c 	strh.w	r3, [r4, #668]	; 0x29c
			pHP->range_offset_mm *= 4;
 8004712:	f8b4 329c 	ldrh.w	r3, [r4, #668]	; 0x29c
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	e7dd      	b.n	80046d6 <VL53L1_get_device_results+0x36a>
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 800471a:	f641 4374 	movw	r3, #7284	; 0x1c74
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 800471e:	f641 4276 	movw	r2, #7286	; 0x1c76
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8004722:	5ee3      	ldrsh	r3, [r4, r3]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8004724:	e7ec      	b.n	8004700 <VL53L1_get_device_results+0x394>
		*poffset = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	e7f1      	b.n	800470e <VL53L1_get_device_results+0x3a2>
			pHP->range_offset_mm = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	e7d3      	b.n	80046d6 <VL53L1_get_device_results+0x36a>
		if ((merge_enabled) && (histo_merge_nb > 1))
 800472e:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8004732:	2901      	cmp	r1, #1
 8004734:	f67f aef5 	bls.w	8004522 <VL53L1_get_device_results+0x1b6>
 8004738:	f504 5205 	add.w	r2, r4, #8512	; 0x2140
 800473c:	3210      	adds	r2, #16
 800473e:	f504 500a 	add.w	r0, r4, #8832	; 0x2280
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8004742:	6813      	ldr	r3, [r2, #0]
 8004744:	fbb3 f3f1 	udiv	r3, r3, r1
 8004748:	324c      	adds	r2, #76	; 0x4c
 800474a:	f842 3c4c 	str.w	r3, [r2, #-76]
			pdata->VL53L1_p_021 /= histo_merge_nb;
 800474e:	f852 3c48 	ldr.w	r3, [r2, #-72]
 8004752:	fbb3 f3f1 	udiv	r3, r3, r1
 8004756:	f842 3c48 	str.w	r3, [r2, #-72]
			pdata->VL53L1_p_013 /= histo_merge_nb;
 800475a:	f852 3c44 	ldr.w	r3, [r2, #-68]
 800475e:	fb93 f3f1 	sdiv	r3, r3, r1
 8004762:	f842 3c44 	str.w	r3, [r2, #-68]
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8004766:	f832 3c40 	ldrh.w	r3, [r2, #-64]
 800476a:	fbb3 f3f1 	udiv	r3, r3, r1
 800476e:	f822 3c40 	strh.w	r3, [r2, #-64]
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8004772:	f832 3c3e 	ldrh.w	r3, [r2, #-62]
 8004776:	fbb3 f3f1 	udiv	r3, r3, r1
 800477a:	f822 3c3e 	strh.w	r3, [r2, #-62]
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800477e:	f832 3c3c 	ldrh.w	r3, [r2, #-60]
 8004782:	fbb3 f3f1 	udiv	r3, r3, r1
 8004786:	f822 3c3c 	strh.w	r3, [r2, #-60]
			pdata->VL53L1_p_012 /= histo_merge_nb;
 800478a:	f852 3c38 	ldr.w	r3, [r2, #-56]
 800478e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004792:	f842 3c38 	str.w	r3, [r2, #-56]
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8004796:	4290      	cmp	r0, r2
 8004798:	d1d3      	bne.n	8004742 <VL53L1_get_device_results+0x3d6>
 800479a:	e6c2      	b.n	8004522 <VL53L1_get_device_results+0x1b6>
			status = VL53L1_get_measurement_results(
 800479c:	4620      	mov	r0, r4
 800479e:	f7fe fcd5 	bl	800314c <VL53L1_get_measurement_results>
		if (status == VL53L1_ERROR_NONE)
 80047a2:	4605      	mov	r5, r0
 80047a4:	b948      	cbnz	r0, 80047ba <VL53L1_get_device_results+0x44e>
			VL53L1_copy_sys_and_core_results_to_range_results(
 80047a6:	f504 529d 	add.w	r2, r4, #5024	; 0x13a0
 80047aa:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
 80047ae:	4633      	mov	r3, r6
 80047b0:	3204      	adds	r2, #4
 80047b2:	f204 31d2 	addw	r1, r4, #978	; 0x3d2
 80047b6:	f7fe fcf9 	bl	80031ac <VL53L1_copy_sys_and_core_results_to_range_results>
		if (pL->is_low_power_auto_mode == 1) {
 80047ba:	f504 57a3 	add.w	r7, r4, #5216	; 0x1460
 80047be:	f897 8001 	ldrb.w	r8, [r7, #1]
 80047c2:	f1b8 0f01 	cmp.w	r8, #1
 80047c6:	f47f af5b 	bne.w	8004680 <VL53L1_get_device_results+0x314>
			if ((status == VL53L1_ERROR_NONE) &&
 80047ca:	b93d      	cbnz	r5, 80047dc <VL53L1_get_device_results+0x470>
 80047cc:	78bb      	ldrb	r3, [r7, #2]
 80047ce:	b98b      	cbnz	r3, 80047f4 <VL53L1_get_device_results+0x488>
				VL53L1_low_power_auto_setup_manual_calibration(
 80047d0:	4620      	mov	r0, r4
 80047d2:	f002 fc7e 	bl	80070d2 <VL53L1_low_power_auto_setup_manual_calibration>
				pL->low_power_auto_range_count = 1;
 80047d6:	f887 8002 	strb.w	r8, [r7, #2]
				VL53L1_low_power_auto_setup_manual_calibration(
 80047da:	4605      	mov	r5, r0
			if ((pL->low_power_auto_range_count != 0xFF) &&
 80047dc:	78bb      	ldrb	r3, [r7, #2]
 80047de:	2bff      	cmp	r3, #255	; 0xff
 80047e0:	f43f af4e 	beq.w	8004680 <VL53L1_get_device_results+0x314>
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	f47f af4b 	bne.w	8004680 <VL53L1_get_device_results+0x314>
				status = VL53L1_low_power_auto_update_DSS(
 80047ea:	4620      	mov	r0, r4
 80047ec:	f002 fc95 	bl	800711a <VL53L1_low_power_auto_update_DSS>
 80047f0:	4605      	mov	r5, r0
 80047f2:	e745      	b.n	8004680 <VL53L1_get_device_results+0x314>
			} else if ((status == VL53L1_ERROR_NONE) &&
 80047f4:	2b01      	cmp	r3, #1
				pL->low_power_auto_range_count = 2;
 80047f6:	bf04      	itt	eq
 80047f8:	2302      	moveq	r3, #2
 80047fa:	70bb      	strbeq	r3, [r7, #2]
 80047fc:	e7ee      	b.n	80047dc <VL53L1_get_device_results+0x470>
		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 80047fe:	2219      	movs	r2, #25
 8004800:	f886 229c 	strb.w	r2, [r6, #668]	; 0x29c
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004804:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
		if (zid < pres->zone_results.max_zones) {
 8004808:	2b18      	cmp	r3, #24
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 800480a:	f102 0201 	add.w	r2, r2, #1
 800480e:	f886 229d 	strb.w	r2, [r6, #669]	; 0x29d
		if (zid < pres->zone_results.max_zones) {
 8004812:	f63f af43 	bhi.w	800469c <VL53L1_get_device_results+0x330>
			pobjects->cfg_device_state  =
 8004816:	2144      	movs	r1, #68	; 0x44
 8004818:	fb01 6203 	mla	r2, r1, r3, r6
			pobjects->zone_id           = presults->zone_id;
 800481c:	f882 32a2 	strb.w	r3, [r2, #674]	; 0x2a2
			pobjects->cfg_device_state  =
 8004820:	f882 72a0 	strb.w	r7, [r2, #672]	; 0x2a0
			pobjects->rd_device_state   = presults->rd_device_state;
 8004824:	f882 02a1 	strb.w	r0, [r2, #673]	; 0x2a1
			pobjects->stream_count      = presults->stream_count;
 8004828:	78f0      	ldrb	r0, [r6, #3]
 800482a:	f882 02a3 	strb.w	r0, [r2, #675]	; 0x2a3
			pobjects->xmonitor.VL53L1_p_020 =
 800482e:	f8d6 0168 	ldr.w	r0, [r6, #360]	; 0x168
 8004832:	f8c2 02d8 	str.w	r0, [r2, #728]	; 0x2d8
			pobjects->xmonitor.VL53L1_p_021 =
 8004836:	f8d6 016c 	ldr.w	r0, [r6, #364]	; 0x16c
 800483a:	f8c2 02dc 	str.w	r0, [r2, #732]	; 0x2dc
			pobjects->xmonitor.VL53L1_p_014 =
 800483e:	f8b6 0184 	ldrh.w	r0, [r6, #388]	; 0x184
 8004842:	f8a2 02e0 	strh.w	r0, [r2, #736]	; 0x2e0
			pobjects->xmonitor.range_status =
 8004846:	f896 018e 	ldrb.w	r0, [r6, #398]	; 0x18e
 800484a:	f882 02e2 	strb.w	r0, [r2, #738]	; 0x2e2
			pobjects->max_objects      = presults->max_results;
 800484e:	7c70      	ldrb	r0, [r6, #17]
 8004850:	f882 02a4 	strb.w	r0, [r2, #676]	; 0x2a4
			pobjects->active_objects   = presults->active_results;
 8004854:	7cb7      	ldrb	r7, [r6, #18]
 8004856:	f882 72a5 	strb.w	r7, [r2, #677]	; 0x2a5
			for (i = 0; i < presults->active_results; i++) {
 800485a:	fb01 4303 	mla	r3, r1, r3, r4
 800485e:	f504 5205 	add.w	r2, r4, #8512	; 0x2140
 8004862:	3210      	adds	r2, #16
 8004864:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8004868:	4629      	mov	r1, r5
 800486a:	b2c8      	uxtb	r0, r1
 800486c:	4287      	cmp	r7, r0
 800486e:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8004872:	f103 030c 	add.w	r3, r3, #12
 8004876:	f67f af11 	bls.w	800469c <VL53L1_get_device_results+0x330>
					presults->VL53L1_p_002[i].VL53L1_p_020;
 800487a:	f852 0c4c 	ldr.w	r0, [r2, #-76]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 800487e:	f843 0c0c 	str.w	r0, [r3, #-12]
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8004882:	f852 0c48 	ldr.w	r0, [r2, #-72]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8004886:	f843 0c08 	str.w	r0, [r3, #-8]
					presults->VL53L1_p_002[i].VL53L1_p_014;
 800488a:	f832 0c30 	ldrh.w	r0, [r2, #-48]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 800488e:	f823 0c04 	strh.w	r0, [r3, #-4]
					presults->VL53L1_p_002[i].range_status;
 8004892:	f812 0c26 	ldrb.w	r0, [r2, #-38]
				pobjects->VL53L1_p_002[i].range_status =
 8004896:	f803 0c02 	strb.w	r0, [r3, #-2]
			for (i = 0; i < presults->active_results; i++) {
 800489a:	3101      	adds	r1, #1
 800489c:	e7e5      	b.n	800486a <VL53L1_get_device_results+0x4fe>

0800489e <VL53L1_dynamic_xtalk_correction_enable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 800489e:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
 80048a2:	2301      	movs	r3, #1
 80048a4:	7003      	strb	r3, [r0, #0]

	LOG_FUNCTION_END(status);

	return status;
}
 80048a6:	2000      	movs	r0, #0
 80048a8:	4770      	bx	lr

080048aa <VL53L1_dynamic_xtalk_correction_disable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80048aa:	f500 53a0 	add.w	r3, r0, #5120	; 0x1400
 80048ae:	2000      	movs	r0, #0
 80048b0:	7018      	strb	r0, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
}
 80048b2:	4770      	bx	lr

080048b4 <VL53L1_dynamic_xtalk_correction_apply_enable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80048b4:	f241 4301 	movw	r3, #5121	; 0x1401
 80048b8:	2201      	movs	r2, #1
 80048ba:	54c2      	strb	r2, [r0, r3]

	LOG_FUNCTION_END(status);

	return status;
}
 80048bc:	2000      	movs	r0, #0
 80048be:	4770      	bx	lr

080048c0 <VL53L1_dynamic_xtalk_correction_apply_disable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 80048c0:	f241 4201 	movw	r2, #5121	; 0x1401
 80048c4:	2300      	movs	r3, #0
 80048c6:	5483      	strb	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	4770      	bx	lr

080048cc <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80048cc:	f241 4302 	movw	r3, #5122	; 0x1402
 80048d0:	2201      	movs	r2, #1
 80048d2:	54c2      	strb	r2, [r0, r3]

	LOG_FUNCTION_END(status);

	return status;
}
 80048d4:	2000      	movs	r0, #0
 80048d6:	4770      	bx	lr

080048d8 <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 80048d8:	f241 4202 	movw	r2, #5122	; 0x1402
 80048dc:	2300      	movs	r3, #0
 80048de:	5483      	strb	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	4770      	bx	lr

080048e4 <VL53L1_init_refspadchar_config_struct>:

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80048e4:	f640 3308 	movw	r3, #2824	; 0xb08
 80048e8:	8003      	strh	r3, [r0, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <VL53L1_init_refspadchar_config_struct+0x1c>)
 80048ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048f0:	e9c0 2301 	strd	r2, r3, [r0, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80048f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80048f8:	8183      	strh	r3, [r0, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80048fa:	2000      	movs	r0, #0
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	05000a00 	.word	0x05000a00

08004904 <VL53L1_init_ssc_config_struct>:


	pdata->vcsel_width = 0x02;


	pdata->timeout_us   = 36000;
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <VL53L1_init_ssc_config_struct+0x14>)
 8004906:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 800490a:	e9c0 2300 	strd	r2, r3, [r0]


	pdata->rate_limit_mcps =
 800490e:	230c      	movs	r3, #12
 8004910:	8103      	strh	r3, [r0, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8004912:	2000      	movs	r0, #0
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	020f1200 	.word	0x020f1200

0800491c <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	460c      	mov	r4, r1




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8004920:	8945      	ldrh	r5, [r0, #10]
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8004922:	600d      	str	r5, [r1, #0]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8004924:	f44f 7300 	mov.w	r3, #512	; 0x200
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004928:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800492c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
	pdata->histogram_mode_crosstalk_margin_kcps                =
 8004930:	8263      	strh	r3, [r4, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8004932:	2300      	movs	r3, #0
 8004934:	82a3      	strh	r3, [r4, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8004936:	2340      	movs	r3, #64	; 0x40
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8004938:	80a1      	strh	r1, [r4, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800493a:	80e2      	strh	r2, [r4, #6]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800493c:	60a5      	str	r5, [r4, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800493e:	81a1      	strh	r1, [r4, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8004940:	81e2      	strh	r2, [r4, #14]
	pdata->crosstalk_range_ignore_threshold_mult =
 8004942:	75a3      	strb	r3, [r4, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8004944:	b90d      	cbnz	r5, 800494a <VL53L1_init_xtalk_config_struct+0x2e>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8004946:	6863      	ldr	r3, [r4, #4]
 8004948:	b17b      	cbz	r3, 800496a <VL53L1_init_xtalk_config_struct+0x4e>
 800494a:	2301      	movs	r3, #1
 800494c:	7423      	strb	r3, [r4, #16]


	if ((status == VL53L1_ERROR_NONE) &&
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 800494e:	4628      	mov	r0, r5
 8004950:	2340      	movs	r3, #64	; 0x40
 8004952:	f001 fbc5 	bl	80060e0 <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8004956:	8320      	strh	r0, [r4, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8004958:	f64f 73ce 	movw	r3, #65486	; 0xffce
 800495c:	8363      	strh	r3, [r4, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800495e:	4b04      	ldr	r3, [pc, #16]	; (8004970 <VL53L1_init_xtalk_config_struct+0x54>)
 8004960:	61e3      	str	r3, [r4, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8004962:	238c      	movs	r3, #140	; 0x8c
 8004964:	8423      	strh	r3, [r4, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8004966:	2000      	movs	r0, #0
 8004968:	bd38      	pop	{r3, r4, r5, pc}
 800496a:	7423      	strb	r3, [r4, #16]
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800496c:	8323      	strh	r3, [r4, #24]
 800496e:	e7f3      	b.n	8004958 <VL53L1_init_xtalk_config_struct+0x3c>
 8004970:	fa000032 	.word	0xfa000032

08004974 <VL53L1_init_xtalk_extract_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8004974:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004978:	8003      	strh	r3, [r0, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800497a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800497e:	6083      	str	r3, [r0, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8004980:	2307      	movs	r3, #7
 8004982:	7403      	strb	r3, [r0, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8004984:	f643 2398 	movw	r3, #15000	; 0x3a98
 8004988:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800498a:	f242 7310 	movw	r3, #10000	; 0x2710
 800498e:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8004990:	f64f 73ba 	movw	r3, #65466	; 0xffba
 8004994:	8243      	strh	r3, [r0, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8004996:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <VL53L1_init_xtalk_extract_config_struct+0x30>)
 8004998:	6143      	str	r3, [r0, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800499a:	238c      	movs	r3, #140	; 0x8c
 800499c:	8303      	strh	r3, [r0, #24]


	LOG_FUNCTION_END(status);

	return status;
}
 800499e:	2000      	movs	r0, #0
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	fa000046 	.word	0xfa000046

080049a8 <VL53L1_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80049a8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80049ac:	8003      	strh	r3, [r0, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80049ae:	f643 2298 	movw	r2, #15000	; 0x3a98
 80049b2:	f243 23c8 	movw	r3, #13000	; 0x32c8
 80049b6:	e9c0 2301 	strd	r2, r3, [r0, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80049ba:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80049bc:	f642 0308 	movw	r3, #10248	; 0x2808
 80049c0:	8203      	strh	r3, [r0, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80049c2:	2309      	movs	r3, #9
 80049c4:	7483      	strb	r3, [r0, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80049c6:	2000      	movs	r0, #0
 80049c8:	4770      	bx	lr
	...

080049cc <VL53L1_init_zone_cal_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80049cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80049d0:	8003      	strh	r3, [r0, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80049d2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80049d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80049da:	e9c0 2301 	strd	r2, r3, [r0, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80049de:	4b03      	ldr	r3, [pc, #12]	; (80049ec <VL53L1_init_zone_cal_config_struct+0x20>)
 80049e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80049e4:	e9c0 1303 	strd	r1, r3, [r0, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80049e8:	2000      	movs	r0, #0
 80049ea:	4770      	bx	lr
 80049ec:	00080010 	.word	0x00080010

080049f0 <VL53L1_init_hist_post_process_config_struct>:
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 80049f0:	2264      	movs	r2, #100	; 0x64
 80049f2:	614a      	str	r2, [r1, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 80049f4:	2201      	movs	r2, #1
 80049f6:	760a      	strb	r2, [r1, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 80049f8:	22a0      	movs	r2, #160	; 0xa0
	pdata->hist_algo_select =
 80049fa:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <VL53L1_init_hist_post_process_config_struct+0x50>)
	pdata->gain_factor                =
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 80049fc:	f8df c054 	ldr.w	ip, [pc, #84]	; 8004a54 <VL53L1_init_hist_post_process_config_struct+0x64>
	pdata->sigma_thresh                  =
 8004a00:	834a      	strh	r2, [r1, #26]
	pdata->valid_phase_low = 0x08;
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <VL53L1_init_hist_post_process_config_struct+0x54>)
	pdata->hist_algo_select =
 8004a04:	600b      	str	r3, [r1, #0]
	pdata->hist_amb_est_method =
 8004a06:	f245 0301 	movw	r3, #20481	; 0x5001
	pdata->valid_phase_low = 0x08;
 8004a0a:	e9c1 c207 	strd	ip, r2, [r1, #28]
	pdata->hist_amb_est_method =
 8004a0e:	808b      	strh	r3, [r1, #4]

	pdata->algo__consistency_check__event_sigma =
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8004a10:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <VL53L1_init_hist_post_process_config_struct+0x58>)
 8004a12:	624a      	str	r2, [r1, #36]	; 0x24
	pdata->ambient_thresh_sigma1         =
 8004a14:	2370      	movs	r3, #112	; 0x70

	pdata->algo__crosstalk_detect_min_valid_range_mm  =
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8004a16:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <VL53L1_init_hist_post_process_config_struct+0x5c>)
	pdata->ambient_thresh_sigma1         =
 8004a18:	718b      	strb	r3, [r1, #6]
	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8004a1a:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
	pdata->ambient_thresh_events_scaler     =
 8004a1e:	f241 033d 	movw	r3, #4157	; 0x103d
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8004a22:	480b      	ldr	r0, [pc, #44]	; (8004a50 <VL53L1_init_hist_post_process_config_struct+0x60>)
	pdata->ambient_thresh_events_scaler     =
 8004a24:	810b      	strh	r3, [r1, #8]
	pdata->min_ambient_thresh_events     =
 8004a26:	2310      	movs	r3, #16
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8004a28:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	pdata->min_ambient_thresh_events     =
 8004a2c:	60cb      	str	r3, [r1, #12]





	pdata->algo__crosstalk_detect_event_sigma       =
 8004a2e:	2250      	movs	r2, #80	; 0x50
	pdata->noise_threshold               =
 8004a30:	2332      	movs	r3, #50	; 0x32
 8004a32:	820b      	strh	r3, [r1, #16]
	pdata->algo__crosstalk_detect_event_sigma       =
 8004a34:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8004a38:	87cb      	strh	r3, [r1, #62]	; 0x3e


	LOG_FUNCTION_END(status);

	return status;
}
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	02010104 	.word	0x02010104
 8004a44:	00088808 	.word	0x00088808
 8004a48:	00fa0800 	.word	0x00fa0800
 8004a4c:	008cfa00 	.word	0x008cfa00
 8004a50:	0032ffce 	.word	0x0032ffce
 8004a54:	07c30000 	.word	0x07c30000

08004a58 <VL53L1_init_tuning_parm_storage_struct>:

	pdata->tp_tuning_parm_version              =
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8004a58:	4a48      	ldr	r2, [pc, #288]	; (8004b7c <VL53L1_init_tuning_parm_storage_struct+0x124>)
 8004a5a:	4b49      	ldr	r3, [pc, #292]	; (8004b80 <VL53L1_init_tuning_parm_storage_struct+0x128>)
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8004a5c:	f8df c164 	ldr.w	ip, [pc, #356]	; 8004bc4 <VL53L1_init_tuning_parm_storage_struct+0x16c>
{
 8004a60:	b530      	push	{r4, r5, lr}
	pdata->tp_tuning_parm_lld_version          =
 8004a62:	e9c0 2300 	strd	r2, r3, [r0]
	pdata->tp_lite_long_sigma_thresh_mm        =
 8004a66:	f04f 123c 	mov.w	r2, #3932220	; 0x3c003c
 8004a6a:	6182      	str	r2, [r0, #24]
	pdata->tp_lite_short_sigma_thresh_mm       =
 8004a6c:	f502 0288 	add.w	r2, r2, #4456448	; 0x440000
 8004a70:	61c2      	str	r2, [r0, #28]
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8004a72:	4a44      	ldr	r2, [pc, #272]	; (8004b84 <VL53L1_init_tuning_parm_storage_struct+0x12c>)
	pdata->tp_init_phase_rtn_lite_short        =
 8004a74:	4b44      	ldr	r3, [pc, #272]	; (8004b88 <VL53L1_init_tuning_parm_storage_struct+0x130>)
 8004a76:	6083      	str	r3, [r0, #8]
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8004a78:	f04f 1180 	mov.w	r1, #8388736	; 0x800080
 8004a7c:	e9c0 1208 	strd	r1, r2, [r0, #32]
	pdata->tp_timed_seed_cfg                     =
 8004a80:	f240 2201 	movw	r2, #513	; 0x201
 8004a84:	8502      	strh	r2, [r0, #40]	; 0x28
	pdata->tp_phasecal_timeout_hist_long_us      =
 8004a86:	f643 2598 	movw	r5, #15000	; 0x3a98
 8004a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	pdata->tp_phasecal_timeout_hist_short_us     =
 8004a8e:	f241 7170 	movw	r1, #6000	; 0x1770
	pdata->tp_phasecal_timeout_hist_long_us      =
 8004a92:	e9c0 250e 	strd	r2, r5, [r0, #56]	; 0x38
	pdata->tp_phasecal_timeout_timed_us          =
 8004a96:	e9c0 1214 	strd	r1, r2, [r0, #80]	; 0x50
	pdata->tp_phasecal_timeout_hist_short_us     =
 8004a9a:	f242 3428 	movw	r4, #9000	; 0x2328
	pdata->tp_mm_timeout_lite_us                 =
 8004a9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
	pdata->tp_init_phase_rtn_hist_long         =
 8004aa2:	f5a3 23e1 	sub.w	r3, r3, #460800	; 0x70800
	pdata->tp_phasecal_timeout_hist_short_us     =
 8004aa6:	e9c0 4110 	strd	r4, r1, [r0, #64]	; 0x40
	pdata->tp_phasecal_timeout_mz_med_us         =
 8004aaa:	e9c0 5412 	strd	r5, r4, [r0, #72]	; 0x48
	pdata->tp_mm_timeout_histo_us                =
 8004aae:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
	pdata->tp_mm_timeout_timed_us                =
 8004ab2:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
	pdata->tp_init_phase_rtn_hist_long         =
 8004ab6:	3bfd      	subs	r3, #253	; 0xfd
	pdata->tp_range_timeout_histo_us             =
 8004ab8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004abc:	f24f 6418 	movw	r4, #63000	; 0xf618
	pdata->tp_range_timeout_lpa_us =
 8004ac0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
	pdata->tp_range_timeout_histo_us             =
 8004ac4:	e9c0 421b 	strd	r4, r2, [r0, #108]	; 0x6c
	pdata->tp_init_phase_rtn_hist_long         =
 8004ac8:	60c3      	str	r3, [r0, #12]
	pdata->tp_range_timeout_mz_us                =
 8004aca:	6742      	str	r2, [r0, #116]	; 0x74
	pdata->tp_range_timeout_lpa_us =
 8004acc:	67c1      	str	r1, [r0, #124]	; 0x7c
	pdata->tp_init_phase_ref_hist_med          =
 8004ace:	4b2f      	ldr	r3, [pc, #188]	; (8004b8c <VL53L1_init_tuning_parm_storage_struct+0x134>)
	pdata->tp_dss_target_histo_mz_mcps           =
 8004ad0:	4c2f      	ldr	r4, [pc, #188]	; (8004b90 <VL53L1_init_tuning_parm_storage_struct+0x138>)
 8004ad2:	4930      	ldr	r1, [pc, #192]	; (8004b94 <VL53L1_init_tuning_parm_storage_struct+0x13c>)
	pdata->tp_init_phase_ref_hist_med          =
 8004ad4:	6103      	str	r3, [r0, #16]
	pdata->tp_range_timeout_timed_us             =
 8004ad6:	f243 22c8 	movw	r2, #13000	; 0x32c8
	pdata->tp_cal_repeat_rate                  =
 8004ada:	2300      	movs	r3, #0
	pdata->tp_range_timeout_timed_us             =
 8004adc:	6782      	str	r2, [r0, #120]	; 0x78
	pdata->tp_mm_timeout_lpa_us =
 8004ade:	2201      	movs	r2, #1
	pdata->tp_cal_repeat_rate                  =
 8004ae0:	8283      	strh	r3, [r0, #20]
	pdata->tp_lite_min_clip                    =
 8004ae2:	7583      	strb	r3, [r0, #22]
	pdata->tp_lite_first_order_select            =
 8004ae4:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	pdata->tp_mm_timeout_lpa_us =
 8004ae8:	6682      	str	r2, [r0, #104]	; 0x68
	pdata->tp_dss_target_histo_mz_mcps           =
 8004aea:	e9c0 410b 	strd	r4, r1, [r0, #44]	; 0x2c
	pdata->tp_hist_merge =
 8004aee:	f880 2084 	strb.w	r2, [r0, #132]	; 0x84
	pdata->tp_hist_merge_max_size =
 8004af2:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <VL53L1_init_tuning_parm_storage_struct+0x140>)
	pdata->tp_phasecal_patch_power =
 8004af4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	pdata->tp_hist_merge_max_size =
 8004af8:	f242 7510 	movw	r5, #10000	; 0x2710
 8004afc:	e9c0 5222 	strd	r5, r2, [r0, #136]	; 0x88
	pdata->tp_uwr_med_z_2_max =
 8004b00:	4a26      	ldr	r2, [pc, #152]	; (8004b9c <VL53L1_init_tuning_parm_storage_struct+0x144>)
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8004b02:	4d27      	ldr	r5, [pc, #156]	; (8004ba0 <VL53L1_init_tuning_parm_storage_struct+0x148>)
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8004b04:	f8a0 30e4 	strh.w	r3, [r0, #228]	; 0xe4
	pdata->tp_uwr_med_z_2_max =
 8004b08:	e9c0 c224 	strd	ip, r2, [r0, #144]	; 0x90
	pdata->tp_uwr_med_z_3_max =
 8004b0c:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
 8004b10:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
	pdata->tp_uwr_med_z_4_max =
 8004b14:	f102 427a 	add.w	r2, r2, #4194304000	; 0xfa000000
	pdata->tp_dss_target_very_short_mcps =
 8004b18:	f44f 5120 	mov.w	r1, #10240	; 0x2800
	pdata->tp_uwr_med_z_4_max =
 8004b1c:	f502 02ac 	add.w	r2, r2, #5636096	; 0x560000
	pdata->tp_dss_target_very_short_mcps =
 8004b20:	8681      	strh	r1, [r0, #52]	; 0x34
	pdata->tp_uwr_med_z_4_max =
 8004b22:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	pdata->tp_uwr_med_z_6_max =
 8004b26:	491f      	ldr	r1, [pc, #124]	; (8004ba4 <VL53L1_init_tuning_parm_storage_struct+0x14c>)
 8004b28:	4a1f      	ldr	r2, [pc, #124]	; (8004ba8 <VL53L1_init_tuning_parm_storage_struct+0x150>)
	pdata->tp_uwr_lng_z_3_max =
 8004b2a:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8004bc8 <VL53L1_init_tuning_parm_storage_struct+0x170>
	pdata->tp_uwr_med_z_6_max =
 8004b2e:	e9c0 1228 	strd	r1, r2, [r0, #160]	; 0xa0
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8004b32:	f2a2 42e2 	subw	r2, r2, #1250	; 0x4e2
 8004b36:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8004b3a:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <VL53L1_init_tuning_parm_storage_struct+0x154>)
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8004b3c:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <VL53L1_init_tuning_parm_storage_struct+0x158>)
 8004b42:	f641 042e 	movw	r4, #6190	; 0x182e
 8004b46:	e9c0 422d 	strd	r4, r2, [r0, #180]	; 0xb4
	pdata->tp_uwr_lng_z_1_max =
 8004b4a:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <VL53L1_init_tuning_parm_storage_struct+0x15c>)
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8004b4c:	4c1a      	ldr	r4, [pc, #104]	; (8004bb8 <VL53L1_init_tuning_parm_storage_struct+0x160>)
	pdata->tp_uwr_lng_z_1_max =
 8004b4e:	e9c0 522f 	strd	r5, r2, [r0, #188]	; 0xbc
	pdata->tp_uwr_lng_z_3_max =
 8004b52:	4a1a      	ldr	r2, [pc, #104]	; (8004bbc <VL53L1_init_tuning_parm_storage_struct+0x164>)
 8004b54:	e9c0 c231 	strd	ip, r2, [r0, #196]	; 0xc4
	pdata->tp_uwr_lng_z_5_max =
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <VL53L1_init_tuning_parm_storage_struct+0x168>)
 8004b5a:	f640 41e4 	movw	r1, #3300	; 0xce4
 8004b5e:	e9c0 1233 	strd	r1, r2, [r0, #204]	; 0xcc
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8004b62:	f5a2 129f 	sub.w	r2, r2, #1302528	; 0x13e000
 8004b66:	f6a2 52d6 	subw	r2, r2, #3542	; 0xdd6
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8004b6a:	e9c0 2335 	strd	r2, r3, [r0, #212]	; 0xd4
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8004b6e:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8004b72:	e9c0 4237 	strd	r4, r2, [r0, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	bd30      	pop	{r4, r5, pc}
 8004b7a:	bf00      	nop
 8004b7c:	000e001f 	.word	0x000e001f
 8004b80:	0a0e2f94 	.word	0x0a0e2f94
 8004b84:	02011008 	.word	0x02011008
 8004b88:	060a0e06 	.word	0x060a0e06
 8004b8c:	21020606 	.word	0x21020606
 8004b90:	14000a00 	.word	0x14000a00
 8004b94:	0a001400 	.word	0x0a001400
 8004b98:	07d00106 	.word	0x07d00106
 8004b9c:	04e203e8 	.word	0x04e203e8
 8004ba0:	00fa182e 	.word	0x00fa182e
 8004ba4:	00fa00c8 	.word	0x00fa00c8
 8004ba8:	090604e2 	.word	0x090604e2
 8004bac:	12200c1c 	.word	0x12200c1c
 8004bb0:	1b300000 	.word	0x1b300000
 8004bb4:	0cb204e2 	.word	0x0cb204e2
 8004bb8:	1e140000 	.word	0x1e140000
 8004bbc:	0b2200c8 	.word	0x0b2200c8
 8004bc0:	0f1e0000 	.word	0x0f1e0000
 8004bc4:	00fa0abe 	.word	0x00fa0abe
 8004bc8:	ff381194 	.word	0xff381194

08004bcc <VL53L1_init_hist_gen3_dmax_config_struct>:


	pdata->dss_config__target_total_rate_mcps = 0x1400;
	pdata->dss_config__aperture_attenuation = 0x38;

	pdata->signal_thresh_sigma                 =
 8004bcc:	f247 0320 	movw	r3, #28704	; 0x7020
 8004bd0:	8003      	strh	r3, [r0, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
	pdata->min_ambient_thresh_events           = 16;
	pdata->signal_total_events_limit           = 100;
 8004bd2:	2210      	movs	r2, #16
 8004bd4:	2364      	movs	r3, #100	; 0x64
 8004bd6:	e9c0 2301 	strd	r2, r3, [r0, #4]

	pdata->target_reflectance_for_dmax_calc[0] =
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8004bda:	4906      	ldr	r1, [pc, #24]	; (8004bf4 <VL53L1_init_hist_gen3_dmax_config_struct+0x28>)
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <VL53L1_init_hist_gen3_dmax_config_struct+0x2c>)
 8004bde:	e9c0 1303 	strd	r1, r3, [r0, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <VL53L1_init_hist_gen3_dmax_config_struct+0x30>)
 8004be4:	6143      	str	r3, [r0, #20]
	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8004be6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004bea:	8303      	strh	r3, [r0, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8004bec:	2338      	movs	r3, #56	; 0x38
 8004bee:	7683      	strb	r3, [r0, #26]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	4770      	bx	lr
 8004bf4:	0034000f 	.word	0x0034000f
 8004bf8:	016c00c8 	.word	0x016c00c8
 8004bfc:	ffff0190 	.word	0xffff0190

08004c00 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


	pstatic->gpio_hv_pad__ctrl = 0x00;


	pstatic->gpio_hv_mux__ctrl  =
 8004c04:	f240 2711 	movw	r7, #529	; 0x211
{
 8004c08:	e9dd 6e08 	ldrd	r6, lr, [sp, #32]
	pstatic->gpio_hv_mux__ctrl  =
 8004c0c:	8187      	strh	r7, [r0, #12]
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8004c0e:	f44f 6420 	mov.w	r4, #2560	; 0xa00
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
	pstatic->gpio__fio_hv_status = 0x00;
 8004c12:	f44f 7700 	mov.w	r7, #512	; 0x200
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8004c16:	8004      	strh	r4, [r0, #0]
	pstatic->gpio__fio_hv_status = 0x00;
 8004c18:	81c7      	strh	r7, [r0, #14]
	pstatic->debug__ctrl = 0x00;
 8004c1a:	2400      	movs	r4, #0
	pstatic->ana_config__spad_sel_pswidth = 0x02;
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8004c1c:	2708      	movs	r7, #8
	pstatic->debug__ctrl = 0x00;
 8004c1e:	8044      	strh	r4, [r0, #2]
	pstatic->clk_gating__ctrl = 0x00;
 8004c20:	8084      	strh	r4, [r0, #4]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8004c22:	80c4      	strh	r4, [r0, #6]
	pstatic->host_if__status = 0x00;
 8004c24:	8104      	strh	r4, [r0, #8]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8004c26:	8144      	strh	r4, [r0, #10]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8004c28:	8207      	strh	r7, [r0, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;

	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8004c2a:	f896 7024 	ldrb.w	r7, [r6, #36]	; 0x24
 8004c2e:	7487      	strb	r7, [r0, #18]
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8004c30:	f896 7025 	ldrb.w	r7, [r6, #37]	; 0x25
 8004c34:	74c7      	strb	r7, [r0, #19]
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8004c36:	f896 7026 	ldrb.w	r7, [r6, #38]	; 0x26
 8004c3a:	7507      	strb	r7, [r0, #20]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8004c3c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8004c40:	2701      	movs	r7, #1
 8004c42:	7547      	strb	r7, [r0, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8004c44:	82c4      	strh	r4, [r0, #22]
	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8004c46:	8304      	strh	r4, [r0, #24]
	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8004c48:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8004c4c:	f896 8016 	ldrb.w	r8, [r6, #22]
 8004c50:	f880 801b 	strb.w	r8, [r0, #27]
			ptuning_parms->tp_lite_min_clip;

	pstatic->algo__consistency_check__tolerance               =
 8004c54:	f896 8012 	ldrb.w	r8, [r6, #18]
 8004c58:	f880 801c 	strb.w	r8, [r0, #28]
			ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8004c5c:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8004c5e:	83c4      	strh	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;

	pgeneral->gph_config__stream_count_update_value = 0x00;
	pgeneral->global_config__stream_divider = 0x00;
	pgeneral->system__interrupt_config_gpio =
 8004c60:	f44f 6032 	mov.w	r0, #2848	; 0xb20
	pgeneral->gph_config__stream_count_update_value = 0x00;
 8004c64:	8014      	strh	r4, [r2, #0]
	pgeneral->system__interrupt_config_gpio =
 8004c66:	8050      	strh	r0, [r2, #2]
{
 8004c68:	e9dd 5c06 	ldrd	r5, ip, [sp, #24]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;


	pgeneral->cal_config__repeat_rate                         =
 8004c6c:	8ab0      	ldrh	r0, [r6, #20]
 8004c6e:	8090      	strh	r0, [r2, #4]
			ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width = 0x02;
 8004c70:	f640 5002 	movw	r0, #3330	; 0xd02
 8004c74:	80d0      	strh	r0, [r2, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;

	pgeneral->phasecal_config__target                         =
 8004c76:	7cf0      	ldrb	r0, [r6, #19]
 8004c78:	7210      	strb	r0, [r2, #8]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
	pgeneral->system__thresh_rate_low = 0x0000;

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8004c7a:	f44f 400c 	mov.w	r0, #35840	; 0x8c00
 8004c7e:	8210      	strh	r0, [r2, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8004c80:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8004c84:	8250      	strh	r0, [r2, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8004c86:	f240 10ff 	movw	r0, #511	; 0x1ff
	pgeneral->phasecal_config__override = 0x00;
 8004c8a:	7254      	strb	r4, [r2, #9]
	pgeneral->dss_config__roi_mode_control =
 8004c8c:	7297      	strb	r7, [r2, #10]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8004c8e:	8290      	strh	r0, [r2, #20]
	pgeneral->system__thresh_rate_high = 0x0000;
 8004c90:	8194      	strh	r4, [r2, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8004c92:	81d4      	strh	r4, [r2, #14]
	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8004c94:	4830      	ldr	r0, [pc, #192]	; (8004d58 <VL53L1_preset_mode_standard_ranging+0x158>)
 8004c96:	4a31      	ldr	r2, [pc, #196]	; (8004d5c <VL53L1_preset_mode_standard_ranging+0x15c>)
 8004c98:	e9c3 0200 	strd	r0, r2, [r3]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;

	ptiming->range_config__vcsel_period_a = 0x0B;

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8004c9c:	f640 12f5 	movw	r2, #2549	; 0x9f5
 8004ca0:	811a      	strh	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;

	ptiming->range_config__sigma_thresh                       =
 8004ca2:	8b72      	ldrh	r2, [r6, #26]
 8004ca4:	815a      	strh	r2, [r3, #10]
			ptuning_parms->tp_lite_med_sigma_thresh_mm;

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8004ca6:	8c32      	ldrh	r2, [r6, #32]
 8004ca8:	819a      	strh	r2, [r3, #12]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8004caa:	f240 7854 	movw	r8, #1876	; 0x754
	ptiming->range_config__valid_phase_low = 0x08;
 8004cae:	f647 0208 	movw	r2, #30728	; 0x7808
 8004cb2:	81da      	strh	r2, [r3, #14]
	ptiming->system__intermeasurement_period = 0x00000000;
 8004cb4:	611c      	str	r4, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8004cb6:	751c      	strb	r4, [r3, #20]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8004cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8004cbc:	f8a1 8006 	strh.w	r8, [r1, #6]
	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8004cc0:	f44f 7804 	mov.w	r8, #528	; 0x210
	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8004cc4:	82cb      	strh	r3, [r1, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8004cc6:	830b      	strh	r3, [r1, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8004cc8:	f44f 60e0 	mov.w	r0, #1792	; 0x700
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8004ccc:	f244 3321 	movw	r3, #17185	; 0x4321
	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8004cd0:	f243 2210 	movw	r2, #12816	; 0x3210
	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8004cd4:	f8a1 800a 	strh.w	r8, [r1, #10]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8004cd8:	f240 5843 	movw	r8, #1347	; 0x543
	phistogram->histogram_config__spad_array_selection = 0x00;
 8004cdc:	8008      	strh	r0, [r1, #0]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8004cde:	804b      	strh	r3, [r1, #2]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8004ce0:	810b      	strh	r3, [r1, #8]
	phistogram->histogram_config__user_bin_offset = 0x00;
 8004ce2:	81c8      	strh	r0, [r1, #14]
	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8004ce4:	808a      	strh	r2, [r1, #4]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8004ce6:	f8a1 800c 	strh.w	r8, [r1, #12]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8004cea:	820b      	strh	r3, [r1, #16]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8004cec:	2354      	movs	r3, #84	; 0x54
 8004cee:	750b      	strb	r3, [r1, #20]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8004cf0:	2319      	movs	r3, #25
	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8004cf2:	824a      	strh	r2, [r1, #18]
	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8004cf4:	f8ae 3000 	strh.w	r3, [lr]
	pzone_cfg->active_zones = 0x00;
	pzone_cfg->user_zones[0].height = 0x0f;
	pzone_cfg->user_zones[0].width = 0x0f;
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8004cf8:	f640 0308 	movw	r3, #2056	; 0x808
 8004cfc:	f8ae 301c 	strh.w	r3, [lr, #28]
	pzone_cfg->user_zones[0].width = 0x0f;
 8004d00:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004d04:	f8ae 301e 	strh.w	r3, [lr, #30]
	pzone_cfg->user_zones[0].y_centre = 0x08;



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8004d08:	702f      	strb	r7, [r5, #0]

	pdynamic->system__thresh_high = 0x0000;
 8004d0a:	806c      	strh	r4, [r5, #2]
	pdynamic->system__thresh_low = 0x0000;
 8004d0c:	80ac      	strh	r4, [r5, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8004d0e:	71ac      	strb	r4, [r5, #6]
	pdynamic->system__seed_config =
 8004d10:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
 8004d14:	71eb      	strb	r3, [r5, #7]
			ptuning_parms->tp_lite_seed_cfg;


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8004d16:	f640 130b 	movw	r3, #2315	; 0x90b
 8004d1a:	812b      	strh	r3, [r5, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;

	pdynamic->sd_config__initial_phase_sd0                     =
 8004d1c:	79f3      	ldrb	r3, [r6, #7]
 8004d1e:	72ab      	strb	r3, [r5, #10]
			ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1                     =
 8004d20:	7ab3      	ldrb	r3, [r6, #10]
 8004d22:	72eb      	strb	r3, [r5, #11]
			ptuning_parms->tp_init_phase_ref_lite_med;

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8004d24:	732f      	strb	r7, [r5, #12]



	pdynamic->sd_config__first_order_select =
 8004d26:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
 8004d2a:	736b      	strb	r3, [r5, #13]
			ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier         =
 8004d2c:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8004d30:	73ab      	strb	r3, [r5, #14]
			ptuning_parms->tp_lite_quantifier;


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8004d32:	23c7      	movs	r3, #199	; 0xc7
 8004d34:	73eb      	strb	r3, [r5, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8004d36:	f64d 33ff 	movw	r3, #56319	; 0xdbff
 8004d3a:	822b      	strh	r3, [r5, #16]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	74ab      	strb	r3, [r5, #18]
	psystem->system__stream_count_ctrl = 0x00;
	psystem->firmware__enable = 0x01;
	psystem->system__interrupt_clear                           =
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8004d40:	2321      	movs	r3, #33	; 0x21
	psystem->system__stream_count_ctrl = 0x00;
 8004d42:	f88c 4001 	strb.w	r4, [ip, #1]
	psystem->firmware__enable = 0x01;
 8004d46:	f88c 7002 	strb.w	r7, [ip, #2]
	psystem->system__interrupt_clear                           =
 8004d4a:	f88c 7003 	strb.w	r7, [ip, #3]
	psystem->system__mode_start                                =
 8004d4e:	f88c 3004 	strb.w	r3, [ip, #4]
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 8004d52:	4620      	mov	r0, r4
 8004d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d58:	20001a00 	.word	0x20001a00
 8004d5c:	010bcc01 	.word	0x010bcc01

08004d60 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d62:	b085      	sub	sp, #20

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8004d64:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
{
 8004d68:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_standard_ranging(
 8004d6a:	e9cd 5702 	strd	r5, r7, [sp, #8]
 8004d6e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004d70:	e9cd 6700 	strd	r6, r7, [sp]
{
 8004d74:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8004d76:	f7ff ff43 	bl	8004c00 <VL53L1_preset_mode_standard_ranging>
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004d7a:	b988      	cbnz	r0, 8004da0 <VL53L1_preset_mode_standard_ranging_short_range+0x40>



		ptiming->range_config__vcsel_period_a = 0x07;
 8004d7c:	2307      	movs	r3, #7
 8004d7e:	71a3      	strb	r3, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8004d80:	2305      	movs	r3, #5
 8004d82:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh                  =
 8004d84:	8bab      	ldrh	r3, [r5, #28]
 8004d86:	8163      	strh	r3, [r4, #10]
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004d88:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8004d8a:	81a3      	strh	r3, [r4, #12]
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low = 0x08;
 8004d8c:	f643 0308 	movw	r3, #14344	; 0x3808
 8004d90:	81e3      	strh	r3, [r4, #14]
		ptiming->range_config__valid_phase_high = 0x38;



		pdynamic->sd_config__woi_sd0 = 0x07;
 8004d92:	f240 5307 	movw	r3, #1287	; 0x507
 8004d96:	8133      	strh	r3, [r6, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
		pdynamic->sd_config__initial_phase_sd0               =
 8004d98:	7a2b      	ldrb	r3, [r5, #8]
 8004d9a:	72b3      	strb	r3, [r6, #10]
				ptuning_parms->tp_init_phase_rtn_lite_short;
		pdynamic->sd_config__initial_phase_sd1               =
 8004d9c:	7aeb      	ldrb	r3, [r5, #11]
 8004d9e:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004da0:	b005      	add	sp, #20
 8004da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004da4 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da6:	b085      	sub	sp, #20

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8004da8:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
{
 8004dac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_standard_ranging(
 8004dae:	e9cd 5702 	strd	r5, r7, [sp, #8]
 8004db2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004db4:	e9cd 6700 	strd	r6, r7, [sp]
{
 8004db8:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8004dba:	f7ff ff21 	bl	8004c00 <VL53L1_preset_mode_standard_ranging>
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004dbe:	b988      	cbnz	r0, 8004de4 <VL53L1_preset_mode_standard_ranging_long_range+0x40>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8004dc0:	230f      	movs	r3, #15
 8004dc2:	71a3      	strb	r3, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8004dc4:	230d      	movs	r3, #13
 8004dc6:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh                  =
 8004dc8:	8b2b      	ldrh	r3, [r5, #24]
 8004dca:	8163      	strh	r3, [r4, #10]
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004dcc:	8beb      	ldrh	r3, [r5, #30]
 8004dce:	81a3      	strh	r3, [r4, #12]
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low = 0x08;
 8004dd0:	f64b 0308 	movw	r3, #47112	; 0xb808
 8004dd4:	81e3      	strh	r3, [r4, #14]
		ptiming->range_config__valid_phase_high = 0xB8;



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8004dd6:	f640 530f 	movw	r3, #3343	; 0xd0f
 8004dda:	8133      	strh	r3, [r6, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
		pdynamic->sd_config__initial_phase_sd0               =
 8004ddc:	79ab      	ldrb	r3, [r5, #6]
 8004dde:	72b3      	strb	r3, [r6, #10]
				ptuning_parms->tp_init_phase_rtn_lite_long;
		pdynamic->sd_config__initial_phase_sd1               =
 8004de0:	7a6b      	ldrb	r3, [r5, #9]
 8004de2:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004de4:	b005      	add	sp, #20
 8004de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004de8 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004de8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8004dea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004dec:	9603      	str	r6, [sp, #12]
 8004dee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
{
 8004df0:	9d08      	ldr	r5, [sp, #32]
	status = VL53L1_preset_mode_standard_ranging(
 8004df2:	9602      	str	r6, [sp, #8]
 8004df4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004df6:	e9cd 5600 	strd	r5, r6, [sp]
{
 8004dfa:	4614      	mov	r4, r2
	status = VL53L1_preset_mode_standard_ranging(
 8004dfc:	f7ff ff00 	bl	8004c00 <VL53L1_preset_mode_standard_ranging>
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004e00:	b918      	cbnz	r0, 8004e0a <VL53L1_preset_mode_standard_ranging_mm1_cal+0x22>

		pgeneral->dss_config__roi_mode_control =
 8004e02:	2302      	movs	r3, #2
 8004e04:	72a3      	strb	r3, [r4, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8004e06:	233b      	movs	r3, #59	; 0x3b
 8004e08:	746b      	strb	r3, [r5, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004e0a:	b004      	add	sp, #16
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}

08004e0e <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004e0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8004e10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004e12:	9603      	str	r6, [sp, #12]
 8004e14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
{
 8004e16:	9d08      	ldr	r5, [sp, #32]
	status = VL53L1_preset_mode_standard_ranging(
 8004e18:	9602      	str	r6, [sp, #8]
 8004e1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004e1c:	e9cd 5600 	strd	r5, r6, [sp]
{
 8004e20:	4614      	mov	r4, r2
	status = VL53L1_preset_mode_standard_ranging(
 8004e22:	f7ff feed 	bl	8004c00 <VL53L1_preset_mode_standard_ranging>
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004e26:	b918      	cbnz	r0, 8004e30 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x22>

		pgeneral->dss_config__roi_mode_control =
 8004e28:	2302      	movs	r3, #2
 8004e2a:	72a3      	strb	r3, [r4, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8004e2c:	235b      	movs	r3, #91	; 0x5b
 8004e2e:	746b      	strb	r3, [r5, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004e30:	b004      	add	sp, #16
 8004e32:	bd70      	pop	{r4, r5, r6, pc}

08004e34 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004e34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004e38:	e9dd 580a 	ldrd	r5, r8, [sp, #40]	; 0x28

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8004e3c:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
 8004e40:	e9cd 5800 	strd	r5, r8, [sp]
 8004e44:	e9cd 7602 	strd	r7, r6, [sp, #8]
{
 8004e48:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8004e4a:	f7ff fed9 	bl	8004c00 <VL53L1_preset_mode_standard_ranging>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004e4e:	b978      	cbnz	r0, 8004e70 <VL53L1_preset_mode_timed_ranging+0x3c>


		pdynamic->system__grouped_parameter_hold = 0x00;


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004e50:	f44f 4331 	mov.w	r3, #45312	; 0xb100
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004e54:	74a8      	strb	r0, [r5, #18]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004e56:	80a3      	strh	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8004e58:	23d4      	movs	r3, #212	; 0xd4
 8004e5a:	7223      	strb	r3, [r4, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 8004e5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8004e60:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 8004e62:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8004e64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e68:	71eb      	strb	r3, [r5, #7]
				ptuning_parms->tp_timed_seed_cfg;




		psystem->system__mode_start =
 8004e6a:	2340      	movs	r3, #64	; 0x40
 8004e6c:	f888 3004 	strb.w	r3, [r8, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004e70:	b004      	add	sp, #16
 8004e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004e76 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004e76:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004e7a:	e9dd 580a 	ldrd	r5, r8, [sp, #40]	; 0x28

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 8004e7e:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
 8004e82:	e9cd 5800 	strd	r5, r8, [sp]
 8004e86:	e9cd 7602 	strd	r7, r6, [sp, #8]
{
 8004e8a:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging_short_range(
 8004e8c:	f7ff ff68 	bl	8004d60 <VL53L1_preset_mode_standard_ranging_short_range>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004e90:	b980      	cbnz	r0, 8004eb4 <VL53L1_preset_mode_timed_ranging_short_range+0x3e>





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8004e92:	f248 4301 	movw	r3, #33793	; 0x8401
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004e96:	74a8      	strb	r0, [r5, #18]
		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8004e98:	80a3      	strh	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8004e9e:	23b1      	movs	r3, #177	; 0xb1
 8004ea0:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8004ea2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004ea6:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8004ea8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eac:	71eb      	strb	r3, [r5, #7]
				ptuning_parms->tp_timed_seed_cfg;




		psystem->system__mode_start =
 8004eae:	2340      	movs	r3, #64	; 0x40
 8004eb0:	f888 3004 	strb.w	r3, [r8, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004eb4:	b004      	add	sp, #16
 8004eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004eba <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004eba:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004ebe:	e9dd 580a 	ldrd	r5, r8, [sp, #40]	; 0x28

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 8004ec2:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
 8004ec6:	e9cd 5800 	strd	r5, r8, [sp]
 8004eca:	e9cd 7602 	strd	r7, r6, [sp, #8]
{
 8004ece:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging_long_range(
 8004ed0:	f7ff ff68 	bl	8004da4 <VL53L1_preset_mode_standard_ranging_long_range>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004ed4:	b978      	cbnz	r0, 8004ef6 <VL53L1_preset_mode_timed_ranging_long_range+0x3c>





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004ed6:	f44f 4317 	mov.w	r3, #38656	; 0x9700
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004eda:	74a8      	strb	r0, [r5, #18]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004edc:	80a3      	strh	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8004ede:	23b1      	movs	r3, #177	; 0xb1
 8004ee0:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8004ee2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8004ee6:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 8004ee8:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8004eea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eee:	71eb      	strb	r3, [r5, #7]
				ptuning_parms->tp_timed_seed_cfg;




		psystem->system__mode_start =
 8004ef0:	2340      	movs	r3, #64	; 0x40
 8004ef2:	f888 3004 	strb.w	r3, [r8, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004ef6:	b004      	add	sp, #16
 8004ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004efc <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efe:	b085      	sub	sp, #20

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 8004f00:	e9dd 760d 	ldrd	r7, r6, [sp, #52]	; 0x34
 8004f04:	9703      	str	r7, [sp, #12]
 8004f06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
{
 8004f08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging(
 8004f0a:	9702      	str	r7, [sp, #8]
 8004f0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004f0e:	e9cd 5700 	strd	r5, r7, [sp]
{
 8004f12:	4614      	mov	r4, r2
	status = VL53L1_preset_mode_timed_ranging(
 8004f14:	f7ff ff8e 	bl	8004e34 <VL53L1_preset_mode_timed_ranging>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004f18:	b938      	cbnz	r0, 8004f2a <VL53L1_preset_mode_low_power_auto_ranging+0x2e>
		status = VL53L1_config_low_power_auto_mode(
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004f20:	b005      	add	sp, #20
 8004f22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8004f26:	f002 b8c7 	b.w	80070b8 <VL53L1_config_low_power_auto_mode>
}
 8004f2a:	b005      	add	sp, #20
 8004f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f2e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f30:	b085      	sub	sp, #20

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 8004f32:	e9dd 760d 	ldrd	r7, r6, [sp, #52]	; 0x34
 8004f36:	9703      	str	r7, [sp, #12]
 8004f38:	9f0c      	ldr	r7, [sp, #48]	; 0x30
{
 8004f3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_short_range(
 8004f3c:	9702      	str	r7, [sp, #8]
 8004f3e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004f40:	e9cd 5700 	strd	r5, r7, [sp]
{
 8004f44:	4614      	mov	r4, r2
	status = VL53L1_preset_mode_timed_ranging_short_range(
 8004f46:	f7ff ff96 	bl	8004e76 <VL53L1_preset_mode_timed_ranging_short_range>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004f4a:	b938      	cbnz	r0, 8004f5c <VL53L1_preset_mode_low_power_auto_short_ranging+0x2e>
		status = VL53L1_config_low_power_auto_mode(
 8004f4c:	4632      	mov	r2, r6
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004f52:	b005      	add	sp, #20
 8004f54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8004f58:	f002 b8ae 	b.w	80070b8 <VL53L1_config_low_power_auto_mode>
}
 8004f5c:	b005      	add	sp, #20
 8004f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f60 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f62:	b085      	sub	sp, #20

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 8004f64:	e9dd 760d 	ldrd	r7, r6, [sp, #52]	; 0x34
 8004f68:	9703      	str	r7, [sp, #12]
 8004f6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
{
 8004f6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_long_range(
 8004f6e:	9702      	str	r7, [sp, #8]
 8004f70:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004f72:	e9cd 5700 	strd	r5, r7, [sp]
{
 8004f76:	4614      	mov	r4, r2
	status = VL53L1_preset_mode_timed_ranging_long_range(
 8004f78:	f7ff ff9f 	bl	8004eba <VL53L1_preset_mode_timed_ranging_long_range>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004f7c:	b938      	cbnz	r0, 8004f8e <VL53L1_preset_mode_low_power_auto_long_ranging+0x2e>
		status = VL53L1_config_low_power_auto_mode(
 8004f7e:	4632      	mov	r2, r6
 8004f80:	4629      	mov	r1, r5
 8004f82:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004f84:	b005      	add	sp, #20
 8004f86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8004f8a:	f002 b895 	b.w	80070b8 <VL53L1_config_low_power_auto_mode>
}
 8004f8e:	b005      	add	sp, #20
 8004f90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f92 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004f92:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004f96:	e9dd 580a 	ldrd	r5, r8, [sp, #40]	; 0x28

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8004f9a:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
 8004f9e:	e9cd 5800 	strd	r5, r8, [sp]
 8004fa2:	e9cd 7602 	strd	r7, r6, [sp, #8]
{
 8004fa6:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8004fa8:	f7ff fe2a 	bl	8004c00 <VL53L1_preset_mode_standard_ranging>
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8004fac:	b960      	cbnz	r0, 8004fc8 <VL53L1_preset_mode_singleshot_ranging+0x36>
		pdynamic->system__grouped_parameter_hold = 0x00;




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004fae:	f44f 4331 	mov.w	r3, #45312	; 0xb100
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004fb2:	74a8      	strb	r0, [r5, #18]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004fb4:	80a3      	strh	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8004fb6:	23d4      	movs	r3, #212	; 0xd4
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8004fb8:	71e0      	strb	r0, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8004fba:	7223      	strb	r3, [r4, #8]

		pdynamic->system__seed_config =
 8004fbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fc0:	71eb      	strb	r3, [r5, #7]
				ptuning_parms->tp_timed_seed_cfg;




		psystem->system__mode_start =
 8004fc2:	2310      	movs	r3, #16
 8004fc4:	f888 3004 	strb.w	r3, [r8, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004fc8:	b004      	add	sp, #16
 8004fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004fce <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004fce:	b530      	push	{r4, r5, lr}
 8004fd0:	b085      	sub	sp, #20

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8004fd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
{
 8004fd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
	status = VL53L1_preset_mode_standard_ranging(
 8004fd6:	9503      	str	r5, [sp, #12]
 8004fd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004fda:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004fde:	9d08      	ldr	r5, [sp, #32]
 8004fe0:	9500      	str	r5, [sp, #0]
 8004fe2:	f7ff fe0d 	bl	8004c00 <VL53L1_preset_mode_standard_ranging>
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 8004fe6:	b908      	cbnz	r0, 8004fec <VL53L1_preset_mode_olt+0x1e>

		psystem->system__stream_count_ctrl = 0x01;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	7063      	strb	r3, [r4, #1]

	LOG_FUNCTION_END(status);

	return status;
}
 8004fec:	b005      	add	sp, #20
 8004fee:	bd30      	pop	{r4, r5, pc}

08004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 8004ff0:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
 8004ff2:	7bc4      	ldrb	r4, [r0, #15]
 8004ff4:	748c      	strb	r4, [r1, #18]
			phistogram->histogram_config__high_amb_even_bin_0_1;
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8004ff6:	7c04      	ldrb	r4, [r0, #16]
 8004ff8:	74cc      	strb	r4, [r1, #19]
			phistogram->histogram_config__high_amb_even_bin_2_3;
	pstatic->sigma_estimator__sigma_ref_mm =
 8004ffa:	7c44      	ldrb	r4, [r0, #17]
 8004ffc:	750c      	strb	r4, [r1, #20]
			phistogram->histogram_config__high_amb_even_bin_4_5;

	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8004ffe:	7c84      	ldrb	r4, [r0, #18]
 8005000:	754c      	strb	r4, [r1, #21]
			phistogram->histogram_config__high_amb_odd_bin_0_1;

	pstatic->spare_host_config__static_config_spare_0 =
 8005002:	7cc4      	ldrb	r4, [r0, #19]
 8005004:	758c      	strb	r4, [r1, #22]
			phistogram->histogram_config__high_amb_odd_bin_2_3;
	pstatic->spare_host_config__static_config_spare_1 =
 8005006:	7d04      	ldrb	r4, [r0, #20]
 8005008:	75cc      	strb	r4, [r1, #23]
			phistogram->histogram_config__high_amb_odd_bin_4_5;

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800500a:	79c5      	ldrb	r5, [r0, #7]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800500c:	7a04      	ldrb	r4, [r0, #8]
{
 800500e:	9a03      	ldr	r2, [sp, #12]
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8005010:	eb04 2405 	add.w	r4, r4, r5, lsl #8
	pstatic->algo__range_ignore_threshold_mcps =
 8005014:	830c      	strh	r4, [r1, #24]

	pstatic->algo__range_ignore_valid_height_mm =
 8005016:	7a44      	ldrb	r4, [r0, #9]
 8005018:	768c      	strb	r4, [r1, #26]
			phistogram->histogram_config__mid_amb_even_bin_4_5;
	pstatic->algo__range_min_clip =
 800501a:	7a84      	ldrb	r4, [r0, #10]
 800501c:	76cc      	strb	r4, [r1, #27]
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
	pstatic->algo__consistency_check__tolerance =
 800501e:	7ac4      	ldrb	r4, [r0, #11]
 8005020:	770c      	strb	r4, [r1, #28]
			phistogram->histogram_config__mid_amb_odd_bin_2;

	pstatic->spare_host_config__static_config_spare_2 =
 8005022:	7b04      	ldrb	r4, [r0, #12]
 8005024:	774c      	strb	r4, [r1, #29]
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
	pstatic->sd_config__reset_stages_msb =
 8005026:	7b44      	ldrb	r4, [r0, #13]
 8005028:	778c      	strb	r4, [r1, #30]
			phistogram->histogram_config__mid_amb_odd_bin_5;

	pstatic->sd_config__reset_stages_lsb =
 800502a:	7b84      	ldrb	r4, [r0, #14]
 800502c:	77cc      	strb	r4, [r1, #31]
			phistogram->histogram_config__user_bin_offset;

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800502e:	7844      	ldrb	r4, [r0, #1]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8005030:	7881      	ldrb	r1, [r0, #2]
 8005032:	eb01 2104 	add.w	r1, r1, r4, lsl #8
	ptiming->range_config__sigma_thresh =
 8005036:	8159      	strh	r1, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8005038:	78c4      	ldrb	r4, [r0, #3]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800503a:	7901      	ldrb	r1, [r0, #4]
 800503c:	eb01 2104 	add.w	r1, r1, r4, lsl #8
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8005040:	8199      	strh	r1, [r3, #12]

	ptiming->range_config__valid_phase_low =
 8005042:	7941      	ldrb	r1, [r0, #5]
 8005044:	7399      	strb	r1, [r3, #14]
			phistogram->histogram_config__low_amb_odd_bin_2_3;
	ptiming->range_config__valid_phase_high =
 8005046:	7981      	ldrb	r1, [r0, #6]
 8005048:	73d9      	strb	r1, [r3, #15]
			phistogram->histogram_config__low_amb_odd_bin_4_5;

	pdynamic->system__thresh_high =
 800504a:	8ac3      	ldrh	r3, [r0, #22]
 800504c:	8053      	strh	r3, [r2, #2]
			phistogram->histogram_config__amb_thresh_low;

	pdynamic->system__thresh_low =
 800504e:	8b03      	ldrh	r3, [r0, #24]
 8005050:	8093      	strh	r3, [r2, #4]
			phistogram->histogram_config__amb_thresh_high;

	pdynamic->system__enable_xtalk_per_quadrant =
 8005052:	7803      	ldrb	r3, [r0, #0]
 8005054:	7193      	strb	r3, [r2, #6]
			phistogram->histogram_config__spad_array_selection;

	LOG_FUNCTION_END(0);

}
 8005056:	bd30      	pop	{r4, r5, pc}

08005058 <VL53L1_preset_mode_histogram_ranging>:
{
 8005058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	b08d      	sub	sp, #52	; 0x34
 800505e:	4698      	mov	r8, r3
		VL53L1_preset_mode_standard_ranging(
 8005060:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005062:	9303      	str	r3, [sp, #12]
 8005064:	9b19      	ldr	r3, [sp, #100]	; 0x64
{
 8005066:	9d16      	ldr	r5, [sp, #88]	; 0x58
		VL53L1_preset_mode_standard_ranging(
 8005068:	9302      	str	r3, [sp, #8]
 800506a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800506c:	9301      	str	r3, [sp, #4]
{
 800506e:	460f      	mov	r7, r1
		VL53L1_preset_mode_standard_ranging(
 8005070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
{
 8005072:	900b      	str	r0, [sp, #44]	; 0x2c
 8005074:	4616      	mov	r6, r2
		VL53L1_preset_mode_standard_ranging(
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	4642      	mov	r2, r8
 800507a:	462b      	mov	r3, r5
 800507c:	4631      	mov	r1, r6
 800507e:	4638      	mov	r0, r7
 8005080:	f7ff fdbe 	bl	8004c00 <VL53L1_preset_mode_standard_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8005084:	4604      	mov	r4, r0
 8005086:	2800      	cmp	r0, #0
 8005088:	d14e      	bne.n	8005128 <VL53L1_preset_mode_histogram_ranging+0xd0>
		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800508a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
		VL53L1_init_histogram_config_structure(
 800508e:	f04f 0a04 	mov.w	sl, #4
 8005092:	f04f 0903 	mov.w	r9, #3
 8005096:	2201      	movs	r2, #1
		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8005098:	803b      	strh	r3, [r7, #0]
		VL53L1_init_histogram_config_structure(
 800509a:	f04f 0b05 	mov.w	fp, #5
 800509e:	2302      	movs	r3, #2
 80050a0:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80050a4:	4601      	mov	r1, r0
 80050a6:	e9cd 3904 	strd	r3, r9, [sp, #16]
 80050aa:	2007      	movs	r0, #7
 80050ac:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80050b0:	e9cd 9a00 	strd	r9, sl, [sp]
 80050b4:	9608      	str	r6, [sp, #32]
 80050b6:	f000 fefc 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 80050ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80050bc:	f8cd 9000 	str.w	r9, [sp]
 80050c0:	1c99      	adds	r1, r3, #2
 80050c2:	2201      	movs	r2, #1
 80050c4:	2302      	movs	r3, #2
 80050c6:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80050ca:	e9cd b107 	strd	fp, r1, [sp, #28]
 80050ce:	2007      	movs	r0, #7
 80050d0:	4621      	mov	r1, r4
 80050d2:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 80050d6:	e9cd a401 	strd	sl, r4, [sp, #4]
 80050da:	f000 ff34 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		ptiming->range_config__vcsel_period_a = 0x09;
 80050de:	2309      	movs	r3, #9
 80050e0:	71ab      	strb	r3, [r5, #6]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80050e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
		ptiming->range_config__vcsel_period_b = 0x0B;
 80050e4:	230b      	movs	r3, #11
 80050e6:	726b      	strb	r3, [r5, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80050e8:	f640 3309 	movw	r3, #2825	; 0xb09
 80050ec:	8113      	strh	r3, [r2, #8]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <VL53L1_preset_mode_histogram_ranging+0xd8>)
 80050f0:	602b      	str	r3, [r5, #0]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80050f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80050f6:	80ab      	strh	r3, [r5, #4]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80050f8:	2321      	movs	r3, #33	; 0x21
 80050fa:	722b      	strb	r3, [r5, #8]
		phistpostprocess->valid_phase_low = 0x08;
 80050fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80050fe:	71ec      	strb	r4, [r5, #7]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8005100:	23f5      	movs	r3, #245	; 0xf5
 8005102:	f888 3007 	strb.w	r3, [r8, #7]
		phistpostprocess->valid_phase_low = 0x08;
 8005106:	f648 0308 	movw	r3, #34824	; 0x8808
 800510a:	8413      	strh	r3, [r2, #32]
		VL53L1_copy_hist_cfg_to_static_cfg(
 800510c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	4642      	mov	r2, r8
 8005112:	462b      	mov	r3, r5
 8005114:	4639      	mov	r1, r7
 8005116:	4630      	mov	r0, r6
 8005118:	f7ff ff6a 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 800511c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800511e:	239b      	movs	r3, #155	; 0x9b
 8005120:	7453      	strb	r3, [r2, #17]
		psystem->system__mode_start =
 8005122:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005124:	2326      	movs	r3, #38	; 0x26
 8005126:	7113      	strb	r3, [r2, #4]
}
 8005128:	4620      	mov	r0, r4
 800512a:	b00d      	add	sp, #52	; 0x34
 800512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005130:	1a002000 	.word	0x1a002000

08005134 <VL53L1_preset_mode_histogram_characterisation>:
{
 8005134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005136:	b087      	sub	sp, #28
 8005138:	e9dd 640d 	ldrd	r6, r4, [sp, #52]	; 0x34
		VL53L1_preset_mode_histogram_ranging(
 800513c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800513e:	9704      	str	r7, [sp, #16]
 8005140:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005142:	9601      	str	r6, [sp, #4]
 8005144:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8005148:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800514a:	9700      	str	r7, [sp, #0]
{
 800514c:	460d      	mov	r5, r1
		VL53L1_preset_mode_histogram_ranging(
 800514e:	f7ff ff83 	bl	8005058 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8005152:	b930      	cbnz	r0, 8005162 <VL53L1_preset_mode_histogram_characterisation+0x2e>
		pstatic->debug__ctrl = 0x01;
 8005154:	2301      	movs	r3, #1
 8005156:	70ab      	strb	r3, [r5, #2]
		psystem->power_management__go1_power_force = 0x01;
 8005158:	7023      	strb	r3, [r4, #0]
		pdynamic->system__sequence_config               =
 800515a:	2383      	movs	r3, #131	; 0x83
 800515c:	7473      	strb	r3, [r6, #17]
		psystem->system__mode_start                     =
 800515e:	232e      	movs	r3, #46	; 0x2e
 8005160:	7123      	strb	r3, [r4, #4]
}
 8005162:	b007      	add	sp, #28
 8005164:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005166 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
{
 8005166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	b08b      	sub	sp, #44	; 0x2c
 800516c:	4688      	mov	r8, r1
		VL53L1_preset_mode_histogram_ranging(
 800516e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8005170:	9404      	str	r4, [sp, #16]
 8005172:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005174:	9403      	str	r4, [sp, #12]
 8005176:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8005178:	9402      	str	r4, [sp, #8]
 800517a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800517c:	9401      	str	r4, [sp, #4]
 800517e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005180:	9400      	str	r4, [sp, #0]
{
 8005182:	4615      	mov	r5, r2
 8005184:	4699      	mov	r9, r3
		VL53L1_preset_mode_histogram_ranging(
 8005186:	f7ff ff67 	bl	8005058 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 800518a:	4604      	mov	r4, r0
 800518c:	bbc0      	cbnz	r0, 8005200 <VL53L1_preset_mode_histogram_ranging_with_mm1+0x9a>
		VL53L1_init_histogram_config_structure(
 800518e:	2704      	movs	r7, #4
 8005190:	2603      	movs	r6, #3
 8005192:	f04f 0b05 	mov.w	fp, #5
 8005196:	f04f 0a0a 	mov.w	sl, #10
 800519a:	2308      	movs	r3, #8
 800519c:	2209      	movs	r2, #9
 800519e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80051a2:	4601      	mov	r1, r0
 80051a4:	2302      	movs	r3, #2
 80051a6:	2201      	movs	r2, #1
 80051a8:	2007      	movs	r0, #7
 80051aa:	e9cd 7b06 	strd	r7, fp, [sp, #24]
 80051ae:	e9cd a604 	strd	sl, r6, [sp, #16]
 80051b2:	e9cd 6700 	strd	r6, r7, [sp]
 80051b6:	9508      	str	r5, [sp, #32]
 80051b8:	f000 fe7b 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 80051bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80051be:	f8cd a010 	str.w	sl, [sp, #16]
 80051c2:	3302      	adds	r3, #2
 80051c4:	e9cd b307 	strd	fp, r3, [sp, #28]
 80051c8:	2109      	movs	r1, #9
 80051ca:	2308      	movs	r3, #8
 80051cc:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80051d0:	2201      	movs	r2, #1
 80051d2:	2302      	movs	r3, #2
 80051d4:	4621      	mov	r1, r4
 80051d6:	2007      	movs	r0, #7
 80051d8:	e9cd 6705 	strd	r6, r7, [sp, #20]
 80051dc:	e9cd 6700 	strd	r6, r7, [sp]
 80051e0:	f000 feb1 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 80051e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	464a      	mov	r2, r9
 80051ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051ec:	4641      	mov	r1, r8
 80051ee:	4628      	mov	r0, r5
 80051f0:	f7ff fefe 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 80051f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051f6:	23bb      	movs	r3, #187	; 0xbb
 80051f8:	7453      	strb	r3, [r2, #17]
		psystem->system__mode_start =
 80051fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80051fc:	2326      	movs	r3, #38	; 0x26
 80051fe:	7113      	strb	r3, [r2, #4]
}
 8005200:	4620      	mov	r0, r4
 8005202:	b00b      	add	sp, #44	; 0x2c
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005208 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
{
 8005208:	b530      	push	{r4, r5, lr}
 800520a:	b087      	sub	sp, #28
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 800520c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800520e:	9504      	str	r5, [sp, #16]
 8005210:	9d0d      	ldr	r5, [sp, #52]	; 0x34
{
 8005212:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 8005214:	9503      	str	r5, [sp, #12]
 8005216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005218:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800521c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800521e:	9500      	str	r5, [sp, #0]
 8005220:	f7ff ffa1 	bl	8005166 <VL53L1_preset_mode_histogram_ranging_with_mm1>
	if (status == VL53L1_ERROR_NONE) {
 8005224:	b908      	cbnz	r0, 800522a <VL53L1_preset_mode_histogram_ranging_with_mm2+0x22>
		pdynamic->system__sequence_config =
 8005226:	23db      	movs	r3, #219	; 0xdb
 8005228:	7463      	strb	r3, [r4, #17]
}
 800522a:	b007      	add	sp, #28
 800522c:	bd30      	pop	{r4, r5, pc}

0800522e <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
{
 800522e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005232:	b08b      	sub	sp, #44	; 0x2c
 8005234:	468b      	mov	fp, r1
		VL53L1_preset_mode_histogram_ranging(
 8005236:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8005238:	9404      	str	r4, [sp, #16]
 800523a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800523c:	9403      	str	r4, [sp, #12]
 800523e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8005240:	9402      	str	r4, [sp, #8]
 8005242:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8005244:	9401      	str	r4, [sp, #4]
 8005246:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005248:	9400      	str	r4, [sp, #0]
{
 800524a:	4616      	mov	r6, r2
 800524c:	461d      	mov	r5, r3
		VL53L1_preset_mode_histogram_ranging(
 800524e:	f7ff ff03 	bl	8005058 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8005252:	4604      	mov	r4, r0
 8005254:	bbb8      	cbnz	r0, 80052c6 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0x98>
		VL53L1_init_histogram_config_structure(
 8005256:	f04f 0a0c 	mov.w	sl, #12
 800525a:	230d      	movs	r3, #13
 800525c:	f04f 090b 	mov.w	r9, #11
 8005260:	2708      	movs	r7, #8
 8005262:	f04f 0809 	mov.w	r8, #9
 8005266:	e9cd a306 	strd	sl, r3, [sp, #24]
 800526a:	230a      	movs	r3, #10
 800526c:	e9cd 3904 	strd	r3, r9, [sp, #16]
 8005270:	4642      	mov	r2, r8
 8005272:	4639      	mov	r1, r7
 8005274:	2007      	movs	r0, #7
 8005276:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800527a:	e9cd 9a00 	strd	r9, sl, [sp]
 800527e:	9608      	str	r6, [sp, #32]
 8005280:	f000 fe17 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8005284:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005286:	f8cd 9014 	str.w	r9, [sp, #20]
 800528a:	1c9a      	adds	r2, r3, #2
 800528c:	230d      	movs	r3, #13
 800528e:	e9cd a306 	strd	sl, r3, [sp, #24]
 8005292:	230a      	movs	r3, #10
 8005294:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8005298:	9208      	str	r2, [sp, #32]
 800529a:	4639      	mov	r1, r7
 800529c:	4642      	mov	r2, r8
 800529e:	2007      	movs	r0, #7
 80052a0:	e9cd a701 	strd	sl, r7, [sp, #4]
 80052a4:	f8cd 9000 	str.w	r9, [sp]
 80052a8:	f000 fe4d 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 80052ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	462a      	mov	r2, r5
 80052b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80052b4:	4659      	mov	r1, fp
 80052b6:	4630      	mov	r0, r6
 80052b8:	f7ff fe9a 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		pgeneral->dss_config__roi_mode_control =
 80052bc:	2302      	movs	r3, #2
		pdynamic->system__sequence_config =
 80052be:	9a15      	ldr	r2, [sp, #84]	; 0x54
		pgeneral->dss_config__roi_mode_control =
 80052c0:	72ab      	strb	r3, [r5, #10]
		pdynamic->system__sequence_config =
 80052c2:	23bb      	movs	r3, #187	; 0xbb
 80052c4:	7453      	strb	r3, [r2, #17]
}
 80052c6:	4620      	mov	r0, r4
 80052c8:	b00b      	add	sp, #44	; 0x2c
 80052ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080052ce <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
{
 80052ce:	b530      	push	{r4, r5, lr}
 80052d0:	b087      	sub	sp, #28
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80052d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80052d4:	9504      	str	r5, [sp, #16]
 80052d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
{
 80052d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80052da:	9503      	str	r5, [sp, #12]
 80052dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052de:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80052e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80052e4:	9500      	str	r5, [sp, #0]
 80052e6:	f7ff ffa2 	bl	800522e <VL53L1_preset_mode_histogram_ranging_mm1_cal>
	if (status == VL53L1_ERROR_NONE) {
 80052ea:	b908      	cbnz	r0, 80052f0 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x22>
		pdynamic->system__sequence_config =
 80052ec:	23db      	movs	r3, #219	; 0xdb
 80052ee:	7463      	strb	r3, [r4, #17]
}
 80052f0:	b007      	add	sp, #28
 80052f2:	bd30      	pop	{r4, r5, pc}

080052f4 <VL53L1_preset_mode_histogram_ranging_short_timing>:
{
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	b08d      	sub	sp, #52	; 0x34
 80052fa:	4688      	mov	r8, r1
		VL53L1_preset_mode_histogram_ranging(
 80052fc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80052fe:	9404      	str	r4, [sp, #16]
 8005300:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8005302:	9403      	str	r4, [sp, #12]
 8005304:	9c18      	ldr	r4, [sp, #96]	; 0x60
{
 8005306:	9f16      	ldr	r7, [sp, #88]	; 0x58
		VL53L1_preset_mode_histogram_ranging(
 8005308:	9402      	str	r4, [sp, #8]
 800530a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
{
 800530c:	920b      	str	r2, [sp, #44]	; 0x2c
		VL53L1_preset_mode_histogram_ranging(
 800530e:	e9cd 7400 	strd	r7, r4, [sp]
{
 8005312:	461d      	mov	r5, r3
		VL53L1_preset_mode_histogram_ranging(
 8005314:	f7ff fea0 	bl	8005058 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8005318:	4604      	mov	r4, r0
 800531a:	2800      	cmp	r0, #0
 800531c:	d146      	bne.n	80053ac <VL53L1_preset_mode_histogram_ranging_short_timing+0xb8>
		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800531e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005322:	f8a8 3000 	strh.w	r3, [r8]
		VL53L1_init_histogram_config_structure(
 8005326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005328:	9308      	str	r3, [sp, #32]
 800532a:	2604      	movs	r6, #4
 800532c:	f04f 0b03 	mov.w	fp, #3
 8005330:	f04f 0a01 	mov.w	sl, #1
 8005334:	f04f 0907 	mov.w	r9, #7
 8005338:	2302      	movs	r3, #2
 800533a:	4601      	mov	r1, r0
 800533c:	e9cd a304 	strd	sl, r3, [sp, #16]
 8005340:	9003      	str	r0, [sp, #12]
 8005342:	4652      	mov	r2, sl
 8005344:	4648      	mov	r0, r9
 8005346:	e9cd b606 	strd	fp, r6, [sp, #24]
 800534a:	e9cd 6901 	strd	r6, r9, [sp, #4]
 800534e:	f8cd b000 	str.w	fp, [sp]
 8005352:	f000 fdae 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8005356:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005358:	f8cd b018 	str.w	fp, [sp, #24]
 800535c:	1c9a      	adds	r2, r3, #2
 800535e:	2302      	movs	r3, #2
 8005360:	e9cd 6207 	strd	r6, r2, [sp, #28]
 8005364:	e9cd a304 	strd	sl, r3, [sp, #16]
 8005368:	4652      	mov	r2, sl
 800536a:	4621      	mov	r1, r4
 800536c:	4648      	mov	r0, r9
 800536e:	e9cd 9402 	strd	r9, r4, [sp, #8]
 8005372:	e9cd b600 	strd	fp, r6, [sp]
 8005376:	f000 fde6 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 800537a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	462a      	mov	r2, r5
 8005380:	463b      	mov	r3, r7
 8005382:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005384:	4641      	mov	r1, r8
 8005386:	f7ff fe33 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <VL53L1_preset_mode_histogram_ranging_short_timing+0xc0>)
 800538c:	f04f 2242 	mov.w	r2, #1107313152	; 0x42004200
 8005390:	e9c7 2300 	strd	r2, r3, [r7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 8005394:	f240 3366 	movw	r3, #870	; 0x366
 8005398:	813b      	strh	r3, [r7, #8]
		pdynamic->system__sequence_config =
 800539a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
		pgeneral->cal_config__vcsel_start = 0x04;
 800539c:	70ee      	strb	r6, [r5, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800539e:	23a4      	movs	r3, #164	; 0xa4
 80053a0:	71eb      	strb	r3, [r5, #7]
		pdynamic->system__sequence_config =
 80053a2:	239b      	movs	r3, #155	; 0x9b
 80053a4:	7453      	strb	r3, [r2, #17]
		psystem->system__mode_start =
 80053a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80053a8:	2326      	movs	r3, #38	; 0x26
 80053aa:	7113      	strb	r3, [r2, #4]
}
 80053ac:	4620      	mov	r0, r4
 80053ae:	b00d      	add	sp, #52	; 0x34
 80053b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b4:	00045200 	.word	0x00045200

080053b8 <VL53L1_preset_mode_histogram_long_range>:
{
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	b08d      	sub	sp, #52	; 0x34
 80053be:	e9dd 7516 	ldrd	r7, r5, [sp, #88]	; 0x58
		VL53L1_preset_mode_histogram_ranging(
 80053c2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80053c4:	9404      	str	r4, [sp, #16]
 80053c6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80053c8:	9403      	str	r4, [sp, #12]
 80053ca:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80053cc:	9700      	str	r7, [sp, #0]
 80053ce:	e9cd 5401 	strd	r5, r4, [sp, #4]
{
 80053d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80053d4:	468b      	mov	fp, r1
 80053d6:	4690      	mov	r8, r2
 80053d8:	461e      	mov	r6, r3
		VL53L1_preset_mode_histogram_ranging(
 80053da:	f7ff fe3d 	bl	8005058 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 80053de:	4604      	mov	r4, r0
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d14c      	bne.n	800547e <VL53L1_preset_mode_histogram_long_range+0xc6>
		VL53L1_init_histogram_config_structure(
 80053e4:	f04f 0a04 	mov.w	sl, #4
 80053e8:	2305      	movs	r3, #5
 80053ea:	f04f 0903 	mov.w	r9, #3
 80053ee:	2201      	movs	r2, #1
 80053f0:	e9cd a306 	strd	sl, r3, [sp, #24]
 80053f4:	2302      	movs	r3, #2
 80053f6:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80053fa:	4601      	mov	r1, r0
 80053fc:	e9cd 3904 	strd	r3, r9, [sp, #16]
 8005400:	2007      	movs	r0, #7
 8005402:	e9cd 9a00 	strd	r9, sl, [sp]
 8005406:	f8cd 8020 	str.w	r8, [sp, #32]
 800540a:	f000 fd52 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 800540e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005410:	f8cd 9014 	str.w	r9, [sp, #20]
 8005414:	1c99      	adds	r1, r3, #2
 8005416:	2305      	movs	r3, #5
 8005418:	2201      	movs	r2, #1
 800541a:	e9cd a306 	strd	sl, r3, [sp, #24]
 800541e:	2302      	movs	r3, #2
 8005420:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8005424:	9108      	str	r1, [sp, #32]
 8005426:	2007      	movs	r0, #7
 8005428:	4621      	mov	r1, r4
 800542a:	e9cd a401 	strd	sl, r4, [sp, #4]
 800542e:	f8cd 9000 	str.w	r9, [sp]
 8005432:	f000 fd88 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8005436:	463b      	mov	r3, r7
 8005438:	4632      	mov	r2, r6
 800543a:	9500      	str	r5, [sp, #0]
 800543c:	4659      	mov	r1, fp
 800543e:	4640      	mov	r0, r8
 8005440:	f7ff fdd6 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8005444:	4a10      	ldr	r2, [pc, #64]	; (8005488 <VL53L1_preset_mode_histogram_long_range+0xd0>)
 8005446:	4b11      	ldr	r3, [pc, #68]	; (800548c <VL53L1_preset_mode_histogram_long_range+0xd4>)
 8005448:	e9c7 2300 	strd	r2, r3, [r7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800544c:	f640 3322 	movw	r3, #2850	; 0xb22
 8005450:	813b      	strh	r3, [r7, #8]
		pgeneral->cal_config__vcsel_start = 0x09;
 8005452:	2309      	movs	r3, #9
 8005454:	70f3      	strb	r3, [r6, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8005456:	23f5      	movs	r3, #245	; 0xf5
 8005458:	71f3      	strb	r3, [r6, #7]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800545a:	f640 3309 	movw	r3, #2825	; 0xb09
 800545e:	812b      	strh	r3, [r5, #8]
		pdynamic->sd_config__initial_phase_sd0            =
 8005460:	9b19      	ldr	r3, [sp, #100]	; 0x64
		phistpostprocess->valid_phase_low = 0x08;
 8005462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		pdynamic->sd_config__initial_phase_sd0            =
 8005464:	7b1b      	ldrb	r3, [r3, #12]
 8005466:	72ab      	strb	r3, [r5, #10]
		pdynamic->sd_config__initial_phase_sd1            =
 8005468:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800546a:	7bdb      	ldrb	r3, [r3, #15]
 800546c:	72eb      	strb	r3, [r5, #11]
		phistpostprocess->valid_phase_low = 0x08;
 800546e:	f648 0308 	movw	r3, #34824	; 0x8808
 8005472:	8413      	strh	r3, [r2, #32]
		pdynamic->system__sequence_config =
 8005474:	239b      	movs	r3, #155	; 0x9b
		psystem->system__mode_start =
 8005476:	9a18      	ldr	r2, [sp, #96]	; 0x60
		pdynamic->system__sequence_config =
 8005478:	746b      	strb	r3, [r5, #17]
		psystem->system__mode_start =
 800547a:	2326      	movs	r3, #38	; 0x26
 800547c:	7113      	strb	r3, [r2, #4]
}
 800547e:	4620      	mov	r0, r4
 8005480:	b00d      	add	sp, #52	; 0x34
 8005482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005486:	bf00      	nop
 8005488:	1b002100 	.word	0x1b002100
 800548c:	00092900 	.word	0x00092900

08005490 <VL53L1_preset_mode_histogram_long_range_mm1>:
{
 8005490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005494:	b08b      	sub	sp, #44	; 0x2c
 8005496:	4688      	mov	r8, r1
		VL53L1_preset_mode_histogram_long_range(
 8005498:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800549a:	9404      	str	r4, [sp, #16]
 800549c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800549e:	9403      	str	r4, [sp, #12]
 80054a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80054a2:	9402      	str	r4, [sp, #8]
 80054a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80054a6:	9401      	str	r4, [sp, #4]
 80054a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80054aa:	9400      	str	r4, [sp, #0]
{
 80054ac:	4615      	mov	r5, r2
 80054ae:	4699      	mov	r9, r3
		VL53L1_preset_mode_histogram_long_range(
 80054b0:	f7ff ff82 	bl	80053b8 <VL53L1_preset_mode_histogram_long_range>
	if (status == VL53L1_ERROR_NONE) {
 80054b4:	4604      	mov	r4, r0
 80054b6:	bba8      	cbnz	r0, 8005524 <VL53L1_preset_mode_histogram_long_range_mm1+0x94>
		VL53L1_init_histogram_config_structure(
 80054b8:	2704      	movs	r7, #4
 80054ba:	2603      	movs	r6, #3
 80054bc:	f04f 0b05 	mov.w	fp, #5
 80054c0:	f04f 0a0a 	mov.w	sl, #10
 80054c4:	2308      	movs	r3, #8
 80054c6:	2209      	movs	r2, #9
 80054c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80054cc:	4601      	mov	r1, r0
 80054ce:	2302      	movs	r3, #2
 80054d0:	2201      	movs	r2, #1
 80054d2:	2007      	movs	r0, #7
 80054d4:	e9cd 7b06 	strd	r7, fp, [sp, #24]
 80054d8:	e9cd a604 	strd	sl, r6, [sp, #16]
 80054dc:	e9cd 6700 	strd	r6, r7, [sp]
 80054e0:	9508      	str	r5, [sp, #32]
 80054e2:	f000 fce6 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 80054e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80054e8:	f8cd a010 	str.w	sl, [sp, #16]
 80054ec:	3302      	adds	r3, #2
 80054ee:	e9cd b307 	strd	fp, r3, [sp, #28]
 80054f2:	2109      	movs	r1, #9
 80054f4:	2308      	movs	r3, #8
 80054f6:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80054fa:	2201      	movs	r2, #1
 80054fc:	2302      	movs	r3, #2
 80054fe:	4621      	mov	r1, r4
 8005500:	2007      	movs	r0, #7
 8005502:	e9cd 6705 	strd	r6, r7, [sp, #20]
 8005506:	e9cd 6700 	strd	r6, r7, [sp]
 800550a:	f000 fd1c 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 800550e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	464a      	mov	r2, r9
 8005514:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005516:	4641      	mov	r1, r8
 8005518:	4628      	mov	r0, r5
 800551a:	f7ff fd69 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 800551e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005520:	23bb      	movs	r3, #187	; 0xbb
 8005522:	7453      	strb	r3, [r2, #17]
}
 8005524:	4620      	mov	r0, r4
 8005526:	b00b      	add	sp, #44	; 0x2c
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800552c <VL53L1_preset_mode_histogram_long_range_mm2>:
{
 800552c:	b530      	push	{r4, r5, lr}
 800552e:	b087      	sub	sp, #28
		VL53L1_preset_mode_histogram_long_range_mm1(
 8005530:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005532:	9504      	str	r5, [sp, #16]
 8005534:	9d0d      	ldr	r5, [sp, #52]	; 0x34
{
 8005536:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		VL53L1_preset_mode_histogram_long_range_mm1(
 8005538:	9503      	str	r5, [sp, #12]
 800553a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800553c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005540:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005542:	9500      	str	r5, [sp, #0]
 8005544:	f7ff ffa4 	bl	8005490 <VL53L1_preset_mode_histogram_long_range_mm1>
	if (status == VL53L1_ERROR_NONE) {
 8005548:	b908      	cbnz	r0, 800554e <VL53L1_preset_mode_histogram_long_range_mm2+0x22>
		pdynamic->system__sequence_config =
 800554a:	23db      	movs	r3, #219	; 0xdb
 800554c:	7463      	strb	r3, [r4, #17]
}
 800554e:	b007      	add	sp, #28
 8005550:	bd30      	pop	{r4, r5, pc}
	...

08005554 <VL53L1_preset_mode_histogram_medium_range>:
{
 8005554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005558:	b08d      	sub	sp, #52	; 0x34
 800555a:	e9dd 8616 	ldrd	r8, r6, [sp, #88]	; 0x58
		VL53L1_preset_mode_histogram_ranging(
 800555e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8005560:	9404      	str	r4, [sp, #16]
 8005562:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8005564:	9403      	str	r4, [sp, #12]
 8005566:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8005568:	f8cd 8000 	str.w	r8, [sp]
 800556c:	e9cd 6401 	strd	r6, r4, [sp, #4]
{
 8005570:	900b      	str	r0, [sp, #44]	; 0x2c
 8005572:	468a      	mov	sl, r1
 8005574:	4691      	mov	r9, r2
 8005576:	461f      	mov	r7, r3
		VL53L1_preset_mode_histogram_ranging(
 8005578:	f7ff fd6e 	bl	8005058 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 800557c:	4604      	mov	r4, r0
 800557e:	2800      	cmp	r0, #0
 8005580:	d148      	bne.n	8005614 <VL53L1_preset_mode_histogram_medium_range+0xc0>
		VL53L1_init_histogram_config_structure(
 8005582:	2502      	movs	r5, #2
 8005584:	2301      	movs	r3, #1
 8005586:	f04f 0b03 	mov.w	fp, #3
 800558a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800558e:	461a      	mov	r2, r3
 8005590:	4601      	mov	r1, r0
 8005592:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8005596:	2007      	movs	r0, #7
 8005598:	e9cd 5b06 	strd	r5, fp, [sp, #24]
 800559c:	e9cd 5500 	strd	r5, r5, [sp]
 80055a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80055a4:	f000 fc85 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 80055a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80055aa:	9506      	str	r5, [sp, #24]
 80055ac:	195a      	adds	r2, r3, r5
 80055ae:	2301      	movs	r3, #1
 80055b0:	e9cd b207 	strd	fp, r2, [sp, #28]
 80055b4:	e9cd 5304 	strd	r5, r3, [sp, #16]
 80055b8:	461a      	mov	r2, r3
 80055ba:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80055be:	4621      	mov	r1, r4
 80055c0:	2007      	movs	r0, #7
 80055c2:	e9cd 5500 	strd	r5, r5, [sp]
 80055c6:	f000 fcbe 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 80055ca:	4643      	mov	r3, r8
 80055cc:	463a      	mov	r2, r7
 80055ce:	9600      	str	r6, [sp, #0]
 80055d0:	4651      	mov	r1, sl
 80055d2:	4648      	mov	r0, r9
 80055d4:	f7ff fd0c 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80055d8:	4a10      	ldr	r2, [pc, #64]	; (800561c <VL53L1_preset_mode_histogram_medium_range+0xc8>)
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <VL53L1_preset_mode_histogram_medium_range+0xcc>)
 80055dc:	e9c8 2300 	strd	r2, r3, [r8]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80055e0:	f240 7333 	movw	r3, #1843	; 0x733
 80055e4:	f8a8 3008 	strh.w	r3, [r8, #8]
		pgeneral->cal_config__vcsel_start = 0x05;
 80055e8:	2305      	movs	r3, #5
 80055ea:	70fb      	strb	r3, [r7, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80055ec:	23f5      	movs	r3, #245	; 0xf5
 80055ee:	71fb      	strb	r3, [r7, #7]
		pdynamic->sd_config__woi_sd0 = 0x05;
 80055f0:	f240 7305 	movw	r3, #1797	; 0x705
 80055f4:	8133      	strh	r3, [r6, #8]
		pdynamic->sd_config__initial_phase_sd0            =
 80055f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
		phistpostprocess->valid_phase_low = 0x08;
 80055f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		pdynamic->sd_config__initial_phase_sd0            =
 80055fa:	7b5b      	ldrb	r3, [r3, #13]
 80055fc:	72b3      	strb	r3, [r6, #10]
		pdynamic->sd_config__initial_phase_sd1            =
 80055fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005600:	7c1b      	ldrb	r3, [r3, #16]
 8005602:	72f3      	strb	r3, [r6, #11]
		phistpostprocess->valid_phase_low = 0x08;
 8005604:	f644 0308 	movw	r3, #18440	; 0x4808
 8005608:	8413      	strh	r3, [r2, #32]
		pdynamic->system__sequence_config =
 800560a:	239b      	movs	r3, #155	; 0x9b
		psystem->system__mode_start =
 800560c:	9a18      	ldr	r2, [sp, #96]	; 0x60
		pdynamic->system__sequence_config =
 800560e:	7473      	strb	r3, [r6, #17]
		psystem->system__mode_start =
 8005610:	2326      	movs	r3, #38	; 0x26
 8005612:	7113      	strb	r3, [r2, #4]
}
 8005614:	4620      	mov	r0, r4
 8005616:	b00d      	add	sp, #52	; 0x34
 8005618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561c:	28003600 	.word	0x28003600
 8005620:	00054400 	.word	0x00054400

08005624 <VL53L1_preset_mode_histogram_medium_range_mm1>:
{
 8005624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005628:	ed2d 8b02 	vpush	{d8}
 800562c:	b08b      	sub	sp, #44	; 0x2c
 800562e:	ee08 1a10 	vmov	s16, r1
		VL53L1_preset_mode_histogram_medium_range(
 8005632:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8005634:	9404      	str	r4, [sp, #16]
 8005636:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8005638:	9403      	str	r4, [sp, #12]
 800563a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800563c:	9402      	str	r4, [sp, #8]
 800563e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005640:	9401      	str	r4, [sp, #4]
 8005642:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8005644:	9400      	str	r4, [sp, #0]
{
 8005646:	4616      	mov	r6, r2
 8005648:	4698      	mov	r8, r3
		VL53L1_preset_mode_histogram_medium_range(
 800564a:	f7ff ff83 	bl	8005554 <VL53L1_preset_mode_histogram_medium_range>
	if (status == VL53L1_ERROR_NONE) {
 800564e:	4604      	mov	r4, r0
 8005650:	bb98      	cbnz	r0, 80056ba <VL53L1_preset_mode_histogram_medium_range_mm1+0x96>
		VL53L1_init_histogram_config_structure(
 8005652:	2502      	movs	r5, #2
 8005654:	2301      	movs	r3, #1
 8005656:	f04f 0b03 	mov.w	fp, #3
 800565a:	f04f 0a0a 	mov.w	sl, #10
 800565e:	2708      	movs	r7, #8
 8005660:	f04f 0909 	mov.w	r9, #9
 8005664:	461a      	mov	r2, r3
 8005666:	4601      	mov	r1, r0
 8005668:	e9cd a304 	strd	sl, r3, [sp, #16]
 800566c:	2007      	movs	r0, #7
 800566e:	e9cd 5b06 	strd	r5, fp, [sp, #24]
 8005672:	e9cd 7902 	strd	r7, r9, [sp, #8]
 8005676:	e9cd 5500 	strd	r5, r5, [sp]
 800567a:	9608      	str	r6, [sp, #32]
 800567c:	f000 fc19 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8005680:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005682:	9506      	str	r5, [sp, #24]
 8005684:	195a      	adds	r2, r3, r5
 8005686:	2301      	movs	r3, #1
 8005688:	e9cd b207 	strd	fp, r2, [sp, #28]
 800568c:	e9cd a304 	strd	sl, r3, [sp, #16]
 8005690:	461a      	mov	r2, r3
 8005692:	4621      	mov	r1, r4
 8005694:	2007      	movs	r0, #7
 8005696:	e9cd 7902 	strd	r7, r9, [sp, #8]
 800569a:	e9cd 5500 	strd	r5, r5, [sp]
 800569e:	f000 fc52 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 80056a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	4642      	mov	r2, r8
 80056a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056aa:	ee18 1a10 	vmov	r1, s16
 80056ae:	4630      	mov	r0, r6
 80056b0:	f7ff fc9e 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 80056b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80056b6:	23bb      	movs	r3, #187	; 0xbb
 80056b8:	7453      	strb	r3, [r2, #17]
}
 80056ba:	4620      	mov	r0, r4
 80056bc:	b00b      	add	sp, #44	; 0x2c
 80056be:	ecbd 8b02 	vpop	{d8}
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080056c6 <VL53L1_preset_mode_histogram_medium_range_mm2>:
{
 80056c6:	b530      	push	{r4, r5, lr}
 80056c8:	b087      	sub	sp, #28
		VL53L1_preset_mode_histogram_medium_range_mm1(
 80056ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80056cc:	9504      	str	r5, [sp, #16]
 80056ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
{
 80056d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		VL53L1_preset_mode_histogram_medium_range_mm1(
 80056d2:	9503      	str	r5, [sp, #12]
 80056d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056d6:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80056da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056dc:	9500      	str	r5, [sp, #0]
 80056de:	f7ff ffa1 	bl	8005624 <VL53L1_preset_mode_histogram_medium_range_mm1>
	if (status == VL53L1_ERROR_NONE) {
 80056e2:	b908      	cbnz	r0, 80056e8 <VL53L1_preset_mode_histogram_medium_range_mm2+0x22>
		pdynamic->system__sequence_config =
 80056e4:	23db      	movs	r3, #219	; 0xdb
 80056e6:	7463      	strb	r3, [r4, #17]
}
 80056e8:	b007      	add	sp, #28
 80056ea:	bd30      	pop	{r4, r5, pc}

080056ec <VL53L1_preset_mode_histogram_short_range>:
{
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	b08b      	sub	sp, #44	; 0x2c
 80056f2:	e9dd 7514 	ldrd	r7, r5, [sp, #80]	; 0x50
		VL53L1_preset_mode_histogram_ranging(
 80056f6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80056f8:	9404      	str	r4, [sp, #16]
 80056fa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80056fc:	9403      	str	r4, [sp, #12]
 80056fe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8005700:	9700      	str	r7, [sp, #0]
 8005702:	e9cd 5401 	strd	r5, r4, [sp, #4]
{
 8005706:	4682      	mov	sl, r0
 8005708:	468b      	mov	fp, r1
 800570a:	4690      	mov	r8, r2
 800570c:	461e      	mov	r6, r3
		VL53L1_preset_mode_histogram_ranging(
 800570e:	f7ff fca3 	bl	8005058 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8005712:	4604      	mov	r4, r0
 8005714:	2800      	cmp	r0, #0
 8005716:	d148      	bne.n	80057aa <VL53L1_preset_mode_histogram_short_range+0xbe>
		VL53L1_init_histogram_config_structure(
 8005718:	2301      	movs	r3, #1
 800571a:	f04f 0902 	mov.w	r9, #2
 800571e:	2107      	movs	r1, #7
 8005720:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005724:	4602      	mov	r2, r0
 8005726:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800572a:	4608      	mov	r0, r1
 800572c:	e9cd 3300 	strd	r3, r3, [sp]
 8005730:	e9cd 9906 	strd	r9, r9, [sp, #24]
 8005734:	f8cd 8020 	str.w	r8, [sp, #32]
 8005738:	f000 fbbb 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 800573c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800573e:	f8cd 9018 	str.w	r9, [sp, #24]
 8005742:	eb03 0209 	add.w	r2, r3, r9
 8005746:	2107      	movs	r1, #7
 8005748:	2301      	movs	r3, #1
 800574a:	4608      	mov	r0, r1
 800574c:	e9cd 9207 	strd	r9, r2, [sp, #28]
 8005750:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005754:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8005758:	e9cd 3300 	strd	r3, r3, [sp]
 800575c:	4622      	mov	r2, r4
 800575e:	f000 fbf2 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 8005762:	463b      	mov	r3, r7
 8005764:	4632      	mov	r2, r6
 8005766:	9500      	str	r5, [sp, #0]
 8005768:	4659      	mov	r1, fp
 800576a:	4640      	mov	r0, r8
 800576c:	f7ff fc40 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8005770:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <VL53L1_preset_mode_histogram_short_range+0xc8>)
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <VL53L1_preset_mode_histogram_short_range+0xcc>)
 8005774:	e9c7 2300 	strd	r2, r3, [r7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8005778:	f240 5344 	movw	r3, #1348	; 0x544
 800577c:	813b      	strh	r3, [r7, #8]
		pgeneral->cal_config__vcsel_start = 0x03;
 800577e:	2303      	movs	r3, #3
 8005780:	70f3      	strb	r3, [r6, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8005782:	23f5      	movs	r3, #245	; 0xf5
 8005784:	71f3      	strb	r3, [r6, #7]
		pdynamic->sd_config__woi_sd0 = 0x03;
 8005786:	f240 5303 	movw	r3, #1283	; 0x503
 800578a:	812b      	strh	r3, [r5, #8]
		pdynamic->sd_config__initial_phase_sd0            =
 800578c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		psystem->system__mode_start =
 800578e:	9a16      	ldr	r2, [sp, #88]	; 0x58
		pdynamic->sd_config__initial_phase_sd0            =
 8005790:	7b9b      	ldrb	r3, [r3, #14]
 8005792:	72ab      	strb	r3, [r5, #10]
		pdynamic->sd_config__initial_phase_sd1            =
 8005794:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005796:	7c5b      	ldrb	r3, [r3, #17]
 8005798:	72eb      	strb	r3, [r5, #11]
		phistpostprocess->valid_phase_low = 0x08;
 800579a:	f642 0308 	movw	r3, #10248	; 0x2808
 800579e:	f8aa 3020 	strh.w	r3, [sl, #32]
		pdynamic->system__sequence_config =
 80057a2:	23bb      	movs	r3, #187	; 0xbb
 80057a4:	746b      	strb	r3, [r5, #17]
		psystem->system__mode_start =
 80057a6:	2326      	movs	r3, #38	; 0x26
 80057a8:	7113      	strb	r3, [r2, #4]
}
 80057aa:	4620      	mov	r0, r4
 80057ac:	b00b      	add	sp, #44	; 0x2c
 80057ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b2:	bf00      	nop
 80057b4:	37005200 	.word	0x37005200
 80057b8:	00036600 	.word	0x00036600

080057bc <VL53L1_preset_mode_special_histogram_short_range>:
{
 80057bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	b08b      	sub	sp, #44	; 0x2c
 80057c2:	e9dd 8614 	ldrd	r8, r6, [sp, #80]	; 0x50
		VL53L1_preset_mode_histogram_short_range(
 80057c6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80057c8:	9404      	str	r4, [sp, #16]
 80057ca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80057cc:	9403      	str	r4, [sp, #12]
 80057ce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80057d0:	f8cd 8000 	str.w	r8, [sp]
 80057d4:	e9cd 6401 	strd	r6, r4, [sp, #4]
{
 80057d8:	4682      	mov	sl, r0
 80057da:	468b      	mov	fp, r1
 80057dc:	4691      	mov	r9, r2
 80057de:	461f      	mov	r7, r3
		VL53L1_preset_mode_histogram_short_range(
 80057e0:	f7ff ff84 	bl	80056ec <VL53L1_preset_mode_histogram_short_range>
	if (status == VL53L1_ERROR_NONE) {
 80057e4:	4604      	mov	r4, r0
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d13e      	bne.n	8005868 <VL53L1_preset_mode_special_histogram_short_range+0xac>
		VL53L1_init_histogram_config_structure(
 80057ea:	2501      	movs	r5, #1
 80057ec:	2107      	movs	r1, #7
 80057ee:	4603      	mov	r3, r0
 80057f0:	4602      	mov	r2, r0
 80057f2:	e9cd 0504 	strd	r0, r5, [sp, #16]
 80057f6:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80057fa:	e9cd 5506 	strd	r5, r5, [sp, #24]
 80057fe:	4608      	mov	r0, r1
 8005800:	e9cd 5500 	strd	r5, r5, [sp]
 8005804:	f8cd 9020 	str.w	r9, [sp, #32]
 8005808:	f000 fb53 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 800580c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800580e:	9500      	str	r5, [sp, #0]
 8005810:	2107      	movs	r1, #7
 8005812:	3302      	adds	r3, #2
 8005814:	4608      	mov	r0, r1
 8005816:	e9cd 5307 	strd	r5, r3, [sp, #28]
 800581a:	4622      	mov	r2, r4
 800581c:	4623      	mov	r3, r4
 800581e:	e9cd 5505 	strd	r5, r5, [sp, #20]
 8005822:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005826:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800582a:	f000 fb8c 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 800582e:	4643      	mov	r3, r8
 8005830:	9600      	str	r6, [sp, #0]
 8005832:	463a      	mov	r2, r7
 8005834:	4659      	mov	r1, fp
 8005836:	4648      	mov	r0, r9
 8005838:	f7ff fbda 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__vcsel_period_a = 0x02;
 800583c:	2302      	movs	r3, #2
 800583e:	f888 3006 	strb.w	r3, [r8, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 8005842:	2303      	movs	r3, #3
 8005844:	f888 3009 	strb.w	r3, [r8, #9]
		pgeneral->phasecal_config__target = 0x31;
 8005848:	2331      	movs	r3, #49	; 0x31
 800584a:	723b      	strb	r3, [r7, #8]
		pdynamic->sd_config__woi_sd0 = 0x02;
 800584c:	f240 3302 	movw	r3, #770	; 0x302
		pgeneral->cal_config__vcsel_start = 0x00;
 8005850:	70fc      	strb	r4, [r7, #3]
		pdynamic->sd_config__woi_sd0 = 0x02;
 8005852:	8133      	strh	r3, [r6, #8]
		pdynamic->sd_config__initial_phase_sd0            =
 8005854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005856:	7b9b      	ldrb	r3, [r3, #14]
 8005858:	72b3      	strb	r3, [r6, #10]
		pdynamic->sd_config__initial_phase_sd1            =
 800585a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800585c:	7c5b      	ldrb	r3, [r3, #17]
 800585e:	72f3      	strb	r3, [r6, #11]
		phistpostprocess->valid_phase_low = 0x10;
 8005860:	f641 0310 	movw	r3, #6160	; 0x1810
 8005864:	f8aa 3020 	strh.w	r3, [sl, #32]
}
 8005868:	4620      	mov	r0, r4
 800586a:	b00b      	add	sp, #44	; 0x2c
 800586c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005870 <VL53L1_preset_mode_histogram_short_range_mm1>:
{
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	b08b      	sub	sp, #44	; 0x2c
 8005876:	460f      	mov	r7, r1
		VL53L1_preset_mode_histogram_short_range(
 8005878:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800587a:	9404      	str	r4, [sp, #16]
 800587c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
{
 800587e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
		VL53L1_preset_mode_histogram_short_range(
 8005882:	9403      	str	r4, [sp, #12]
 8005884:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8005886:	e9cd 9401 	strd	r9, r4, [sp, #4]
 800588a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800588c:	9400      	str	r4, [sp, #0]
{
 800588e:	4615      	mov	r5, r2
 8005890:	4698      	mov	r8, r3
		VL53L1_preset_mode_histogram_short_range(
 8005892:	f7ff ff2b 	bl	80056ec <VL53L1_preset_mode_histogram_short_range>
	if (status == VL53L1_ERROR_NONE) {
 8005896:	4604      	mov	r4, r0
 8005898:	bb78      	cbnz	r0, 80058fa <VL53L1_preset_mode_histogram_short_range_mm1+0x8a>
		VL53L1_init_histogram_config_structure(
 800589a:	2602      	movs	r6, #2
 800589c:	2301      	movs	r3, #1
 800589e:	2107      	movs	r1, #7
 80058a0:	f04f 0a08 	mov.w	sl, #8
 80058a4:	f04f 0b09 	mov.w	fp, #9
 80058a8:	4602      	mov	r2, r0
 80058aa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80058ae:	4608      	mov	r0, r1
 80058b0:	e9cd 3300 	strd	r3, r3, [sp]
 80058b4:	e9cd 6606 	strd	r6, r6, [sp, #24]
 80058b8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80058bc:	9508      	str	r5, [sp, #32]
 80058be:	f000 faf8 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 80058c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80058c4:	9606      	str	r6, [sp, #24]
 80058c6:	199a      	adds	r2, r3, r6
 80058c8:	2107      	movs	r1, #7
 80058ca:	2301      	movs	r3, #1
 80058cc:	4608      	mov	r0, r1
 80058ce:	e9cd 6207 	strd	r6, r2, [sp, #28]
 80058d2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80058d6:	e9cd 3300 	strd	r3, r3, [sp]
 80058da:	4622      	mov	r2, r4
 80058dc:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80058e0:	f000 fb31 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 80058e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058e6:	f8cd 9000 	str.w	r9, [sp]
 80058ea:	4642      	mov	r2, r8
 80058ec:	4639      	mov	r1, r7
 80058ee:	4628      	mov	r0, r5
 80058f0:	f7ff fb7e 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 80058f4:	23bb      	movs	r3, #187	; 0xbb
 80058f6:	f889 3011 	strb.w	r3, [r9, #17]
}
 80058fa:	4620      	mov	r0, r4
 80058fc:	b00b      	add	sp, #44	; 0x2c
 80058fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005902 <VL53L1_preset_mode_histogram_short_range_mm2>:
{
 8005902:	b530      	push	{r4, r5, lr}
 8005904:	b087      	sub	sp, #28
		VL53L1_preset_mode_histogram_short_range_mm1(
 8005906:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005908:	9504      	str	r5, [sp, #16]
 800590a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
{
 800590c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		VL53L1_preset_mode_histogram_short_range_mm1(
 800590e:	9503      	str	r5, [sp, #12]
 8005910:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005912:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005916:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005918:	9500      	str	r5, [sp, #0]
 800591a:	f7ff ffa9 	bl	8005870 <VL53L1_preset_mode_histogram_short_range_mm1>
	if (status == VL53L1_ERROR_NONE) {
 800591e:	b908      	cbnz	r0, 8005924 <VL53L1_preset_mode_histogram_short_range_mm2+0x22>
		pdynamic->system__sequence_config =
 8005920:	23db      	movs	r3, #219	; 0xdb
 8005922:	7463      	strb	r3, [r4, #17]
}
 8005924:	b007      	add	sp, #28
 8005926:	bd30      	pop	{r4, r5, pc}

08005928 <VL53L1_preset_mode_histogram_xtalk_mm1>:
{
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	ed2d 8b02 	vpush	{d8}
 8005930:	b08d      	sub	sp, #52	; 0x34
 8005932:	ee08 1a10 	vmov	s16, r1
		VL53L1_preset_mode_histogram_ranging(
 8005936:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005938:	9504      	str	r5, [sp, #16]
 800593a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800593c:	9503      	str	r5, [sp, #12]
 800593e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
{
 8005940:	9e18      	ldr	r6, [sp, #96]	; 0x60
		VL53L1_preset_mode_histogram_ranging(
 8005942:	9502      	str	r5, [sp, #8]
 8005944:	9d19      	ldr	r5, [sp, #100]	; 0x64
{
 8005946:	920b      	str	r2, [sp, #44]	; 0x2c
		VL53L1_preset_mode_histogram_ranging(
 8005948:	e9cd 6500 	strd	r6, r5, [sp]
{
 800594c:	461c      	mov	r4, r3
		VL53L1_preset_mode_histogram_ranging(
 800594e:	f7ff fb83 	bl	8005058 <VL53L1_preset_mode_histogram_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8005952:	4683      	mov	fp, r0
 8005954:	2800      	cmp	r0, #0
 8005956:	d149      	bne.n	80059ec <VL53L1_preset_mode_histogram_xtalk_mm1+0xc4>
		VL53L1_init_histogram_config_structure(
 8005958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800595a:	9308      	str	r3, [sp, #32]
 800595c:	2509      	movs	r5, #9
 800595e:	f04f 090b 	mov.w	r9, #11
 8005962:	f04f 0a0c 	mov.w	sl, #12
 8005966:	270f      	movs	r7, #15
 8005968:	f04f 0808 	mov.w	r8, #8
 800596c:	230a      	movs	r3, #10
 800596e:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8005972:	462a      	mov	r2, r5
 8005974:	4641      	mov	r1, r8
 8005976:	4638      	mov	r0, r7
 8005978:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 800597c:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8005980:	e9cd 9a00 	strd	r9, sl, [sp]
 8005984:	f000 fa95 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8005988:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800598a:	f8cd 9018 	str.w	r9, [sp, #24]
 800598e:	1c9a      	adds	r2, r3, #2
 8005990:	230a      	movs	r3, #10
 8005992:	e9cd a207 	strd	sl, r2, [sp, #28]
 8005996:	e9cd 5304 	strd	r5, r3, [sp, #16]
 800599a:	462a      	mov	r2, r5
 800599c:	4641      	mov	r1, r8
 800599e:	4638      	mov	r0, r7
 80059a0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80059a4:	e9cd 9a00 	strd	r9, sl, [sp]
 80059a8:	f000 facd 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		VL53L1_copy_hist_cfg_to_static_cfg(
 80059ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	4622      	mov	r2, r4
 80059b2:	4633      	mov	r3, r6
 80059b4:	ee18 1a10 	vmov	r1, s16
 80059b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80059ba:	f7ff fb19 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80059be:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <VL53L1_preset_mode_histogram_xtalk_mm1+0xd0>)
 80059c0:	f04f 2221 	mov.w	r2, #553656576	; 0x21002100
 80059c4:	e9c6 2300 	strd	r2, r3, [r6]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 80059c8:	f640 1329 	movw	r3, #2345	; 0x929
 80059cc:	8133      	strh	r3, [r6, #8]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80059ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
		pgeneral->cal_config__vcsel_start = 0x09;
 80059d0:	70e5      	strb	r5, [r4, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80059d2:	23f5      	movs	r3, #245	; 0xf5
 80059d4:	71e3      	strb	r3, [r4, #7]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80059d6:	f640 1309 	movw	r3, #2313	; 0x909
 80059da:	8113      	strh	r3, [r2, #8]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 80059dc:	f240 6309 	movw	r3, #1545	; 0x609
 80059e0:	8153      	strh	r3, [r2, #10]
		pdynamic->system__sequence_config =
 80059e2:	23bb      	movs	r3, #187	; 0xbb
 80059e4:	7453      	strb	r3, [r2, #17]
		psystem->system__mode_start =
 80059e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80059e8:	2326      	movs	r3, #38	; 0x26
 80059ea:	7113      	strb	r3, [r2, #4]
}
 80059ec:	4658      	mov	r0, fp
 80059ee:	b00d      	add	sp, #52	; 0x34
 80059f0:	ecbd 8b02 	vpop	{d8}
 80059f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f8:	00092900 	.word	0x00092900

080059fc <VL53L1_preset_mode_histogram_xtalk_mm2>:
{
 80059fc:	b530      	push	{r4, r5, lr}
 80059fe:	b087      	sub	sp, #28
		VL53L1_preset_mode_histogram_xtalk_mm1(
 8005a00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005a02:	9504      	str	r5, [sp, #16]
 8005a04:	9d0d      	ldr	r5, [sp, #52]	; 0x34
{
 8005a06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		VL53L1_preset_mode_histogram_xtalk_mm1(
 8005a08:	9503      	str	r5, [sp, #12]
 8005a0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a0c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005a10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005a12:	9500      	str	r5, [sp, #0]
 8005a14:	f7ff ff88 	bl	8005928 <VL53L1_preset_mode_histogram_xtalk_mm1>
		pdynamic->system__sequence_config =
 8005a18:	23db      	movs	r3, #219	; 0xdb
 8005a1a:	7463      	strb	r3, [r4, #17]
}
 8005a1c:	b007      	add	sp, #28
 8005a1e:	bd30      	pop	{r4, r5, pc}

08005a20 <VL53L1_preset_mode_histogram_multizone>:
{
 8005a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	e9dd 9a0e 	ldrd	r9, sl, [sp, #56]	; 0x38
		VL53L1_preset_mode_histogram_medium_range(
 8005a2a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8005a2c:	9703      	str	r7, [sp, #12]
 8005a2e:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
 8005a30:	9c12      	ldr	r4, [sp, #72]	; 0x48
		VL53L1_preset_mode_histogram_medium_range(
 8005a32:	9404      	str	r4, [sp, #16]
 8005a34:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005a38:	f8cd 9000 	str.w	r9, [sp]
{
 8005a3c:	4688      	mov	r8, r1
 8005a3e:	4615      	mov	r5, r2
 8005a40:	461e      	mov	r6, r3
		VL53L1_preset_mode_histogram_medium_range(
 8005a42:	f7ff fd87 	bl	8005554 <VL53L1_preset_mode_histogram_medium_range>
	if (status == VL53L1_ERROR_NONE) {
 8005a46:	4607      	mov	r7, r0
 8005a48:	b9f0      	cbnz	r0, 8005a88 <VL53L1_preset_mode_histogram_multizone+0x68>
			VL53L1_init_zone_config_structure(
 8005a4a:	2307      	movs	r3, #7
 8005a4c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a50:	2108      	movs	r1, #8
 8005a52:	2304      	movs	r3, #4
 8005a54:	2202      	movs	r2, #2
 8005a56:	4618      	mov	r0, r3
 8005a58:	e9cd 1200 	strd	r1, r2, [sp]
 8005a5c:	9404      	str	r4, [sp, #16]
 8005a5e:	f004 fa56 	bl	8009f0e <VL53L1_init_zone_config_structure>
			pzone_cfg->active_zones + 1;
 8005a62:	7863      	ldrb	r3, [r4, #1]
 8005a64:	3301      	adds	r3, #1
		pgeneral->global_config__stream_divider =
 8005a66:	7073      	strb	r3, [r6, #1]
		if (status == VL53L1_ERROR_NONE) {
 8005a68:	4607      	mov	r7, r0
 8005a6a:	b928      	cbnz	r0, 8005a78 <VL53L1_preset_mode_histogram_multizone+0x58>
			VL53L1_set_histogram_multizone_initial_bin_config(
 8005a6c:	1ca2      	adds	r2, r4, #2
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4620      	mov	r0, r4
 8005a72:	f001 fa0f 	bl	8006e94 <VL53L1_set_histogram_multizone_initial_bin_config>
 8005a76:	4607      	mov	r7, r0
		VL53L1_copy_hist_cfg_to_static_cfg(
 8005a78:	f8cd a000 	str.w	sl, [sp]
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	4632      	mov	r2, r6
 8005a80:	4641      	mov	r1, r8
 8005a82:	4628      	mov	r0, r5
 8005a84:	f7ff fab4 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
}
 8005a88:	4638      	mov	r0, r7
 8005a8a:	b006      	add	sp, #24
 8005a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005a90 <VL53L1_preset_mode_histogram_multizone_short_range>:
{
 8005a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a94:	b086      	sub	sp, #24
 8005a96:	e9dd 9a0e 	ldrd	r9, sl, [sp, #56]	; 0x38
		VL53L1_preset_mode_histogram_short_range(
 8005a9a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8005a9c:	9703      	str	r7, [sp, #12]
 8005a9e:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
 8005aa0:	9c12      	ldr	r4, [sp, #72]	; 0x48
		VL53L1_preset_mode_histogram_short_range(
 8005aa2:	9404      	str	r4, [sp, #16]
 8005aa4:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005aa8:	f8cd 9000 	str.w	r9, [sp]
{
 8005aac:	4688      	mov	r8, r1
 8005aae:	4615      	mov	r5, r2
 8005ab0:	461e      	mov	r6, r3
		VL53L1_preset_mode_histogram_short_range(
 8005ab2:	f7ff fe1b 	bl	80056ec <VL53L1_preset_mode_histogram_short_range>
	if (status == VL53L1_ERROR_NONE) {
 8005ab6:	4607      	mov	r7, r0
 8005ab8:	b9f0      	cbnz	r0, 8005af8 <VL53L1_preset_mode_histogram_multizone_short_range+0x68>
			VL53L1_init_zone_config_structure(
 8005aba:	2307      	movs	r3, #7
 8005abc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ac0:	2108      	movs	r1, #8
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	e9cd 1200 	strd	r1, r2, [sp]
 8005acc:	9404      	str	r4, [sp, #16]
 8005ace:	f004 fa1e 	bl	8009f0e <VL53L1_init_zone_config_structure>
			pzone_cfg->active_zones + 1;
 8005ad2:	7863      	ldrb	r3, [r4, #1]
 8005ad4:	3301      	adds	r3, #1
		pgeneral->global_config__stream_divider =
 8005ad6:	7073      	strb	r3, [r6, #1]
		if (status == VL53L1_ERROR_NONE) {
 8005ad8:	4607      	mov	r7, r0
 8005ada:	b928      	cbnz	r0, 8005ae8 <VL53L1_preset_mode_histogram_multizone_short_range+0x58>
			VL53L1_set_histogram_multizone_initial_bin_config(
 8005adc:	1ca2      	adds	r2, r4, #2
 8005ade:	4629      	mov	r1, r5
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f001 f9d7 	bl	8006e94 <VL53L1_set_histogram_multizone_initial_bin_config>
 8005ae6:	4607      	mov	r7, r0
		VL53L1_copy_hist_cfg_to_static_cfg(
 8005ae8:	f8cd a000 	str.w	sl, [sp]
 8005aec:	464b      	mov	r3, r9
 8005aee:	4632      	mov	r2, r6
 8005af0:	4641      	mov	r1, r8
 8005af2:	4628      	mov	r0, r5
 8005af4:	f7ff fa7c 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
}
 8005af8:	4638      	mov	r0, r7
 8005afa:	b006      	add	sp, #24
 8005afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005b00 <VL53L1_preset_mode_histogram_multizone_long_range>:
{
 8005b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	e9dd 9a0e 	ldrd	r9, sl, [sp, #56]	; 0x38
		VL53L1_preset_mode_histogram_long_range(
 8005b0a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8005b0c:	9703      	str	r7, [sp, #12]
 8005b0e:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
 8005b10:	9c12      	ldr	r4, [sp, #72]	; 0x48
		VL53L1_preset_mode_histogram_long_range(
 8005b12:	9404      	str	r4, [sp, #16]
 8005b14:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005b18:	f8cd 9000 	str.w	r9, [sp]
{
 8005b1c:	4688      	mov	r8, r1
 8005b1e:	4615      	mov	r5, r2
 8005b20:	461e      	mov	r6, r3
		VL53L1_preset_mode_histogram_long_range(
 8005b22:	f7ff fc49 	bl	80053b8 <VL53L1_preset_mode_histogram_long_range>
	if (status == VL53L1_ERROR_NONE) {
 8005b26:	4607      	mov	r7, r0
 8005b28:	b9f0      	cbnz	r0, 8005b68 <VL53L1_preset_mode_histogram_multizone_long_range+0x68>
			VL53L1_init_zone_config_structure(
 8005b2a:	2307      	movs	r3, #7
 8005b2c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b30:	2108      	movs	r1, #8
 8005b32:	2304      	movs	r3, #4
 8005b34:	2202      	movs	r2, #2
 8005b36:	4618      	mov	r0, r3
 8005b38:	e9cd 1200 	strd	r1, r2, [sp]
 8005b3c:	9404      	str	r4, [sp, #16]
 8005b3e:	f004 f9e6 	bl	8009f0e <VL53L1_init_zone_config_structure>
			pzone_cfg->active_zones + 1;
 8005b42:	7863      	ldrb	r3, [r4, #1]
 8005b44:	3301      	adds	r3, #1
		pgeneral->global_config__stream_divider =
 8005b46:	7073      	strb	r3, [r6, #1]
		if (status == VL53L1_ERROR_NONE) {
 8005b48:	4607      	mov	r7, r0
 8005b4a:	b928      	cbnz	r0, 8005b58 <VL53L1_preset_mode_histogram_multizone_long_range+0x58>
			VL53L1_set_histogram_multizone_initial_bin_config(
 8005b4c:	1ca2      	adds	r2, r4, #2
 8005b4e:	4629      	mov	r1, r5
 8005b50:	4620      	mov	r0, r4
 8005b52:	f001 f99f 	bl	8006e94 <VL53L1_set_histogram_multizone_initial_bin_config>
 8005b56:	4607      	mov	r7, r0
		VL53L1_copy_hist_cfg_to_static_cfg(
 8005b58:	f8cd a000 	str.w	sl, [sp]
 8005b5c:	464b      	mov	r3, r9
 8005b5e:	4632      	mov	r2, r6
 8005b60:	4641      	mov	r1, r8
 8005b62:	4628      	mov	r0, r5
 8005b64:	f7ff fa44 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
}
 8005b68:	4638      	mov	r0, r7
 8005b6a:	b006      	add	sp, #24
 8005b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005b70 <VL53L1_preset_mode_histogram_xtalk_planar>:
{
 8005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	ed2d 8b02 	vpush	{d8}
 8005b78:	b08d      	sub	sp, #52	; 0x34
 8005b7a:	ee08 1a90 	vmov	s17, r1
		VL53L1_preset_mode_histogram_multizone_long_range(
 8005b7e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8005b80:	9403      	str	r4, [sp, #12]
 8005b82:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8005b84:	9402      	str	r4, [sp, #8]
 8005b86:	9c19      	ldr	r4, [sp, #100]	; 0x64
{
 8005b88:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
		VL53L1_preset_mode_histogram_multizone_long_range(
 8005b8c:	9401      	str	r4, [sp, #4]
 8005b8e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8005b90:	9400      	str	r4, [sp, #0]
 8005b92:	f8cd a010 	str.w	sl, [sp, #16]
{
 8005b96:	ee08 3a10 	vmov	s16, r3
 8005b9a:	4615      	mov	r5, r2
		VL53L1_preset_mode_histogram_multizone_long_range(
 8005b9c:	f7ff ffb0 	bl	8005b00 <VL53L1_preset_mode_histogram_multizone_long_range>
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	4680      	mov	r8, r0
	if (status == VL53L1_ERROR_NONE) {
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d144      	bne.n	8005c32 <VL53L1_preset_mode_histogram_xtalk_planar+0xc2>
			VL53L1_zone_preset_xtalk_planar(
 8005ba8:	4651      	mov	r1, sl
 8005baa:	ee18 0a10 	vmov	r0, s16
 8005bae:	f004 f9ea 	bl	8009f86 <VL53L1_zone_preset_xtalk_planar>
		ptiming->range_config__vcsel_period_a = 0x09;
 8005bb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005bb4:	2309      	movs	r3, #9
 8005bb6:	7193      	strb	r3, [r2, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8005bb8:	7253      	strb	r3, [r2, #9]
		VL53L1_init_histogram_config_structure(
 8005bba:	f04f 0b03 	mov.w	fp, #3
 8005bbe:	2604      	movs	r6, #4
 8005bc0:	f04f 0901 	mov.w	r9, #1
 8005bc4:	2707      	movs	r7, #7
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e9cd 9304 	strd	r9, r3, [sp, #16]
			VL53L1_zone_preset_xtalk_planar(
 8005bcc:	4604      	mov	r4, r0
		VL53L1_init_histogram_config_structure(
 8005bce:	464a      	mov	r2, r9
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	e9cd b606 	strd	fp, r6, [sp, #24]
 8005bd8:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8005bdc:	9508      	str	r5, [sp, #32]
 8005bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8005be2:	f8cd b000 	str.w	fp, [sp]
 8005be6:	f000 f964 	bl	8005eb2 <VL53L1_init_histogram_config_structure>
		VL53L1_init_histogram_multizone_config_structure(
 8005bea:	f10a 0302 	add.w	r3, sl, #2
 8005bee:	e9cd 6307 	strd	r6, r3, [sp, #28]
 8005bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8005bfa:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8005bfe:	e9cd b600 	strd	fp, r6, [sp]
 8005c02:	f8cd b018 	str.w	fp, [sp, #24]
 8005c06:	464a      	mov	r2, r9
 8005c08:	4641      	mov	r1, r8
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	f000 f99b 	bl	8005f46 <VL53L1_init_histogram_multizone_config_structure>
		if (status == VL53L1_ERROR_NONE) {
 8005c10:	b92c      	cbnz	r4, 8005c1e <VL53L1_preset_mode_histogram_xtalk_planar+0xae>
			VL53L1_set_histogram_multizone_initial_bin_config(
 8005c12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c14:	4629      	mov	r1, r5
 8005c16:	4650      	mov	r0, sl
 8005c18:	f001 f93c 	bl	8006e94 <VL53L1_set_histogram_multizone_initial_bin_config>
 8005c1c:	4604      	mov	r4, r0
		VL53L1_copy_hist_cfg_to_static_cfg(
 8005c1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	ee18 2a10 	vmov	r2, s16
 8005c26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005c28:	ee18 1a90 	vmov	r1, s17
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f7ff f9df 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
}
 8005c32:	4620      	mov	r0, r4
 8005c34:	b00d      	add	sp, #52	; 0x34
 8005c36:	ecbd 8b02 	vpop	{d8}
 8005c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c3e <VL53L1_copy_hist_bins_to_static_cfg>:
{


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
 8005c3e:	7bc3      	ldrb	r3, [r0, #15]
{
 8005c40:	b510      	push	{r4, lr}
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8005c42:	748b      	strb	r3, [r1, #18]
			phistogram->histogram_config__high_amb_even_bin_0_1;
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8005c44:	7c03      	ldrb	r3, [r0, #16]
 8005c46:	74cb      	strb	r3, [r1, #19]
			phistogram->histogram_config__high_amb_even_bin_2_3;
	pstatic->sigma_estimator__sigma_ref_mm =
 8005c48:	7c43      	ldrb	r3, [r0, #17]
 8005c4a:	750b      	strb	r3, [r1, #20]
			phistogram->histogram_config__high_amb_even_bin_4_5;

	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8005c4c:	7c83      	ldrb	r3, [r0, #18]
 8005c4e:	754b      	strb	r3, [r1, #21]
			phistogram->histogram_config__high_amb_odd_bin_0_1;

	pstatic->spare_host_config__static_config_spare_0 =
 8005c50:	7cc3      	ldrb	r3, [r0, #19]
 8005c52:	758b      	strb	r3, [r1, #22]
			phistogram->histogram_config__high_amb_odd_bin_2_3;
	pstatic->spare_host_config__static_config_spare_1 =
 8005c54:	7d03      	ldrb	r3, [r0, #20]
 8005c56:	75cb      	strb	r3, [r1, #23]
			phistogram->histogram_config__high_amb_odd_bin_4_5;

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8005c58:	79c4      	ldrb	r4, [r0, #7]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8005c5a:	7a03      	ldrb	r3, [r0, #8]
 8005c5c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
	pstatic->algo__range_ignore_threshold_mcps =
 8005c60:	830b      	strh	r3, [r1, #24]

	pstatic->algo__range_ignore_valid_height_mm =
 8005c62:	7a43      	ldrb	r3, [r0, #9]
 8005c64:	768b      	strb	r3, [r1, #26]
			phistogram->histogram_config__mid_amb_even_bin_4_5;
	pstatic->algo__range_min_clip =
 8005c66:	7a83      	ldrb	r3, [r0, #10]
 8005c68:	76cb      	strb	r3, [r1, #27]
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
	pstatic->algo__consistency_check__tolerance =
 8005c6a:	7ac3      	ldrb	r3, [r0, #11]
 8005c6c:	770b      	strb	r3, [r1, #28]
			phistogram->histogram_config__mid_amb_odd_bin_2;

	pstatic->spare_host_config__static_config_spare_2 =
 8005c6e:	7b03      	ldrb	r3, [r0, #12]
 8005c70:	774b      	strb	r3, [r1, #29]
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
	pstatic->sd_config__reset_stages_msb =
 8005c72:	7b43      	ldrb	r3, [r0, #13]
 8005c74:	778b      	strb	r3, [r1, #30]
			phistogram->histogram_config__mid_amb_odd_bin_5;

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8005c76:	7841      	ldrb	r1, [r0, #1]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8005c78:	7883      	ldrb	r3, [r0, #2]
 8005c7a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	ptiming->range_config__sigma_thresh =
 8005c7e:	8153      	strh	r3, [r2, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8005c80:	78c1      	ldrb	r1, [r0, #3]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8005c82:	7903      	ldrb	r3, [r0, #4]
 8005c84:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8005c88:	8193      	strh	r3, [r2, #12]

	ptiming->range_config__valid_phase_low =
 8005c8a:	7943      	ldrb	r3, [r0, #5]
 8005c8c:	7393      	strb	r3, [r2, #14]
			phistogram->histogram_config__low_amb_odd_bin_2_3;
	ptiming->range_config__valid_phase_high =
 8005c8e:	7983      	ldrb	r3, [r0, #6]
 8005c90:	73d3      	strb	r3, [r2, #15]
			phistogram->histogram_config__low_amb_odd_bin_4_5;

	LOG_FUNCTION_END(0);

}
 8005c92:	bd10      	pop	{r4, pc}

08005c94 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8005c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c98:	b087      	sub	sp, #28
 8005c9a:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8005c9e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005ca0:	9704      	str	r7, [sp, #16]
 8005ca2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8005ca4:	9703      	str	r7, [sp, #12]
 8005ca6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8005ca8:	f8cd 8000 	str.w	r8, [sp]
 8005cac:	e9cd 9701 	strd	r9, r7, [sp, #4]
{
 8005cb0:	460d      	mov	r5, r1
 8005cb2:	4614      	mov	r4, r2
 8005cb4:	461e      	mov	r6, r3
		VL53L1_preset_mode_histogram_ranging(
 8005cb6:	f7ff f9cf 	bl	8005058 <VL53L1_preset_mode_histogram_ranging>
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8005cba:	4607      	mov	r7, r0
 8005cbc:	b948      	cbnz	r0, 8005cd2 <VL53L1_preset_mode_histogram_ranging_ref+0x3e>



		phistogram->histogram_config__spad_array_selection = 0x01;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	7023      	strb	r3, [r4, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 8005cc2:	f8cd 9000 	str.w	r9, [sp]
 8005cc6:	4643      	mov	r3, r8
 8005cc8:	4632      	mov	r2, r6
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f7ff f98f 	bl	8004ff0 <VL53L1_copy_hist_cfg_to_static_cfg>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	b007      	add	sp, #28
 8005cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005cda <VL53L1_init_version>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8005cda:	f44f 533f 	mov.w	r3, #12224	; 0x2fc0
 8005cde:	6243      	str	r3, [r0, #36]	; 0x24
	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8005ce0:	f240 1301 	movw	r3, #257	; 0x101
 8005ce4:	8503      	strh	r3, [r0, #40]	; 0x28
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8005ce6:	2330      	movs	r3, #48	; 0x30
 8005ce8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
 8005cec:	4770      	bx	lr

08005cee <VL53L1_init_ll_driver_state>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state  = device_state;
	pstate->cfg_stream_count  = 0;
 8005cee:	2300      	movs	r3, #0
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005cf0:	2202      	movs	r2, #2
	pstate->cfg_device_state  = device_state;
 8005cf2:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_stream_count  = 0;
 8005cf6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005cfa:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	pstate->cfg_timing_status = 0;
 8005cfe:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->cfg_zone_id       = 0;
 8005d02:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

	pstate->rd_device_state   = device_state;
 8005d06:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
	pstate->rd_stream_count   = 0;
 8005d0a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005d0e:	f880 2037 	strb.w	r2, [r0, #55]	; 0x37
	pstate->rd_timing_status  = 0;
 8005d12:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pstate->rd_zone_id        = 0;
 8005d16:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

}
 8005d1a:	4770      	bx	lr

08005d1c <VL53L1_check_ll_driver_rd_state>:
}


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8005d1c:	b570      	push	{r4, r5, r6, lr}
	device_stream_count = psys_results->result__stream_count;



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8005d1e:	f890 33d0 	ldrb.w	r3, [r0, #976]	; 0x3d0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8005d22:	f890 13d2 	ldrb.w	r1, [r0, #978]	; 0x3d2
{
 8005d26:	4602      	mov	r2, r0
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	if (histogram_mode)
 8005d28:	f013 0002 	ands.w	r0, r3, #2
		device_gph_id = (phist_data->result__interrupt_status &
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8005d2c:	bf18      	it	ne
 8005d2e:	f892 14a8 	ldrbne.w	r1, [r2, #1192]	; 0x4a8



	if (!((pdev->sys_ctrl.system__mode_start &
 8005d32:	f013 0320 	ands.w	r3, r3, #32
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8005d36:	ea4f 1121 	mov.w	r1, r1, asr #4
		device_gph_id = (phist_data->result__interrupt_status &
 8005d3a:	f001 0102 	and.w	r1, r1, #2
	if (!((pdev->sys_ctrl.system__mode_start &
 8005d3e:	d03a      	beq.n	8005db6 <VL53L1_check_ll_driver_rd_state+0x9a>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8005d40:	f892 4033 	ldrb.w	r4, [r2, #51]	; 0x33
			psys_results->result__range_status &
 8005d44:	f892 33d3 	ldrb.w	r3, [r2, #979]	; 0x3d3
	if (pstate->rd_device_state ==
 8005d48:	2c06      	cmp	r4, #6
 8005d4a:	d108      	bne.n	8005d5e <VL53L1_check_ll_driver_rd_state+0x42>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8005d4c:	bb98      	cbnz	r0, 8005db6 <VL53L1_check_ll_driver_rd_state+0x9a>
			if (device_range_status !=
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	2b12      	cmp	r3, #18
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8005d54:	bf0c      	ite	eq
 8005d56:	2000      	moveq	r0, #0
 8005d58:	f06f 0010 	mvnne.w	r0, #16


ENDFUNC:
	LOG_FUNCTION_END(status);
	return status;
}
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
	device_stream_count = psys_results->result__stream_count;
 8005d5e:	f892 43d5 	ldrb.w	r4, [r2, #981]	; 0x3d5
		if (pstate->rd_stream_count != device_stream_count)
 8005d62:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005d66:	42a3      	cmp	r3, r4
		if (pstate->rd_gph_id != device_gph_id)
 8005d68:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8005d6c:	bf14      	ite	ne
 8005d6e:	f06f 0011 	mvnne.w	r0, #17
 8005d72:	2000      	moveq	r0, #0
		if (pstate->rd_gph_id != device_gph_id)
 8005d74:	428b      	cmp	r3, r1
 8005d76:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8005d7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d7e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
		expected_gph_id =
 8005d82:	f242 25bb 	movw	r5, #8891	; 0x22bb
		expected_stream_count =
 8005d86:	f242 26ba 	movw	r6, #8890	; 0x22ba
		expected_gph_id =
 8005d8a:	5d5d      	ldrb	r5, [r3, r5]
		if (expected_stream_count != device_stream_count) {
 8005d8c:	5d9b      	ldrb	r3, [r3, r6]
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8005d8e:	bf18      	it	ne
 8005d90:	f06f 0012 	mvnne.w	r0, #18
		if (expected_stream_count != device_stream_count) {
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	d006      	beq.n	8005da6 <VL53L1_check_ll_driver_rd_state+0x8a>
			if (!((pdev->zone_cfg.active_zones == 0) &&
 8005d98:	f892 30c3 	ldrb.w	r3, [r2, #195]	; 0xc3
 8005d9c:	b943      	cbnz	r3, 8005db0 <VL53L1_check_ll_driver_rd_state+0x94>
 8005d9e:	2cff      	cmp	r4, #255	; 0xff
				status =
 8005da0:	bf18      	it	ne
 8005da2:	f06f 0013 	mvnne.w	r0, #19
		if (expected_gph_id != device_gph_id)
 8005da6:	42a9      	cmp	r1, r5
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8005da8:	bf18      	it	ne
 8005daa:	f06f 0014 	mvnne.w	r0, #20
 8005dae:	e7d5      	b.n	8005d5c <VL53L1_check_ll_driver_rd_state+0x40>
				status =
 8005db0:	f06f 0013 	mvn.w	r0, #19
 8005db4:	e7f7      	b.n	8005da6 <VL53L1_check_ll_driver_rd_state+0x8a>
	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8005db6:	2000      	movs	r0, #0
 8005db8:	e7d0      	b.n	8005d5c <VL53L1_check_ll_driver_rd_state+0x40>

08005dba <VL53L1_copy_rtn_good_spads_to_buffer>:
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8005dba:	7c03      	ldrb	r3, [r0, #16]
 8005dbc:	700b      	strb	r3, [r1, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8005dbe:	7c43      	ldrb	r3, [r0, #17]
 8005dc0:	704b      	strb	r3, [r1, #1]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8005dc2:	7c83      	ldrb	r3, [r0, #18]
 8005dc4:	708b      	strb	r3, [r1, #2]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8005dc6:	7cc3      	ldrb	r3, [r0, #19]
 8005dc8:	70cb      	strb	r3, [r1, #3]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8005dca:	7d03      	ldrb	r3, [r0, #20]
 8005dcc:	710b      	strb	r3, [r1, #4]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8005dce:	7d43      	ldrb	r3, [r0, #21]
 8005dd0:	714b      	strb	r3, [r1, #5]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8005dd2:	7d83      	ldrb	r3, [r0, #22]
 8005dd4:	718b      	strb	r3, [r1, #6]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8005dd6:	7dc3      	ldrb	r3, [r0, #23]
 8005dd8:	71cb      	strb	r3, [r1, #7]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8005dda:	7e03      	ldrb	r3, [r0, #24]
 8005ddc:	720b      	strb	r3, [r1, #8]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8005dde:	7e43      	ldrb	r3, [r0, #25]
 8005de0:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8005de2:	7e83      	ldrb	r3, [r0, #26]
 8005de4:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8005de6:	7ec3      	ldrb	r3, [r0, #27]
 8005de8:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8005dea:	7f03      	ldrb	r3, [r0, #28]
 8005dec:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8005dee:	7f43      	ldrb	r3, [r0, #29]
 8005df0:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8005df2:	7f83      	ldrb	r3, [r0, #30]
 8005df4:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8005df6:	7fc3      	ldrb	r3, [r0, #31]
 8005df8:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8005dfa:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005dfe:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8005e00:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005e04:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8005e06:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8005e0a:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8005e0c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8005e10:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8005e12:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8005e16:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8005e18:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005e1c:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8005e1e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8005e22:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8005e24:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8005e28:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8005e2a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8005e2e:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8005e30:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005e34:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8005e36:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005e3a:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8005e3c:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005e40:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8005e42:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005e46:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8005e48:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005e4c:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8005e4e:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8005e52:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8005e54:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8005e58:	77cb      	strb	r3, [r1, #31]
}
 8005e5a:	4770      	bx	lr

08005e5c <VL53L1_init_system_results>:
void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{


	pdata->result__interrupt_status                       = 0xFF;
 8005e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e60:	8003      	strh	r3, [r0, #0]
	pdata->result__range_status                           = 0xFF;
	pdata->result__report_status                          = 0xFF;
 8005e62:	8043      	strh	r3, [r0, #2]
	pdata->result__stream_count                           = 0xFF;

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8005e64:	8083      	strh	r3, [r0, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8005e66:	80c3      	strh	r3, [r0, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8005e68:	8103      	strh	r3, [r0, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8005e6a:	8143      	strh	r3, [r0, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8005e6c:	8183      	strh	r3, [r0, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8005e6e:	81c3      	strh	r3, [r0, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8005e70:	8203      	strh	r3, [r0, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8005e72:	8243      	strh	r3, [r0, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8005e74:	8283      	strh	r3, [r0, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8005e76:	82c3      	strh	r3, [r0, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8005e78:	8303      	strh	r3, [r0, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8005e7a:	8343      	strh	r3, [r0, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8005e7c:	8383      	strh	r3, [r0, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8005e7e:	83c3      	strh	r3, [r0, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8005e80:	8403      	strh	r3, [r0, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8005e82:	8443      	strh	r3, [r0, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8005e84:	8483      	strh	r3, [r0, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8005e86:	84c3      	strh	r3, [r0, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8005e88:	8503      	strh	r3, [r0, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8005e8a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
 8005e8e:	4770      	bx	lr

08005e90 <V53L1_init_zone_results_structure>:


	uint8_t  z = 0;
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 8005e90:	2319      	movs	r3, #25
{
 8005e92:	b510      	push	{r4, lr}
	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 8005e94:	700b      	strb	r3, [r1, #0]
	pdata->active_zones = active_zones;
 8005e96:	7048      	strb	r0, [r1, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8005e98:	f201 62a4 	addw	r2, r1, #1700	; 0x6a4
		pobjects = &(pdata->VL53L1_p_002[z]);
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8005e9c:	2303      	movs	r3, #3
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 8005e9e:	2404      	movs	r4, #4
		pobjects->active_objects   = 0;
 8005ea0:	2000      	movs	r0, #0
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8005ea2:	710b      	strb	r3, [r1, #4]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8005ea4:	714b      	strb	r3, [r1, #5]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 8005ea6:	720c      	strb	r4, [r1, #8]
		pobjects->active_objects   = 0;
 8005ea8:	7248      	strb	r0, [r1, #9]
	for (z = 0; z < pdata->max_zones; z++) {
 8005eaa:	3144      	adds	r1, #68	; 0x44
 8005eac:	4291      	cmp	r1, r2
 8005eae:	d1f8      	bne.n	8005ea2 <V53L1_init_zone_results_structure+0x12>
	}
}
 8005eb0:	bd10      	pop	{r4, pc}

08005eb2 <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 8005eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8005eb6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8005eba:	f89d e020 	ldrb.w	lr, [sp, #32]
 8005ebe:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
{
 8005ec2:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 8005ec6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8005eca:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 8005ece:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8005ed2:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
{
 8005ed6:	9c10      	ldr	r4, [sp, #64]	; 0x40
			(even_bin5 << 4) + even_bin4;
 8005ed8:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
			(odd_bin1 << 4) + odd_bin0;
 8005edc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8005ee0:	f884 a00b 	strb.w	sl, [r4, #11]
			(even_bin3 << 4) + even_bin2;
 8005ee4:	b2db      	uxtb	r3, r3
			(odd_bin1 << 4) + odd_bin0;
 8005ee6:	eb05 1502 	add.w	r5, r5, r2, lsl #4
			(odd_bin3 << 4) + odd_bin2;
 8005eea:	eb0a 170c 	add.w	r7, sl, ip, lsl #4
			(even_bin1 << 4) + even_bin0;
 8005eee:	eb00 1101 	add.w	r1, r0, r1, lsl #4
			(odd_bin5 << 4) + odd_bin4;
 8005ef2:	eb09 1608 	add.w	r6, r9, r8, lsl #4
			(even_bin1 << 4) + even_bin0;
 8005ef6:	b2c9      	uxtb	r1, r1
			(even_bin5 << 4) + even_bin4;
 8005ef8:	fa5f fe8e 	uxtb.w	lr, lr
			(odd_bin1 << 4) + odd_bin0;
 8005efc:	b2ed      	uxtb	r5, r5
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8005efe:	70a3      	strb	r3, [r4, #2]
			(odd_bin3 << 4) + odd_bin2;
 8005f00:	b2ff      	uxtb	r7, r7
			(odd_bin5 << 4) + odd_bin4;
 8005f02:	b2f6      	uxtb	r6, r6
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8005f04:	7223      	strb	r3, [r4, #8]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;

	pdata->histogram_config__user_bin_offset       = 0x00;
 8005f06:	2200      	movs	r2, #0

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8005f08:	7423      	strb	r3, [r4, #16]
			(odd_bin4 << 4) + odd_bin3;
 8005f0a:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8005f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8005f12:	7061      	strb	r1, [r4, #1]
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8005f14:	f884 e003 	strb.w	lr, [r4, #3]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8005f18:	7125      	strb	r5, [r4, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8005f1a:	7167      	strb	r7, [r4, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8005f1c:	71a6      	strb	r6, [r4, #6]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8005f1e:	71e1      	strb	r1, [r4, #7]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8005f20:	f884 e009 	strb.w	lr, [r4, #9]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8005f24:	72a5      	strb	r5, [r4, #10]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8005f26:	f884 c00c 	strb.w	ip, [r4, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8005f2a:	f884 800d 	strb.w	r8, [r4, #13]
	pdata->histogram_config__user_bin_offset       = 0x00;
 8005f2e:	73a2      	strb	r2, [r4, #14]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8005f30:	73e1      	strb	r1, [r4, #15]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8005f32:	f884 e011 	strb.w	lr, [r4, #17]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8005f36:	74a5      	strb	r5, [r4, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8005f38:	74e7      	strb	r7, [r4, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8005f3a:	7526      	strb	r6, [r4, #20]
	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8005f3c:	82e3      	strh	r3, [r4, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8005f3e:	8323      	strh	r3, [r4, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8005f40:	7022      	strb	r2, [r4, #0]

}
 8005f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005f46 <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 8005f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005f4a:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 8005f4e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8005f52:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 8005f56:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8005f5a:	72e6      	strb	r6, [r4, #11]
			(even_bin3 << 4) + even_bin2;
 8005f5c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005f60:	b2db      	uxtb	r3, r3
			(even_bin1 << 4) + even_bin0;
 8005f62:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005f66:	b2c9      	uxtb	r1, r1
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8005f68:	70a3      	strb	r3, [r4, #2]
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8005f6a:	7163      	strb	r3, [r4, #5]
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8005f6c:	7223      	strb	r3, [r4, #8]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8005f6e:	eb0c 1305 	add.w	r3, ip, r5, lsl #4
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8005f72:	7061      	strb	r1, [r4, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8005f74:	7121      	strb	r1, [r4, #4]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8005f76:	71e1      	strb	r1, [r4, #7]
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8005f78:	72a1      	strb	r1, [r4, #10]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8005f7a:	7323      	strb	r3, [r4, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;

	pdata->histogram_config__user_bin_offset       = 0x00;

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8005f7c:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8005f80:	f89d 301c 	ldrb.w	r3, [sp, #28]
			(even_bin5 << 4) + even_bin4;
 8005f84:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8005f88:	f89d 0014 	ldrb.w	r0, [sp, #20]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8005f8c:	7367      	strb	r7, [r4, #13]
			(odd_bin1 << 4) + odd_bin0;
 8005f8e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005f92:	b2db      	uxtb	r3, r3
			(even_bin5 << 4) + even_bin4;
 8005f94:	eb00 1002 	add.w	r0, r0, r2, lsl #4
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8005f98:	eb06 160c 	add.w	r6, r6, ip, lsl #4
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8005f9c:	eb05 1507 	add.w	r5, r5, r7, lsl #4
			(even_bin5 << 4) + even_bin4;
 8005fa0:	b2c0      	uxtb	r0, r0
	pdata->histogram_config__user_bin_offset       = 0x00;
 8005fa2:	2200      	movs	r2, #0
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8005fa4:	73e3      	strb	r3, [r4, #15]
			(odd_bin3 << 4) + odd_bin2;
 8005fa6:	b2f6      	uxtb	r6, r6
			(odd_bin5 << 4) + odd_bin4;
 8005fa8:	b2ed      	uxtb	r5, r5

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8005faa:	74a3      	strb	r3, [r4, #18]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8005fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8005fb0:	70e0      	strb	r0, [r4, #3]
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8005fb2:	71a0      	strb	r0, [r4, #6]
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8005fb4:	7260      	strb	r0, [r4, #9]
	pdata->histogram_config__user_bin_offset       = 0x00;
 8005fb6:	73a2      	strb	r2, [r4, #14]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8005fb8:	7426      	strb	r6, [r4, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8005fba:	7465      	strb	r5, [r4, #17]
		= pdata->histogram_config__high_amb_even_bin_2_3;
 8005fbc:	74e6      	strb	r6, [r4, #19]
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8005fbe:	7525      	strb	r5, [r4, #20]
	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8005fc0:	82e3      	strh	r3, [r4, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8005fc2:	8323      	strh	r3, [r4, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8005fc4:	7022      	strb	r2, [r4, #0]
}
 8005fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fc8 <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 8005fc8:	b530      	push	{r4, r5, lr}



	uint16_t          i = 0;

	pdata->zone_id                   = 0;
 8005fca:	2300      	movs	r3, #0
	pdata->time_stamp                = 0;

	pdata->VL53L1_p_022                 = 0;
 8005fcc:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 8005fd0:	8114      	strh	r4, [r2, #8]

	pdata->phasecal_result__reference_phase   = 0;
	pdata->phasecal_result__vcsel_start       = 0;
	pdata->cal_config__vcsel_start            = 0;

	pdata->vcsel_width                        = 0;
 8005fd2:	e9c2 330f 	strd	r3, r3, [r2, #60]	; 0x3c
	pdata->zone_id                   = 0;
 8005fd6:	7013      	strb	r3, [r2, #0]
	pdata->time_stamp                = 0;
 8005fd8:	6053      	str	r3, [r2, #4]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 8005fda:	7291      	strb	r1, [r2, #10]
	pdata->VL53L1_p_019                = 0;

	pdata->zero_distance_phase                = 0;
 8005fdc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
		if (i < VL53L1_p_024)
			pdata->bin_data[i] = bin_value;
		else
			pdata->bin_data[i] = 0;
 8005fe0:	461c      	mov	r4, r3
 8005fe2:	320c      	adds	r2, #12
		if (i < VL53L1_p_024)
 8005fe4:	b29d      	uxth	r5, r3
 8005fe6:	42a9      	cmp	r1, r5
			pdata->bin_data[i] = bin_value;
 8005fe8:	f103 0301 	add.w	r3, r3, #1
 8005fec:	bf8c      	ite	hi
 8005fee:	6010      	strhi	r0, [r2, #0]
			pdata->bin_data[i] = 0;
 8005ff0:	6014      	strls	r4, [r2, #0]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 8005ff2:	2b0c      	cmp	r3, #12
 8005ff4:	f102 0204 	add.w	r2, r2, #4
 8005ff8:	d1f4      	bne.n	8005fe4 <VL53L1_init_xtalk_bin_data_struct+0x1c>
	}
}
 8005ffa:	bd30      	pop	{r4, r5, pc}

08005ffc <VL53L1_i2c_encode_uint16_t>:
	uint16_t   i    = 0;
	uint16_t   VL53L1_p_002 = 0;

	VL53L1_p_002 =  ip_value;

	for (i = 0; i < count; i++) {
 8005ffc:	4411      	add	r1, r2
 8005ffe:	4291      	cmp	r1, r2
 8006000:	d100      	bne.n	8006004 <VL53L1_i2c_encode_uint16_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
		VL53L1_p_002 = VL53L1_p_002 >> 8;
	}
}
 8006002:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 8006004:	f801 0d01 	strb.w	r0, [r1, #-1]!
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 8006008:	0a00      	lsrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 800600a:	e7f8      	b.n	8005ffe <VL53L1_i2c_encode_uint16_t+0x2>

0800600c <VL53L1_i2c_decode_uint16_t>:
{


	uint16_t   value = 0x00;

	while (count-- > 0)
 800600c:	180b      	adds	r3, r1, r0
	uint16_t   value = 0x00;
 800600e:	2000      	movs	r0, #0
	while (count-- > 0)
 8006010:	4299      	cmp	r1, r3
 8006012:	d100      	bne.n	8006016 <VL53L1_i2c_decode_uint16_t+0xa>
		value = (value << 8) | (uint16_t)*pbuffer++;

	return value;
}
 8006014:	4770      	bx	lr
		value = (value << 8) | (uint16_t)*pbuffer++;
 8006016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800601a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800601e:	b280      	uxth	r0, r0
 8006020:	e7f6      	b.n	8006010 <VL53L1_i2c_decode_uint16_t+0x4>

08006022 <VL53L1_i2c_encode_int16_t>:
	uint16_t   i    = 0;
	int16_t    VL53L1_p_002 = 0;

	VL53L1_p_002 =  ip_value;

	for (i = 0; i < count; i++) {
 8006022:	4411      	add	r1, r2
 8006024:	4291      	cmp	r1, r2
 8006026:	d100      	bne.n	800602a <VL53L1_i2c_encode_int16_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
		VL53L1_p_002 = VL53L1_p_002 >> 8;
	}
}
 8006028:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800602a:	f801 0d01 	strb.w	r0, [r1, #-1]!
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800602e:	1200      	asrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 8006030:	e7f8      	b.n	8006024 <VL53L1_i2c_encode_int16_t+0x2>

08006032 <VL53L1_i2c_decode_int16_t>:


	int16_t    value = 0x00;


	if (*pbuffer >= 0x80)
 8006032:	f991 3000 	ldrsb.w	r3, [r1]
 8006036:	17db      	asrs	r3, r3, #31
 8006038:	b21b      	sxth	r3, r3
 800603a:	4408      	add	r0, r1
		value = 0xFFFF;

	while (count-- > 0)
 800603c:	4281      	cmp	r1, r0
 800603e:	d101      	bne.n	8006044 <VL53L1_i2c_decode_int16_t+0x12>
		value = (value << 8) | (int16_t)*pbuffer++;

	return value;
}
 8006040:	4618      	mov	r0, r3
 8006042:	4770      	bx	lr
		value = (value << 8) | (int16_t)*pbuffer++;
 8006044:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006048:	b25b      	sxtb	r3, r3
 800604a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800604e:	e7f5      	b.n	800603c <VL53L1_i2c_decode_int16_t+0xa>

08006050 <VL53L1_i2c_encode_uint32_t>:
	uint16_t   i    = 0;
	uint32_t   VL53L1_p_002 = 0;

	VL53L1_p_002 =  ip_value;

	for (i = 0; i < count; i++) {
 8006050:	4411      	add	r1, r2
 8006052:	4291      	cmp	r1, r2
 8006054:	d100      	bne.n	8006058 <VL53L1_i2c_encode_uint32_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
		VL53L1_p_002 = VL53L1_p_002 >> 8;
	}
}
 8006056:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 8006058:	f801 0d01 	strb.w	r0, [r1, #-1]!
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800605c:	0a00      	lsrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 800605e:	e7f8      	b.n	8006052 <VL53L1_i2c_encode_uint32_t+0x2>

08006060 <VL53L1_i2c_decode_uint32_t>:
{


	uint32_t   value = 0x00;

	while (count-- > 0)
 8006060:	180b      	adds	r3, r1, r0
	uint32_t   value = 0x00;
 8006062:	2000      	movs	r0, #0
	while (count-- > 0)
 8006064:	4299      	cmp	r1, r3
 8006066:	d100      	bne.n	800606a <VL53L1_i2c_decode_uint32_t+0xa>
		value = (value << 8) | (uint32_t)*pbuffer++;

	return value;
}
 8006068:	4770      	bx	lr
		value = (value << 8) | (uint32_t)*pbuffer++;
 800606a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800606e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8006072:	e7f7      	b.n	8006064 <VL53L1_i2c_decode_uint32_t+0x4>

08006074 <VL53L1_i2c_decode_int32_t>:


	int32_t    value = 0x00;


	if (*pbuffer >= 0x80)
 8006074:	f991 3000 	ldrsb.w	r3, [r1]
 8006078:	4408      	add	r0, r1
 800607a:	17db      	asrs	r3, r3, #31
		value = 0xFFFFFFFF;

	while (count-- > 0)
 800607c:	4281      	cmp	r1, r0
 800607e:	d101      	bne.n	8006084 <VL53L1_i2c_decode_int32_t+0x10>
		value = (value << 8) | (int32_t)*pbuffer++;

	return value;
}
 8006080:	4618      	mov	r0, r3
 8006082:	4770      	bx	lr
		value = (value << 8) | (int32_t)*pbuffer++;
 8006084:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006088:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800608c:	e7f6      	b.n	800607c <VL53L1_i2c_decode_int32_t+0x8>

0800608e <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800608e:	460a      	mov	r2, r1


	VL53L1_Error status         = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->sys_ctrl.firmware__enable = value;
 8006090:	f880 13ce 	strb.w	r1, [r0, #974]	; 0x3ce

	status = VL53L1_WrByte(
 8006094:	2185      	movs	r1, #133	; 0x85
 8006096:	f7fb ba7d 	b.w	8001594 <VL53L1_WrByte>

0800609a <VL53L1_enable_firmware>:

	VL53L1_Error status       = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800609a:	2101      	movs	r1, #1
 800609c:	f7ff bff7 	b.w	800608e <VL53L1_set_firmware_enable_register>

080060a0 <VL53L1_disable_firmware>:

	VL53L1_Error status       = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 80060a0:	2100      	movs	r1, #0
 80060a2:	f7ff bff4 	b.w	800608e <VL53L1_set_firmware_enable_register>

080060a6 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 80060a6:	460a      	mov	r2, r1


	VL53L1_Error status       = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->sys_ctrl.power_management__go1_power_force = value;
 80060a8:	f880 13cc 	strb.w	r1, [r0, #972]	; 0x3cc

	status = VL53L1_WrByte(
 80060ac:	2183      	movs	r1, #131	; 0x83
 80060ae:	f7fb ba71 	b.w	8001594 <VL53L1_WrByte>

080060b2 <VL53L1_enable_powerforce>:

	VL53L1_Error status       = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 80060b2:	2101      	movs	r1, #1
 80060b4:	f7ff bff7 	b.w	80060a6 <VL53L1_set_powerforce_register>

080060b8 <VL53L1_disable_powerforce>:

	VL53L1_Error status       = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 80060b8:	2100      	movs	r1, #0
 80060ba:	f7ff bff4 	b.w	80060a6 <VL53L1_set_powerforce_register>

080060be <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 80060be:	b538      	push	{r3, r4, r5, lr}
 80060c0:	460d      	mov	r5, r1

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 80060c2:	f001 fac7 	bl	8007654 <VL53L1_calc_pll_period_us>
 80060c6:	4604      	mov	r4, r0



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 80060c8:	4628      	mov	r0, r5
 80060ca:	f001 fbfd 	bl	80078c8 <VL53L1_decode_vcsel_period>



	macro_period_us =
 80060ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80060d2:	fb02 f304 	mul.w	r3, r2, r4
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80060d6:	099b      	lsrs	r3, r3, #6

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 80060d8:	4358      	muls	r0, r3


	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 80060da:	0980      	lsrs	r0, r0, #6
 80060dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080060e0 <VL53L1_calc_range_ignore_threshold>:



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0)
 80060e0:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 80060e2:	bfba      	itte	lt
 80060e4:	4249      	neglt	r1, r1
 80060e6:	b209      	sxthlt	r1, r1
	int16_t    x_gradient_int           = 0;
 80060e8:	2100      	movge	r1, #0

	if (y_gradient < 0)
 80060ea:	2a00      	cmp	r2, #0
		y_gradient_int = y_gradient * -1;
 80060ec:	bfba      	itte	lt
 80060ee:	4252      	neglt	r2, r2
 80060f0:	b212      	sxthlt	r2, r2
	int16_t    y_gradient_int           = 0;
 80060f2:	2200      	movge	r2, #0





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 80060f4:	4411      	add	r1, r2
{
 80060f6:	b510      	push	{r4, lr}
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80060f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80060fc:	0100      	lsls	r0, r0, #4
 80060fe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8006102:	0149      	lsls	r1, r1, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8006104:	fb90 f0f4 	sdiv	r0, r0, r4
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8006108:	fb91 f1f2 	sdiv	r1, r1, r2

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);



	if (range_ignore_thresh_int > 0xFFFF)
 800610c:	4a07      	ldr	r2, [pc, #28]	; (800612c <VL53L1_calc_range_ignore_threshold+0x4c>)
	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800610e:	4408      	add	r0, r1
	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8006110:	4343      	muls	r3, r0
	if (range_ignore_thresh_int > 0xFFFF)
 8006112:	4293      	cmp	r3, r2
 8006114:	dc07      	bgt.n	8006126 <VL53L1_calc_range_ignore_threshold+0x46>
	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8006116:	f113 0010 	adds.w	r0, r3, #16
 800611a:	bf48      	it	mi
 800611c:	f103 002f 	addmi.w	r0, r3, #47	; 0x2f
 8006120:	1140      	asrs	r0, r0, #5


	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
}
 8006122:	b280      	uxth	r0, r0
 8006124:	bd10      	pop	{r4, pc}
 8006126:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800612a:	e7fa      	b.n	8006122 <VL53L1_calc_range_ignore_threshold+0x42>
 800612c:	001fffef 	.word	0x001fffef

08006130 <VL53L1_calc_timeout_us>:
	uint64_t tmp            = 0;

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 8006130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006134:	2300      	movs	r3, #0
 8006136:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp  = tmp >> 12;
 800613a:	0b10      	lsrs	r0, r2, #12


	LOG_FUNCTION_END(0);

	return timeout_us;
}
 800613c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8006140:	4770      	bx	lr

08006142 <VL53L1_calc_crosstalk_plane_offset_with_margin>:
	uint32_t plane_offset_with_margin = 0;
	int32_t  plane_offset_kcps_temp   = 0;

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
 8006142:	4408      	add	r0, r1

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;

}
 8006144:	f380 0012 	usat	r0, #18, r0
 8006148:	4770      	bx	lr

0800614a <VL53L1_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 800614a:	b150      	cbz	r0, 8006162 <VL53L1_encode_timeout+0x18>
		ls_byte = timeout_mclks - 1;
 800614c:	3801      	subs	r0, #1

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800614e:	2300      	movs	r3, #0
 8006150:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8006154:	b29a      	uxth	r2, r3
 8006156:	f103 0301 	add.w	r3, r3, #1
 800615a:	d103      	bne.n	8006164 <VL53L1_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 800615c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8006160:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 8006162:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8006164:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 8006166:	e7f3      	b.n	8006150 <VL53L1_encode_timeout+0x6>

08006168 <VL53L1_calc_encoded_timeout>:
			((timeout_us << 12) + (macro_period_us>>1)) /
 8006168:	0303      	lsls	r3, r0, #12
 800616a:	eb03 0351 	add.w	r3, r3, r1, lsr #1
		VL53L1_encode_timeout(timeout_mclks);
 800616e:	fbb3 f0f1 	udiv	r0, r3, r1
 8006172:	f7ff bfea 	b.w	800614a <VL53L1_encode_timeout>

08006176 <VL53L1_decode_timeout>:
{


	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006176:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006178:	0a00      	lsrs	r0, r0, #8
 800617a:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 800617e:	3001      	adds	r0, #1
 8006180:	4770      	bx	lr

08006182 <VL53L1_calc_decoded_timeout_us>:
{
 8006182:	b508      	push	{r3, lr}
		VL53L1_decode_timeout(timeout_encoded);
 8006184:	f7ff fff7 	bl	8006176 <VL53L1_decode_timeout>
	tmp += 0x00800;
 8006188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800618c:	2300      	movs	r3, #0
 800618e:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp  = tmp >> 12;
 8006192:	0b10      	lsrs	r0, r2, #12
}
 8006194:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8006198:	bd08      	pop	{r3, pc}

0800619a <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800619a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800619e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80061a0:	4604      	mov	r4, r0
 80061a2:	4688      	mov	r8, r1
 80061a4:	4691      	mov	r9, r2
	uint32_t timeout_mclks      = 0;
	uint16_t timeout_encoded    = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80061a6:	461f      	mov	r7, r3
 80061a8:	b383      	cbz	r3, 800620c <VL53L1_calc_timeout_register_values+0x72>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 80061aa:	79a9      	ldrb	r1, [r5, #6]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7ff ff86 	bl	80060be <VL53L1_calc_macro_period_us>
			((timeout_us << 12) + (macro_period_us>>1)) /
 80061b2:	0324      	lsls	r4, r4, #12

		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80061b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			((timeout_us << 12) + (macro_period_us>>1)) /
 80061b6:	eb04 0450 	add.w	r4, r4, r0, lsr #1
	timeout_mclks   =
 80061ba:	fbb4 f4f0 	udiv	r4, r4, r0
				(uint8_t)timeout_mclks;
 80061be:	2cff      	cmp	r4, #255	; 0xff
 80061c0:	bf28      	it	cs
 80061c2:	24ff      	movcs	r4, #255	; 0xff
 80061c4:	71dc      	strb	r4, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 80061c6:	4601      	mov	r1, r0
				VL53L1_calc_macro_period_us(
 80061c8:	4606      	mov	r6, r0
			VL53L1_calc_encoded_timeout(
 80061ca:	4640      	mov	r0, r8
 80061cc:	f7ff ffcc 	bl	8006168 <VL53L1_calc_encoded_timeout>
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
 80061d0:	ba40      	rev16	r0, r0
 80061d2:	8028      	strh	r0, [r5, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 80061d4:	4631      	mov	r1, r6
 80061d6:	4648      	mov	r0, r9
 80061d8:	f7ff ffc6 	bl	8006168 <VL53L1_calc_encoded_timeout>
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
 80061dc:	ba40      	rev16	r0, r0
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);


		macro_period_us =
				VL53L1_calc_macro_period_us(
 80061de:	7a69      	ldrb	r1, [r5, #9]
		ptiming->range_config__timeout_macrop_a_hi =
 80061e0:	80a8      	strh	r0, [r5, #4]
				VL53L1_calc_macro_period_us(
 80061e2:	4638      	mov	r0, r7
 80061e4:	f7ff ff6b 	bl	80060be <VL53L1_calc_macro_period_us>
 80061e8:	4601      	mov	r1, r0
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 80061ea:	9001      	str	r0, [sp, #4]
 80061ec:	4640      	mov	r0, r8
 80061ee:	f7ff ffbb 	bl	8006168 <VL53L1_calc_encoded_timeout>
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
 80061f2:	ba40      	rev16	r0, r0
 80061f4:	8068      	strh	r0, [r5, #2]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);


		timeout_encoded = VL53L1_calc_encoded_timeout(
 80061f6:	9901      	ldr	r1, [sp, #4]
 80061f8:	4648      	mov	r0, r9
 80061fa:	f7ff ffb5 	bl	8006168 <VL53L1_calc_encoded_timeout>
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80061fe:	0a03      	lsrs	r3, r0, #8
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8006200:	7228      	strb	r0, [r5, #8]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8006202:	71eb      	strb	r3, [r5, #7]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006204:	2000      	movs	r0, #0

	LOG_FUNCTION_END(0);

	return status;

}
 8006206:	b003      	add	sp, #12
 8006208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800620c:	f06f 000e 	mvn.w	r0, #14
 8006210:	e7f9      	b.n	8006206 <VL53L1_calc_timeout_register_values+0x6c>

08006212 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 8006212:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	int64_t  tmpo              = 0;

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8006216:	8845      	ldrh	r5, [r0, #2]
{
 8006218:	460f      	mov	r7, r1
	if (pidata->result__dss_actual_effective_spads == 0) {
 800621a:	2d00      	cmp	r5, #0
 800621c:	d03c      	beq.n	8006298 <VL53L1_hist_copy_and_scale_ambient_info+0x86>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800621e:	7846      	ldrb	r6, [r0, #1]
 8006220:	2e00      	cmp	r6, #0
 8006222:	d037      	beq.n	8006294 <VL53L1_hist_copy_and_scale_ambient_info+0x82>
 8006224:	f891 800b 	ldrb.w	r8, [r1, #11]
 8006228:	f1b8 0f00 	cmp.w	r8, #0
 800622c:	d132      	bne.n	8006294 <VL53L1_hist_copy_and_scale_ambient_info+0x82>
			podata->number_of_ambient_bins == 0) {



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800622e:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8006232:	6882      	ldr	r2, [r0, #8]
			(int64_t)podata->result__dss_actual_effective_spads;
 8006234:	f8b7 a07c 	ldrh.w	sl, [r7, #124]	; 0x7c
			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8006238:	3401      	adds	r4, #1
 800623a:	bf2c      	ite	cs
 800623c:	2101      	movcs	r1, #1
 800623e:	2100      	movcc	r1, #0
			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8006240:	3201      	adds	r2, #1
			tmpi   *=
 8006242:	fba5 2302 	umull	r2, r3, r5, r2
			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8006246:	bf2c      	ite	cs
 8006248:	f04f 0c01 	movcs.w	ip, #1
 800624c:	f04f 0c00 	movcc.w	ip, #0
			tmpi   *=
 8006250:	fb05 330c 	mla	r3, r5, ip, r3
			(int64_t)pidata->result__dss_actual_effective_spads;

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8006254:	f8d0 c00c 	ldr.w	ip, [r0, #12]
			tmpo   *=
 8006258:	fbaa 4504 	umull	r4, r5, sl, r4
				(int64_t)pidata->ambient_events_sum;
 800625c:	4660      	mov	r0, ip
			tmpo   *=
 800625e:	fb0a 5501 	mla	r5, sl, r1, r5
				(int64_t)pidata->ambient_events_sum;
 8006262:	17c1      	asrs	r1, r0, #31
			evts  = tmpo *
 8006264:	4361      	muls	r1, r4
			evts += (tmpi/2);
 8006266:	0850      	lsrs	r0, r2, #1
			evts  = tmpo *
 8006268:	fb0c 1105 	mla	r1, ip, r5, r1
			evts += (tmpi/2);
 800626c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
			evts  = tmpo *
 8006270:	fba4 450c 	umull	r4, r5, r4, ip
 8006274:	440d      	add	r5, r1


			if (tmpi != 0)
				evts = do_division_s(evts, tmpi);
 8006276:	1900      	adds	r0, r0, r4
			evts += (tmpi/2);
 8006278:	ea4f 0163 	mov.w	r1, r3, asr #1
				evts = do_division_s(evts, tmpi);
 800627c:	eb45 0101 	adc.w	r1, r5, r1
 8006280:	f7fa fc9a 	bl	8000bb8 <__aeabi_ldivmod>

			podata->ambient_events_sum = (int32_t)evts;
 8006284:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
			podata->VL53L1_p_004 +=
 8006288:	eb00 0056 	add.w	r0, r0, r6, lsr #1
				((int32_t)pidata->number_of_ambient_bins / 2);
			podata->VL53L1_p_004 /=
 800628c:	fb90 f6f6 	sdiv	r6, r0, r6
 8006290:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006294:	2000      	movs	r0, #0
 8006296:	e001      	b.n	800629c <VL53L1_hist_copy_and_scale_ambient_info+0x8a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8006298:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(0);

	return status;
}
 800629c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

080062a0 <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 80062a0:	b530      	push	{r4, r5, lr}
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 80062a2:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 80062a6:	f8b0 3366 	ldrh.w	r3, [r0, #870]	; 0x366
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 80062aa:	f8b0 4368 	ldrh.w	r4, [r0, #872]	; 0x368
 80062ae:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 80062b2:	07ed      	lsls	r5, r5, #31
	amb_thresh_low  = 1024 *
 80062b4:	ea4f 2383 	mov.w	r3, r3, lsl #10
	amb_thresh_high = 1024 *
 80062b8:	ea4f 2484 	mov.w	r4, r4, lsl #10
	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 80062bc:	d45b      	bmi.n	8006376 <VL53L1_hist_get_bin_sequence_config+0xd6>

		pdata->bin_seq[5] =
 80062be:	f890 5359 	ldrb.w	r5, [r0, #857]	; 0x359
 80062c2:	092d      	lsrs	r5, r5, #4
 80062c4:	744d      	strb	r5, [r1, #17]
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 80062c6:	f890 5359 	ldrb.w	r5, [r0, #857]	; 0x359
 80062ca:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[4] =
 80062ce:	740d      	strb	r5, [r1, #16]
		pdata->bin_seq[3] =
 80062d0:	f890 5358 	ldrb.w	r5, [r0, #856]	; 0x358
 80062d4:	092d      	lsrs	r5, r5, #4
 80062d6:	73cd      	strb	r5, [r1, #15]
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 80062d8:	f890 5358 	ldrb.w	r5, [r0, #856]	; 0x358
 80062dc:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[2] =
 80062e0:	738d      	strb	r5, [r1, #14]
		pdata->bin_seq[1] =
 80062e2:	f890 5357 	ldrb.w	r5, [r0, #855]	; 0x357
 80062e6:	092d      	lsrs	r5, r5, #4
 80062e8:	734d      	strb	r5, [r1, #13]
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 80062ea:	f890 5357 	ldrb.w	r5, [r0, #855]	; 0x357

		if (pdata->ambient_events_sum > amb_thresh_high) {
 80062ee:	42a2      	cmp	r2, r4
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 80062f0:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[0] =
 80062f4:	730d      	strb	r5, [r1, #12]
		if (pdata->ambient_events_sum > amb_thresh_high) {
 80062f6:	dd1a      	ble.n	800632e <VL53L1_hist_get_bin_sequence_config+0x8e>
			pdata->bin_seq[5] =
 80062f8:	f890 4361 	ldrb.w	r4, [r0, #865]	; 0x361
 80062fc:	0924      	lsrs	r4, r4, #4
 80062fe:	744c      	strb	r4, [r1, #17]
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
			& 0x0F;
 8006300:	f890 4361 	ldrb.w	r4, [r0, #865]	; 0x361
 8006304:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[4] =
 8006308:	740c      	strb	r4, [r1, #16]
			pdata->bin_seq[3] =
 800630a:	f890 4360 	ldrb.w	r4, [r0, #864]	; 0x360
 800630e:	0924      	lsrs	r4, r4, #4
 8006310:	73cc      	strb	r4, [r1, #15]
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
			& 0x0F;
 8006312:	f890 4360 	ldrb.w	r4, [r0, #864]	; 0x360
 8006316:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[2] =
 800631a:	738c      	strb	r4, [r1, #14]
			pdata->bin_seq[1] =
 800631c:	f890 435f 	ldrb.w	r4, [r0, #863]	; 0x35f
 8006320:	0924      	lsrs	r4, r4, #4
 8006322:	734c      	strb	r4, [r1, #13]
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
			& 0x0F;
 8006324:	f890 435f 	ldrb.w	r4, [r0, #863]	; 0x35f
 8006328:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[0] =
 800632c:	730c      	strb	r4, [r1, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800632e:	429a      	cmp	r2, r3
 8006330:	da1a      	bge.n	8006368 <VL53L1_hist_get_bin_sequence_config+0xc8>
			pdata->bin_seq[5] =
 8006332:	f890 3353 	ldrb.w	r3, [r0, #851]	; 0x353
 8006336:	091b      	lsrs	r3, r3, #4
 8006338:	744b      	strb	r3, [r1, #17]
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
			& 0x0F;
 800633a:	f890 3353 	ldrb.w	r3, [r0, #851]	; 0x353
 800633e:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[4] =
 8006342:	740b      	strb	r3, [r1, #16]
			pdata->bin_seq[3] =
 8006344:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	73cb      	strb	r3, [r1, #15]
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
			& 0x0F;
 800634c:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8006350:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[2] =
 8006354:	738b      	strb	r3, [r1, #14]
			pdata->bin_seq[1] =
 8006356:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
 800635a:	091b      	lsrs	r3, r3, #4
 800635c:	734b      	strb	r3, [r1, #13]
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
			& 0x0F;
 800635e:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
			& 0x0F;
 8006362:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[0] =
 8006366:	730b      	strb	r3, [r1, #12]
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
		pdata->bin_rep[i] = 1;
 8006368:	f240 1301 	movw	r3, #257	; 0x101
 800636c:	824b      	strh	r3, [r1, #18]
 800636e:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8006372:	614b      	str	r3, [r1, #20]

	LOG_FUNCTION_END(0);

}
 8006374:	bd30      	pop	{r4, r5, pc}
			& 0x0F;
 8006376:	f890 535d 	ldrb.w	r5, [r0, #861]	; 0x35d
 800637a:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[5] =
 800637e:	744d      	strb	r5, [r1, #17]
			& 0x0F;
 8006380:	f890 535c 	ldrb.w	r5, [r0, #860]	; 0x35c
 8006384:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[4] =
 8006388:	740d      	strb	r5, [r1, #16]
		pdata->bin_seq[3] =
 800638a:	f890 535c 	ldrb.w	r5, [r0, #860]	; 0x35c
 800638e:	092d      	lsrs	r5, r5, #4
 8006390:	73cd      	strb	r5, [r1, #15]
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8006392:	f890 535b 	ldrb.w	r5, [r0, #859]	; 0x35b
 8006396:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[2] =
 800639a:	738d      	strb	r5, [r1, #14]
		pdata->bin_seq[1] =
 800639c:	f890 535a 	ldrb.w	r5, [r0, #858]	; 0x35a
 80063a0:	092d      	lsrs	r5, r5, #4
 80063a2:	734d      	strb	r5, [r1, #13]
			& 0x0F;
 80063a4:	f890 535a 	ldrb.w	r5, [r0, #858]	; 0x35a
		if (pdata->ambient_events_sum > amb_thresh_high) {
 80063a8:	42a2      	cmp	r2, r4
			& 0x0F;
 80063aa:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[0] =
 80063ae:	730d      	strb	r5, [r1, #12]
		if (pdata->ambient_events_sum > amb_thresh_high) {
 80063b0:	dd1a      	ble.n	80063e8 <VL53L1_hist_get_bin_sequence_config+0x148>
			pdata->bin_seq[5] =
 80063b2:	f890 4364 	ldrb.w	r4, [r0, #868]	; 0x364
 80063b6:	0924      	lsrs	r4, r4, #4
 80063b8:	744c      	strb	r4, [r1, #17]
			& 0x0F;
 80063ba:	f890 4364 	ldrb.w	r4, [r0, #868]	; 0x364
 80063be:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[4] =
 80063c2:	740c      	strb	r4, [r1, #16]
			pdata->bin_seq[3] =
 80063c4:	f890 4363 	ldrb.w	r4, [r0, #867]	; 0x363
 80063c8:	0924      	lsrs	r4, r4, #4
 80063ca:	73cc      	strb	r4, [r1, #15]
			& 0x0F;
 80063cc:	f890 4363 	ldrb.w	r4, [r0, #867]	; 0x363
 80063d0:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[2] =
 80063d4:	738c      	strb	r4, [r1, #14]
			pdata->bin_seq[1] =
 80063d6:	f890 4362 	ldrb.w	r4, [r0, #866]	; 0x362
 80063da:	0924      	lsrs	r4, r4, #4
 80063dc:	734c      	strb	r4, [r1, #13]
			& 0x0F;
 80063de:	f890 4362 	ldrb.w	r4, [r0, #866]	; 0x362
 80063e2:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[0] =
 80063e6:	730c      	strb	r4, [r1, #12]
		if (pdata->ambient_events_sum < amb_thresh_low) {
 80063e8:	429a      	cmp	r2, r3
 80063ea:	dabd      	bge.n	8006368 <VL53L1_hist_get_bin_sequence_config+0xc8>
			pdata->bin_seq[5] =
 80063ec:	f890 3356 	ldrb.w	r3, [r0, #854]	; 0x356
 80063f0:	091b      	lsrs	r3, r3, #4
 80063f2:	744b      	strb	r3, [r1, #17]
			& 0x0F;
 80063f4:	f890 3356 	ldrb.w	r3, [r0, #854]	; 0x356
 80063f8:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[4] =
 80063fc:	740b      	strb	r3, [r1, #16]
			pdata->bin_seq[3] =
 80063fe:	f890 3355 	ldrb.w	r3, [r0, #853]	; 0x355
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	73cb      	strb	r3, [r1, #15]
			& 0x0F;
 8006406:	f890 3355 	ldrb.w	r3, [r0, #853]	; 0x355
 800640a:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[2] =
 800640e:	738b      	strb	r3, [r1, #14]
			pdata->bin_seq[1] =
 8006410:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	734b      	strb	r3, [r1, #13]
			& 0x0F;
 8006418:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
 800641c:	e7a1      	b.n	8006362 <VL53L1_hist_get_bin_sequence_config+0xc2>

0800641e <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800641e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006422:	b085      	sub	sp, #20
 8006424:	461d      	mov	r5, r3
 8006426:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006428:	9103      	str	r1, [sp, #12]
	int32_t   p_signal_events        = 0;
	uint32_t  noise_sq_sum           = 0;



	if (event_sigma == 0) {
 800642a:	4604      	mov	r4, r0
 800642c:	b930      	cbnz	r0, 800643c <VL53L1_hist_events_consistency_check+0x1e>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800642e:	2309      	movs	r3, #9
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;

	if (*pevents_delta > *pevents_tolerance &&
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 8006430:	9a11      	ldr	r2, [sp, #68]	; 0x44




	return status;
}
 8006432:	2000      	movs	r0, #0
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 8006434:	7013      	strb	r3, [r2, #0]
}
 8006436:	b005      	add	sp, #20
 8006438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800643c:	f8d2 a008 	ldr.w	sl, [r2, #8]
	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8006440:	f8d6 8018 	ldr.w	r8, [r6, #24]
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 8006444:	8af0      	ldrh	r0, [r6, #22]
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8006446:	8852      	ldrh	r2, [r2, #2]
	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8006448:	f11a 0a01 	adds.w	sl, sl, #1
 800644c:	bf2c      	ite	cs
 800644e:	2701      	movcs	r7, #1
 8006450:	2700      	movcc	r7, #0
	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8006452:	f118 0801 	adds.w	r8, r8, #1
 8006456:	bf2c      	ite	cs
 8006458:	2301      	movcs	r3, #1
 800645a:	2300      	movcc	r3, #0
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800645c:	fba0 8908 	umull	r8, r9, r0, r8
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8006460:	fba2 ab0a 	umull	sl, fp, r2, sl
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 8006464:	fb00 9903 	mla	r9, r0, r3, r9
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8006468:	fb02 bb07 	mla	fp, r2, r7, fp
	events_scaler += (tmpc/2);
 800646c:	ea4f 0058 	mov.w	r0, r8, lsr #1
	events_scaler  = tmpp * 4096;
 8006470:	ea4f 310b 	mov.w	r1, fp, lsl #12
 8006474:	ea4f 320a 	mov.w	r2, sl, lsl #12
	events_scaler += (tmpc/2);
 8006478:	ea40 70c9 	orr.w	r0, r0, r9, lsl #31
 800647c:	ea4f 0369 	mov.w	r3, r9, asr #1
 8006480:	1880      	adds	r0, r0, r2
	events_scaler  = tmpp * 4096;
 8006482:	ea41 511a 	orr.w	r1, r1, sl, lsr #20
	events_scaler += (tmpc/2);
 8006486:	eb43 0101 	adc.w	r1, r3, r1
	if (tmpc != 0)
 800648a:	ea58 0309 	orrs.w	r3, r8, r9
 800648e:	d003      	beq.n	8006498 <VL53L1_hist_events_consistency_check+0x7a>
		events_scaler = do_division_s(events_scaler, tmpc);
 8006490:	4642      	mov	r2, r8
 8006492:	464b      	mov	r3, r9
 8006494:	f7fa fb90 	bl	8000bb8 <__aeabi_ldivmod>
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 8006498:	e9d6 ca09 	ldrd	ip, sl, [r6, #36]	; 0x24
	events_scaler_sq  = events_scaler * events_scaler;
 800649c:	fb00 f301 	mul.w	r3, r0, r1
 80064a0:	fba0 8900 	umull	r8, r9, r0, r0
	events_scaler_sq += 2048;
 80064a4:	f518 6200 	adds.w	r2, r8, #2048	; 0x800
	events_scaler_sq  = events_scaler * events_scaler;
 80064a8:	eb09 0943 	add.w	r9, r9, r3, lsl #1
	events_scaler_sq += 2048;
 80064ac:	f149 0700 	adc.w	r7, r9, #0
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 80064b0:	ebba 080c 	subs.w	r8, sl, ip
 80064b4:	eb6a 090a 	sbc.w	r9, sl, sl
	c_signal_events *= (int64_t)events_scaler;
 80064b8:	fb00 f309 	mul.w	r3, r0, r9
 80064bc:	fb08 3101 	mla	r1, r8, r1, r3
	events_scaler_sq /= 4096;
 80064c0:	ea4f 3e12 	mov.w	lr, r2, lsr #12
	c_signal_events *= (int64_t)events_scaler;
 80064c4:	fba0 2308 	umull	r2, r3, r0, r8
	events_scaler_sq /= 4096;
 80064c8:	ea4e 5e07 	orr.w	lr, lr, r7, lsl #20
	c_signal_events += 2048;
 80064cc:	f512 6800 	adds.w	r8, r2, #2048	; 0x800
	c_signal_events *= (int64_t)events_scaler;
 80064d0:	440b      	add	r3, r1
	c_signal_events += 2048;
 80064d2:	f143 0900 	adc.w	r9, r3, #0
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 80064d6:	fbae 230c 	umull	r2, r3, lr, ip
 80064da:	e9cd 2300 	strd	r2, r3, [sp]
 80064de:	9b01      	ldr	r3, [sp, #4]
	events_scaler_sq /= 4096;
 80064e0:	133f      	asrs	r7, r7, #12
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 80064e2:	fb0c 3307 	mla	r3, ip, r7, r3
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 80064e6:	fbae 010a 	umull	r0, r1, lr, sl
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 80064ea:	9301      	str	r3, [sp, #4]
	c_amb_noise_sq += 2048;
 80064ec:	9b00      	ldr	r3, [sp, #0]
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 80064ee:	fb0a 1107 	mla	r1, sl, r7, r1
	c_sig_noise_sq += 2048;
 80064f2:	f510 6a00 	adds.w	sl, r0, #2048	; 0x800
 80064f6:	f141 0100 	adc.w	r1, r1, #0
	c_amb_noise_sq += 2048;
 80064fa:	f513 6200 	adds.w	r2, r3, #2048	; 0x800
 80064fe:	9b01      	ldr	r3, [sp, #4]
	c_amb_noise_sq /= 4096;
 8006500:	ea4f 3012 	mov.w	r0, r2, lsr #12
	c_amb_noise_sq += 2048;
 8006504:	f143 0300 	adc.w	r3, r3, #0
	p_amb_noise_sq  =
 8006508:	682a      	ldr	r2, [r5, #0]
	c_amb_noise_sq /= 4096;
 800650a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
	c_amb_noise_sq += 2;
 800650e:	3002      	adds	r0, #2
	p_amb_noise_sq += 2;
 8006510:	3202      	adds	r2, #2
 8006512:	bf2c      	ite	cs
 8006514:	2301      	movcs	r3, #1
 8006516:	2300      	movcc	r3, #0
	p_amb_noise_sq /= 4;
 8006518:	0892      	lsrs	r2, r2, #2
 800651a:	ea42 7283 	orr.w	r2, r2, r3, lsl #30
		(uint32_t)c_sig_noise_sq +
 800651e:	686b      	ldr	r3, [r5, #4]
	c_sig_noise_sq /= 4096;
 8006520:	ea4f 3a1a 	mov.w	sl, sl, lsr #12
		(uint32_t)c_sig_noise_sq +
 8006524:	4413      	add	r3, r2
	c_sig_noise_sq /= 4096;
 8006526:	ea4a 5a01 	orr.w	sl, sl, r1, lsl #20
		(uint32_t)c_sig_noise_sq +
 800652a:	4453      	add	r3, sl
	noise_sq_sum =
 800652c:	eb03 0090 	add.w	r0, r3, r0, lsr #2
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 8006530:	0100      	lsls	r0, r0, #4
 8006532:	f001 f8c8 	bl	80076c6 <VL53L1_isqrt>
	*pevents_tolerance *= (int32_t)event_sigma;
 8006536:	4360      	muls	r0, r4
	*pevents_tolerance /= 64;
 8006538:	f110 0320 	adds.w	r3, r0, #32
 800653c:	bf48      	it	mi
 800653e:	f100 035f 	addmi.w	r3, r0, #95	; 0x5f
 8006542:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006544:	119b      	asrs	r3, r3, #6
 8006546:	6013      	str	r3, [r2, #0]
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 8006548:	e9d5 1300 	ldrd	r1, r3, [r5]
	c_signal_events /= 4096;
 800654c:	4644      	mov	r4, r8
 800654e:	2c00      	cmp	r4, #0
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 8006550:	eba3 0101 	sub.w	r1, r3, r1
	c_signal_events /= 4096;
 8006554:	f179 0300 	sbcs.w	r3, r9, #0
 8006558:	464d      	mov	r5, r9
 800655a:	da07      	bge.n	800656c <VL53L1_hist_events_consistency_check+0x14e>
 800655c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006560:	eb18 0400 	adds.w	r4, r8, r0
 8006564:	f04f 0000 	mov.w	r0, #0
 8006568:	eb40 0505 	adc.w	r5, r0, r5
 800656c:	0b22      	lsrs	r2, r4, #12
 800656e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
	if ((int32_t)c_signal_events > p_signal_events)
 8006572:	4291      	cmp	r1, r2
			(int32_t)c_signal_events - p_signal_events;
 8006574:	bfb4      	ite	lt
 8006576:	1a51      	sublt	r1, r2, r1
			p_signal_events - (int32_t)c_signal_events;
 8006578:	1a89      	subge	r1, r1, r2
 800657a:	9a10      	ldr	r2, [sp, #64]	; 0x40
	if (*pevents_delta > *pevents_tolerance &&
 800657c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800657e:	6011      	str	r1, [r2, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	428a      	cmp	r2, r1
 8006584:	f6bf af53 	bge.w	800642e <VL53L1_hist_events_consistency_check+0x10>
 8006588:	8af3      	ldrh	r3, [r6, #22]
 800658a:	9a03      	ldr	r2, [sp, #12]
 800658c:	4293      	cmp	r3, r2
 800658e:	f67f af4e 	bls.w	800642e <VL53L1_hist_events_consistency_check+0x10>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 8006592:	2314      	movs	r3, #20
 8006594:	e74c      	b.n	8006430 <VL53L1_hist_events_consistency_check+0x12>

08006596 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 8006596:	b530      	push	{r4, r5, lr}


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
	int16_t       delta_mm = 0;

	if (pdata->max_range_mm > pdata->min_range_mm)
 8006598:	f9b1 5048 	ldrsh.w	r5, [r1, #72]	; 0x48
 800659c:	f9b1 4044 	ldrsh.w	r4, [r1, #68]	; 0x44
 80065a0:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 80065a4:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80065a8:	42a5      	cmp	r5, r4
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 80065aa:	bfcc      	ite	gt
 80065ac:	1acb      	subgt	r3, r1, r3
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 80065ae:	1a5b      	suble	r3, r3, r1

	if (min_max_tolerance_mm > 0 &&
 80065b0:	2800      	cmp	r0, #0
		delta_mm =
 80065b2:	b21b      	sxth	r3, r3
	if (min_max_tolerance_mm > 0 &&
 80065b4:	dd06      	ble.n	80065c4 <VL53L1_hist_merged_pulse_check+0x2e>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 80065b6:	4283      	cmp	r3, r0
 80065b8:	bfd4      	ite	le
 80065ba:	2009      	movle	r0, #9
 80065bc:	2016      	movgt	r0, #22
 80065be:	7010      	strb	r0, [r2, #0]
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;

	return status;
}
 80065c0:	2000      	movs	r0, #0
 80065c2:	bd30      	pop	{r4, r5, pc}
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 80065c4:	2009      	movs	r0, #9
 80065c6:	e7fa      	b.n	80065be <VL53L1_hist_merged_pulse_check+0x28>

080065c8 <VL53L1_hist_phase_consistency_check>:
{
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	ed2d 8b04 	vpush	{d8-d9}
 80065d0:	461f      	mov	r7, r3
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 80065d2:	7853      	ldrb	r3, [r2, #1]
{
 80065d4:	b08b      	sub	sp, #44	; 0x2c
	if (prange_prev->rd_device_state !=
 80065d6:	3b07      	subs	r3, #7
	int32_t   events_delta     = 0;
 80065d8:	2500      	movs	r5, #0
	if (prange_prev->rd_device_state !=
 80065da:	2b01      	cmp	r3, #1
	int32_t   events_tolerance = 0;
 80065dc:	e9cd 5508 	strd	r5, r5, [sp, #32]
{
 80065e0:	ee09 1a10 	vmov	s18, r1
 80065e4:	4616      	mov	r6, r2
	VL53L1_DeviceError  range_status = 0;
 80065e6:	f88d 501f 	strb.w	r5, [sp, #31]
	if (prange_prev->rd_device_state !=
 80065ea:	d86f      	bhi.n	80066cc <VL53L1_hist_phase_consistency_check+0x104>
	phase_tolerance = (uint16_t)pht;
 80065ec:	f890 32a2 	ldrb.w	r3, [r0, #674]	; 0x2a2
	if (phase_tolerance == 0)
 80065f0:	021a      	lsls	r2, r3, #8
 80065f2:	9204      	str	r2, [sp, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d06b      	beq.n	80066d0 <VL53L1_hist_phase_consistency_check+0x108>
	event_sigma =
 80065f8:	f890 32a3 	ldrb.w	r3, [r0, #675]	; 0x2a3
 80065fc:	ee08 3a10 	vmov	s16, r3
	event_min_spad_count =
 8006600:	f8b0 32a4 	ldrh.w	r3, [r0, #676]	; 0x2a4
 8006604:	ee08 3a90 	vmov	s17, r3
	min_max_tolerance =
 8006608:	f8b0 32a6 	ldrh.w	r3, [r0, #678]	; 0x2a6
 800660c:	9305      	str	r3, [sp, #20]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800660e:	4628      	mov	r0, r5
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 8006610:	f04f 0a0c 	mov.w	sl, #12
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8006614:	7cbb      	ldrb	r3, [r7, #18]
 8006616:	b2ec      	uxtb	r4, r5
 8006618:	42a3      	cmp	r3, r4
 800661a:	d804      	bhi.n	8006626 <VL53L1_hist_phase_consistency_check+0x5e>
}
 800661c:	b00b      	add	sp, #44	; 0x2c
 800661e:	ecbd 8b04 	vpop	{d8-d9}
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 8006626:	234c      	movs	r3, #76	; 0x4c
 8006628:	fb03 7304 	mla	r3, r3, r4, r7
 800662c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8006630:	2b09      	cmp	r3, #9
 8006632:	d001      	beq.n	8006638 <VL53L1_hist_phase_consistency_check+0x70>
 8006634:	2b13      	cmp	r3, #19
 8006636:	d113      	bne.n	8006660 <VL53L1_hist_phase_consistency_check+0x98>
		if (prange_prev->active_objects == 0)
 8006638:	7973      	ldrb	r3, [r6, #5]
 800663a:	224c      	movs	r2, #76	; 0x4c
 800663c:	4354      	muls	r4, r2
			prange_curr->VL53L1_p_002[lc].range_status =
 800663e:	2b00      	cmp	r3, #0
 8006640:	eb07 0804 	add.w	r8, r7, r4
 8006644:	bf0c      	ite	eq
 8006646:	2317      	moveq	r3, #23
 8006648:	2307      	movne	r3, #7
					VL53L1_hist_events_consistency_check(
 800664a:	3414      	adds	r4, #20
 800664c:	f888 305e 	strb.w	r3, [r8, #94]	; 0x5e
 8006650:	443c      	add	r4, r7
 8006652:	f04f 0900 	mov.w	r9, #0
		for (p = 0; p < prange_prev->active_objects; p++) {
 8006656:	7972      	ldrb	r2, [r6, #5]
 8006658:	fa5f f389 	uxtb.w	r3, r9
 800665c:	429a      	cmp	r2, r3
 800665e:	d801      	bhi.n	8006664 <VL53L1_hist_phase_consistency_check+0x9c>
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8006660:	3501      	adds	r5, #1
 8006662:	e7d7      	b.n	8006614 <VL53L1_hist_phase_consistency_check+0x4c>
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 8006664:	fb0a 6203 	mla	r2, sl, r3, r6
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 8006668:	f8b8 1054 	ldrh.w	r1, [r8, #84]	; 0x54
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800666c:	8a12      	ldrh	r2, [r2, #16]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800666e:	4291      	cmp	r1, r2
				phase_delta =
 8006670:	bf8c      	ite	hi
 8006672:	1a8a      	subhi	r2, r1, r2
				phase_delta =
 8006674:	1a52      	subls	r2, r2, r1
			if (phase_delta < phase_tolerance) {
 8006676:	9904      	ldr	r1, [sp, #16]
				phase_delta =
 8006678:	b292      	uxth	r2, r2
			if (phase_delta < phase_tolerance) {
 800667a:	428a      	cmp	r2, r1
 800667c:	d223      	bcs.n	80066c6 <VL53L1_hist_phase_consistency_check+0xfe>
				if (status == VL53L1_ERROR_NONE)
 800667e:	b9f0      	cbnz	r0, 80066be <VL53L1_hist_phase_consistency_check+0xf6>
					VL53L1_hist_events_consistency_check(
 8006680:	aa08      	add	r2, sp, #32
 8006682:	fb0a 6303 	mla	r3, sl, r3, r6
 8006686:	f10d 0b1f 	add.w	fp, sp, #31
 800668a:	9202      	str	r2, [sp, #8]
 800668c:	aa09      	add	r2, sp, #36	; 0x24
 800668e:	e9cd 4200 	strd	r4, r2, [sp]
 8006692:	ee18 1a90 	vmov	r1, s17
 8006696:	ee19 2a10 	vmov	r2, s18
 800669a:	ee18 0a10 	vmov	r0, s16
 800669e:	f8cd b00c 	str.w	fp, [sp, #12]
 80066a2:	3308      	adds	r3, #8
 80066a4:	f7ff febb 	bl	800641e <VL53L1_hist_events_consistency_check>
				if (status == VL53L1_ERROR_NONE &&
 80066a8:	b948      	cbnz	r0, 80066be <VL53L1_hist_phase_consistency_check+0xf6>
 80066aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80066ae:	2b09      	cmp	r3, #9
 80066b0:	d105      	bne.n	80066be <VL53L1_hist_phase_consistency_check+0xf6>
					VL53L1_hist_merged_pulse_check(
 80066b2:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80066b6:	465a      	mov	r2, fp
 80066b8:	4621      	mov	r1, r4
 80066ba:	f7ff ff6c 	bl	8006596 <VL53L1_hist_merged_pulse_check>
				prange_curr->VL53L1_p_002[lc].range_status =
 80066be:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80066c2:	f888 305e 	strb.w	r3, [r8, #94]	; 0x5e
		for (p = 0; p < prange_prev->active_objects; p++) {
 80066c6:	f109 0901 	add.w	r9, r9, #1
 80066ca:	e7c4      	b.n	8006656 <VL53L1_hist_phase_consistency_check+0x8e>
		return status;
 80066cc:	4628      	mov	r0, r5
 80066ce:	e7a5      	b.n	800661c <VL53L1_hist_phase_consistency_check+0x54>
 80066d0:	9804      	ldr	r0, [sp, #16]
 80066d2:	e7a3      	b.n	800661c <VL53L1_hist_phase_consistency_check+0x54>

080066d4 <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	4605      	mov	r5, r0

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
	min_spad_count =
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 80066d8:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
{
 80066dc:	b086      	sub	sp, #24
	int32_t   events_delta     = 0;
 80066de:	2400      	movs	r4, #0
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 80066e0:	2809      	cmp	r0, #9
	int32_t   events_tolerance = 0;
 80066e2:	e9cd 4404 	strd	r4, r4, [sp, #16]
{
 80066e6:	460e      	mov	r6, r1
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 80066e8:	d002      	beq.n	80066f0 <VL53L1_hist_xmonitor_consistency_check+0x1c>
 80066ea:	3813      	subs	r0, #19
 80066ec:	2801      	cmp	r0, #1
 80066ee:	d81b      	bhi.n	8006728 <VL53L1_hist_xmonitor_consistency_check+0x54>
		prange_curr->range_status ==
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 80066f0:	f892 0042 	ldrb.w	r0, [r2, #66]	; 0x42
 80066f4:	2809      	cmp	r0, #9
 80066f6:	d002      	beq.n	80066fe <VL53L1_hist_xmonitor_consistency_check+0x2a>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 80066f8:	3813      	subs	r0, #19
 80066fa:	2801      	cmp	r0, #1
 80066fc:	d814      	bhi.n	8006728 <VL53L1_hist_xmonitor_consistency_check+0x54>
			prange_prev->xmonitor.range_status ==
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 80066fe:	461c      	mov	r4, r3
	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8006700:	f895 02bc 	ldrb.w	r0, [r5, #700]	; 0x2bc
	min_spad_count =
 8006704:	f8b5 12a4 	ldrh.w	r1, [r5, #676]	; 0x2a4
			prange_curr->range_status =
 8006708:	2509      	movs	r5, #9
 800670a:	f804 5f4a 	strb.w	r5, [r4, #74]!
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800670e:	9403      	str	r4, [sp, #12]
 8006710:	ac04      	add	r4, sp, #16
 8006712:	9402      	str	r4, [sp, #8]
 8006714:	ac05      	add	r4, sp, #20
 8006716:	e9cd 3400 	strd	r3, r4, [sp]
 800671a:	f102 0338 	add.w	r3, r2, #56	; 0x38
 800671e:	4632      	mov	r2, r6
 8006720:	f7ff fe7d 	bl	800641e <VL53L1_hist_events_consistency_check>

		}
	}

	return status;
}
 8006724:	b006      	add	sp, #24
 8006726:	bd70      	pop	{r4, r5, r6, pc}
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006728:	2000      	movs	r0, #0
 800672a:	e7fb      	b.n	8006724 <VL53L1_hist_xmonitor_consistency_check+0x50>

0800672c <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800672c:	b538      	push	{r3, r4, r5, lr}
	uint32_t  wrap_dmax_phase      = 0;
	uint32_t  range_mm             = 0;

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	8013      	strh	r3, [r2, #0]
{
 8006732:	4605      	mov	r5, r0


	if (pcurrent->VL53L1_p_019 != 0) {
 8006734:	f8b1 0086 	ldrh.w	r0, [r1, #134]	; 0x86
{
 8006738:	4614      	mov	r4, r2
	if (pcurrent->VL53L1_p_019 != 0) {
 800673a:	b148      	cbz	r0, 8006750 <VL53L1_hist_wrap_dmax+0x24>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800673c:	f001 f82a 	bl	8007794 <VL53L1_calc_pll_period_mm>
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8006740:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
		wrap_dmax_phase =
 8006744:	021b      	lsls	r3, r3, #8



		range_mm = wrap_dmax_phase * pll_period_mm;
 8006746:	4358      	muls	r0, r3
		range_mm = (range_mm + (1<<14)) >> 15;
 8006748:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800674c:	0bc0      	lsrs	r0, r0, #15

		*pwrap_dmax_mm = (int16_t)range_mm;
 800674e:	8020      	strh	r0, [r4, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006750:	2000      	movs	r0, #0
 8006752:	bd38      	pop	{r3, r4, r5, pc}

08006754 <VL53L1_encode_row_col>:
	uint8_t  col,
	uint8_t *pspad_number)
{


	if (row > 7)
 8006754:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15-row);
 8006756:	bf8b      	itete	hi
 8006758:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	else
		*pspad_number = ((15-col) << 3) + row;
 800675c:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15-row);
 8006760:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15-col) << 3) + row;
 8006762:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 8006766:	b2c0      	uxtb	r0, r0
 8006768:	7010      	strb	r0, [r2, #0]

}
 800676a:	4770      	bx	lr

0800676c <VL53L1_encode_zone_size>:
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{


	*pencoded_xy_size = (height << 4) + width;
 800676c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006770:	7011      	strb	r1, [r2, #0]

}
 8006772:	4770      	bx	lr

08006774 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8006774:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006776:	460c      	mov	r4, r1
 8006778:	4616      	mov	r6, r2
 800677a:	461d      	mov	r5, r3
	uint8_t width    = 0;
	uint8_t height   = 0;



	VL53L1_decode_row_col(
 800677c:	f10d 0206 	add.w	r2, sp, #6
	uint8_t x_centre = 0;
 8006780:	2300      	movs	r3, #0
	VL53L1_decode_row_col(
 8006782:	f10d 0107 	add.w	r1, sp, #7
	uint8_t x_centre = 0;
 8006786:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t y_centre = 0;
 800678a:	f88d 3007 	strb.w	r3, [sp, #7]
	VL53L1_decode_row_col(
 800678e:	f001 f8f9 	bl	8007984 <VL53L1_decode_row_col>
	*pheight = encoded_xy_size >> 4;
 8006792:	0923      	lsrs	r3, r4, #4
	*pwidth  = encoded_xy_size & 0x0F;
 8006794:	f004 010f 	and.w	r1, r4, #15
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8006798:	f89d 4006 	ldrb.w	r4, [sp, #6]
 800679c:	9a06      	ldr	r2, [sp, #24]
 800679e:	1c48      	adds	r0, r1, #1
 80067a0:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
 80067a4:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 80067a8:	8030      	strh	r0, [r6, #0]
	if (*px_ll < 0)
		*px_ll = 0;

	*px_ur = *px_ll + (int16_t)width;
 80067aa:	4408      	add	r0, r1
 80067ac:	b280      	uxth	r0, r0
 80067ae:	280f      	cmp	r0, #15
 80067b0:	bf28      	it	cs
 80067b2:	200f      	movcs	r0, #15
 80067b4:	8010      	strh	r0, [r2, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 80067b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80067ba:	1c59      	adds	r1, r3, #1
 80067bc:	eba2 0251 	sub.w	r2, r2, r1, lsr #1
 80067c0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80067c4:	802a      	strh	r2, [r5, #0]
	if (*py_ll < 0)
		*py_ll = 0;

	*py_ur = *py_ll + (int16_t)height;
 80067c6:	441a      	add	r2, r3
 80067c8:	b292      	uxth	r2, r2
 80067ca:	9b07      	ldr	r3, [sp, #28]
 80067cc:	2a0f      	cmp	r2, #15
 80067ce:	bf28      	it	cs
 80067d0:	220f      	movcs	r2, #15
 80067d2:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
}
 80067d4:	b002      	add	sp, #8
 80067d6:	bd70      	pop	{r4, r5, r6, pc}

080067d8 <VL53L1_is_aperture_location>:

	uint8_t is_aperture = 0;
	uint8_t mod_row     = row % 4;
	uint8_t mod_col     = col % 4;

	if (mod_row == 0 && mod_col == 2)
 80067d8:	f010 0003 	ands.w	r0, r0, #3
	uint8_t mod_col     = col % 4;
 80067dc:	f001 0103 	and.w	r1, r1, #3
	if (mod_row == 0 && mod_col == 2)
 80067e0:	d103      	bne.n	80067ea <VL53L1_is_aperture_location+0x12>
	uint8_t is_aperture = 0;
 80067e2:	1e8b      	subs	r3, r1, #2
 80067e4:	4258      	negs	r0, r3
 80067e6:	4158      	adcs	r0, r3
 80067e8:	4770      	bx	lr
		is_aperture = 1;

	if (mod_row == 2 && mod_col == 0)
 80067ea:	2802      	cmp	r0, #2
	uint8_t is_aperture = 0;
 80067ec:	bf06      	itte	eq
 80067ee:	fab1 f081 	clzeq	r0, r1
 80067f2:	0940      	lsreq	r0, r0, #5
 80067f4:	2000      	movne	r0, #0
		is_aperture = 1;

	return is_aperture;
}
 80067f6:	4770      	bx	lr

080067f8 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 80067f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	b088      	sub	sp, #32
 80067fe:	4698      	mov	r8, r3

	uint8_t   is_aperture = 0;



	VL53L1_decode_zone_limits(
 8006800:	f10d 031e 	add.w	r3, sp, #30
{
 8006804:	9e10      	ldr	r6, [sp, #64]	; 0x40
	VL53L1_decode_zone_limits(
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	ab07      	add	r3, sp, #28
	int16_t   zone_x_ll = 0;
 800680a:	2400      	movs	r4, #0
	VL53L1_decode_zone_limits(
 800680c:	9300      	str	r3, [sp, #0]
{
 800680e:	4617      	mov	r7, r2
	VL53L1_decode_zone_limits(
 8006810:	f10d 031a 	add.w	r3, sp, #26
 8006814:	aa06      	add	r2, sp, #24
	int16_t   zone_x_ll = 0;
 8006816:	f8ad 4018 	strh.w	r4, [sp, #24]
	int16_t   zone_y_ll = 0;
 800681a:	f8ad 401a 	strh.w	r4, [sp, #26]
	int16_t   zone_x_ur = 0;
 800681e:	f8ad 401c 	strh.w	r4, [sp, #28]
	int16_t   zone_y_ur = 0;
 8006822:	f8ad 401e 	strh.w	r4, [sp, #30]
	uint8_t   spad_number = 0;
 8006826:	f88d 4017 	strb.w	r4, [sp, #23]
	VL53L1_decode_zone_limits(
 800682a:	f7ff ffa3 	bl	8006774 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800682e:	8034      	strh	r4, [r6, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8006830:	f9bd 401a 	ldrsh.w	r4, [sp, #26]
	*pbit_mask    = 0x01 << *pbit_index;
 8006834:	f04f 0901 	mov.w	r9, #1
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8006838:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800683c:	42a3      	cmp	r3, r4
 800683e:	da02      	bge.n	8006846 <VL53L1_calc_max_effective_spads+0x4e>
					*pmax_effective_spads += 0x0100;

			}
		}
	}
}
 8006840:	b008      	add	sp, #32
 8006842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8006846:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 800684a:	fa5f fa84 	uxtb.w	sl, r4
 800684e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8006852:	42ab      	cmp	r3, r5
 8006854:	da02      	bge.n	800685c <VL53L1_calc_max_effective_spads+0x64>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8006856:	3401      	adds	r4, #1
 8006858:	b224      	sxth	r4, r4
 800685a:	e7ed      	b.n	8006838 <VL53L1_calc_max_effective_spads+0x40>
			VL53L1_encode_row_col(
 800685c:	b2e9      	uxtb	r1, r5
 800685e:	f10d 0217 	add.w	r2, sp, #23
 8006862:	4650      	mov	r0, sl
 8006864:	9103      	str	r1, [sp, #12]
 8006866:	f7ff ff75 	bl	8006754 <VL53L1_encode_row_col>
			VL53L1_spad_number_to_byte_bit_index(
 800686a:	f89d 3017 	ldrb.w	r3, [sp, #23]
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800686e:	08da      	lsrs	r2, r3, #3
	*pbit_mask    = 0x01 << *pbit_index;
 8006870:	f003 0307 	and.w	r3, r3, #7
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8006874:	5cba      	ldrb	r2, [r7, r2]
	*pbit_mask    = 0x01 << *pbit_index;
 8006876:	fa09 f303 	lsl.w	r3, r9, r3
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800687a:	421a      	tst	r2, r3
 800687c:	d007      	beq.n	800688e <VL53L1_calc_max_effective_spads+0x96>
				is_aperture = VL53L1_is_aperture_location(
 800687e:	9903      	ldr	r1, [sp, #12]
 8006880:	4650      	mov	r0, sl
 8006882:	f7ff ffa9 	bl	80067d8 <VL53L1_is_aperture_location>
				if (is_aperture > 0)
 8006886:	8831      	ldrh	r1, [r6, #0]
 8006888:	b120      	cbz	r0, 8006894 <VL53L1_calc_max_effective_spads+0x9c>
					*pmax_effective_spads +=
 800688a:	4441      	add	r1, r8
					*pmax_effective_spads += 0x0100;
 800688c:	8031      	strh	r1, [r6, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800688e:	3501      	adds	r5, #1
 8006890:	b22d      	sxth	r5, r5
 8006892:	e7dc      	b.n	800684e <VL53L1_calc_max_effective_spads+0x56>
					*pmax_effective_spads += 0x0100;
 8006894:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006898:	e7f8      	b.n	800688c <VL53L1_calc_max_effective_spads+0x94>

0800689a <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800689a:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
 800689e:	b08a      	sub	sp, #40	; 0x28
 80068a0:	469a      	mov	sl, r3
	uint8_t   is_aperture = 0;
	uint16_t  spad_attenuation = 0;



	VL53L1_decode_zone_limits(
 80068a2:	f10d 031e 	add.w	r3, sp, #30
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	ab07      	add	r3, sp, #28
	int16_t   mm_x_ll   = 0;
 80068aa:	2400      	movs	r4, #0
{
 80068ac:	4615      	mov	r5, r2
	VL53L1_decode_zone_limits(
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	aa06      	add	r2, sp, #24
 80068b2:	f10d 031a 	add.w	r3, sp, #26
{
 80068b6:	e9dd 7614 	ldrd	r7, r6, [sp, #80]	; 0x50
	int16_t   mm_x_ll   = 0;
 80068ba:	f8ad 4018 	strh.w	r4, [sp, #24]
	int16_t   mm_y_ll   = 0;
 80068be:	f8ad 401a 	strh.w	r4, [sp, #26]
	int16_t   mm_x_ur   = 0;
 80068c2:	f8ad 401c 	strh.w	r4, [sp, #28]
	int16_t   mm_y_ur   = 0;
 80068c6:	f8ad 401e 	strh.w	r4, [sp, #30]
	int16_t   zone_x_ll = 0;
 80068ca:	f8ad 4020 	strh.w	r4, [sp, #32]
	int16_t   zone_y_ll = 0;
 80068ce:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
	int16_t   zone_x_ur = 0;
 80068d2:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	int16_t   zone_y_ur = 0;
 80068d6:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
	uint8_t   spad_number = 0;
 80068da:	f88d 4017 	strb.w	r4, [sp, #23]
{
 80068de:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
	VL53L1_decode_zone_limits(
 80068e2:	f7ff ff47 	bl	8006774 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 80068e6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	ab09      	add	r3, sp, #36	; 0x24
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	4651      	mov	r1, sl
 80068f2:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80068f6:	aa08      	add	r2, sp, #32
 80068f8:	4628      	mov	r0, r5
 80068fa:	f7ff ff3b 	bl	8006774 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 80068fe:	803c      	strh	r4, [r7, #0]
	*pmm_outer_effective_spads = 0;
 8006900:	8034      	strh	r4, [r6, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8006902:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
	*pbit_mask    = 0x01 << *pbit_index;
 8006906:	f04f 0a01 	mov.w	sl, #1
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800690a:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800690e:	42a3      	cmp	r3, r4
 8006910:	da02      	bge.n	8006918 <VL53L1_calc_mm_effective_spads+0x7e>
					*pmm_outer_effective_spads +=
						spad_attenuation;
			}
		}
	}
}
 8006912:	b00a      	add	sp, #40	; 0x28
 8006914:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8006918:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 800691c:	fa5f fb84 	uxtb.w	fp, r4
 8006920:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8006924:	42ab      	cmp	r3, r5
 8006926:	da02      	bge.n	800692e <VL53L1_calc_mm_effective_spads+0x94>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8006928:	3401      	adds	r4, #1
 800692a:	b224      	sxth	r4, r4
 800692c:	e7ed      	b.n	800690a <VL53L1_calc_mm_effective_spads+0x70>
			VL53L1_encode_row_col(
 800692e:	b2e9      	uxtb	r1, r5
 8006930:	f10d 0217 	add.w	r2, sp, #23
 8006934:	4658      	mov	r0, fp
 8006936:	9103      	str	r1, [sp, #12]
 8006938:	f7ff ff0c 	bl	8006754 <VL53L1_encode_row_col>
			VL53L1_spad_number_to_byte_bit_index(
 800693c:	f89d 3017 	ldrb.w	r3, [sp, #23]
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8006940:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006942:	08da      	lsrs	r2, r3, #3
	*pbit_mask    = 0x01 << *pbit_index;
 8006944:	f003 0307 	and.w	r3, r3, #7
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8006948:	5c8a      	ldrb	r2, [r1, r2]
	*pbit_mask    = 0x01 << *pbit_index;
 800694a:	fa0a f303 	lsl.w	r3, sl, r3
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800694e:	421a      	tst	r2, r3
 8006950:	d01b      	beq.n	800698a <VL53L1_calc_mm_effective_spads+0xf0>
				is_aperture = VL53L1_is_aperture_location(
 8006952:	9903      	ldr	r1, [sp, #12]
 8006954:	4658      	mov	r0, fp
 8006956:	f7ff ff3f 	bl	80067d8 <VL53L1_is_aperture_location>
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800695a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
					spad_attenuation = 0x0100;
 800695e:	2800      	cmp	r0, #0
 8006960:	bf14      	ite	ne
 8006962:	464b      	movne	r3, r9
 8006964:	f44f 7380 	moveq.w	r3, #256	; 0x100
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8006968:	42aa      	cmp	r2, r5
 800696a:	dc11      	bgt.n	8006990 <VL53L1_calc_mm_effective_spads+0xf6>
 800696c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8006970:	42aa      	cmp	r2, r5
 8006972:	db0d      	blt.n	8006990 <VL53L1_calc_mm_effective_spads+0xf6>
 8006974:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8006978:	42a2      	cmp	r2, r4
 800697a:	dc09      	bgt.n	8006990 <VL53L1_calc_mm_effective_spads+0xf6>
					y >= mm_y_ll && y <= mm_y_ur)
 800697c:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8006980:	42a2      	cmp	r2, r4
 8006982:	db05      	blt.n	8006990 <VL53L1_calc_mm_effective_spads+0xf6>
					*pmm_inner_effective_spads +=
 8006984:	883a      	ldrh	r2, [r7, #0]
 8006986:	4413      	add	r3, r2
 8006988:	803b      	strh	r3, [r7, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800698a:	3501      	adds	r5, #1
 800698c:	b22d      	sxth	r5, r5
 800698e:	e7c7      	b.n	8006920 <VL53L1_calc_mm_effective_spads+0x86>
					*pmm_outer_effective_spads +=
 8006990:	8832      	ldrh	r2, [r6, #0]
 8006992:	4413      	add	r3, r2
 8006994:	8033      	strh	r3, [r6, #0]
 8006996:	e7f8      	b.n	800698a <VL53L1_calc_mm_effective_spads+0xf0>

08006998 <VL53L1_hist_combine_mm1_mm2_offsets>:
{
 8006998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800699c:	b089      	sub	sp, #36	; 0x24
 800699e:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
 80069a2:	460d      	mov	r5, r1
 80069a4:	4619      	mov	r1, r3
	uint16_t max_mm_inner_effective_spads = 0;
 80069a6:	2300      	movs	r3, #0
{
 80069a8:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
	uint16_t max_mm_inner_effective_spads = 0;
 80069ac:	f8ad 3018 	strh.w	r3, [sp, #24]
	uint16_t max_mm_outer_effective_spads = 0;
 80069b0:	f8ad 301a 	strh.w	r3, [sp, #26]
	uint16_t mm_inner_effective_spads     = 0;
 80069b4:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint16_t mm_outer_effective_spads     = 0;
 80069b8:	f8ad 301e 	strh.w	r3, [sp, #30]
	VL53L1_calc_mm_effective_spads(
 80069bc:	f10d 031a 	add.w	r3, sp, #26
 80069c0:	9303      	str	r3, [sp, #12]
 80069c2:	ab06      	add	r3, sp, #24
 80069c4:	e9cd 9301 	strd	r9, r3, [sp, #4]
{
 80069c8:	4606      	mov	r6, r0
	VL53L1_calc_mm_effective_spads(
 80069ca:	f8cd 8000 	str.w	r8, [sp]
{
 80069ce:	4610      	mov	r0, r2
	VL53L1_calc_mm_effective_spads(
 80069d0:	23ff      	movs	r3, #255	; 0xff
 80069d2:	22c7      	movs	r2, #199	; 0xc7
 80069d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069d8:	f7ff ff5f 	bl	800689a <VL53L1_calc_mm_effective_spads>
	if ((max_mm_inner_effective_spads == 0) ||
 80069dc:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80069e0:	b384      	cbz	r4, 8006a44 <VL53L1_hist_combine_mm1_mm2_offsets+0xac>
 80069e2:	f8bd 401a 	ldrh.w	r4, [sp, #26]
 80069e6:	b36c      	cbz	r4, 8006a44 <VL53L1_hist_combine_mm1_mm2_offsets+0xac>
	VL53L1_calc_mm_effective_spads(
 80069e8:	f10d 031e 	add.w	r3, sp, #30
 80069ec:	9303      	str	r3, [sp, #12]
 80069ee:	ab07      	add	r3, sp, #28
 80069f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069f4:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80069f8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80069fc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8006a00:	f8cd 8000 	str.w	r8, [sp]
 8006a04:	f7ff ff49 	bl	800689a <VL53L1_calc_mm_effective_spads>
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8006a08:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	scaled_mm1_peak_rate_mcps  =
 8006a0c:	88bb      	ldrh	r3, [r7, #4]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8006a0e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8006a12:	4353      	muls	r3, r2
	scaled_mm2_peak_rate_mcps  =
 8006a14:	88fa      	ldrh	r2, [r7, #6]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8006a16:	434a      	muls	r2, r1
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8006a18:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8006a1c:	fbb3 f3f1 	udiv	r3, r3, r1
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8006a20:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8006a24:	fbb2 f2f1 	udiv	r2, r2, r1
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8006a28:	fb02 f005 	mul.w	r0, r2, r5
 8006a2c:	fb03 0006 	mla	r0, r3, r6, r0
	if (tmp1 != 0)
 8006a30:	189b      	adds	r3, r3, r2
 8006a32:	d002      	beq.n	8006a3a <VL53L1_hist_combine_mm1_mm2_offsets+0xa2>
		tmp0 = (tmp0 * 4) / tmp1;
 8006a34:	0080      	lsls	r0, r0, #2
 8006a36:	fb90 f0f3 	sdiv	r0, r0, r3
	*prange_offset_mm = (int16_t)tmp0;
 8006a3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a3c:	8018      	strh	r0, [r3, #0]
}
 8006a3e:	b009      	add	sp, #36	; 0x24
 8006a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int32_t tmp0 = 0;
 8006a44:	4620      	mov	r0, r4
 8006a46:	e7f8      	b.n	8006a3a <VL53L1_hist_combine_mm1_mm2_offsets+0xa2>

08006a48 <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4604      	mov	r4, r0

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 8006a4c:	4610      	mov	r0, r2
{
 8006a4e:	461d      	mov	r5, r3
	VL53L1_init_system_results(psys);
 8006a50:	f7ff fa04 	bl	8005e5c <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8006a54:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8006a58:	7013      	strb	r3, [r2, #0]
	psys->result__range_status     = phist->active_results;
 8006a5a:	7c8b      	ldrb	r3, [r1, #18]
 8006a5c:	7053      	strb	r3, [r2, #1]
	psys->result__report_status    = pbins->result__report_status;
 8006a5e:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
 8006a62:	7090      	strb	r0, [r2, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8006a64:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
 8006a68:	70d0      	strb	r0, [r2, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 8006a6a:	3114      	adds	r1, #20

	for (i = 0; i < phist->active_results; i++) {
 8006a6c:	2400      	movs	r4, #0
 8006a6e:	42a3      	cmp	r3, r4
 8006a70:	d100      	bne.n	8006a74 <VL53L1_hist_copy_results_to_sys_and_core+0x2c>
		pdata++;
	}

	LOG_FUNCTION_END(0);

}
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
		switch (i) {
 8006a74:	b12c      	cbz	r4, 8006a82 <VL53L1_hist_copy_results_to_sys_and_core+0x3a>
 8006a76:	2c01      	cmp	r4, #1
 8006a78:	d01e      	beq.n	8006ab8 <VL53L1_hist_copy_results_to_sys_and_core+0x70>
	for (i = 0; i < phist->active_results; i++) {
 8006a7a:	3401      	adds	r4, #1
		pdata++;
 8006a7c:	314c      	adds	r1, #76	; 0x4c
	for (i = 0; i < phist->active_results; i++) {
 8006a7e:	b2e4      	uxtb	r4, r4
 8006a80:	e7f5      	b.n	8006a6e <VL53L1_hist_copy_results_to_sys_and_core+0x26>
					pdata->VL53L1_p_006;
 8006a82:	8ac8      	ldrh	r0, [r1, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8006a84:	8090      	strh	r0, [r2, #4]
					pdata->peak_signal_count_rate_mcps;
 8006a86:	8e08      	ldrh	r0, [r1, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8006a88:	80d0      	strh	r0, [r2, #6]
					pdata->avg_signal_count_rate_mcps;
 8006a8a:	8e48      	ldrh	r0, [r1, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8006a8c:	82d0      	strh	r0, [r2, #22]
					pdata->ambient_count_rate_mcps;
 8006a8e:	8e88      	ldrh	r0, [r1, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8006a90:	8110      	strh	r0, [r2, #8]
			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 8006a92:	8f88      	ldrh	r0, [r1, #60]	; 0x3c
 8006a94:	8150      	strh	r0, [r2, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 8006a96:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8006a9a:	8190      	strh	r0, [r2, #12]
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 8006a9c:	f8b1 0046 	ldrh.w	r0, [r1, #70]	; 0x46
 8006aa0:	81d0      	strh	r0, [r2, #14]
			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8006aa2:	8a88      	ldrh	r0, [r1, #20]
 8006aa4:	8410      	strh	r0, [r2, #32]
					pdata->VL53L1_p_021;
 8006aa6:	6a88      	ldr	r0, [r1, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 8006aa8:	6068      	str	r0, [r5, #4]
					pdata->VL53L1_p_013;
 8006aaa:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8006aac:	60a8      	str	r0, [r5, #8]
					pdata->total_periods_elapsed;
 8006aae:	6988      	ldr	r0, [r1, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 8006ab0:	60e8      	str	r0, [r5, #12]
					pdata->VL53L1_p_020;
 8006ab2:	6a48      	ldr	r0, [r1, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8006ab4:	6028      	str	r0, [r5, #0]
			break;
 8006ab6:	e7e0      	b.n	8006a7a <VL53L1_hist_copy_results_to_sys_and_core+0x32>
				pdata->VL53L1_p_006;
 8006ab8:	8ac8      	ldrh	r0, [r1, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 8006aba:	8310      	strh	r0, [r2, #24]
				pdata->peak_signal_count_rate_mcps;
 8006abc:	8e08      	ldrh	r0, [r1, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 8006abe:	8350      	strh	r0, [r2, #26]
				pdata->ambient_count_rate_mcps;
 8006ac0:	8e88      	ldrh	r0, [r1, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 8006ac2:	8390      	strh	r0, [r2, #28]
			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 8006ac4:	8f88      	ldrh	r0, [r1, #60]	; 0x3c
 8006ac6:	83d0      	strh	r0, [r2, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 8006ac8:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8006acc:	8410      	strh	r0, [r2, #32]
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 8006ace:	f8b1 0046 	ldrh.w	r0, [r1, #70]	; 0x46
 8006ad2:	8450      	strh	r0, [r2, #34]	; 0x22
				pdata->VL53L1_p_021;
 8006ad4:	6a88      	ldr	r0, [r1, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 8006ad6:	6168      	str	r0, [r5, #20]
				pdata->VL53L1_p_013;
 8006ad8:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 8006ada:	61a8      	str	r0, [r5, #24]
				pdata->total_periods_elapsed;
 8006adc:	6988      	ldr	r0, [r1, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 8006ade:	61e8      	str	r0, [r5, #28]
				pdata->VL53L1_p_020;
 8006ae0:	6a48      	ldr	r0, [r1, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 8006ae2:	6128      	str	r0, [r5, #16]
			break;
 8006ae4:	e7c9      	b.n	8006a7a <VL53L1_hist_copy_results_to_sys_and_core+0x32>

08006ae6 <VL53L1_save_cfg_data>:
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 8006ae6:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32

	pzone_dyn_cfg->expected_stream_count =
 8006aea:	f500 5204 	add.w	r2, r0, #8448	; 0x2100
 8006aee:	3218      	adds	r2, #24
 8006af0:	210a      	movs	r1, #10
 8006af2:	fb01 2303 	mla	r3, r1, r3, r2
 8006af6:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8006afa:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
			pdev->ll_state.cfg_stream_count;

	pzone_dyn_cfg->expected_gph_id =
 8006afe:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 8006b02:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
			pdev->ll_state.cfg_gph_id;

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 8006b06:	f890 23c7 	ldrb.w	r2, [r0, #967]	; 0x3c7
 8006b0a:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
		pdynamic->roi_config__user_roi_centre_spad;

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 8006b0e:	f890 23c8 	ldrb.w	r2, [r0, #968]	; 0x3c8
 8006b12:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
		pdynamic->roi_config__user_roi_requested_global_xy_size;

	LOG_FUNCTION_END(status);

	return status;
}
 8006b16:	2000      	movs	r0, #0
 8006b18:	4770      	bx	lr

08006b1a <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 8006b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 8006b1c:	f8b0 336a 	ldrh.w	r3, [r0, #874]	; 0x36a
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 8006b20:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 8006b24:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 8006b28:	7c8f      	ldrb	r7, [r1, #18]
 8006b2a:	2400      	movs	r4, #0

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 8006b2c:	314a      	adds	r1, #74	; 0x4a
 8006b2e:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
	for (i = 1; i < presults->active_results; i++) {
 8006b32:	3401      	adds	r4, #1
 8006b34:	b2e6      	uxtb	r6, r4
 8006b36:	42b7      	cmp	r7, r6
 8006b38:	d811      	bhi.n	8006b5e <VL53L1_dynamic_zone_update+0x44>
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;

	}

	if (max_total_rate_per_spads == 0) {
 8006b3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b3e:	b1aa      	cbz	r2, 8006b6c <VL53L1_dynamic_zone_update+0x52>

		temp = 0xFFFF;
	} else {

		temp = target_rate << 14;
 8006b40:	039b      	lsls	r3, r3, #14
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 8006b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b46:	428b      	cmp	r3, r1
 8006b48:	bf28      	it	cs
 8006b4a:	460b      	movcs	r3, r1
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 8006b4c:	f500 500a 	add.w	r0, r0, #8832	; 0x2280
 8006b50:	220a      	movs	r2, #10
 8006b52:	3038      	adds	r0, #56	; 0x38
 8006b54:	fb02 0005 	mla	r0, r2, r5, r0
			(uint16_t)temp;
 8006b58:	80c3      	strh	r3, [r0, #6]
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
}
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 8006b5e:	fb0c f604 	mul.w	r6, ip, r4
 8006b62:	5b8e      	ldrh	r6, [r1, r6]
 8006b64:	42b2      	cmp	r2, r6
 8006b66:	bf38      	it	cc
 8006b68:	4632      	movcc	r2, r6
	for (i = 1; i < presults->active_results; i++) {
 8006b6a:	e7e2      	b.n	8006b32 <VL53L1_dynamic_zone_update+0x18>
		temp = 0xFFFF;
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	e7ed      	b.n	8006b4c <VL53L1_dynamic_zone_update+0x32>

08006b70 <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4601      	mov	r1, r0
	VL53L1_Error status = VL53L1_ERROR_NONE;

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 8006b74:	f500 7054 	add.w	r0, r0, #848	; 0x350
	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8006b78:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 8006b7c:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8006b80:	440a      	add	r2, r1
	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 8006b82:	f003 0301 	and.w	r3, r3, #1
	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8006b86:	f892 2142 	ldrb.w	r2, [r2, #322]	; 0x142
 8006b8a:	2a01      	cmp	r2, #1
 8006b8c:	d114      	bne.n	8006bb8 <VL53L1_multizone_hist_bins_update+0x48>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 8006b8e:	f891 50c5 	ldrb.w	r5, [r1, #197]	; 0xc5
 8006b92:	f891 40c6 	ldrb.w	r4, [r1, #198]	; 0xc6
 8006b96:	f891 20c7 	ldrb.w	r2, [r1, #199]	; 0xc7
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 8006b9a:	b9fb      	cbnz	r3, 8006bdc <VL53L1_multizone_hist_bins_update+0x6c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8006b9c:	f881 5351 	strb.w	r5, [r1, #849]	; 0x351
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8006ba0:	f881 4352 	strb.w	r4, [r1, #850]	; 0x352
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8006ba4:	f881 2353 	strb.w	r2, [r1, #851]	; 0x353
	}



	if (status == VL53L1_ERROR_NONE) {
		VL53L1_copy_hist_bins_to_static_cfg(
 8006ba8:	f501 7268 	add.w	r2, r1, #928	; 0x3a0
 8006bac:	f201 316a 	addw	r1, r1, #874	; 0x36a
 8006bb0:	f7ff f845 	bl	8005c3e <VL53L1_copy_hist_bins_to_static_cfg>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8006bb8:	2a02      	cmp	r2, #2
 8006bba:	d106      	bne.n	8006bca <VL53L1_multizone_hist_bins_update+0x5a>
		if (!next_range_is_odd_timing) {
 8006bbc:	f891 50cb 	ldrb.w	r5, [r1, #203]	; 0xcb
 8006bc0:	f891 40cc 	ldrb.w	r4, [r1, #204]	; 0xcc
 8006bc4:	f891 20cd 	ldrb.w	r2, [r1, #205]	; 0xcd
 8006bc8:	e7e7      	b.n	8006b9a <VL53L1_multizone_hist_bins_update+0x2a>
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8006bca:	2a03      	cmp	r2, #3
 8006bcc:	d1ec      	bne.n	8006ba8 <VL53L1_multizone_hist_bins_update+0x38>
		if (!next_range_is_odd_timing) {
 8006bce:	f891 50d3 	ldrb.w	r5, [r1, #211]	; 0xd3
 8006bd2:	f891 40d4 	ldrb.w	r4, [r1, #212]	; 0xd4
 8006bd6:	f891 20d5 	ldrb.w	r2, [r1, #213]	; 0xd5
 8006bda:	e7de      	b.n	8006b9a <VL53L1_multizone_hist_bins_update+0x2a>
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8006bdc:	f881 5354 	strb.w	r5, [r1, #852]	; 0x354
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 8006be0:	f881 4355 	strb.w	r4, [r1, #853]	; 0x355
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 8006be4:	f881 2356 	strb.w	r2, [r1, #854]	; 0x356
 8006be8:	e7de      	b.n	8006ba8 <VL53L1_multizone_hist_bins_update+0x38>

08006bea <VL53L1_update_internal_stream_counters>:
	VL53L1_LLDriverData_t  *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 8006bea:	f890 038b 	ldrb.w	r0, [r0, #907]	; 0x38b

	if (stream_divider == 0) {
 8006bee:	b910      	cbnz	r0, 8006bf6 <VL53L1_update_internal_stream_counters+0xc>


		*pinternal_stream_count = external_stream_count;
 8006bf0:	7011      	strb	r1, [r2, #0]
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
}
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	4770      	bx	lr
	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 8006bf6:	7819      	ldrb	r1, [r3, #0]
 8006bf8:	3801      	subs	r0, #1
 8006bfa:	4281      	cmp	r1, r0
 8006bfc:	d109      	bne.n	8006c12 <VL53L1_update_internal_stream_counters+0x28>
		if (*pinternal_stream_count == 0xFF)
 8006bfe:	7811      	ldrb	r1, [r2, #0]
 8006c00:	29ff      	cmp	r1, #255	; 0xff
			*pinternal_stream_count = *pinternal_stream_count + 1;
 8006c02:	bf1a      	itte	ne
 8006c04:	3101      	addne	r1, #1
 8006c06:	b2c9      	uxtbne	r1, r1
			*pinternal_stream_count = 0x80;
 8006c08:	2180      	moveq	r1, #128	; 0x80
 8006c0a:	7011      	strb	r1, [r2, #0]
		*pinternal_stream_count_val = 0;
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e7ef      	b.n	8006bf2 <VL53L1_update_internal_stream_counters+0x8>
		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 8006c12:	3101      	adds	r1, #1
 8006c14:	7019      	strb	r1, [r3, #0]
 8006c16:	e7ec      	b.n	8006bf2 <VL53L1_update_internal_stream_counters+0x8>

08006c18 <VL53L1_update_ll_driver_rd_state>:
{
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	4604      	mov	r4, r0
	if ((pdev->sys_ctrl.system__mode_start &
 8006c1c:	f890 03d0 	ldrb.w	r0, [r0, #976]	; 0x3d0
 8006c20:	f010 00f0 	ands.w	r0, r0, #240	; 0xf0
 8006c24:	d110      	bne.n	8006c48 <VL53L1_update_ll_driver_rd_state+0x30>
		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006c26:	2303      	movs	r3, #3
 8006c28:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c2c:	2302      	movs	r3, #2
		pstate->rd_stream_count  = 0;
 8006c2e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
		pstate->rd_internal_stream_count = 0;
 8006c32:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
		pstate->rd_internal_stream_count_val = 0;
 8006c36:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c3a:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		pstate->rd_timing_status = 0;
 8006c3e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
		pstate->rd_zone_id       = 0;
 8006c42:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8006c46:	bd10      	pop	{r4, pc}
		if (pstate->rd_stream_count == 0xFF)
 8006c48:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8006c4c:	29ff      	cmp	r1, #255	; 0xff
			pstate->rd_stream_count++;
 8006c4e:	bf1a      	itte	ne
 8006c50:	3101      	addne	r1, #1
 8006c52:	b2c9      	uxtbne	r1, r1
			pstate->rd_stream_count = 0x80;
 8006c54:	2180      	moveq	r1, #128	; 0x80
		status = VL53L1_update_internal_stream_counters(Dev,
 8006c56:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8006c5a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8006c5e:	f104 0235 	add.w	r2, r4, #53	; 0x35
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7ff ffc1 	bl	8006bea <VL53L1_update_internal_stream_counters>
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c68:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8006c6c:	f083 0302 	eor.w	r3, r3, #2
 8006c70:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		switch (pstate->rd_device_state) {
 8006c74:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8006c78:	3b03      	subs	r3, #3
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	d846      	bhi.n	8006d0c <VL53L1_update_ll_driver_rd_state+0xf4>
 8006c7e:	e8df f003 	tbb	[pc, r3]
 8006c82:	4503      	.short	0x4503
 8006c84:	3b2d1f45 	.word	0x3b2d1f45
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8006c88:	f894 33ca 	ldrb.w	r3, [r4, #970]	; 0x3ca
 8006c8c:	079b      	lsls	r3, r3, #30
 8006c8e:	d50e      	bpl.n	8006cae <VL53L1_update_ll_driver_rd_state+0x96>
				pstate->rd_device_state =
 8006c90:	2306      	movs	r3, #6
					pstate->rd_device_state =
 8006c92:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
			pstate->rd_stream_count  = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			pstate->rd_internal_stream_count = 0;
 8006c9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			pstate->rd_internal_stream_count_val = 0;
 8006ca0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			pstate->rd_timing_status = 0;
 8006ca4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			pstate->rd_zone_id       = 0;
 8006ca8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			break;
 8006cac:	e7cb      	b.n	8006c46 <VL53L1_update_ll_driver_rd_state+0x2e>
				if (pstate->rd_zone_id >=
 8006cae:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8006cb2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8006cb6:	429a      	cmp	r2, r3
					pstate->rd_device_state =
 8006cb8:	bf2c      	ite	cs
 8006cba:	2308      	movcs	r3, #8
					pstate->rd_device_state =
 8006cbc:	2307      	movcc	r3, #7
 8006cbe:	e7e8      	b.n	8006c92 <VL53L1_update_ll_driver_rd_state+0x7a>
			pstate->rd_stream_count = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			pstate->rd_internal_stream_count = 0;
 8006cc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			pstate->rd_internal_stream_count_val = 0;
 8006cca:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			pstate->rd_zone_id      = 0;
 8006cce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if (pstate->rd_zone_id >=
 8006cd2:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8006cd6:	b15b      	cbz	r3, 8006cf0 <VL53L1_update_ll_driver_rd_state+0xd8>
				pstate->rd_device_state =
 8006cd8:	2307      	movs	r3, #7
 8006cda:	e00a      	b.n	8006cf2 <VL53L1_update_ll_driver_rd_state+0xda>
			pstate->rd_zone_id++;
 8006cdc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
			if (pstate->rd_zone_id >=
 8006ce0:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			pstate->rd_zone_id++;
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
			if (pstate->rd_zone_id >=
 8006ce8:	429a      	cmp	r2, r3
			pstate->rd_zone_id++;
 8006cea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if (pstate->rd_zone_id >=
 8006cee:	d8f3      	bhi.n	8006cd8 <VL53L1_update_ll_driver_rd_state+0xc0>
				pstate->rd_device_state =
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 8006cf6:	e7a6      	b.n	8006c46 <VL53L1_update_ll_driver_rd_state+0x2e>
			pstate->rd_zone_id        = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			pstate->rd_timing_status ^= 0x01;
 8006cfe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8006d02:	f083 0301 	eor.w	r3, r3, #1
 8006d06:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8006d0a:	e7e2      	b.n	8006cd2 <VL53L1_update_ll_driver_rd_state+0xba>
			pstate->rd_device_state  =
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006d12:	2202      	movs	r2, #2
			pstate->rd_stream_count  = 0;
 8006d14:	2300      	movs	r3, #0
 8006d16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			pstate->rd_internal_stream_count = 0;
 8006d1a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			pstate->rd_internal_stream_count_val = 0;
 8006d1e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006d22:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
 8006d26:	e7bd      	b.n	8006ca4 <VL53L1_update_ll_driver_rd_state+0x8c>

08006d28 <VL53L1_update_ll_driver_cfg_state>:
{
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	f890 53d0 	ldrb.w	r5, [r0, #976]	; 0x3d0
	if ((pdev->sys_ctrl.system__mode_start &
 8006d2e:	f015 05f0 	ands.w	r5, r5, #240	; 0xf0
{
 8006d32:	4604      	mov	r4, r0
	if ((pdev->sys_ctrl.system__mode_start &
 8006d34:	d127      	bne.n	8006d86 <VL53L1_update_ll_driver_cfg_state+0x5e>
		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006d36:	2303      	movs	r3, #3
 8006d38:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006d3c:	2302      	movs	r3, #2
		pstate->cfg_stream_count  = 0;
 8006d3e:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
		pstate->cfg_internal_stream_count = 0;
 8006d42:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
		pstate->cfg_internal_stream_count_val = 0;
 8006d46:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006d4a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		pstate->cfg_timing_status = 0;
 8006d4e:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
		pstate->cfg_zone_id       = 0;
 8006d52:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
		prev_cfg_stream_count     = 0;
 8006d56:	462e      	mov	r6, r5
		prev_cfg_gph_id           = 0;
 8006d58:	462f      	mov	r7, r5
	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8006d5a:	4628      	mov	r0, r5
	if (pdev->zone_cfg.active_zones == 0) {
 8006d5c:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f040 808c 	bne.w	8006e7e <VL53L1_update_ll_driver_cfg_state+0x156>
			= prev_cfg_stream_count - 1;
 8006d66:	f504 530a 	add.w	r3, r4, #8832	; 0x2280
 8006d6a:	3338      	adds	r3, #56	; 0x38
 8006d6c:	210a      	movs	r1, #10
 8006d6e:	fb01 3505 	mla	r5, r1, r5, r3
 8006d72:	3e01      	subs	r6, #1
 8006d74:	70ae      	strb	r6, [r5, #2]
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 8006d76:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8006d7a:	fb01 3302 	mla	r3, r1, r2, r3
 8006d7e:	f087 0702 	eor.w	r7, r7, #2
 8006d82:	70df      	strb	r7, [r3, #3]
}
 8006d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8006d86:	f890 602d 	ldrb.w	r6, [r0, #45]	; 0x2d
		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8006d8a:	f890 7030 	ldrb.w	r7, [r0, #48]	; 0x30
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8006d8e:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
		if (pstate->cfg_stream_count == 0xFF)
 8006d92:	2eff      	cmp	r6, #255	; 0xff
			pstate->cfg_stream_count++;
 8006d94:	bf1a      	itte	ne
 8006d96:	1c71      	addne	r1, r6, #1
 8006d98:	b2c9      	uxtbne	r1, r1
			pstate->cfg_stream_count = 0x80;
 8006d9a:	2180      	moveq	r1, #128	; 0x80
		status = VL53L1_update_internal_stream_counters(
 8006d9c:	f100 032f 	add.w	r3, r0, #47	; 0x2f
 8006da0:	f100 022e 	add.w	r2, r0, #46	; 0x2e
 8006da4:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8006da8:	f7ff ff1f 	bl	8006bea <VL53L1_update_internal_stream_counters>
		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006dac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006db0:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
 8006db4:	f083 0302 	eor.w	r3, r3, #2
 8006db8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		switch (pstate->cfg_device_state) {
 8006dbc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d023      	beq.n	8006e0c <VL53L1_update_ll_driver_cfg_state+0xe4>
 8006dc4:	2b05      	cmp	r3, #5
 8006dc6:	d036      	beq.n	8006e36 <VL53L1_update_ll_driver_cfg_state+0x10e>
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d146      	bne.n	8006e5a <VL53L1_update_ll_driver_cfg_state+0x132>
			pstate->cfg_zone_id = 1;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			if (pstate->cfg_zone_id >
 8006dd2:	b93a      	cbnz	r2, 8006de4 <VL53L1_update_ll_driver_cfg_state+0xbc>
				pstate->cfg_timing_status ^= 0x01;
 8006dd4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
				pstate->cfg_zone_id = 0;
 8006dd8:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
				pstate->cfg_timing_status ^= 0x01;
 8006ddc:	f083 0301 	eor.w	r3, r3, #1
 8006de0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8006de4:	f894 238b 	ldrb.w	r2, [r4, #907]	; 0x38b
			pstate->cfg_stream_count = 1;
 8006de8:	2301      	movs	r3, #1
 8006dea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8006dee:	b93a      	cbnz	r2, 8006e00 <VL53L1_update_ll_driver_cfg_state+0xd8>
				pstate->cfg_internal_stream_count = 1;
 8006df0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
				pstate->cfg_internal_stream_count_val = 0;
 8006df4:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
			pstate->cfg_device_state =
 8006df8:	2304      	movs	r3, #4
					pstate->cfg_device_state =
 8006dfa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8006dfe:	e7ad      	b.n	8006d5c <VL53L1_update_ll_driver_cfg_state+0x34>
				pstate->cfg_internal_stream_count = 0;
 8006e00:	2200      	movs	r2, #0
 8006e02:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
				pstate->cfg_internal_stream_count_val = 1;
 8006e06:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8006e0a:	e7f5      	b.n	8006df8 <VL53L1_update_ll_driver_cfg_state+0xd0>
			pstate->cfg_zone_id++;
 8006e0c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8006e10:	3301      	adds	r3, #1
 8006e12:	b2db      	uxtb	r3, r3
			if (pstate->cfg_zone_id >
 8006e14:	4293      	cmp	r3, r2
			pstate->cfg_zone_id++;
 8006e16:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			if (pstate->cfg_zone_id >
 8006e1a:	d99f      	bls.n	8006d5c <VL53L1_update_ll_driver_cfg_state+0x34>
				pstate->cfg_zone_id = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
				pstate->cfg_timing_status ^= 0x01;
 8006e22:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006e26:	f083 0301 	eor.w	r3, r3, #1
 8006e2a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
				if (pdev->zone_cfg.active_zones > 0) {
 8006e2e:	2a00      	cmp	r2, #0
 8006e30:	d094      	beq.n	8006d5c <VL53L1_update_ll_driver_cfg_state+0x34>
					pstate->cfg_device_state =
 8006e32:	2305      	movs	r3, #5
 8006e34:	e7e1      	b.n	8006dfa <VL53L1_update_ll_driver_cfg_state+0xd2>
			pstate->cfg_zone_id++;
 8006e36:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2db      	uxtb	r3, r3
			if (pstate->cfg_zone_id >
 8006e3e:	429a      	cmp	r2, r3
			pstate->cfg_zone_id++;
 8006e40:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			if (pstate->cfg_zone_id >
 8006e44:	d28a      	bcs.n	8006d5c <VL53L1_update_ll_driver_cfg_state+0x34>
				pstate->cfg_zone_id = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
				pstate->cfg_timing_status ^= 0x01;
 8006e4c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006e50:	f083 0301 	eor.w	r3, r3, #1
 8006e54:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 8006e58:	e780      	b.n	8006d5c <VL53L1_update_ll_driver_cfg_state+0x34>
			pstate->cfg_device_state =
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			pstate->cfg_gph_id =
 8006e60:	2202      	movs	r2, #2
			pstate->cfg_stream_count = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
			pstate->cfg_internal_stream_count = 0;
 8006e68:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
			pstate->cfg_internal_stream_count_val = 0;
 8006e6c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			pstate->cfg_gph_id =
 8006e70:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
			pstate->cfg_timing_status = 0;
 8006e74:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
			pstate->cfg_zone_id       = 0;
 8006e78:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			break;
 8006e7c:	e76e      	b.n	8006d5c <VL53L1_update_ll_driver_cfg_state+0x34>
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 8006e7e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006e82:	eb04 0445 	add.w	r4, r4, r5, lsl #1
			= prev_cfg_stream_count;
 8006e86:	f242 23ba 	movw	r3, #8890	; 0x22ba
 8006e8a:	54e6      	strb	r6, [r4, r3]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 8006e8c:	f242 23bb 	movw	r3, #8891	; 0x22bb
 8006e90:	54e7      	strb	r7, [r4, r3]
 8006e92:	e777      	b.n	8006d84 <VL53L1_update_ll_driver_cfg_state+0x5c>

08006e94 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 8006e94:	b510      	push	{r4, lr}
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 8006e96:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d10c      	bne.n	8006eb8 <VL53L1_set_histogram_multizone_initial_bin_config+0x24>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 8006e9e:	7853      	ldrb	r3, [r2, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8006ea0:	704b      	strb	r3, [r1, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 8006ea2:	7890      	ldrb	r0, [r2, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8006ea4:	7088      	strb	r0, [r1, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 8006ea6:	78d0      	ldrb	r0, [r2, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8006ea8:	70c8      	strb	r0, [r1, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8006eaa:	710b      	strb	r3, [r1, #4]
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 8006eac:	7893      	ldrb	r3, [r2, #2]
 8006eae:	714b      	strb	r3, [r1, #5]
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 8006eb0:	78d3      	ldrb	r3, [r2, #3]
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 8006eb2:	718b      	strb	r3, [r1, #6]
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
	}

	LOG_FUNCTION_END(status);
	return status;
}
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	bd10      	pop	{r4, pc}
	} else if (pzone_cfg->bin_config[0] ==
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d108      	bne.n	8006ece <VL53L1_set_histogram_multizone_initial_bin_config+0x3a>
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 8006ebc:	79d4      	ldrb	r4, [r2, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8006ebe:	704c      	strb	r4, [r1, #1]
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 8006ec0:	7a10      	ldrb	r0, [r2, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8006ec2:	7088      	strb	r0, [r1, #2]
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 8006ec4:	7a53      	ldrb	r3, [r2, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8006ec6:	70cb      	strb	r3, [r1, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8006ec8:	710c      	strb	r4, [r1, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 8006eca:	7148      	strb	r0, [r1, #5]
 8006ecc:	e7f1      	b.n	8006eb2 <VL53L1_set_histogram_multizone_initial_bin_config+0x1e>
	} else if (pzone_cfg->bin_config[0] ==
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d1f0      	bne.n	8006eb4 <VL53L1_set_histogram_multizone_initial_bin_config+0x20>
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 8006ed2:	7bd4      	ldrb	r4, [r2, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8006ed4:	704c      	strb	r4, [r1, #1]
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 8006ed6:	7c10      	ldrb	r0, [r2, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8006ed8:	7088      	strb	r0, [r1, #2]
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 8006eda:	7c53      	ldrb	r3, [r2, #17]
 8006edc:	e7f3      	b.n	8006ec6 <VL53L1_set_histogram_multizone_initial_bin_config+0x32>

08006ede <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 8006ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 8006ee2:	f500 5509 	add.w	r5, r0, #8768	; 0x2240
{
 8006ee6:	4604      	mov	r4, r0
	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 8006ee8:	6bae      	ldr	r6, [r5, #56]	; 0x38
	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
		peak_duration_us = 1000;

	temp64a = pxmonitor->VL53L1_p_021 +
 8006eea:	e9d5 3010 	ldrd	r3, r0, [r5, #64]	; 0x40
		peak_duration_us = 1000;
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	bf08      	it	eq
 8006ef2:	f44f 767a 	moveq.w	r6, #1000	; 0x3e8
		pxmonitor->VL53L1_p_020;
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 8006ef6:	f04f 0800 	mov.w	r8, #0
 8006efa:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	temp64a = pxmonitor->VL53L1_p_021 +
 8006efe:	4418      	add	r0, r3
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 8006f00:	4632      	mov	r2, r6
 8006f02:	4643      	mov	r3, r8
 8006f04:	fba0 0107 	umull	r0, r1, r0, r7
 8006f08:	f7f9 fea6 	bl	8000c58 <__aeabi_uldivmod>
 8006f0c:	460b      	mov	r3, r1
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 8006f0e:	fba0 0107 	umull	r0, r1, r0, r7
 8006f12:	fb07 1103 	mla	r1, r7, r3, r1
 8006f16:	4632      	mov	r2, r6
 8006f18:	4643      	mov	r3, r8
 8006f1a:	f7f9 fe9d 	bl	8000c58 <__aeabi_uldivmod>
 8006f1e:	460b      	mov	r3, r1

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 8006f20:	f504 51a0 	add.w	r1, r4, #5120	; 0x1400
 8006f24:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 8006f26:	6889      	ldr	r1, [r1, #8]
	if (temp64z == 0)
 8006f28:	4647      	mov	r7, r8
 8006f2a:	fb01 f602 	mul.w	r6, r1, r2
 8006f2e:	ea56 0207 	orrs.w	r2, r6, r7
		temp64z = 1;
	temp64a = temp64a * 1000 * 256;
 8006f32:	f44f 357a 	mov.w	r5, #256000	; 0x3e800
 8006f36:	bf04      	itt	eq
 8006f38:	2601      	moveq	r6, #1
 8006f3a:	2700      	moveq	r7, #0
 8006f3c:	fba0 0105 	umull	r0, r1, r0, r5
 8006f40:	fb05 1103 	mla	r1, r5, r3, r1
	temp64a = do_division_u(temp64a, temp64z);
 8006f44:	4632      	mov	r2, r6
 8006f46:	463b      	mov	r3, r7
 8006f48:	f7f9 fe86 	bl	8000c58 <__aeabi_uldivmod>
 8006f4c:	460b      	mov	r3, r1
	temp64a = temp64a * 1000 * 256;
 8006f4e:	fba0 0105 	umull	r0, r1, r0, r5
	temp64a = do_division_u(temp64a, temp64z);
 8006f52:	4632      	mov	r2, r6
	temp64a = temp64a * 1000 * 256;
 8006f54:	fb05 1103 	mla	r1, r5, r3, r1
	temp64a = do_division_u(temp64a, temp64z);
 8006f58:	463b      	mov	r3, r7
 8006f5a:	f7f9 fe7d 	bl	8000c58 <__aeabi_uldivmod>

	pint->required_samples = (uint32_t)temp64a;


	if (pint->required_samples < 2)
 8006f5e:	f504 53a2 	add.w	r3, r4, #5184	; 0x1440
 8006f62:	2801      	cmp	r0, #1
		pint->required_samples = 2;
 8006f64:	bf98      	it	ls
 8006f66:	2202      	movls	r2, #2
 8006f68:	f103 0308 	add.w	r3, r3, #8
	pint->required_samples = (uint32_t)temp64a;
 8006f6c:	bf8c      	ite	hi
 8006f6e:	6058      	strhi	r0, [r3, #4]
		pint->required_samples = 2;
 8006f70:	605a      	strls	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
}
 8006f72:	2000      	movs	r0, #0
 8006f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f78 <VL53L1_dynamic_xtalk_correction_output_init>:
	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);

	pdata->smudge_corr_valid = 0;
 8006f78:	2300      	movs	r3, #0
	pdata->sample_limit_exceeded_flag = 0;
	pdata->gradient_zero_flag = 0;
	pdata->new_xtalk_applied_flag = 0;

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8006f7a:	e9c0 3366 	strd	r3, r3, [r0, #408]	; 0x198
	pdata->smudge_corr_valid = 0;
 8006f7e:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
	pdata->sample_limit_exceeded_flag = 0;
 8006f82:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
	pdata->new_xtalk_applied_flag = 0;
 8006f86:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;

	LOG_FUNCTION_END(status);

	return status;
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	4770      	bx	lr
	...

08006f90 <VL53L1_dynamic_xtalk_correction_data_init>:
{
 8006f90:	b538      	push	{r3, r4, r5, lr}
	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 8006f92:	f500 53a0 	add.w	r3, r0, #5120	; 0x1400
 8006f96:	f240 1201 	movw	r2, #257	; 0x101
 8006f9a:	801a      	strh	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 8006f9c:	f241 4302 	movw	r3, #5122	; 0x1402
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.smudge_margin =
 8006fa4:	f241 4304 	movw	r3, #5124	; 0x1404
 8006fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fac:	52c1      	strh	r1, [r0, r3]
	pdev->smudge_correct_config.noise_margin =
 8006fae:	f241 4308 	movw	r3, #5128	; 0x1408
 8006fb2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006fb6:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 8006fb8:	f241 430c 	movw	r3, #5132	; 0x140c
	pdev->smudge_correct_config.sample_limit =
 8006fbc:	21c8      	movs	r1, #200	; 0xc8
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 8006fbe:	50c2      	str	r2, [r0, r3]
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 8006fc0:	f241 4310 	movw	r3, #5136	; 0x1410
	pdev->smudge_corrector_internals.accumulator = 0;
 8006fc4:	2400      	movs	r4, #0
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 8006fc6:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.sample_limit =
 8006fc8:	f241 4314 	movw	r3, #5140	; 0x1414
	pdev->smudge_corrector_internals.accumulator = 0;
 8006fcc:	2500      	movs	r5, #0
	pdev->smudge_correct_config.sample_limit =
 8006fce:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.single_xtalk_delta =
 8006fd0:	f241 4318 	movw	r3, #5144	; 0x1418
 8006fd4:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8006fd8:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.averaged_xtalk_delta =
 8006fda:	f241 431c 	movw	r3, #5148	; 0x141c
 8006fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006fe2:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 8006fe4:	f500 53a1 	add.w	r3, r0, #5152	; 0x1420
 8006fe8:	4920      	ldr	r1, [pc, #128]	; (800706c <VL53L1_dynamic_xtalk_correction_data_init+0xdc>)
 8006fea:	6019      	str	r1, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 8006fec:	f241 4324 	movw	r3, #5156	; 0x1424
 8006ff0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8006ff4:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.scaler_calc_method =
 8006ff6:	f241 4328 	movw	r3, #5160	; 0x1428
	pdev->smudge_correct_config.x_gradient_scaler =
 8006ffa:	f241 412a 	movw	r1, #5162	; 0x142a
	pdev->smudge_correct_config.scaler_calc_method =
 8006ffe:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.x_gradient_scaler =
 8007000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007004:	5243      	strh	r3, [r0, r1]
	pdev->smudge_correct_config.y_gradient_scaler =
 8007006:	f241 412c 	movw	r1, #5164	; 0x142c
 800700a:	5243      	strh	r3, [r0, r1]
	pdev->smudge_correct_config.user_scaler_set =
 800700c:	f241 432e 	movw	r3, #5166	; 0x142e
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 8007010:	f04f 715c 	mov.w	r1, #57671680	; 0x3700000
	pdev->smudge_correct_config.user_scaler_set =
 8007014:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 8007016:	f241 4330 	movw	r3, #5168	; 0x1430
 800701a:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.nodetect_sample_limit =
 800701c:	f241 4334 	movw	r3, #5172	; 0x1434
 8007020:	210a      	movs	r1, #10
 8007022:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 8007024:	f241 4338 	movw	r3, #5176	; 0x1438
 8007028:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800702c:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800702e:	f241 433c 	movw	r3, #5180	; 0x143c
 8007032:	f44f 7161 	mov.w	r1, #900	; 0x384
 8007036:	52c1      	strh	r1, [r0, r3]
	pdev->smudge_correct_config.max_smudge_factor =
 8007038:	f500 53a2 	add.w	r3, r0, #5184	; 0x1440
 800703c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007040:	6019      	str	r1, [r3, #0]
	pdev->smudge_corrector_internals.current_samples = 0;
 8007042:	f241 4348 	movw	r3, #5192	; 0x1448
 8007046:	50c2      	str	r2, [r0, r3]
	pdev->smudge_corrector_internals.required_samples = 0;
 8007048:	f241 434c 	movw	r3, #5196	; 0x144c
 800704c:	50c2      	str	r2, [r0, r3]
	pdev->smudge_corrector_internals.accumulator = 0;
 800704e:	f500 53a2 	add.w	r3, r0, #5184	; 0x1440
 8007052:	e9c3 4504 	strd	r4, r5, [r3, #16]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 8007056:	f241 4358 	movw	r3, #5208	; 0x1458
 800705a:	50c2      	str	r2, [r0, r3]
	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800705c:	f500 5004 	add.w	r0, r0, #8448	; 0x2100
 8007060:	3018      	adds	r0, #24
 8007062:	f7ff ff89 	bl	8006f78 <VL53L1_dynamic_xtalk_correction_output_init>
}
 8007066:	4610      	mov	r0, r2
 8007068:	bd38      	pop	{r3, r4, r5, pc}
 800706a:	bf00      	nop
 800706c:	000ff800 	.word	0x000ff800

08007070 <VL53L1_xtalk_cal_data_init>:

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 8007070:	f241 23a8 	movw	r3, #4776	; 0x12a8
{
 8007074:	b510      	push	{r4, lr}
	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 8007076:	2400      	movs	r4, #0
 8007078:	50c4      	str	r4, [r0, r3]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800707a:	f241 23ac 	movw	r3, #4780	; 0x12ac
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800707e:	2218      	movs	r2, #24
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8007080:	50c4      	str	r4, [r0, r3]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 8007082:	f500 5095 	add.w	r0, r0, #4768	; 0x12a0
 8007086:	4621      	mov	r1, r4
 8007088:	3010      	adds	r0, #16
 800708a:	f004 f947 	bl	800b31c <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
}
 800708e:	4620      	mov	r0, r4
 8007090:	bd10      	pop	{r4, pc}

08007092 <VL53L1_low_power_auto_data_init>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8007092:	f500 53a3 	add.w	r3, r0, #5216	; 0x1460
 8007096:	2203      	movs	r2, #3
 8007098:	601a      	str	r2, [r3, #0]
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
	pdev->low_power_auto_data.saved_interrupt_config = 0;
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800709a:	f241 4264 	movw	r2, #5220	; 0x1464
 800709e:	2300      	movs	r3, #0
 80070a0:	5283      	strh	r3, [r0, r2]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80070a2:	f241 4266 	movw	r2, #5222	; 0x1466
 80070a6:	5483      	strb	r3, [r0, r2]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80070a8:	f241 4268 	movw	r2, #5224	; 0x1468
 80070ac:	5083      	str	r3, [r0, r2]
	pdev->low_power_auto_data.dss__required_spads = 0;
 80070ae:	f241 426c 	movw	r2, #5228	; 0x146c
 80070b2:	5283      	strh	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	4770      	bx	lr

080070b8 <VL53L1_config_low_power_auto_mode>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 80070b8:	2301      	movs	r3, #1
 80070ba:	7053      	strb	r3, [r2, #1]


	plpadata->low_power_auto_range_count = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	7093      	strb	r3, [r2, #2]


	pdynamic->system__sequence_config =
 80070c0:	228b      	movs	r2, #139	; 0x8b
 80070c2:	744a      	strb	r2, [r1, #17]


			VL53L1_SEQUENCE_RANGE_EN;


	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 80070c4:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 80070c8:	8202      	strh	r2, [r0, #16]
	pgeneral->dss_config__roi_mode_control =
 80070ca:	2202      	movs	r2, #2
 80070cc:	7282      	strb	r2, [r0, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	4770      	bx	lr

080070d2 <VL53L1_low_power_auto_setup_manual_calibration>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
 80070d2:	f241 4364 	movw	r3, #5220	; 0x1464
		pdev->stat_nvm.vhv_config__init;
 80070d6:	f890 234f 	ldrb.w	r2, [r0, #847]	; 0x34f
	pdev->low_power_auto_data.saved_vhv_init =
 80070da:	54c2      	strb	r2, [r0, r3]
	pdev->low_power_auto_data.saved_vhv_timeout =
 80070dc:	f241 4165 	movw	r1, #5221	; 0x1465
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80070e0:	f890 334c 	ldrb.w	r3, [r0, #844]	; 0x34c
	pdev->low_power_auto_data.saved_vhv_timeout =
 80070e4:	5443      	strb	r3, [r0, r1]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 80070e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070ea:	f880 234f 	strb.w	r2, [r0, #847]	; 0x34f

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 80070ee:	f500 52a3 	add.w	r2, r0, #5216	; 0x1460
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80070f2:	f003 0303 	and.w	r3, r3, #3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 80070f6:	7812      	ldrb	r2, [r2, #0]
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80070f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80070fc:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c

	pdev->gen_cfg.phasecal_config__override = 0x01;
 8007100:	2301      	movs	r3, #1
 8007102:	f880 3393 	strb.w	r3, [r0, #915]	; 0x393
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8007106:	f241 33ca 	movw	r3, #5066	; 0x13ca
	pdev->low_power_auto_data.first_run_phasecal_result =
 800710a:	f241 4266 	movw	r2, #5222	; 0x1466
		pdev->dbg_results.phasecal_result__vcsel_start;
 800710e:	5cc3      	ldrb	r3, [r0, r3]
	pdev->low_power_auto_data.first_run_phasecal_result =
 8007110:	5483      	strb	r3, [r0, r2]
	pdev->gen_cfg.cal_config__vcsel_start =
 8007112:	f880 338d 	strb.w	r3, [r0, #909]	; 0x38d
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 8007116:	2000      	movs	r0, #0
 8007118:	4770      	bx	lr

0800711a <VL53L1_low_power_auto_update_DSS>:


	utemp32a = utemp32a << 16;


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800711a:	f8b0 13d6 	ldrh.w	r1, [r0, #982]	; 0x3d6
{
 800711e:	b530      	push	{r4, r5, lr}
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8007120:	b321      	cbz	r1, 800716c <VL53L1_low_power_auto_update_DSS+0x52>
		 + pS->result__ambient_count_rate_mcps_sd0;
 8007122:	f8b0 33da 	ldrh.w	r3, [r0, #986]	; 0x3da
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 8007126:	f8b0 23e2 	ldrh.w	r2, [r0, #994]	; 0x3e2
 800712a:	f64f 74ff 	movw	r4, #65535	; 0xffff
		 + pS->result__ambient_count_rate_mcps_sd0;
 800712e:	441a      	add	r2, r3
 8007130:	42a2      	cmp	r2, r4
 8007132:	bf28      	it	cs
 8007134:	4622      	movcs	r2, r4
	utemp32a = utemp32a << 16;
 8007136:	0412      	lsls	r2, r2, #16
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8007138:	f241 4568 	movw	r5, #5224	; 0x1468

		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800713c:	4291      	cmp	r1, r2
		utemp32a = utemp32a /
 800713e:	fbb2 f3f1 	udiv	r3, r2, r1
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8007142:	5143      	str	r3, [r0, r5]
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 8007144:	d812      	bhi.n	800716c <VL53L1_low_power_auto_update_DSS+0x52>
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 8007146:	f8b0 236a 	ldrh.w	r2, [r0, #874]	; 0x36a
 800714a:	0412      	lsls	r2, r2, #16
				== 0)
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
		else {

			utemp32a = utemp32a /
 800714c:	fbb2 f3f3 	udiv	r3, r2, r3
			if (utemp32a > 0xFFFF)
				utemp32a = 0xFFFF;


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 8007150:	42a3      	cmp	r3, r4
 8007152:	bf28      	it	cs
 8007154:	4623      	movcs	r3, r4
 8007156:	b29b      	uxth	r3, r3

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8007158:	f241 426c 	movw	r2, #5228	; 0x146c
 800715c:	5283      	strh	r3, [r0, r2]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800715e:	f8a0 339a 	strh.w	r3, [r0, #922]	; 0x39a
			pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 8007162:	2302      	movs	r3, #2
 8007164:	f880 3394 	strb.w	r3, [r0, #916]	; 0x394
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8007168:	2000      	movs	r0, #0
 800716a:	bd30      	pop	{r4, r5, pc}
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800716c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007170:	e7f2      	b.n	8007158 <VL53L1_low_power_auto_update_DSS+0x3e>

08007172 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 8007172:	b530      	push	{r4, r5, lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	uint8_t i, timing;
	uint8_t sum = 0;

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 8007174:	f890 343c 	ldrb.w	r3, [r0, #1084]	; 0x43c
 8007178:	1fda      	subs	r2, r3, #7
 800717a:	4253      	negs	r3, r2
 800717c:	4153      	adcs	r3, r2
 800717e:	2260      	movs	r2, #96	; 0x60
 8007180:	fb02 0003 	mla	r0, r2, r3, r0
 8007184:	f500 50e4 	add.w	r0, r0, #7296	; 0x1c80
 8007188:	2200      	movs	r2, #0
 800718a:	301c      	adds	r0, #28
	uint8_t sum = 0;
 800718c:	4613      	mov	r3, r2
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800718e:	24c0      	movs	r4, #192	; 0xc0
 8007190:	fb04 f502 	mul.w	r5, r4, r2
 8007194:	3201      	adds	r2, #1
 8007196:	5945      	ldr	r5, [r0, r5]
 8007198:	2d00      	cmp	r5, #0
			sum++;
 800719a:	bfc4      	itt	gt
 800719c:	3301      	addgt	r3, #1
 800719e:	b2db      	uxtbgt	r3, r3
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 80071a0:	2a06      	cmp	r2, #6
 80071a2:	d1f5      	bne.n	8007190 <VL53L1_compute_histo_merge_nb+0x1e>
	*histo_merge_nb = sum;
 80071a4:	700b      	strb	r3, [r1, #0]

	return status;
}
 80071a6:	2000      	movs	r0, #0
 80071a8:	bd30      	pop	{r4, r5, pc}

080071aa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
{
 80071aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80071ae:	461c      	mov	r4, r3
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80071b0:	f890 31e0 	ldrb.w	r3, [r0, #480]	; 0x1e0
{
 80071b4:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80071b8:	2b01      	cmp	r3, #1
{
 80071ba:	4605      	mov	r5, r0
 80071bc:	4616      	mov	r6, r2
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80071be:	d178      	bne.n	80072b2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x108>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 80071c0:	f642 63c4 	movw	r3, #11972	; 0x2ec4
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80071c4:	5cc7      	ldrb	r7, [r0, r3]
 80071c6:	1e7b      	subs	r3, r7, #1
 80071c8:	425f      	negs	r7, r3
 80071ca:	415f      	adcs	r7, r3
	if (add_smudge == 1) {
 80071cc:	f89d 3020 	ldrb.w	r3, [sp, #32]
	orig_x_gradient =
 80071d0:	f9b5 c304 	ldrsh.w	ip, [r5, #772]	; 0x304
	if (add_smudge == 1) {
 80071d4:	2b01      	cmp	r3, #1
			(uint32_t)pconfig->smudge_margin;
 80071d6:	bf04      	itt	eq
 80071d8:	88b3      	ldrheq	r3, [r6, #4]
			(uint32_t)xtalk_offset_out +
 80071da:	18c9      	addeq	r1, r1, r3
 80071dc:	60a1      	str	r1, [r4, #8]
	if (((pconfig->user_scaler_set == 0) ||
 80071de:	f896 202e 	ldrb.w	r2, [r6, #46]	; 0x2e
	orig_xtalk_offset =
 80071e2:	f8d5 3300 	ldr.w	r3, [r5, #768]	; 0x300
	orig_y_gradient =
 80071e6:	f9b5 1306 	ldrsh.w	r1, [r5, #774]	; 0x306
	if (((pconfig->user_scaler_set == 0) ||
 80071ea:	b11a      	cbz	r2, 80071f4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
 80071ec:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 80071f0:	2a01      	cmp	r2, #1
 80071f2:	d11a      	bne.n	800722a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x80>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 80071f4:	f241 22a8 	movw	r2, #4776	; 0x12a8
		(pconfig->scaler_calc_method == 1)) &&
 80071f8:	58aa      	ldr	r2, [r5, r2]
 80071fa:	b1b2      	cbz	r2, 800722a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x80>
		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80071fc:	f10d 0107 	add.w	r1, sp, #7
 8007200:	4628      	mov	r0, r5
 8007202:	f7ff ffb6 	bl	8007172 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8007206:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800720a:	b913      	cbnz	r3, 8007212 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x68>
			histo_merge_nb = 1;
 800720c:	2301      	movs	r3, #1
 800720e:	f88d 3007 	strb.w	r3, [sp, #7]
		if (!merge_enabled)
 8007212:	f505 5295 	add.w	r2, r5, #4768	; 0x12a0
 8007216:	3208      	adds	r2, #8
 8007218:	2f00      	cmp	r7, #0
 800721a:	d14c      	bne.n	80072b6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
			orig_xtalk_offset =
 800721c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8007220:	58eb      	ldr	r3, [r5, r3]
		orig_x_gradient =
 8007222:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
		orig_y_gradient =
 8007226:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800722a:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
 800722e:	b958      	cbnz	r0, 8007248 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x9e>
 8007230:	f1bc 0f00 	cmp.w	ip, #0
 8007234:	d103      	bne.n	800723e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		pout->gradient_zero_flag |= 0x01;
 8007236:	7962      	ldrb	r2, [r4, #5]
 8007238:	f042 0201 	orr.w	r2, r2, #1
 800723c:	7162      	strb	r2, [r4, #5]
	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800723e:	b919      	cbnz	r1, 8007248 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x9e>
		pout->gradient_zero_flag |= 0x02;
 8007240:	7962      	ldrb	r2, [r4, #5]
 8007242:	f042 0202 	orr.w	r2, r2, #2
 8007246:	7162      	strb	r2, [r4, #5]
	if (orig_xtalk_offset == 0)
 8007248:	2b01      	cmp	r3, #1
 800724a:	bf38      	it	cc
 800724c:	2301      	movcc	r3, #1
	if (pconfig->user_scaler_set == 1) {
 800724e:	2801      	cmp	r0, #1
 8007250:	d137      	bne.n	80072c2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x118>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 8007252:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
		y_gradient_scaler = pconfig->y_gradient_scaler;
 8007256:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	; 0x2c
	if (pconfig->scaler_calc_method == 0) {
 800725a:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
 800725e:	f1be 0f00 	cmp.w	lr, #0
 8007262:	d13a      	bne.n	80072da <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x130>
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8007264:	68a3      	ldr	r3, [r4, #8]
 8007266:	435a      	muls	r2, r3
			(int16_t)itemp32;
 8007268:	f64f 71ff 	movw	r1, #65535	; 0xffff
		itemp32 = itemp32 >> 6;
 800726c:	1192      	asrs	r2, r2, #6
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800726e:	4343      	muls	r3, r0
			(int16_t)itemp32;
 8007270:	428a      	cmp	r2, r1
		itemp32 = itemp32 >> 6;
 8007272:	ea4f 13a3 	mov.w	r3, r3, asr #6
			(int16_t)itemp32;
 8007276:	bfa8      	it	ge
 8007278:	460a      	movge	r2, r1
			(int16_t)itemp32;
 800727a:	428b      	cmp	r3, r1
			(int16_t)itemp32;
 800727c:	81a2      	strh	r2, [r4, #12]
			(int16_t)itemp32;
 800727e:	bfa8      	it	ge
 8007280:	460b      	movge	r3, r1
			(int16_t)itemp32;
 8007282:	81e3      	strh	r3, [r4, #14]
	if (pconfig->smudge_corr_apply_enabled == 1 &&
 8007284:	7873      	ldrb	r3, [r6, #1]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d17b      	bne.n	8007382 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 800728a:	f1b8 0f01 	cmp.w	r8, #1
 800728e:	d07b      	beq.n	8007388 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1de>
		pout->new_xtalk_applied_flag = 1;
 8007290:	71a3      	strb	r3, [r4, #6]
		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8007292:	f10d 0107 	add.w	r1, sp, #7
 8007296:	4628      	mov	r0, r5
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 8007298:	f8d4 8008 	ldr.w	r8, [r4, #8]
		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800729c:	f7ff ff69 	bl	8007172 <VL53L1_compute_histo_merge_nb>
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 80072a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80072a4:	bbaa      	cbnz	r2, 8007312 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x168>
		if (pout->new_xtalk_applied_flag) {
 80072a6:	79a3      	ldrb	r3, [r4, #6]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d15a      	bne.n	8007362 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1b8>
		pout->smudge_corr_valid = 1;
 80072ac:	2301      	movs	r3, #1
 80072ae:	7023      	strb	r3, [r4, #0]
	return status;
 80072b0:	e06a      	b.n	8007388 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1de>
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80072b2:	2700      	movs	r7, #0
 80072b4:	e78a      	b.n	80071cc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x22>
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 80072b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
			orig_xtalk_offset =
 80072ba:	3301      	adds	r3, #1
 80072bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c0:	e7af      	b.n	8007222 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x78>
		x_gradient_scaler = (int16_t)do_division_s(
 80072c2:	ea4f 128c 	mov.w	r2, ip, lsl #6
		y_gradient_scaler = (int16_t)do_division_s(
 80072c6:	0188      	lsls	r0, r1, #6
		x_gradient_scaler = (int16_t)do_division_s(
 80072c8:	fbb2 f2f3 	udiv	r2, r2, r3
		y_gradient_scaler = (int16_t)do_division_s(
 80072cc:	fbb0 f0f3 	udiv	r0, r0, r3
		x_gradient_scaler = (int16_t)do_division_s(
 80072d0:	b212      	sxth	r2, r2
		y_gradient_scaler = (int16_t)do_division_s(
 80072d2:	b200      	sxth	r0, r0
		pconfig->x_gradient_scaler = x_gradient_scaler;
 80072d4:	8572      	strh	r2, [r6, #42]	; 0x2a
		pconfig->y_gradient_scaler = y_gradient_scaler;
 80072d6:	85b0      	strh	r0, [r6, #44]	; 0x2c
 80072d8:	e7bf      	b.n	800725a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb0>
	} else if (pconfig->scaler_calc_method == 1) {
 80072da:	f1be 0f01 	cmp.w	lr, #1
 80072de:	d1d1      	bne.n	8007284 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xda>
		itemp32 = (int32_t)(orig_xtalk_offset -
 80072e0:	68a2      	ldr	r2, [r4, #8]
 80072e2:	1a9b      	subs	r3, r3, r2
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	461a      	mov	r2, r3
 80072e8:	bfb8      	it	lt
 80072ea:	f103 020f 	addlt.w	r2, r3, #15
 80072ee:	1112      	asrs	r2, r2, #4
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 80072f0:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
			(int16_t)itemp32;
 80072f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80072f8:	4282      	cmp	r2, r0
 80072fa:	bfa8      	it	ge
 80072fc:	4602      	movge	r2, r0
 80072fe:	81a2      	strh	r2, [r4, #12]
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 8007300:	2250      	movs	r2, #80	; 0x50
 8007302:	fb93 f3f2 	sdiv	r3, r3, r2
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 8007306:	eb01 0383 	add.w	r3, r1, r3, lsl #2
			(int16_t)itemp32;
 800730a:	4283      	cmp	r3, r0
 800730c:	bfa8      	it	ge
 800730e:	4603      	movge	r3, r0
 8007310:	e7b7      	b.n	8007282 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd8>
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 8007312:	2f00      	cmp	r7, #0
 8007314:	d0c7      	beq.n	80072a6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xfc>
 8007316:	f1b8 0f00 	cmp.w	r8, #0
 800731a:	d0c4      	beq.n	80072a6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xfc>
			cXtalk =
 800731c:	f505 5395 	add.w	r3, r5, #4768	; 0x12a0
 8007320:	3201      	adds	r2, #1
 8007322:	3308      	adds	r3, #8
			if (SmudgeFactor >= pconfig->max_smudge_factor)
 8007324:	6c30      	ldr	r0, [r6, #64]	; 0x40
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 8007326:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800732a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800732e:	4351      	muls	r1, r2
 8007330:	fbb1 f7f8 	udiv	r7, r1, r8
			if (SmudgeFactor >= pconfig->max_smudge_factor)
 8007334:	42b8      	cmp	r0, r7
 8007336:	d802      	bhi.n	800733e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x194>
				pout->new_xtalk_applied_flag = 0;
 8007338:	2300      	movs	r3, #0
 800733a:	71a3      	strb	r3, [r4, #6]
		if (pout->new_xtalk_applied_flag) {
 800733c:	e7b6      	b.n	80072ac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x102>
			else if (SmudgeFactor > 0)
 800733e:	4541      	cmp	r1, r8
 8007340:	d3b1      	bcc.n	80072a6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xfc>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 8007342:	f895 c1e8 	ldrb.w	ip, [r5, #488]	; 0x1e8
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 8007346:	3308      	adds	r3, #8
 8007348:	2000      	movs	r0, #0
				*pcpo *= 1000;
 800734a:	4611      	mov	r1, r2
				for (i = 0; i < max; i++) {
 800734c:	b2c2      	uxtb	r2, r0
 800734e:	4594      	cmp	ip, r2
 8007350:	d9a9      	bls.n	80072a6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xfc>
				*pcpo *= 1000;
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	3001      	adds	r0, #1
 8007356:	434a      	muls	r2, r1
				*pcpo /= SmudgeFactor;
 8007358:	fbb2 f2f7 	udiv	r2, r2, r7
 800735c:	f843 2b04 	str.w	r2, [r3], #4
				for (i = 0; i < max; i++) {
 8007360:	e7f4      	b.n	800734c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a2>
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 8007362:	68a3      	ldr	r3, [r4, #8]
 8007364:	f8c5 32f8 	str.w	r3, [r5, #760]	; 0x2f8
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	f8a5 32fc 	strh.w	r3, [r5, #764]	; 0x2fc
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800736e:	89e3      	ldrh	r3, [r4, #14]
 8007370:	f8a5 32fe 	strh.w	r3, [r5, #766]	; 0x2fe
		if (pconfig->smudge_corr_single_apply == 1) {
 8007374:	78b3      	ldrb	r3, [r6, #2]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d198      	bne.n	80072ac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x102>
			pconfig->smudge_corr_apply_enabled = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	7073      	strb	r3, [r6, #1]
			pconfig->smudge_corr_single_apply = 0;
 800737e:	70b3      	strb	r3, [r6, #2]
 8007380:	e794      	b.n	80072ac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x102>
	if (soft_update != 1)
 8007382:	f1b8 0f01 	cmp.w	r8, #1
 8007386:	d191      	bne.n	80072ac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x102>
}
 8007388:	2000      	movs	r0, #0
 800738a:	b002      	add	sp, #8
 800738c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007390 <VL53L1_dynamic_xtalk_correction_corrector>:
{
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8007394:	f890 31e0 	ldrb.w	r3, [r0, #480]	; 0x1e0
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 8007398:	f500 5704 	add.w	r7, r0, #8448	; 0x2100
 800739c:	3718      	adds	r7, #24
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800739e:	2b01      	cmp	r3, #1
{
 80073a0:	b087      	sub	sp, #28
 80073a2:	4604      	mov	r4, r0
	VL53L1_smudge_corrector_config_t *pconfig =
 80073a4:	f500 55a0 	add.w	r5, r0, #5120	; 0x1400
	VL53L1_smudge_corrector_data_t *pout =
 80073a8:	f507 76c8 	add.w	r6, r7, #400	; 0x190
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80073ac:	d13f      	bne.n	800742e <VL53L1_dynamic_xtalk_correction_corrector+0x9e>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 80073ae:	f642 63c4 	movw	r3, #11972	; 0x2ec4
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80073b2:	f810 8003 	ldrb.w	r8, [r0, r3]
 80073b6:	f108 31ff 	add.w	r1, r8, #4294967295
 80073ba:	f1d1 0800 	rsbs	r8, r1, #0
 80073be:	eb48 0801 	adc.w	r8, r8, r1
	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80073c2:	f10d 0117 	add.w	r1, sp, #23
 80073c6:	4620      	mov	r0, r4
 80073c8:	f7ff fed3 	bl	8007172 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 80073cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80073d0:	b113      	cbz	r3, 80073d8 <VL53L1_dynamic_xtalk_correction_corrector+0x48>
 80073d2:	f1b8 0f00 	cmp.w	r8, #0
 80073d6:	d102      	bne.n	80073de <VL53L1_dynamic_xtalk_correction_corrector+0x4e>
		histo_merge_nb = 1;
 80073d8:	2301      	movs	r3, #1
 80073da:	f88d 3017 	strb.w	r3, [sp, #23]
	VL53L1_dynamic_xtalk_correction_output_init(pres);
 80073de:	4638      	mov	r0, r7
 80073e0:	f7ff fdca 	bl	8006f78 <VL53L1_dynamic_xtalk_correction_output_init>
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 80073e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073e6:	b32b      	cbz	r3, 8007434 <VL53L1_dynamic_xtalk_correction_corrector+0xa4>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 80073e8:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80073ec:	4353      	muls	r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 80073ee:	f8b7 2178 	ldrh.w	r2, [r7, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 80073f2:	4293      	cmp	r3, r2
 80073f4:	bf94      	ite	ls
 80073f6:	2300      	movls	r3, #0
 80073f8:	2301      	movhi	r3, #1
	merging_complete = ((!merge_enabled) ||
 80073fa:	f1b8 0f00 	cmp.w	r8, #0
 80073fe:	d01b      	beq.n	8007438 <VL53L1_dynamic_xtalk_correction_corrector+0xa8>
 8007400:	f894 11e8 	ldrb.w	r1, [r4, #488]	; 0x1e8
 8007404:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007408:	1a8a      	subs	r2, r1, r2
 800740a:	4251      	negs	r1, r2
 800740c:	4151      	adcs	r1, r2
		(pconfig->smudge_corr_enabled == 1) &&
 800740e:	782a      	ldrb	r2, [r5, #0]
 8007410:	f897 018e 	ldrb.w	r0, [r7, #398]	; 0x18e
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 8007414:	2a01      	cmp	r2, #1
 8007416:	d106      	bne.n	8007426 <VL53L1_dynamic_xtalk_correction_corrector+0x96>
		(pconfig->smudge_corr_enabled == 1) &&
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 80d8 	beq.w	80075ce <VL53L1_dynamic_xtalk_correction_corrector+0x23e>
		ambient_check &&
 800741e:	2809      	cmp	r0, #9
 8007420:	f040 80d8 	bne.w	80075d4 <VL53L1_dynamic_xtalk_correction_corrector+0x244>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 8007424:	bb09      	cbnz	r1, 800746a <VL53L1_dynamic_xtalk_correction_corrector+0xda>
}
 8007426:	2000      	movs	r0, #0
 8007428:	b007      	add	sp, #28
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800742e:	f04f 0800 	mov.w	r8, #0
 8007432:	e7c6      	b.n	80073c2 <VL53L1_dynamic_xtalk_correction_corrector+0x32>
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8007434:	2301      	movs	r3, #1
 8007436:	e7e0      	b.n	80073fa <VL53L1_dynamic_xtalk_correction_corrector+0x6a>
	merging_complete = ((!merge_enabled) ||
 8007438:	2101      	movs	r1, #1
 800743a:	e7e8      	b.n	800740e <VL53L1_dynamic_xtalk_correction_corrector+0x7e>
			if (pR->VL53L1_p_002[i].range_status ==
 800743c:	f893 8004 	ldrb.w	r8, [r3, #4]
 8007440:	f1b8 0f09 	cmp.w	r8, #9
 8007444:	d10b      	bne.n	800745e <VL53L1_dynamic_xtalk_correction_corrector+0xce>
				if (pR->VL53L1_p_002[i].median_range_mm
 8007446:	f9b3 9000 	ldrsh.w	r9, [r3]
					pconfig->nodetect_min_range_mm) {
 800744a:	f8b5 803c 	ldrh.w	r8, [r5, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800744e:	45c1      	cmp	r9, r8
 8007450:	dd08      	ble.n	8007464 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
					if (run_nodetect == 2) {
 8007452:	f1bc 0f02 	cmp.w	ip, #2
 8007456:	d102      	bne.n	800745e <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 8007458:	4602      	mov	r2, r0
						run_nodetect = 1;
 800745a:	f04f 0c01 	mov.w	ip, #1
		for (i = 0; i < pR->active_results; i++) {
 800745e:	3101      	adds	r1, #1
 8007460:	334c      	adds	r3, #76	; 0x4c
 8007462:	e0c0      	b.n	80075e6 <VL53L1_dynamic_xtalk_correction_corrector+0x256>
					run_nodetect = 0;
 8007464:	f04f 0c00 	mov.w	ip, #0
 8007468:	e7f9      	b.n	800745e <VL53L1_dynamic_xtalk_correction_corrector+0xce>
		pint->nodetect_counter = 0;
 800746a:	f504 59a2 	add.w	r9, r4, #5184	; 0x1440
 800746e:	f109 0908 	add.w	r9, r9, #8
 8007472:	2300      	movs	r3, #0
 8007474:	f8c9 3010 	str.w	r3, [r9, #16]
		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 8007478:	4620      	mov	r0, r4
 800747a:	9203      	str	r2, [sp, #12]
 800747c:	f7ff fd2f 	bl	8006ede <VL53L1_dynamic_xtalk_correction_calc_required_samples>
				((uint32_t)(pconfig->smudge_margin)) << 2;
 8007480:	f8b5 b004 	ldrh.w	fp, [r5, #4]
		current_xtalk = ((uint32_t)cco) << 2;
 8007484:	f8d4 12f8 	ldr.w	r1, [r4, #760]	; 0x2f8
		xtalk_offset_in =
 8007488:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800748c:	69a8      	ldr	r0, [r5, #24]
		smudge_margin_adjusted =
 800748e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8007492:	ebab 0a81 	sub.w	sl, fp, r1, lsl #2
		current_xtalk = ((uint32_t)cco) << 2;
 8007496:	008a      	lsls	r2, r1, #2
		itemp32 = xtalk_offset_in - current_xtalk +
 8007498:	eb0a 0103 	add.w	r1, sl, r3
		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800749c:	2900      	cmp	r1, #0
 800749e:	bfb8      	it	lt
 80074a0:	4249      	neglt	r1, r1
 80074a2:	f504 580a 	add.w	r8, r4, #8832	; 0x2280
 80074a6:	4288      	cmp	r0, r1
		current_xtalk = ((uint32_t)cco) << 2;
 80074a8:	9202      	str	r2, [sp, #8]
		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 80074aa:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80074ae:	da07      	bge.n	80074c0 <VL53L1_dynamic_xtalk_correction_corrector+0x130>
				((int32_t)current_xtalk -
 80074b0:	eba2 010b 	sub.w	r1, r2, fp
			if ((int32_t)xtalk_offset_in >
 80074b4:	4299      	cmp	r1, r3
				pout->single_xtalk_delta_flag = 1;
 80074b6:	bfb4      	ite	lt
 80074b8:	9a03      	ldrlt	r2, [sp, #12]
				pout->single_xtalk_delta_flag = 2;
 80074ba:	2202      	movge	r2, #2
 80074bc:	f888 2002 	strb.w	r2, [r8, #2]
		pint->current_samples = pint->current_samples + 1;
 80074c0:	f241 4148 	movw	r1, #5192	; 0x1448
 80074c4:	5862      	ldr	r2, [r4, r1]
 80074c6:	3201      	adds	r2, #1
 80074c8:	5062      	str	r2, [r4, r1]
		if (pint->current_samples > pconfig->sample_limit) {
 80074ca:	6969      	ldr	r1, [r5, #20]
 80074cc:	428a      	cmp	r2, r1
 80074ce:	d94f      	bls.n	8007570 <VL53L1_dynamic_xtalk_correction_corrector+0x1e0>
			pout->sample_limit_exceeded_flag = 1;
 80074d0:	2301      	movs	r3, #1
 80074d2:	f888 3004 	strb.w	r3, [r8, #4]
			continue_processing = CONT_RESET;
 80074d6:	2702      	movs	r7, #2
		if (pint->current_samples < pint->required_samples)
 80074d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
		(uint32_t)(do_division_u(pint->accumulator,
 80074dc:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
			continue_processing = CONT_NEXT_LOOP;
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bf38      	it	cc
 80074e4:	2701      	movcc	r7, #1
		(uint32_t)(do_division_u(pint->accumulator,
 80074e6:	2300      	movs	r3, #0
 80074e8:	f7f9 fbb6 	bl	8000c58 <__aeabi_uldivmod>
		if (continue_processing == CONT_CONTINUE &&
 80074ec:	b98f      	cbnz	r7, 8007512 <VL53L1_dynamic_xtalk_correction_corrector+0x182>
		itemp32 = xtalk_offset_out - current_xtalk +
 80074ee:	4482      	add	sl, r0
		if (continue_processing == CONT_CONTINUE &&
 80074f0:	f1ba 0f00 	cmp.w	sl, #0
 80074f4:	69eb      	ldr	r3, [r5, #28]
 80074f6:	bfb8      	it	lt
 80074f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80074fc:	4553      	cmp	r3, sl
 80074fe:	dc63      	bgt.n	80075c8 <VL53L1_dynamic_xtalk_correction_corrector+0x238>
				((int32_t)current_xtalk -
 8007500:	9b02      	ldr	r3, [sp, #8]
 8007502:	eba3 0b0b 	sub.w	fp, r3, fp
			if ((int32_t)xtalk_offset_out >
 8007506:	4583      	cmp	fp, r0
				pout->averaged_xtalk_delta_flag = 1;
 8007508:	bfb4      	ite	lt
 800750a:	2301      	movlt	r3, #1
				pout->averaged_xtalk_delta_flag = 2;
 800750c:	2302      	movge	r3, #2
 800750e:	f888 3003 	strb.w	r3, [r8, #3]
		pout->smudge_corr_clipped = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	f888 3001 	strb.w	r3, [r8, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 8007518:	b957      	cbnz	r7, 8007530 <VL53L1_dynamic_xtalk_correction_corrector+0x1a0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800751a:	6a2b      	ldr	r3, [r5, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800751c:	b143      	cbz	r3, 8007530 <VL53L1_dynamic_xtalk_correction_corrector+0x1a0>
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800751e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007522:	4353      	muls	r3, r2
			if (xtalk_offset_out >
 8007524:	4283      	cmp	r3, r0
 8007526:	d203      	bcs.n	8007530 <VL53L1_dynamic_xtalk_correction_corrector+0x1a0>
				pout->smudge_corr_clipped = 1;
 8007528:	2301      	movs	r3, #1
 800752a:	f888 3001 	strb.w	r3, [r8, #1]
				continue_processing = CONT_RESET;
 800752e:	2702      	movs	r7, #2
		if (pconfig->user_xtalk_offset_limit_hi &&
 8007530:	7c2b      	ldrb	r3, [r5, #16]
 8007532:	68e9      	ldr	r1, [r5, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d043      	beq.n	80075c0 <VL53L1_dynamic_xtalk_correction_corrector+0x230>
 8007538:	4288      	cmp	r0, r1
 800753a:	bf28      	it	cs
 800753c:	4608      	movcs	r0, r1
		xtalk_offset_out = xtalk_offset_out >> 2;
 800753e:	0881      	lsrs	r1, r0, #2
		if (xtalk_offset_out > 0x3FFFF)
 8007540:	4843      	ldr	r0, [pc, #268]	; (8007650 <VL53L1_dynamic_xtalk_correction_corrector+0x2c0>)
 8007542:	4281      	cmp	r1, r0
 8007544:	bf28      	it	cs
 8007546:	4601      	movcs	r1, r0
		if (continue_processing == CONT_CONTINUE) {
 8007548:	2301      	movs	r3, #1
 800754a:	b9d7      	cbnz	r7, 8007582 <VL53L1_dynamic_xtalk_correction_corrector+0x1f2>
			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800754c:	e9cd 3700 	strd	r3, r7, [sp]
 8007550:	462a      	mov	r2, r5
 8007552:	4633      	mov	r3, r6
 8007554:	4620      	mov	r0, r4
 8007556:	f7ff fe28 	bl	80071aa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
			pint->accumulator = 0;
 800755a:	2200      	movs	r2, #0
 800755c:	2300      	movs	r3, #0
 800755e:	e9c9 2302 	strd	r2, r3, [r9, #8]
			pint->current_samples = 0;
 8007562:	f241 4248 	movw	r2, #5192	; 0x1448
 8007566:	2300      	movs	r3, #0
 8007568:	50a3      	str	r3, [r4, r2]
			pint->nodetect_counter = 0;
 800756a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (run_nodetect == 1) {
 800756e:	e75a      	b.n	8007426 <VL53L1_dynamic_xtalk_correction_corrector+0x96>
			pint->accumulator = pint->accumulator +
 8007570:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
 8007574:	18c0      	adds	r0, r0, r3
 8007576:	f141 0100 	adc.w	r1, r1, #0
 800757a:	e9c9 0102 	strd	r0, r1, [r9, #8]
	uint8_t continue_processing = CONT_CONTINUE;
 800757e:	2700      	movs	r7, #0
 8007580:	e7aa      	b.n	80074d8 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 8007582:	e9cd 3300 	strd	r3, r3, [sp]
 8007586:	462a      	mov	r2, r5
 8007588:	4633      	mov	r3, r6
 800758a:	4620      	mov	r0, r4
 800758c:	f7ff fe0d 	bl	80071aa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
		if (continue_processing == CONT_RESET) {
 8007590:	2f02      	cmp	r7, #2
 8007592:	f47f af48 	bne.w	8007426 <VL53L1_dynamic_xtalk_correction_corrector+0x96>
 8007596:	e7e0      	b.n	800755a <VL53L1_dynamic_xtalk_correction_corrector+0x1ca>
			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 8007598:	4633      	mov	r3, r6
 800759a:	462a      	mov	r2, r5
 800759c:	e9cd 7700 	strd	r7, r7, [sp]
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff fe02 	bl	80071aa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
			pout->smudge_corr_valid = 2;
 80075a6:	f242 23a8 	movw	r3, #8872	; 0x22a8
 80075aa:	2202      	movs	r2, #2
 80075ac:	54e2      	strb	r2, [r4, r3]
			pint->accumulator = 0;
 80075ae:	2200      	movs	r2, #0
 80075b0:	2300      	movs	r3, #0
 80075b2:	e9c8 2302 	strd	r2, r3, [r8, #8]
			pint->current_samples = 0;
 80075b6:	f844 7009 	str.w	r7, [r4, r9]
			pint->nodetect_counter = 0;
 80075ba:	f8c8 7010 	str.w	r7, [r8, #16]
 80075be:	e732      	b.n	8007426 <VL53L1_dynamic_xtalk_correction_corrector+0x96>
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 80075c0:	4288      	cmp	r0, r1
 80075c2:	bf38      	it	cc
 80075c4:	4608      	movcc	r0, r1
 80075c6:	e7ba      	b.n	800753e <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
		pout->smudge_corr_clipped = 0;
 80075c8:	f888 7001 	strb.w	r7, [r8, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 80075cc:	e7af      	b.n	800752e <VL53L1_dynamic_xtalk_correction_corrector+0x19e>
	if ((pR->xmonitor.range_status
 80075ce:	2809      	cmp	r0, #9
 80075d0:	f43f af29 	beq.w	8007426 <VL53L1_dynamic_xtalk_correction_corrector+0x96>
 80075d4:	f504 5305 	add.w	r3, r4, #8512	; 0x2140
		for (i = 0; i < pR->active_results; i++) {
 80075d8:	2100      	movs	r1, #0
 80075da:	f897 e012 	ldrb.w	lr, [r7, #18]
 80075de:	3332      	adds	r3, #50	; 0x32
	uint8_t nodetect_index = 0;
 80075e0:	460a      	mov	r2, r1
		run_nodetect = 2;
 80075e2:	f04f 0c02 	mov.w	ip, #2
 80075e6:	b2c8      	uxtb	r0, r1
		for (i = 0; i < pR->active_results; i++) {
 80075e8:	4586      	cmp	lr, r0
 80075ea:	f63f af27 	bhi.w	800743c <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		if (run_nodetect == 1) {
 80075ee:	f1bc 0f01 	cmp.w	ip, #1
 80075f2:	f47f af18 	bne.w	8007426 <VL53L1_dynamic_xtalk_correction_corrector+0x96>
		amr =
 80075f6:	234c      	movs	r3, #76	; 0x4c
 80075f8:	fb03 7702 	mla	r7, r3, r2, r7
			utemp64 = 1000 * ((uint64_t)amr);
 80075fc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8007600:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8007604:	6b28      	ldr	r0, [r5, #48]	; 0x30
			utemp64 = 1000 * ((uint64_t)amr);
 8007606:	fba3 8908 	umull	r8, r9, r3, r8
			utemp64 = utemp64 << 9;
 800760a:	ea4f 2349 	mov.w	r3, r9, lsl #9
			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800760e:	2100      	movs	r1, #0
			utemp64 = utemp64 << 9;
 8007610:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8007614:	ea4f 2248 	mov.w	r2, r8, lsl #9
	if (run_nodetect == 1) {
 8007618:	428b      	cmp	r3, r1
 800761a:	bf08      	it	eq
 800761c:	4282      	cmpeq	r2, r0
 800761e:	f4bf af02 	bcs.w	8007426 <VL53L1_dynamic_xtalk_correction_corrector+0x96>
		pint->nodetect_counter += 1;
 8007622:	f241 4948 	movw	r9, #5192	; 0x1448
 8007626:	eb04 0809 	add.w	r8, r4, r9
		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800762a:	e9d5 210d 	ldrd	r2, r1, [r5, #52]	; 0x34
		pint->nodetect_counter += 1;
 800762e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007632:	3301      	adds	r3, #1
		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 8007634:	4293      	cmp	r3, r2
		pint->nodetect_counter += 1;
 8007636:	f8c8 3010 	str.w	r3, [r8, #16]
		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800763a:	f04f 0700 	mov.w	r7, #0
 800763e:	d2ab      	bcs.n	8007598 <VL53L1_dynamic_xtalk_correction_corrector+0x208>
			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 8007640:	e9cd 7c00 	strd	r7, ip, [sp]
 8007644:	4633      	mov	r3, r6
 8007646:	462a      	mov	r2, r5
 8007648:	4620      	mov	r0, r4
 800764a:	f7ff fdae 	bl	80071aa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
		if (continue_processing == CONT_RESET) {
 800764e:	e6ea      	b.n	8007426 <VL53L1_dynamic_xtalk_correction_corrector+0x96>
 8007650:	0003ffff 	.word	0x0003ffff

08007654 <VL53L1_calc_pll_period_us>:

	uint32_t  pll_period_us        = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 8007654:	b118      	cbz	r0, 800765e <VL53L1_calc_pll_period_us+0xa>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8007656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800765a:	fbb3 f0f0 	udiv	r0, r3, r0


	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 800765e:	4770      	bx	lr

08007660 <VL53L1_duration_maths>:

	uint64_t  tmp_long_int = 0;
	uint32_t  duration_us  = 0;


	duration_us = window_vclks * pll_period_us;
 8007660:	4342      	muls	r2, r0


	tmp_long_int = (uint64_t)duration_us;


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 8007662:	434b      	muls	r3, r1
{
 8007664:	b510      	push	{r4, lr}
	duration_us = duration_us >> 12;
 8007666:	0b12      	lsrs	r2, r2, #12


	duration_us = duration_us >> 4;
 8007668:	091b      	lsrs	r3, r3, #4


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800766a:	fba3 3402 	umull	r3, r4, r3, r2


	tmp_long_int = tmp_long_int >> 12;
 800766e:	0b1a      	lsrs	r2, r3, #12


	if (tmp_long_int > 0xFFFFFFFF)
		tmp_long_int = 0xFFFFFFFF;

	duration_us  = (uint32_t)tmp_long_int;
 8007670:	0b21      	lsrs	r1, r4, #12
 8007672:	2300      	movs	r3, #0
 8007674:	ea42 5004 	orr.w	r0, r2, r4, lsl #20
 8007678:	428b      	cmp	r3, r1
 800767a:	f04f 32ff 	mov.w	r2, #4294967295
 800767e:	bf08      	it	eq
 8007680:	4282      	cmpeq	r2, r0
 8007682:	bf38      	it	cc
 8007684:	4610      	movcc	r0, r2

	return duration_us;
}
 8007686:	bd10      	pop	{r4, pc}

08007688 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	4616      	mov	r6, r2


	uint64_t dividend = ((uint64_t)VL53L1_p_013
			* 1000 * 256);

	if (num_spads != 0)
 800768c:	b1c9      	cbz	r1, 80076c2 <VL53L1_events_per_spad_maths+0x3a>
		total_hist_counts = do_division_u(
 800768e:	460a      	mov	r2, r1
 8007690:	f44f 317a 	mov.w	r1, #256000	; 0x3e800
 8007694:	2300      	movs	r3, #0
 8007696:	fb80 0101 	smull	r0, r1, r0, r1
 800769a:	f7f9 fadd 	bl	8000c58 <__aeabi_uldivmod>
 800769e:	4603      	mov	r3, r0
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 80076a0:	02cd      	lsls	r5, r1, #11
 80076a2:	ea45 5553 	orr.w	r5, r5, r3, lsr #21
 80076a6:	02dc      	lsls	r4, r3, #11
 80076a8:	b14e      	cbz	r6, 80076be <VL53L1_events_per_spad_maths+0x36>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
			+ ((uint64_t)duration / 2));
 80076aa:	0870      	lsrs	r0, r6, #1

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 80076ac:	1820      	adds	r0, r4, r0
 80076ae:	4632      	mov	r2, r6
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	f145 0100 	adc.w	r1, r5, #0
 80076b8:	f7f9 face 	bl	8000c58 <__aeabi_uldivmod>
 80076bc:	4604      	mov	r4, r0
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;

	return rate_per_spad_kcps;
}
 80076be:	4620      	mov	r0, r4
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
	uint64_t total_hist_counts  = 0;
 80076c2:	460b      	mov	r3, r1
 80076c4:	e7ec      	b.n	80076a0 <VL53L1_events_per_spad_maths+0x18>

080076c6 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 80076c6:	4602      	mov	r2, r0



	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 80076c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000


	while (bit > num)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d802      	bhi.n	80076d6 <VL53L1_isqrt+0x10>
	uint32_t  res = 0;
 80076d0:	2000      	movs	r0, #0
		bit >>= 2;

	while (bit != 0) {
 80076d2:	b913      	cbnz	r3, 80076da <VL53L1_isqrt+0x14>
		}
		bit >>= 2;
	}

	return res;
}
 80076d4:	4770      	bx	lr
		bit >>= 2;
 80076d6:	089b      	lsrs	r3, r3, #2
 80076d8:	e7f8      	b.n	80076cc <VL53L1_isqrt+0x6>
		if (num >= res + bit)  {
 80076da:	18c1      	adds	r1, r0, r3
 80076dc:	4291      	cmp	r1, r2
 80076de:	ea4f 0050 	mov.w	r0, r0, lsr #1
			res = (res >> 1) + bit;
 80076e2:	bf9c      	itt	ls
 80076e4:	18c0      	addls	r0, r0, r3
			num -= res + bit;
 80076e6:	1a52      	subls	r2, r2, r1
		bit >>= 2;
 80076e8:	089b      	lsrs	r3, r3, #2
 80076ea:	e7f2      	b.n	80076d2 <VL53L1_isqrt+0xc>

080076ec <VL53L1_hist_calc_zero_distance_phase>:
	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);

	VL53L1_p_017  = period;
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 80076ec:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
{


	uint8_t VL53L1_p_031 = 0;

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 80076f0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 80076f4:	f8b0 207e 	ldrh.w	r2, [r0, #126]	; 0x7e
	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 80076f8:	3301      	adds	r3, #1
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 80076fa:	eb02 22c1 	add.w	r2, r2, r1, lsl #11
 80076fe:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 8007702:	031b      	lsls	r3, r3, #12
	period = 2048 *
 8007704:	f403 23fe 	and.w	r3, r3, #520192	; 0x7f000
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 8007708:	eba2 22c1 	sub.w	r2, r2, r1, lsl #11
 800770c:	441a      	add	r2, r3
	VL53L1_p_017  = VL53L1_p_017 % period;
 800770e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007712:	fb03 2311 	mls	r3, r3, r1, r2
	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 8007716:	f8a0 309c 	strh.w	r3, [r0, #156]	; 0x9c
}
 800771a:	4770      	bx	lr

0800771c <VL53L1_hist_remove_ambient_bins>:
	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800771c:	7b03      	ldrb	r3, [r0, #12]
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	2b07      	cmp	r3, #7
{
 8007724:	b530      	push	{r4, r5, lr}
	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 8007726:	d002      	beq.n	800772e <VL53L1_hist_remove_ambient_bins+0x12>
	if (pdata->number_of_ambient_bins > 0) {
 8007728:	7ac2      	ldrb	r2, [r0, #11]
 800772a:	bb02      	cbnz	r2, 800776e <VL53L1_hist_remove_ambient_bins+0x52>
}
 800772c:	bd30      	pop	{r4, r5, pc}
 800772e:	f100 020c 	add.w	r2, r0, #12
 8007732:	f100 0512 	add.w	r5, r0, #18
		i = 0;
 8007736:	2300      	movs	r3, #0
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 8007738:	f812 4b01 	ldrb.w	r4, [r2], #1
 800773c:	f004 0107 	and.w	r1, r4, #7
 8007740:	2907      	cmp	r1, #7
 8007742:	d005      	beq.n	8007750 <VL53L1_hist_remove_ambient_bins+0x34>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 8007744:	18c1      	adds	r1, r0, r3
				i++;
 8007746:	3301      	adds	r3, #1
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 8007748:	730c      	strb	r4, [r1, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800774a:	7954      	ldrb	r4, [r2, #5]
 800774c:	748c      	strb	r4, [r1, #18]
				i++;
 800774e:	b2db      	uxtb	r3, r3
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8007750:	42aa      	cmp	r2, r5
 8007752:	d1f1      	bne.n	8007738 <VL53L1_hist_remove_ambient_bins+0x1c>
 8007754:	f103 020c 	add.w	r2, r3, #12
 8007758:	4402      	add	r2, r0
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800775a:	2110      	movs	r1, #16
			pdata->bin_rep[lc] = 0;
 800775c:	2400      	movs	r4, #0
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800775e:	2b05      	cmp	r3, #5
 8007760:	d8e2      	bhi.n	8007728 <VL53L1_hist_remove_ambient_bins+0xc>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 8007762:	f802 1b01 	strb.w	r1, [r2], #1
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8007766:	3301      	adds	r3, #1
			pdata->bin_rep[lc] = 0;
 8007768:	7154      	strb	r4, [r2, #5]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800776a:	b2db      	uxtb	r3, r3
 800776c:	e7f7      	b.n	800775e <VL53L1_hist_remove_ambient_bins+0x42>
				bin < pdata->VL53L1_p_023; bin++) {
 800776e:	7a44      	ldrb	r4, [r0, #9]
 8007770:	f100 0118 	add.w	r1, r0, #24
 8007774:	4613      	mov	r3, r2
		for (bin = pdata->number_of_ambient_bins;
 8007776:	429c      	cmp	r4, r3
 8007778:	d805      	bhi.n	8007786 <VL53L1_hist_remove_ambient_bins+0x6a>
				pdata->VL53L1_p_024 -
 800777a:	7a83      	ldrb	r3, [r0, #10]
 800777c:	1a9a      	subs	r2, r3, r2
		pdata->number_of_ambient_bins = 0;
 800777e:	2300      	movs	r3, #0
		pdata->VL53L1_p_024 =
 8007780:	7282      	strb	r2, [r0, #10]
		pdata->number_of_ambient_bins = 0;
 8007782:	72c3      	strb	r3, [r0, #11]
}
 8007784:	e7d2      	b.n	800772c <VL53L1_hist_remove_ambient_bins+0x10>
				pdata->bin_data[bin];
 8007786:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800778a:	f841 5b04 	str.w	r5, [r1], #4
				bin < pdata->VL53L1_p_023; bin++) {
 800778e:	3301      	adds	r3, #1
 8007790:	b2db      	uxtb	r3, r3
 8007792:	e7f0      	b.n	8007776 <VL53L1_hist_remove_ambient_bins+0x5a>

08007794 <VL53L1_calc_pll_period_mm>:
	if (fast_osc_frequency > 0)
 8007794:	b118      	cbz	r0, 800779e <VL53L1_calc_pll_period_mm+0xa>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8007796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800779a:	fbb3 f0f0 	udiv	r0, r3, r0
	pll_period_mm =
 800779e:	f249 2357 	movw	r3, #37463	; 0x9257
			(pll_period_us >> 2);
 80077a2:	0880      	lsrs	r0, r0, #2
	pll_period_mm =
 80077a4:	4358      	muls	r0, r3
	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 80077a6:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
}
 80077aa:	0c00      	lsrs	r0, r0, #16
 80077ac:	4770      	bx	lr

080077ae <VL53L1_rate_maths>:
	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 80077ae:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80077b2:	da16      	bge.n	80077e2 <VL53L1_rate_maths+0x34>
	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 80077b4:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80077b8:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 80077bc:	dd14      	ble.n	80077e8 <VL53L1_rate_maths+0x3a>
	if (time_us > 0)
 80077be:	b141      	cbz	r1, 80077d2 <VL53L1_rate_maths+0x24>
		frac_bits = 3;
 80077c0:	2203      	movs	r2, #3
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 80077c2:	4093      	lsls	r3, r2
	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 80077c4:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 80077c8:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80077cc:	fbb3 f3f1 	udiv	r3, r3, r1
	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 80077d0:	dd00      	ble.n	80077d4 <VL53L1_rate_maths+0x26>
		tmp_int = tmp_int << 4;
 80077d2:	011b      	lsls	r3, r3, #4
	rate_mcps =  (uint16_t)tmp_int;
 80077d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80077d8:	4283      	cmp	r3, r0
 80077da:	bf28      	it	cs
 80077dc:	4603      	movcs	r3, r0
	return rate_mcps;
 80077de:	b298      	uxth	r0, r3
}
 80077e0:	4770      	bx	lr
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 80077e2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80077e6:	e7ea      	b.n	80077be <VL53L1_rate_maths+0x10>
	if (time_us > 0)
 80077e8:	2900      	cmp	r1, #0
 80077ea:	d0f3      	beq.n	80077d4 <VL53L1_rate_maths+0x26>
		frac_bits = 7;
 80077ec:	2207      	movs	r2, #7
 80077ee:	e7e8      	b.n	80077c2 <VL53L1_rate_maths+0x14>

080077f0 <VL53L1_rate_per_spad_maths>:
{
 80077f0:	b530      	push	{r4, r5, lr}
	if (num_spads > 0) {
 80077f2:	b15a      	cbz	r2, 800780c <VL53L1_rate_per_spad_maths+0x1c>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 80077f4:	020d      	lsls	r5, r1, #8
 80077f6:	fa05 f400 	lsl.w	r4, r5, r0
		tmp_int = (tmp_int +
 80077fa:	eb04 0452 	add.w	r4, r4, r2, lsr #1
 80077fe:	fbb4 f0f2 	udiv	r0, r4, r2
	rate_per_spad = (uint16_t)tmp_int;
 8007802:	4298      	cmp	r0, r3
 8007804:	bf28      	it	cs
 8007806:	4618      	movcs	r0, r3
}
 8007808:	b280      	uxth	r0, r0
 800780a:	bd30      	pop	{r4, r5, pc}
		tmp_int = ((peak_count_rate) << frac_bits);
 800780c:	fa01 f000 	lsl.w	r0, r1, r0
 8007810:	e7f7      	b.n	8007802 <VL53L1_rate_per_spad_maths+0x12>
	...

08007814 <VL53L1_range_maths>:
{
 8007814:	b5d0      	push	{r4, r6, r7, lr}
 8007816:	461c      	mov	r4, r3
	if (fast_osc_frequency > 0)
 8007818:	b118      	cbz	r0, 8007822 <VL53L1_range_maths+0xe>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800781a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800781e:	fbb3 f0f0 	udiv	r0, r3, r0
	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 8007822:	1a8e      	subs	r6, r1, r2
 8007824:	eb61 0701 	sbc.w	r7, r1, r1
	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 8007828:	fba0 2306 	umull	r2, r3, r0, r6
 800782c:	fb00 3307 	mla	r3, r0, r7, r3
	tmp_long_int =  tmp_long_int / (0x01 << 9);
 8007830:	461f      	mov	r7, r3
 8007832:	2a00      	cmp	r2, #0
 8007834:	f177 0300 	sbcs.w	r3, r7, #0
 8007838:	4616      	mov	r6, r2
 800783a:	da06      	bge.n	800784a <VL53L1_range_maths+0x36>
 800783c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007840:	1856      	adds	r6, r2, r1
 8007842:	f04f 0100 	mov.w	r1, #0
 8007846:	eb41 0707 	adc.w	r7, r1, r7
 800784a:	0a72      	lsrs	r2, r6, #9
 800784c:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 8007850:	f249 2157 	movw	r1, #37463	; 0x9257
 8007854:	fba2 2301 	umull	r2, r3, r2, r1
	tmp_long_int =  tmp_long_int / (0x01 << 9);
 8007858:	1278      	asrs	r0, r7, #9
	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800785a:	fb01 3300 	mla	r3, r1, r0, r3
	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800785e:	461f      	mov	r7, r3
 8007860:	2a00      	cmp	r2, #0
 8007862:	f177 0300 	sbcs.w	r3, r7, #0
 8007866:	4616      	mov	r6, r2
 8007868:	da05      	bge.n	8007876 <VL53L1_range_maths+0x62>
 800786a:	4916      	ldr	r1, [pc, #88]	; (80078c4 <VL53L1_range_maths+0xb0>)
 800786c:	1856      	adds	r6, r2, r1
 800786e:	f04f 0100 	mov.w	r1, #0
 8007872:	eb41 0707 	adc.w	r7, r1, r7
	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 8007876:	9905      	ldr	r1, [sp, #20]
	tmp_long_int =  tmp_long_int / (0x01 << 22);
 8007878:	0db2      	lsrs	r2, r6, #22
 800787a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800787e:	188b      	adds	r3, r1, r2
	range_mm *= gain_factor;
 8007880:	9904      	ldr	r1, [sp, #16]
 8007882:	4359      	muls	r1, r3
	range_mm += 0x0400;
 8007884:	f501 6380 	add.w	r3, r1, #1024	; 0x400
	range_mm /= 0x0800;
 8007888:	2b00      	cmp	r3, #0
 800788a:	461a      	mov	r2, r3
 800788c:	bfb8      	it	lt
 800788e:	f601 32ff 	addwlt	r2, r1, #3071	; 0xbff
 8007892:	12d2      	asrs	r2, r2, #11
 8007894:	4610      	mov	r0, r2
	if (fractional_bits == 0) {
 8007896:	b96c      	cbnz	r4, 80078b4 <VL53L1_range_maths+0xa0>
		range_mm_10 = range_mm * 10;
 8007898:	230a      	movs	r3, #10
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800789a:	435a      	muls	r2, r3
 800789c:	bf48      	it	mi
 800789e:	3203      	addmi	r2, #3
 80078a0:	1092      	asrs	r2, r2, #2
		if ((range_mm_10 % 10) < 5)
 80078a2:	fb92 f0f3 	sdiv	r0, r2, r3
 80078a6:	fb03 2210 	mls	r2, r3, r0, r2
 80078aa:	2a04      	cmp	r2, #4
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 80078ac:	bfc8      	it	gt
 80078ae:	3001      	addgt	r0, #1
 80078b0:	b200      	sxth	r0, r0
}
 80078b2:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (fractional_bits == 1)
 80078b4:	2c01      	cmp	r4, #1
 80078b6:	d1fc      	bne.n	80078b2 <VL53L1_range_maths+0x9e>
		range_mm = range_mm / (0x01 << 1);
 80078b8:	1e18      	subs	r0, r3, #0
 80078ba:	bfb8      	it	lt
 80078bc:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 80078c0:	1300      	asrs	r0, r0, #12
	return range_mm;
 80078c2:	e7f6      	b.n	80078b2 <VL53L1_range_maths+0x9e>
 80078c4:	003fffff 	.word	0x003fffff

080078c8 <VL53L1_decode_vcsel_period>:
	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 80078c8:	3001      	adds	r0, #1
 80078ca:	0040      	lsls	r0, r0, #1

	return VL53L1_p_031;
}
 80078cc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80078d0:	4770      	bx	lr

080078d2 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{


	phist->cal_config__vcsel_start =
 80078d2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80078d6:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
			pxtalk->cal_config__vcsel_start;
	phist->VL53L1_p_019 =
 80078da:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 80078de:	f8a1 3086 	strh.w	r3, [r1, #134]	; 0x86
			pxtalk->VL53L1_p_019;
	phist->VL53L1_p_022 =
 80078e2:	7a03      	ldrb	r3, [r0, #8]
 80078e4:	720b      	strb	r3, [r1, #8]
			pxtalk->VL53L1_p_022;

	phist->phasecal_result__reference_phase   =
 80078e6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80078e8:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
			pxtalk->phasecal_result__reference_phase;
	phist->phasecal_result__vcsel_start       =
 80078ec:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80078f0:	f881 3080 	strb.w	r3, [r1, #128]	; 0x80
			pxtalk->phasecal_result__vcsel_start;

	phist->vcsel_width =
 80078f4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80078f8:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
			pxtalk->vcsel_width;
	phist->zero_distance_phase =
 80078fc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007900:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
			pxtalk->zero_distance_phase;

	phist->zone_id      = pxtalk->zone_id;
 8007904:	7803      	ldrb	r3, [r0, #0]
 8007906:	708b      	strb	r3, [r1, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 8007908:	7a43      	ldrb	r3, [r0, #9]
 800790a:	724b      	strb	r3, [r1, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800790c:	6843      	ldr	r3, [r0, #4]
 800790e:	604b      	str	r3, [r1, #4]
}
 8007910:	4770      	bx	lr
	...

08007914 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 8007914:	b530      	push	{r4, r5, lr}
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;

	pdata->zone_id                   = 0;
	pdata->time_stamp                = 0;

	pdata->VL53L1_p_022                 = 0;
 8007916:	f44f 54c0 	mov.w	r4, #6144	; 0x1800
 800791a:	8114      	strh	r4, [r2, #8]
	pdata->number_of_ambient_samples          = 0;
	pdata->ambient_events_sum                 = 0;
	pdata->VL53L1_p_004             = 0;

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
		pdata->bin_seq[i] = (uint8_t)i;
 800791c:	4d17      	ldr	r5, [pc, #92]	; (800797c <VL53L1_init_histogram_bin_data_struct+0x68>)
 800791e:	4c18      	ldr	r4, [pc, #96]	; (8007980 <VL53L1_init_histogram_bin_data_struct+0x6c>)
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 8007920:	7291      	strb	r1, [r2, #10]
	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 8007922:	f240 3303 	movw	r3, #771	; 0x303
		pdata->bin_seq[i] = (uint8_t)i;
 8007926:	e9c2 5403 	strd	r5, r4, [r2, #12]
	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800792a:	8013      	strh	r3, [r2, #0]

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
		pdata->bin_rep[i] = 1;
 800792c:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
	pdata->zone_id                   = 0;
 8007930:	2300      	movs	r3, #0
		pdata->bin_rep[i] = 1;
 8007932:	6154      	str	r4, [r2, #20]
	pdata->result__dss_actual_effective_spads = 0;
 8007934:	e9c2 331e 	strd	r3, r3, [r2, #120]	; 0x78
	pdata->max_bin_value                      = 0;
 8007938:	e9c2 3325 	strd	r3, r3, [r2, #148]	; 0x94
	pdata->VL53L1_p_004             = 0;
 800793c:	e9c2 3328 	strd	r3, r3, [r2, #160]	; 0xa0
	pdata->zone_id                   = 0;
 8007940:	7093      	strb	r3, [r2, #2]
	pdata->time_stamp                = 0;
 8007942:	6053      	str	r3, [r2, #4]
	pdata->phasecal_result__vcsel_start       = 0;
 8007944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	pdata->VL53L1_p_009                       = 0;
 8007948:	f882 3084 	strb.w	r3, [r2, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800794c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 8007950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	pdata->zero_distance_phase                = 0;
 8007954:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 8007958:	f882 309e 	strb.w	r3, [r2, #158]	; 0x9e
	pdata->number_of_ambient_bins    = 0;
 800795c:	72d3      	strb	r3, [r2, #11]

	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
		if (i < VL53L1_p_024)
			pdata->bin_data[i] = bin_value;
		else
			pdata->bin_data[i] = 0;
 800795e:	461c      	mov	r4, r3
 8007960:	3218      	adds	r2, #24
		if (i < VL53L1_p_024)
 8007962:	b29d      	uxth	r5, r3
 8007964:	42a9      	cmp	r1, r5
			pdata->bin_data[i] = bin_value;
 8007966:	f103 0301 	add.w	r3, r3, #1
 800796a:	bf8c      	ite	hi
 800796c:	6010      	strhi	r0, [r2, #0]
			pdata->bin_data[i] = 0;
 800796e:	6014      	strls	r4, [r2, #0]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 8007970:	2b18      	cmp	r3, #24
 8007972:	f102 0204 	add.w	r2, r2, #4
 8007976:	d1f4      	bne.n	8007962 <VL53L1_init_histogram_bin_data_struct+0x4e>


}
 8007978:	bd30      	pop	{r4, r5, pc}
 800797a:	bf00      	nop
 800797c:	03020100 	.word	0x03020100
 8007980:	01010504 	.word	0x01010504

08007984 <VL53L1_decode_row_col>:
	uint8_t  *pcol)
{



	if (spad_number > 127) {
 8007984:	0603      	lsls	r3, r0, #24
		*prow = 8 + ((255-spad_number) & 0x07);
 8007986:	bf49      	itett	mi
 8007988:	43c3      	mvnmi	r3, r0
		*pcol = (spad_number-128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 800798a:	f000 0307 	andpl.w	r3, r0, #7
		*prow = 8 + ((255-spad_number) & 0x07);
 800798e:	f003 0307 	andmi.w	r3, r3, #7
		*pcol = (spad_number-128) >> 3;
 8007992:	3880      	submi	r0, #128	; 0x80
		*pcol = (127-spad_number) >> 3;
 8007994:	bf54      	ite	pl
 8007996:	f1c0 007f 	rsbpl	r0, r0, #127	; 0x7f
		*prow = 8 + ((255-spad_number) & 0x07);
 800799a:	3308      	addmi	r3, #8
		*pcol = (127-spad_number) >> 3;
 800799c:	ea4f 00e0 	mov.w	r0, r0, asr #3
		*prow = 8 + ((255-spad_number) & 0x07);
 80079a0:	bf4c      	ite	mi
 80079a2:	700b      	strbmi	r3, [r1, #0]
		*prow = spad_number & 0x07;
 80079a4:	700b      	strbpl	r3, [r1, #0]
		*pcol = (127-spad_number) >> 3;
 80079a6:	7010      	strb	r0, [r2, #0]
	}
}
 80079a8:	4770      	bx	lr

080079aa <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 80079aa:	b570      	push	{r4, r5, r6, lr}

	uint8_t  bin            = 0;

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 80079ac:	7a84      	ldrb	r4, [r0, #10]
 80079ae:	f100 0318 	add.w	r3, r0, #24
 80079b2:	2100      	movs	r1, #0
 80079b4:	b2ca      	uxtb	r2, r1
 80079b6:	4294      	cmp	r4, r2
 80079b8:	d800      	bhi.n	80079bc <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 80079bc:	b162      	cbz	r2, 80079d8 <VL53L1_hist_find_min_max_bin_values+0x2e>
 80079be:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
 80079c2:	681d      	ldr	r5, [r3, #0]
 80079c4:	42ae      	cmp	r6, r5
 80079c6:	da07      	bge.n	80079d8 <VL53L1_hist_find_min_max_bin_values+0x2e>
		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 80079c8:	f8d0 5098 	ldr.w	r5, [r0, #152]	; 0x98
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4295      	cmp	r5, r2
 80079d0:	dd07      	ble.n	80079e2 <VL53L1_hist_find_min_max_bin_values+0x38>
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 80079d2:	3101      	adds	r1, #1
 80079d4:	3304      	adds	r3, #4
 80079d6:	e7ed      	b.n	80079b4 <VL53L1_hist_find_min_max_bin_values+0xa>
			pdata->min_bin_value = pdata->bin_data[bin];
 80079d8:	681d      	ldr	r5, [r3, #0]
 80079da:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 80079de:	2a00      	cmp	r2, #0
 80079e0:	d1f2      	bne.n	80079c8 <VL53L1_hist_find_min_max_bin_values+0x1e>
			pdata->max_bin_value = pdata->bin_data[bin];
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
 80079e8:	e7f3      	b.n	80079d2 <VL53L1_hist_find_min_max_bin_values+0x28>

080079ea <VL53L1_hist_estimate_ambient_from_thresholded_bins>:
{
 80079ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ec:	460c      	mov	r4, r1
 80079ee:	4605      	mov	r5, r0
	VL53L1_hist_find_min_max_bin_values(pdata);
 80079f0:	4608      	mov	r0, r1
 80079f2:	f7ff ffda 	bl	80079aa <VL53L1_hist_find_min_max_bin_values>
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 80079f6:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 80079fa:	4630      	mov	r0, r6
 80079fc:	f7ff fe63 	bl	80076c6 <VL53L1_isqrt>
	VL53L1_p_032 *= ambient_threshold_sigma;
 8007a00:	4368      	muls	r0, r5
	pdata->number_of_ambient_samples = 0;
 8007a02:	2300      	movs	r3, #0
	VL53L1_p_032 += 0x07;
 8007a04:	3007      	adds	r0, #7
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8007a06:	7aa7      	ldrb	r7, [r4, #10]
	pdata->number_of_ambient_samples = 0;
 8007a08:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
	VL53L1_p_032 += pdata->min_bin_value;
 8007a0c:	eb06 1020 	add.w	r0, r6, r0, asr #4
	pdata->ambient_events_sum        = 0;
 8007a10:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8007a14:	f104 0518 	add.w	r5, r4, #24
 8007a18:	b2d9      	uxtb	r1, r3
 8007a1a:	428f      	cmp	r7, r1
 8007a1c:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 8007a20:	d809      	bhi.n	8007a36 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x4c>
	if (pdata->number_of_ambient_samples > 0) {
 8007a22:	b13a      	cbz	r2, 8007a34 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x4a>
		pdata->VL53L1_p_004 +=
 8007a24:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007a28:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		pdata->VL53L1_p_004 /=
 8007a2c:	fb93 f2f2 	sdiv	r2, r3, r2
 8007a30:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
}
 8007a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 8007a36:	f855 6b04 	ldr.w	r6, [r5], #4
 8007a3a:	4286      	cmp	r6, r0
 8007a3c:	da07      	bge.n	8007a4e <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x64>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8007a3e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 8007a42:	3201      	adds	r2, #1
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8007a44:	4431      	add	r1, r6
 8007a46:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 8007a4a:	f884 209e 	strb.w	r2, [r4, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8007a4e:	3301      	adds	r3, #1
 8007a50:	e7e2      	b.n	8007a18 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x2e>

08007a52 <VL53L1_hist_estimate_ambient_from_ambient_bins>:

	uint8_t  bin            = 0;

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 8007a52:	7ac1      	ldrb	r1, [r0, #11]
{
 8007a54:	b530      	push	{r4, r5, lr}
	if (pdata->number_of_ambient_bins > 0) {
 8007a56:	b189      	cbz	r1, 8007a7c <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2a>
		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;



		pdata->ambient_events_sum = 0;
 8007a58:	2200      	movs	r2, #0
		pdata->number_of_ambient_samples =
 8007a5a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
		pdata->ambient_events_sum = 0;
 8007a5e:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 8007a62:	f100 0518 	add.w	r5, r0, #24
 8007a66:	b2d4      	uxtb	r4, r2
 8007a68:	42a1      	cmp	r1, r4
 8007a6a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8007a6e:	d806      	bhi.n	8007a7e <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>
			pdata->ambient_events_sum += pdata->bin_data[bin];

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
		pdata->VL53L1_p_004 +=
 8007a70:	eb03 0351 	add.w	r3, r3, r1, lsr #1
				((int32_t)pdata->number_of_ambient_bins / 2);
		pdata->VL53L1_p_004 /=
 8007a74:	fb93 f3f1 	sdiv	r3, r3, r1
 8007a78:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;

	}

	LOG_FUNCTION_END(0);
}
 8007a7c:	bd30      	pop	{r4, r5, pc}
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8007a7e:	f855 4b04 	ldr.w	r4, [r5], #4
 8007a82:	4423      	add	r3, r4
 8007a84:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 8007a88:	3201      	adds	r2, #1
 8007a8a:	e7ec      	b.n	8007a66 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x14>

08007a8c <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	461c      	mov	r4, r3

	tmp32 = 4 * events_threshold;



	tmp32 += ((uint32_t)signal_thresh_sigma *
 8007a90:	435b      	muls	r3, r3
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 8007a92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8007a96:	460e      	mov	r6, r1
 8007a98:	4615      	mov	r5, r2
	tmp32  = VL53L1_isqrt(tmp32);
 8007a9a:	f7ff fe14 	bl	80076c6 <VL53L1_isqrt>
	tmp32 += (uint32_t)signal_thresh_sigma;
 8007a9e:	4404      	add	r4, r0



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 8007aa0:	0130      	lsls	r0, r6, #4
 8007aa2:	f7ff fe10 	bl	80076c6 <VL53L1_isqrt>
	range_mm *= ref_distance_mm;
 8007aa6:	4368      	muls	r0, r5

	if (tmp32 > 0) {
 8007aa8:	b11c      	cbz	r4, 8007ab2 <VL53L1_f_002+0x26>
		range_mm += (tmp32);
 8007aaa:	4420      	add	r0, r4
		range_mm /= (2*tmp32);
 8007aac:	0064      	lsls	r4, r4, #1
 8007aae:	fbb0 f0f4 	udiv	r0, r0, r4
	}

	return range_mm;

}
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}

08007ab4 <VL53L1_f_001>:
{
 8007ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	b089      	sub	sp, #36	; 0x24
	pdata->VL53L1_p_012    = 0x0000;
 8007aba:	2700      	movs	r7, #0
{
 8007abc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007abe:	9007      	str	r0, [sp, #28]
	pdata->VL53L1_p_004     = 0x0000;
 8007ac0:	e9c4 7706 	strd	r7, r7, [r4, #24]
	pdata->VL53L1_p_035             = 0;
 8007ac4:	e9c4 7708 	strd	r7, r7, [r4, #32]
{
 8007ac8:	461d      	mov	r5, r3
	*pambient_dmax_mm  = 0;
 8007aca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	pdata->VL53L1_p_033 = 0x0000;
 8007acc:	e9c4 7704 	strd	r7, r7, [r4, #16]
	*pambient_dmax_mm  = 0;
 8007ad0:	801f      	strh	r7, [r3, #0]
	if ((pbins->VL53L1_p_019        != 0) &&
 8007ad2:	f8b5 0086 	ldrh.w	r0, [r5, #134]	; 0x86
{
 8007ad6:	468a      	mov	sl, r1
 8007ad8:	4616      	mov	r6, r2
	if ((pbins->VL53L1_p_019        != 0) &&
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d042      	beq.n	8007b64 <VL53L1_f_001+0xb0>
 8007ade:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d03e      	beq.n	8007b64 <VL53L1_f_001+0xb0>
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 8007ae6:	f7ff fdb5 	bl	8007654 <VL53L1_calc_pll_period_us>
		periods_elapsed = pbins->total_periods_elapsed + 1;
 8007aea:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
			VL53L1_duration_maths(
 8007aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007af2:	3301      	adds	r3, #1
 8007af4:	2110      	movs	r1, #16
 8007af6:	f7ff fdb3 	bl	8007660 <VL53L1_duration_maths>
 8007afa:	4601      	mov	r1, r0
		pdata->VL53L1_p_036  =
 8007afc:	6020      	str	r0, [r4, #0]
			VL53L1_rate_maths(
 8007afe:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8007b02:	f7ff fe54 	bl	80077ae <VL53L1_rate_maths>
			VL53L1_events_per_spad_maths(
 8007b06:	6822      	ldr	r2, [r4, #0]
		pdata->VL53L1_p_001 =
 8007b08:	8320      	strh	r0, [r4, #24]
			VL53L1_events_per_spad_maths(
 8007b0a:	f8b5 107c 	ldrh.w	r1, [r5, #124]	; 0x7c
 8007b0e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8007b12:	f7ff fdb9 	bl	8007688 <VL53L1_events_per_spad_maths>
		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 8007b16:	f8b6 8016 	ldrh.w	r8, [r6, #22]
		pdata->VL53L1_p_033   =
 8007b1a:	6160      	str	r0, [r4, #20]
			VL53L1_events_per_spad_maths(
 8007b1c:	4602      	mov	r2, r0
		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 8007b1e:	f8a4 800c 	strh.w	r8, [r4, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 8007b22:	f8a4 801a 	strh.w	r8, [r4, #26]
		if (pdata->VL53L1_p_033 > 0) {
 8007b26:	b1e8      	cbz	r0, 8007b64 <VL53L1_f_001+0xb0>
			tmp64  *= 1000;
 8007b28:	f8b6 b018 	ldrh.w	fp, [r6, #24]
 8007b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b30:	fbab bc03 	umull	fp, ip, fp, r3
			tmp64 <<= (11+1);
 8007b34:	ea4f 310c 	mov.w	r1, ip, lsl #12
 8007b38:	ea4f 300b 	mov.w	r0, fp, lsl #12
			tmp32 = pdata->VL53L1_p_033/2;
 8007b3c:	ea4f 0c52 	mov.w	ip, r2, lsr #1
			tmp64 = do_division_u(tmp64,
 8007b40:	eb10 000c 	adds.w	r0, r0, ip
			tmp64 <<= (11+1);
 8007b44:	ea41 511b 	orr.w	r1, r1, fp, lsr #20
			tmp64 = do_division_u(tmp64,
 8007b48:	f141 0100 	adc.w	r1, r1, #0
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	f7f9 f883 	bl	8000c58 <__aeabi_uldivmod>
			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 8007b52:	f04f 0900 	mov.w	r9, #0
 8007b56:	4549      	cmp	r1, r9
 8007b58:	fa1f f888 	uxth.w	r8, r8
 8007b5c:	bf08      	it	eq
 8007b5e:	4540      	cmpeq	r0, r8
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 8007b60:	bf38      	it	cc
 8007b62:	8360      	strhcc	r0, [r4, #26]
	if ((pcal->ref__actual_effective_spads != 0) &&
 8007b64:	f8ba 2000 	ldrh.w	r2, [sl]
 8007b68:	2a00      	cmp	r2, #0
 8007b6a:	f000 80b2 	beq.w	8007cd2 <VL53L1_f_001+0x21e>
 8007b6e:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 80ad 	beq.w	8007cd2 <VL53L1_f_001+0x21e>
		(pcal->ref_reflectance_pc          != 0) &&
 8007b78:	f8ba b006 	ldrh.w	fp, [sl, #6]
		(pbins->VL53L1_p_019        != 0) &&
 8007b7c:	f1bb 0f00 	cmp.w	fp, #0
 8007b80:	f000 80a7 	beq.w	8007cd2 <VL53L1_f_001+0x21e>
		(pcal->ref_reflectance_pc          != 0) &&
 8007b84:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80a2 	beq.w	8007cd2 <VL53L1_f_001+0x21e>
		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 8007b8e:	f8ba 8002 	ldrh.w	r8, [sl, #2]
		tmp64 *= (1000 * 256);
 8007b92:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
		tmp32  = pcal->ref__actual_effective_spads/2;
 8007b96:	0857      	lsrs	r7, r2, #1
		tmp64 *= (1000 * 256);
 8007b98:	fba8 0100 	umull	r0, r1, r8, r0
		tmp64  = do_division_u(tmp64,
 8007b9c:	19c0      	adds	r0, r0, r7
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	f141 0100 	adc.w	r1, r1, #0
 8007ba6:	f7f9 f857 	bl	8000c58 <__aeabi_uldivmod>
		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	9305      	str	r3, [sp, #20]
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 8007bae:	9a05      	ldr	r2, [sp, #20]
 8007bb0:	6963      	ldr	r3, [r4, #20]
		pdata->VL53L1_p_012 <<= 4;
 8007bb2:	0107      	lsls	r7, r0, #4
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 8007bb4:	8b60      	ldrh	r0, [r4, #26]
		pdata->VL53L1_p_012 <<= 4;
 8007bb6:	6127      	str	r7, [r4, #16]
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 8007bb8:	fba2 8903 	umull	r8, r9, r2, r3
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 8007bbc:	8b63      	ldrh	r3, [r4, #26]
 8007bbe:	9306      	str	r3, [sp, #24]
 8007bc0:	fba0 2308 	umull	r2, r3, r0, r8
 8007bc4:	fb00 3309 	mla	r3, r0, r9, r3
		tmp64  += (1<<(11+7));
 8007bc8:	f512 2080 	adds.w	r0, r2, #262144	; 0x40000
 8007bcc:	f143 0100 	adc.w	r1, r3, #0
		tmp64 >>= (11+8);
 8007bd0:	0cc3      	lsrs	r3, r0, #19
 8007bd2:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
		tmp64  +=  500;
 8007bd6:	f513 73fa 	adds.w	r3, r3, #500	; 0x1f4
		tmp64 >>= (11+8);
 8007bda:	ea4f 42d1 	mov.w	r2, r1, lsr #19
		tmp64  +=  500;
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	f142 0300 	adc.w	r3, r2, #0
 8007be4:	9301      	str	r3, [sp, #4]
		if (tmp64 > 0x00FFFFFF)
 8007be6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	bf08      	it	eq
 8007bee:	f1b2 4f68 	cmpeq.w	r2, #3892314112	; 0xe8000000
 8007bf2:	d272      	bcs.n	8007cda <VL53L1_f_001+0x226>
		tmp64   = do_division_u(tmp64, 1000);
 8007bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f7f9 f82b 	bl	8000c58 <__aeabi_uldivmod>
 8007c02:	4680      	mov	r8, r0
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 8007c04:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8007c08:	fba3 0102 	umull	r0, r1, r3, r2
 8007c0c:	fba0 2307 	umull	r2, r3, r0, r7
		tmp64  += (1<<(11+7));
 8007c10:	f512 2080 	adds.w	r0, r2, #262144	; 0x40000
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 8007c14:	fb07 3301 	mla	r3, r7, r1, r3
		tmp64 >>= (11+8);
 8007c18:	ea4f 42d0 	mov.w	r2, r0, lsr #19
		tmp64  *= ((uint64_t)target_reflectance *
 8007c1c:	9907      	ldr	r1, [sp, #28]
 8007c1e:	f8ba 0008 	ldrh.w	r0, [sl, #8]
		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 8007c22:	f8c4 801c 	str.w	r8, [r4, #28]
		tmp64  += (1<<(11+7));
 8007c26:	f143 0300 	adc.w	r3, r3, #0
		tmp64 >>= (11+8);
 8007c2a:	ea42 3243 	orr.w	r2, r2, r3, lsl #13
		tmp64  *= ((uint64_t)target_reflectance *
 8007c2e:	fba0 0101 	umull	r0, r1, r0, r1
		tmp64 >>= (11+8);
 8007c32:	0cdb      	lsrs	r3, r3, #19
		tmp64  *= ((uint64_t)target_reflectance *
 8007c34:	4343      	muls	r3, r0
 8007c36:	fb02 3301 	mla	r3, r2, r1, r3
 8007c3a:	fba0 0102 	umull	r0, r1, r0, r2
 8007c3e:	4419      	add	r1, r3
		tmp64 = do_division_u(tmp64,
 8007c40:	2780      	movs	r7, #128	; 0x80
 8007c42:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8007c46:	2300      	movs	r3, #0
 8007c48:	fbeb 0107 	umlal	r0, r1, fp, r7
 8007c4c:	f7f9 f804 	bl	8000c58 <__aeabi_uldivmod>
		tmp64  +=  500;
 8007c50:	f510 73fa 	adds.w	r3, r0, #500	; 0x1f4
 8007c54:	9302      	str	r3, [sp, #8]
 8007c56:	f141 0300 	adc.w	r3, r1, #0
 8007c5a:	9303      	str	r3, [sp, #12]
		if (tmp64 > 0x00FFFFFF)
 8007c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	bf08      	it	eq
 8007c64:	f1b2 4f68 	cmpeq.w	r2, #3892314112	; 0xe8000000
 8007c68:	d23a      	bcs.n	8007ce0 <VL53L1_f_001+0x22c>
		tmp64 = do_division_u(tmp64, 1000);
 8007c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c72:	2300      	movs	r3, #0
 8007c74:	f7f8 fff0 	bl	8000c58 <__aeabi_uldivmod>
		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 8007c78:	6220      	str	r0, [r4, #32]
		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 8007c7a:	ea4f 2008 	mov.w	r0, r8, lsl #8
 8007c7e:	f7ff fd22 	bl	80076c6 <VL53L1_isqrt>
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 8007c82:	7873      	ldrb	r3, [r6, #1]
		if (pdata->VL53L1_p_004 <
 8007c84:	69e2      	ldr	r2, [r4, #28]
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 8007c86:	4358      	muls	r0, r3
		if (pdata->VL53L1_p_004 <
 8007c88:	6873      	ldr	r3, [r6, #4]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d204      	bcs.n	8007c98 <VL53L1_f_001+0x1e4>
			amb_thres_delta =
 8007c8e:	1a9b      	subs	r3, r3, r2
			amb_thres_delta <<= 8;
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	4298      	cmp	r0, r3
 8007c94:	bf38      	it	cc
 8007c96:	4618      	movcc	r0, r3
			(int16_t)VL53L1_f_002(
 8007c98:	7833      	ldrb	r3, [r6, #0]
 8007c9a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8007c9e:	6a21      	ldr	r1, [r4, #32]
 8007ca0:	f7ff fef4 	bl	8007a8c <VL53L1_f_002>
		tmp32 *= (uint32_t)pbins->vcsel_width;
 8007ca4:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 8007ca8:	6a21      	ldr	r1, [r4, #32]
			(int16_t)VL53L1_f_002(
 8007caa:	84e0      	strh	r0, [r4, #38]	; 0x26
		tmp32 *= (uint32_t)pbins->vcsel_width;
 8007cac:	4359      	muls	r1, r3
			(int16_t)VL53L1_f_002(
 8007cae:	68b0      	ldr	r0, [r6, #8]
 8007cb0:	7833      	ldrb	r3, [r6, #0]
 8007cb2:	f8ba 2004 	ldrh.w	r2, [sl, #4]
		tmp32 += (1 << 3);
 8007cb6:	3108      	adds	r1, #8
			(int16_t)VL53L1_f_002(
 8007cb8:	0909      	lsrs	r1, r1, #4
 8007cba:	0200      	lsls	r0, r0, #8
 8007cbc:	f7ff fee6 	bl	8007a8c <VL53L1_f_002>
		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 8007cc0:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
			(int16_t)VL53L1_f_002(
 8007cc4:	b200      	sxth	r0, r0
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 8007cc6:	4298      	cmp	r0, r3
		pdata->VL53L1_p_035 =
 8007cc8:	84a0      	strh	r0, [r4, #36]	; 0x24
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 8007cca:	bfa8      	it	ge
 8007ccc:	4618      	movge	r0, r3
 8007cce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cd0:	8018      	strh	r0, [r3, #0]
}
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	b009      	add	sp, #36	; 0x24
 8007cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tmp64 = 0x00FFFFFF;
 8007cda:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8007cde:	e791      	b.n	8007c04 <VL53L1_f_001+0x150>
			tmp64 = 0x00FFFFFF;
 8007ce0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007ce4:	e7c8      	b.n	8007c78 <VL53L1_f_001+0x1c4>

08007ce6 <VL53L1_f_016>:


	uint8_t  lb                 = 0;

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
	palgo->VL53L1_p_022                = 0;
 8007ce6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
{
 8007cea:	b510      	push	{r4, lr}
	palgo->VL53L1_p_022                = 0;
 8007cec:	8003      	strh	r3, [r0, #0]
	palgo->VL53L1_p_024           = 0;
 8007cee:	2300      	movs	r3, #0
	palgo->VL53L1_p_045         = 0;
	palgo->VL53L1_p_004   = 0;
	palgo->VL53L1_p_032 = 0;
 8007cf0:	e9c0 3302 	strd	r3, r3, [r0, #8]
{
 8007cf4:	4604      	mov	r4, r0
	palgo->VL53L1_p_024           = 0;
 8007cf6:	7083      	strb	r3, [r0, #2]
	palgo->VL53L1_p_045         = 0;
 8007cf8:	7103      	strb	r3, [r0, #4]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8007cfa:	f100 0210 	add.w	r2, r0, #16
 8007cfe:	f100 01b8 	add.w	r1, r0, #184	; 0xb8
 8007d02:	3028      	adds	r0, #40	; 0x28
		palgo->VL53L1_p_043[lb]      = 0;
 8007d04:	f802 3b01 	strb.w	r3, [r2], #1
		palgo->VL53L1_p_046[lb] = 0;
 8007d08:	75d3      	strb	r3, [r2, #23]
		palgo->VL53L1_p_047[lb]     = 0;
 8007d0a:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
		palgo->VL53L1_p_048[lb]      = 0;
 8007d0e:	f841 3b04 	str.w	r3, [r1], #4
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8007d12:	4282      	cmp	r2, r0
		palgo->VL53L1_p_008[lb]     = 0;
 8007d14:	65cb      	str	r3, [r1, #92]	; 0x5c
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 8007d16:	d1f5      	bne.n	8007d04 <VL53L1_f_016+0x1e>
	}

	palgo->VL53L1_p_049 = 0;
 8007d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
	palgo->VL53L1_p_050               = VL53L1_D_001;
	palgo->VL53L1_p_051             = 0;
 8007d1c:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	palgo->VL53L1_p_049 = 0;
 8007d20:	f8a4 2178 	strh.w	r2, [r4, #376]	; 0x178



	VL53L1_init_histogram_bin_data_struct(
 8007d24:	2118      	movs	r1, #24
 8007d26:	f504 7227 	add.w	r2, r4, #668	; 0x29c
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	f7ff fdf2 	bl	8007914 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 8007d30:	f504 7252 	add.w	r2, r4, #840	; 0x348
 8007d34:	2118      	movs	r1, #24
 8007d36:	2000      	movs	r0, #0
 8007d38:	f7ff fdec 	bl	8007914 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 8007d3c:	f504 727d 	add.w	r2, r4, #1012	; 0x3f4
 8007d40:	2118      	movs	r1, #24
 8007d42:	2000      	movs	r0, #0
 8007d44:	f7ff fde6 	bl	8007914 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 8007d48:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
 8007d4c:	2118      	movs	r1, #24
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f7ff fde0 	bl	8007914 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 8007d54:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 8007d58:	2118      	movs	r1, #24
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 8007d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	VL53L1_init_histogram_bin_data_struct(
 8007d5e:	2000      	movs	r0, #0
 8007d60:	f7ff bdd8 	b.w	8007914 <VL53L1_init_histogram_bin_data_struct>

08007d64 <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8007d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d68:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8007d6c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007d6e:	4699      	mov	r9, r3
	int32_t  samples      = 0;

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 8007d70:	f89b 3009 	ldrb.w	r3, [fp, #9]
 8007d74:	7063      	strb	r3, [r4, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 8007d76:	f89b 3008 	ldrb.w	r3, [fp, #8]
 8007d7a:	7023      	strb	r3, [r4, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 8007d7c:	f89b 300a 	ldrb.w	r3, [fp, #10]
 8007d80:	70a3      	strb	r3, [r4, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 8007d82:	f8db 30a4 	ldr.w	r3, [fp, #164]	; 0xa4
 8007d86:	60a3      	str	r3, [r4, #8]
{
 8007d88:	4682      	mov	sl, r0



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 8007d8a:	f89b 0084 	ldrb.w	r0, [fp, #132]	; 0x84
{
 8007d8e:	460d      	mov	r5, r1
 8007d90:	4690      	mov	r8, r2
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 8007d92:	f7ff fd99 	bl	80078c8 <VL53L1_decode_vcsel_period>
	palgo->VL53L1_p_031 =
 8007d96:	70e0      	strb	r0, [r4, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
	tmp *= (int64_t)ambient_threshold_events_scaler;
	tmp += 2048;
 8007d98:	f8db 30a4 	ldr.w	r3, [fp, #164]	; 0xa4
 8007d9c:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8007da0:	2700      	movs	r7, #0
 8007da2:	fbca 6703 	smlal	r6, r7, sl, r3
	tmp = do_division_s(tmp, 4096);
 8007da6:	2e00      	cmp	r6, #0
 8007da8:	f177 0300 	sbcs.w	r3, r7, #0
 8007dac:	da06      	bge.n	8007dbc <VL53L1_f_018+0x58>
 8007dae:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007db2:	18f6      	adds	r6, r6, r3
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	eb43 0707 	adc.w	r7, r3, r7
 8007dbc:	0b33      	lsrs	r3, r6, #12
 8007dbe:	ea43 5707 	orr.w	r7, r3, r7, lsl #20
	amb_events = (int32_t)tmp;



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8007dc2:	f04f 0a00 	mov.w	sl, #0
 8007dc6:	f89b 300a 	ldrb.w	r3, [fp, #10]
 8007dca:	fa5f f68a 	uxtb.w	r6, sl
 8007dce:	42b3      	cmp	r3, r6
 8007dd0:	d80c      	bhi.n	8007dec <VL53L1_f_018+0x88>

	}



	palgo->VL53L1_p_045 = 0;
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	7121      	strb	r1, [r4, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8007dd6:	f89b 3008 	ldrb.w	r3, [fp, #8]

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
			palgo->VL53L1_p_043[lb]      = 1;
 8007dda:	2601      	movs	r6, #1
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8007ddc:	f89b 000a 	ldrb.w	r0, [fp, #10]
 8007de0:	4298      	cmp	r0, r3
 8007de2:	d831      	bhi.n	8007e48 <VL53L1_f_018+0xe4>

	LOG_FUNCTION_END(status);

	return status;

}
 8007de4:	2000      	movs	r0, #0
 8007de6:	b003      	add	sp, #12
 8007de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 8007dec:	eb0b 0396 	add.w	r3, fp, r6, lsr #2
 8007df0:	7c9b      	ldrb	r3, [r3, #18]
		if (samples > 0) {
 8007df2:	b31b      	cbz	r3, 8007e3c <VL53L1_f_018+0xd8>
			if (lb < pxtalk->VL53L1_p_024 &&
 8007df4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007df6:	7a91      	ldrb	r1, [r2, #10]
 8007df8:	42b1      	cmp	r1, r6
 8007dfa:	d922      	bls.n	8007e42 <VL53L1_f_018+0xde>
 8007dfc:	f1b9 0f00 	cmp.w	r9, #0
 8007e00:	d01f      	beq.n	8007e42 <VL53L1_f_018+0xde>
					pxtalk->bin_data[lb]);
 8007e02:	1db1      	adds	r1, r6, #6
				VL53L1_p_008 = samples * (amb_events +
 8007e04:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8007e08:	4438      	add	r0, r7
 8007e0a:	4358      	muls	r0, r3
 8007e0c:	9301      	str	r3, [sp, #4]
			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 8007e0e:	f7ff fc5a 	bl	80076c6 <VL53L1_isqrt>
			VL53L1_p_008 += (samples/2);
 8007e12:	9b01      	ldr	r3, [sp, #4]
 8007e14:	eb00 0053 	add.w	r0, r0, r3, lsr #1
			VL53L1_p_008 /= samples;
 8007e18:	fb90 f0f3 	sdiv	r0, r0, r3
			VL53L1_p_008 *= ambient_threshold_sigma;
 8007e1c:	4368      	muls	r0, r5
			VL53L1_p_008 /= 16;
 8007e1e:	f110 0308 	adds.w	r3, r0, #8
 8007e22:	bf48      	it	mi
 8007e24:	f100 0317 	addmi.w	r3, r0, #23
			VL53L1_p_008 += amb_events;
 8007e28:	eb07 1323 	add.w	r3, r7, r3, asr #4
			if (VL53L1_p_008 < min_ambient_threshold_events)
 8007e2c:	4543      	cmp	r3, r8
			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 8007e2e:	f106 0616 	add.w	r6, r6, #22
 8007e32:	bfb8      	it	lt
 8007e34:	4643      	movlt	r3, r8
 8007e36:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 8007e3a:	60e3      	str	r3, [r4, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8007e3c:	f10a 0a01 	add.w	sl, sl, #1
 8007e40:	e7c1      	b.n	8007dc6 <VL53L1_f_018+0x62>
				VL53L1_p_008 = samples *  amb_events;
 8007e42:	fb03 f007 	mul.w	r0, r3, r7
 8007e46:	e7e1      	b.n	8007e0c <VL53L1_f_018+0xa8>
		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 8007e48:	1d9d      	adds	r5, r3, #6
 8007e4a:	f103 0016 	add.w	r0, r3, #22
 8007e4e:	f85b 5025 	ldr.w	r5, [fp, r5, lsl #2]
 8007e52:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007e56:	4285      	cmp	r5, r0
 8007e58:	eb04 0003 	add.w	r0, r4, r3
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8007e5c:	f103 0301 	add.w	r3, r3, #1
			palgo->VL53L1_p_043[lb]      = 1;
 8007e60:	bfc3      	ittte	gt
 8007e62:	7406      	strbgt	r6, [r0, #16]
			palgo->VL53L1_p_046[lb] = 1;
 8007e64:	f880 6028 	strbgt.w	r6, [r0, #40]	; 0x28
			palgo->VL53L1_p_045++;
 8007e68:	7920      	ldrbgt	r0, [r4, #4]
			palgo->VL53L1_p_043[lb]      = 0;
 8007e6a:	7401      	strble	r1, [r0, #16]
			palgo->VL53L1_p_045++;
 8007e6c:	bfc6      	itte	gt
 8007e6e:	3001      	addgt	r0, #1
 8007e70:	7120      	strbgt	r0, [r4, #4]
			palgo->VL53L1_p_046[lb] = 0;
 8007e72:	f880 1028 	strble.w	r1, [r0, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	e7b0      	b.n	8007ddc <VL53L1_f_018+0x78>

08007e7a <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8007e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t  j            = 0;
	uint8_t  found        = 0;

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 8007e7c:	2300      	movs	r3, #0

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8007e7e:	78c4      	ldrb	r4, [r0, #3]
	palgo->VL53L1_p_049 = 0;
 8007e80:	f880 3178 	strb.w	r3, [r0, #376]	; 0x178
	uint8_t  found        = 0;
 8007e84:	461e      	mov	r6, r3
		j = (i + 1) % palgo->VL53L1_p_031;



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
			if (palgo->VL53L1_p_046[i] == 0 &&
 8007e86:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8007e8a:	b2d9      	uxtb	r1, r3
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8007e8c:	428c      	cmp	r4, r1
 8007e8e:	d801      	bhi.n	8007e94 <VL53L1_f_019+0x1a>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8007e90:	2000      	movs	r0, #0
 8007e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8007e94:	7887      	ldrb	r7, [r0, #2]
 8007e96:	428f      	cmp	r7, r1
 8007e98:	f103 0501 	add.w	r5, r3, #1
 8007e9c:	d913      	bls.n	8007ec6 <VL53L1_f_019+0x4c>
		j = (i + 1) % palgo->VL53L1_p_031;
 8007e9e:	fbb5 f2f4 	udiv	r2, r5, r4
 8007ea2:	fb04 5212 	mls	r2, r4, r2, r5
		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8007ea6:	fa5f fe82 	uxtb.w	lr, r2
 8007eaa:	4577      	cmp	r7, lr
 8007eac:	d90b      	bls.n	8007ec6 <VL53L1_f_019+0x4c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 8007eae:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8007eb2:	b943      	cbnz	r3, 8007ec6 <VL53L1_f_019+0x4c>
				palgo->VL53L1_p_046[j] == 1 &&
 8007eb4:	4402      	add	r2, r0
 8007eb6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d103      	bne.n	8007ec6 <VL53L1_f_019+0x4c>
				palgo->VL53L1_p_046[j] == 1 &&
 8007ebe:	b916      	cbnz	r6, 8007ec6 <VL53L1_f_019+0x4c>
				palgo->VL53L1_p_049 = i;
 8007ec0:	f880 1178 	strb.w	r1, [r0, #376]	; 0x178
				found = 1;
 8007ec4:	461e      	mov	r6, r3
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 8007ec6:	462b      	mov	r3, r5
 8007ec8:	e7df      	b.n	8007e8a <VL53L1_f_019+0x10>

08007eca <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8007eca:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t  j            = 0;
	uint8_t  lb            = 0;

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 8007ecc:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
 8007ed0:	78c4      	ldrb	r4, [r0, #3]
				palgo->VL53L1_p_051++;

			if (palgo->VL53L1_p_046[i] > 0)
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
			else
				palgo->VL53L1_p_047[i] = 0;
 8007ed2:	2600      	movs	r6, #0
		lb < (palgo->VL53L1_p_049 +
 8007ed4:	1917      	adds	r7, r2, r4
	for (lb = palgo->VL53L1_p_049;
 8007ed6:	42ba      	cmp	r2, r7
 8007ed8:	f890 517a 	ldrb.w	r5, [r0, #378]	; 0x17a
 8007edc:	db07      	blt.n	8007eee <VL53L1_f_020+0x24>
		}

	}


	if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 8007ede:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
 8007ee2:	42ab      	cmp	r3, r5
 8007ee4:	d201      	bcs.n	8007eea <VL53L1_f_020+0x20>
		palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 8007ee6:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a

	LOG_FUNCTION_END(status);

	return status;

}
 8007eea:	2000      	movs	r0, #0
 8007eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i =  lb      % palgo->VL53L1_p_031;
 8007eee:	fbb2 f3f4 	udiv	r3, r2, r4
		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8007ef2:	f890 c002 	ldrb.w	ip, [r0, #2]
		i =  lb      % palgo->VL53L1_p_031;
 8007ef6:	fb04 2313 	mls	r3, r4, r3, r2
 8007efa:	b2db      	uxtb	r3, r3
		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8007efc:	459c      	cmp	ip, r3
 8007efe:	f102 0201 	add.w	r2, r2, #1
 8007f02:	d91a      	bls.n	8007f3a <VL53L1_f_020+0x70>
		j = (lb + 1) % palgo->VL53L1_p_031;
 8007f04:	fbb2 f1f4 	udiv	r1, r2, r4
 8007f08:	fb04 2111 	mls	r1, r4, r1, r2
		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8007f0c:	fa5f fe81 	uxtb.w	lr, r1
 8007f10:	45f4      	cmp	ip, lr
 8007f12:	d912      	bls.n	8007f3a <VL53L1_f_020+0x70>
			if (palgo->VL53L1_p_046[i] == 0 &&
 8007f14:	4403      	add	r3, r0
 8007f16:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
 8007f1a:	f1bc 0f00 	cmp.w	ip, #0
 8007f1e:	d10a      	bne.n	8007f36 <VL53L1_f_020+0x6c>
				palgo->VL53L1_p_046[j] == 1)
 8007f20:	4401      	add	r1, r0
			if (palgo->VL53L1_p_046[i] == 0 &&
 8007f22:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8007f26:	2901      	cmp	r1, #1
 8007f28:	d102      	bne.n	8007f30 <VL53L1_f_020+0x66>
				palgo->VL53L1_p_051++;
 8007f2a:	3501      	adds	r5, #1
 8007f2c:	f880 517a 	strb.w	r5, [r0, #378]	; 0x17a
				palgo->VL53L1_p_047[i] = 0;
 8007f30:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
 8007f34:	e001      	b.n	8007f3a <VL53L1_f_020+0x70>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 8007f36:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
		lb++) {
 8007f3a:	b2d2      	uxtb	r2, r2
 8007f3c:	e7cb      	b.n	8007ed6 <VL53L1_f_020+0xc>

08007f3e <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8007f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 8007f42:	78c4      	ldrb	r4, [r0, #3]
	max_filter_half_width = max_filter_half_width >> 1;

	for (blb = palgo->VL53L1_p_049;
 8007f44:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 8007f48:	1e66      	subs	r6, r4, #1
	max_filter_half_width = max_filter_half_width >> 1;
 8007f4a:	f3c6 0646 	ubfx	r6, r6, #1, #7
		blb < (palgo->VL53L1_p_049 +
 8007f4e:	eb01 0c04 	add.w	ip, r1, r4
				pulse_no = palgo->VL53L1_p_047[i] - 1;
				pdata   = &(palgo->VL53L1_p_002[pulse_no]);

				if (pulse_no < palgo->VL53L1_p_050) {

					pdata->VL53L1_p_026    = blb;
 8007f52:	2724      	movs	r7, #36	; 0x24
					pdata->VL53L1_p_025   = 0xFF;
 8007f54:	f04f 0eff 	mov.w	lr, #255	; 0xff
	for (blb = palgo->VL53L1_p_049;
 8007f58:	4561      	cmp	r1, ip
 8007f5a:	db02      	blt.n	8007f62 <VL53L1_f_021+0x24>

	LOG_FUNCTION_END(status);

	return status;

}
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (i < palgo->VL53L1_p_024 &&
 8007f62:	f890 9002 	ldrb.w	r9, [r0, #2]
		i =  blb      % palgo->VL53L1_p_031;
 8007f66:	fbb1 f3f4 	udiv	r3, r1, r4
 8007f6a:	fb04 1313 	mls	r3, r4, r3, r1
 8007f6e:	b2db      	uxtb	r3, r3
		if (i < palgo->VL53L1_p_024 &&
 8007f70:	1c4a      	adds	r2, r1, #1
 8007f72:	4599      	cmp	r9, r3
 8007f74:	b2d5      	uxtb	r5, r2
 8007f76:	d920      	bls.n	8007fba <VL53L1_f_021+0x7c>
		j = (blb + 1) % palgo->VL53L1_p_031;
 8007f78:	fbb2 f8f4 	udiv	r8, r2, r4
 8007f7c:	fb04 2818 	mls	r8, r4, r8, r2
		if (i < palgo->VL53L1_p_024 &&
 8007f80:	fa5f f288 	uxtb.w	r2, r8
 8007f84:	4591      	cmp	r9, r2
 8007f86:	d918      	bls.n	8007fba <VL53L1_f_021+0x7c>
			if (palgo->VL53L1_p_047[i] == 0 &&
 8007f88:	4403      	add	r3, r0
 8007f8a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007f8e:	eb00 0308 	add.w	r3, r0, r8
					palgo->VL53L1_p_047[j] > 0) {
 8007f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 8007f96:	b992      	cbnz	r2, 8007fbe <VL53L1_f_021+0x80>
 8007f98:	b17b      	cbz	r3, 8007fba <VL53L1_f_021+0x7c>
				if (pulse_no < palgo->VL53L1_p_050) {
 8007f9a:	f890 8179 	ldrb.w	r8, [r0, #377]	; 0x179
				pulse_no = palgo->VL53L1_p_047[j] - 1;
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b2db      	uxtb	r3, r3
				if (pulse_no < palgo->VL53L1_p_050) {
 8007fa2:	4598      	cmp	r8, r3
 8007fa4:	d909      	bls.n	8007fba <VL53L1_f_021+0x7c>
					pdata->VL53L1_p_015 = blb;
 8007fa6:	fb07 0303 	mla	r3, r7, r3, r0
 8007faa:	f883 117c 	strb.w	r1, [r3, #380]	; 0x17c
					pdata->VL53L1_p_022    = blb + 1;
 8007fae:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
					pdata->VL53L1_p_025   = 0xFF;
 8007fb2:	f8a3 e17e 	strh.w	lr, [r3, #382]	; 0x17e
					pdata->VL53L1_p_016   = 0;
 8007fb6:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
		blb++) {
 8007fba:	4629      	mov	r1, r5
 8007fbc:	e7cc      	b.n	8007f58 <VL53L1_f_021+0x1a>
				&& palgo->VL53L1_p_047[j] == 0) {
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1fb      	bne.n	8007fba <VL53L1_f_021+0x7c>
				pulse_no = palgo->VL53L1_p_047[i] - 1;
 8007fc2:	1e53      	subs	r3, r2, #1
				if (pulse_no < palgo->VL53L1_p_050) {
 8007fc4:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
				pulse_no = palgo->VL53L1_p_047[i] - 1;
 8007fc8:	b2db      	uxtb	r3, r3
				if (pulse_no < palgo->VL53L1_p_050) {
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d9f5      	bls.n	8007fba <VL53L1_f_021+0x7c>
					pdata->VL53L1_p_026    = blb;
 8007fce:	fb07 0303 	mla	r3, r7, r3, r0
						(pdata->VL53L1_p_026 + 1) -
 8007fd2:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
					pdata->VL53L1_p_026    = blb;
 8007fd6:	f883 117f 	strb.w	r1, [r3, #383]	; 0x17f
						(pdata->VL53L1_p_026 + 1) -
 8007fda:	3101      	adds	r1, #1
 8007fdc:	1a89      	subs	r1, r1, r2
					pdata->VL53L1_p_027 =
 8007fde:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
						(pdata->VL53L1_p_016 + 1) -
 8007fe2:	f893 117c 	ldrb.w	r1, [r3, #380]	; 0x17c
					pdata->VL53L1_p_016  = blb + 1;
 8007fe6:	f883 5180 	strb.w	r5, [r3, #384]	; 0x180
						(pdata->VL53L1_p_016 + 1) -
 8007fea:	1c6a      	adds	r2, r5, #1
 8007fec:	1a52      	subs	r2, r2, r1
 8007fee:	b2d2      	uxtb	r2, r2
					pdata->VL53L1_p_055 =
 8007ff0:	42b2      	cmp	r2, r6
 8007ff2:	bf28      	it	cs
 8007ff4:	4632      	movcs	r2, r6
 8007ff6:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
 8007ffa:	e7de      	b.n	8007fba <VL53L1_f_021+0x7c>

08007ffc <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8007ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t i       = 0;
	uint8_t swapped = 1;

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 8008000:	f891 317a 	ldrb.w	r3, [r1, #378]	; 0x17a
 8008004:	2b01      	cmp	r3, #1
{
 8008006:	b08a      	sub	sp, #40	; 0x28
 8008008:	4606      	mov	r6, r0
 800800a:	460c      	mov	r4, r1
	if (!(palgo->VL53L1_p_051 > 1))
 800800c:	f200 8082 	bhi.w	8008114 <VL53L1_f_028+0x118>
ENDFUNC:
	LOG_FUNCTION_END(status);

	return status;

}
 8008010:	2000      	movs	r0, #0
 8008012:	b00a      	add	sp, #40	; 0x28
 8008014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			p0 = &(palgo->VL53L1_p_002[i-1]);
 8008018:	1e69      	subs	r1, r5, #1
 800801a:	4379      	muls	r1, r7
 800801c:	f501 73be 	add.w	r3, r1, #380	; 0x17c
			p1 = &(palgo->VL53L1_p_002[i]);
 8008020:	f501 72d0 	add.w	r2, r1, #416	; 0x1a0
 8008024:	fb07 fe05 	mul.w	lr, r7, r5
			if (target_order
 8008028:	2e02      	cmp	r6, #2
			p0 = &(palgo->VL53L1_p_002[i-1]);
 800802a:	4423      	add	r3, r4
			p1 = &(palgo->VL53L1_p_002[i]);
 800802c:	4422      	add	r2, r4
			if (target_order
 800802e:	4421      	add	r1, r4
						p1->VL53L1_p_013) {
 8008030:	44a6      	add	lr, r4
			if (target_order
 8008032:	d13f      	bne.n	80080b4 <VL53L1_f_028+0xb8>
				if (p0->VL53L1_p_013 <
 8008034:	f8d1 818c 	ldr.w	r8, [r1, #396]	; 0x18c
 8008038:	f8de 118c 	ldr.w	r1, [lr, #396]	; 0x18c
 800803c:	4588      	cmp	r8, r1
 800803e:	da2c      	bge.n	800809a <VL53L1_f_028+0x9e>
					memcpy(ptmp,
 8008040:	4696      	mov	lr, r2
 8008042:	f10d 0804 	add.w	r8, sp, #4
 8008046:	f102 0a20 	add.w	sl, r2, #32
 800804a:	f8de 0000 	ldr.w	r0, [lr]
 800804e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8008052:	46c1      	mov	r9, r8
 8008054:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8008058:	f10e 0e08 	add.w	lr, lr, #8
 800805c:	45d6      	cmp	lr, sl
 800805e:	46c8      	mov	r8, r9
 8008060:	d1f3      	bne.n	800804a <VL53L1_f_028+0x4e>
 8008062:	f8de 0000 	ldr.w	r0, [lr]
 8008066:	f8c9 0000 	str.w	r0, [r9]
					memcpy(p1,
 800806a:	4619      	mov	r1, r3
 800806c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008070:	f851 eb04 	ldr.w	lr, [r1], #4
 8008074:	f842 eb04 	str.w	lr, [r2], #4
 8008078:	4281      	cmp	r1, r0
 800807a:	d1f9      	bne.n	8008070 <VL53L1_f_028+0x74>
					memcpy(p0,
 800807c:	f10d 0e04 	add.w	lr, sp, #4
 8008080:	4672      	mov	r2, lr
 8008082:	ca03      	ldmia	r2!, {r0, r1}
 8008084:	4562      	cmp	r2, ip
 8008086:	6018      	str	r0, [r3, #0]
 8008088:	6059      	str	r1, [r3, #4]
 800808a:	4696      	mov	lr, r2
 800808c:	f103 0308 	add.w	r3, r3, #8
 8008090:	d1f6      	bne.n	8008080 <VL53L1_f_028+0x84>
					memcpy(p0,
 8008092:	f8de 0000 	ldr.w	r0, [lr]
 8008096:	6018      	str	r0, [r3, #0]
					swapped = 1;
 8008098:	2001      	movs	r0, #1
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800809a:	3501      	adds	r5, #1
 800809c:	4603      	mov	r3, r0
 800809e:	b2e8      	uxtb	r0, r5
		swapped = 0;
 80080a0:	4605      	mov	r5, r0
 80080a2:	4618      	mov	r0, r3
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 80080a4:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
 80080a8:	42ab      	cmp	r3, r5
 80080aa:	d8b5      	bhi.n	8008018 <VL53L1_f_028+0x1c>
	while (swapped > 0) {
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d0af      	beq.n	8008010 <VL53L1_f_028+0x14>
		swapped = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	e7f5      	b.n	80080a0 <VL53L1_f_028+0xa4>
				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 80080b4:	f8d1 8194 	ldr.w	r8, [r1, #404]	; 0x194
 80080b8:	f8de 1194 	ldr.w	r1, [lr, #404]	; 0x194
 80080bc:	4588      	cmp	r8, r1
 80080be:	d9ec      	bls.n	800809a <VL53L1_f_028+0x9e>
					memcpy(ptmp,
 80080c0:	4696      	mov	lr, r2
 80080c2:	f10d 0804 	add.w	r8, sp, #4
 80080c6:	f102 0a20 	add.w	sl, r2, #32
 80080ca:	f8de 0000 	ldr.w	r0, [lr]
 80080ce:	f8de 1004 	ldr.w	r1, [lr, #4]
 80080d2:	46c1      	mov	r9, r8
 80080d4:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 80080d8:	f10e 0e08 	add.w	lr, lr, #8
 80080dc:	45d6      	cmp	lr, sl
 80080de:	46c8      	mov	r8, r9
 80080e0:	d1f3      	bne.n	80080ca <VL53L1_f_028+0xce>
 80080e2:	f8de 0000 	ldr.w	r0, [lr]
 80080e6:	f8c9 0000 	str.w	r0, [r9]
					memcpy(p1,
 80080ea:	4619      	mov	r1, r3
 80080ec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80080f0:	f851 eb04 	ldr.w	lr, [r1], #4
 80080f4:	f842 eb04 	str.w	lr, [r2], #4
 80080f8:	4281      	cmp	r1, r0
 80080fa:	d1f9      	bne.n	80080f0 <VL53L1_f_028+0xf4>
					memcpy(p0,
 80080fc:	f10d 0e04 	add.w	lr, sp, #4
 8008100:	4672      	mov	r2, lr
 8008102:	ca03      	ldmia	r2!, {r0, r1}
 8008104:	4562      	cmp	r2, ip
 8008106:	6018      	str	r0, [r3, #0]
 8008108:	6059      	str	r1, [r3, #4]
 800810a:	4696      	mov	lr, r2
 800810c:	f103 0308 	add.w	r3, r3, #8
 8008110:	d1f6      	bne.n	8008100 <VL53L1_f_028+0x104>
 8008112:	e7be      	b.n	8008092 <VL53L1_f_028+0x96>
 8008114:	2724      	movs	r7, #36	; 0x24
		swapped = 0;
 8008116:	2000      	movs	r0, #0
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8008118:	2501      	movs	r5, #1
					memcpy(p0,
 800811a:	eb0d 0c07 	add.w	ip, sp, r7
 800811e:	e7c1      	b.n	80080a4 <VL53L1_f_028+0xa8>

08008120 <VL53L1_f_022>:

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 8008120:	2324      	movs	r3, #36	; 0x24
 8008122:	fb03 2000 	mla	r0, r3, r0, r2
 8008126:	2300      	movs	r3, #0
{
 8008128:	b5f0      	push	{r4, r5, r6, r7, lr}
	pdata->VL53L1_p_020 = 0;
 800812a:	e9c0 3361 	strd	r3, r3, [r0, #388]	; 0x184

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800812e:	f890 417c 	ldrb.w	r4, [r0, #380]	; 0x17c
 8008132:	f890 6180 	ldrb.w	r6, [r0, #384]	; 0x180
 8008136:	f8d0 5188 	ldr.w	r5, [r0, #392]	; 0x188
 800813a:	42a6      	cmp	r6, r4
 800813c:	d206      	bcs.n	800814c <VL53L1_f_022+0x2c>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 800813e:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8008142:	1aed      	subs	r5, r5, r3
	pdata->VL53L1_p_013 =
 8008144:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c

	LOG_FUNCTION_END(status);

	return status;
}
 8008148:	2000      	movs	r0, #0
 800814a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i =  lb % palgo->VL53L1_p_031;
 800814c:	78d7      	ldrb	r7, [r2, #3]
 800814e:	fbb4 f3f7 	udiv	r3, r4, r7
 8008152:	fb07 4313 	mls	r3, r7, r3, r4
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 8008156:	b2db      	uxtb	r3, r3
 8008158:	3306      	adds	r3, #6
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800815a:	3401      	adds	r4, #1
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 800815c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008160:	441d      	add	r5, r3
 8008162:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 8008166:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 800816a:	6895      	ldr	r5, [r2, #8]
 800816c:	442b      	add	r3, r5
 800816e:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8008172:	b2e4      	uxtb	r4, r4
 8008174:	e7df      	b.n	8008136 <VL53L1_f_022+0x16>

08008176 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 8008176:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	b085      	sub	sp, #20
 800817c:	4696      	mov	lr, r2
	int64_t event_sum     = 0;
	int64_t weighted_sum  = 0;

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 800817e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
{
 8008180:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
	int64_t weighted_sum  = 0;
 8008184:	f04f 0c00 	mov.w	ip, #0
{
 8008188:	469a      	mov	sl, r3
	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 800818a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800818e:	6013      	str	r3, [r2, #0]
{
 8008190:	468b      	mov	fp, r1
	int64_t event_sum     = 0;
 8008192:	4662      	mov	r2, ip
	int64_t weighted_sum  = 0;
 8008194:	4661      	mov	r1, ip
	int64_t event_sum     = 0;
 8008196:	4663      	mov	r3, ip

			if (clip_events > 0 && VL53L1_p_008 < 0)
				VL53L1_p_008 = 0;
			event_sum += VL53L1_p_008;
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8008198:	f44f 6800 	mov.w	r8, #2048	; 0x800
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 800819c:	4558      	cmp	r0, fp
 800819e:	dd1a      	ble.n	80081d6 <VL53L1_f_030+0x60>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 80081a0:	2a01      	cmp	r2, #1
 80081a2:	f173 0000 	sbcs.w	r0, r3, #0
 80081a6:	db12      	blt.n	80081ce <VL53L1_f_030+0x58>
		weighted_sum += do_division_s(event_sum, 2);
 80081a8:	0850      	lsrs	r0, r2, #1
 80081aa:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80081ae:	105c      	asrs	r4, r3, #1
		weighted_sum = do_division_s(weighted_sum, event_sum);
 80081b0:	eb10 000c 	adds.w	r0, r0, ip
 80081b4:	eb44 0101 	adc.w	r1, r4, r1
 80081b8:	f7f8 fcfe 	bl	8000bb8 <__aeabi_ldivmod>
 80081bc:	460b      	mov	r3, r1
		if (weighted_sum < 0)
			weighted_sum = 0;
		*pphase = (uint32_t)weighted_sum;
 80081be:	2800      	cmp	r0, #0
 80081c0:	f173 0100 	sbcs.w	r1, r3, #0
 80081c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
		weighted_sum = do_division_s(weighted_sum, event_sum);
 80081c6:	4602      	mov	r2, r0
		*pphase = (uint32_t)weighted_sum;
 80081c8:	bfb8      	it	lt
 80081ca:	2200      	movlt	r2, #0
 80081cc:	600a      	str	r2, [r1, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80081ce:	2000      	movs	r0, #0
 80081d0:	b005      	add	sp, #20
 80081d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (lb < 0)
 80081d6:	2800      	cmp	r0, #0
			i = lb + (int16_t)VL53L1_p_031;
 80081d8:	bfb2      	itee	lt
 80081da:	eb0e 0400 	addlt.w	r4, lr, r0
			i = lb % (int16_t)VL53L1_p_031;
 80081de:	fbb0 f4fe 	udivge	r4, r0, lr
 80081e2:	fb0e 0414 	mlsge	r4, lr, r4, r0
 80081e6:	b224      	sxth	r4, r4
		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 80081e8:	b2a5      	uxth	r5, r4
 80081ea:	2d17      	cmp	r5, #23
 80081ec:	d830      	bhi.n	8008250 <VL53L1_f_030+0xda>
				(int64_t)pbins->bin_data[i] -
 80081ee:	3406      	adds	r4, #6
				(int64_t)pbins->VL53L1_p_004;
 80081f0:	f8d9 60a4 	ldr.w	r6, [r9, #164]	; 0xa4
				(int64_t)pbins->bin_data[i] -
 80081f4:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80081f8:	17e5      	asrs	r5, r4, #31
			VL53L1_p_008 =
 80081fa:	1ba4      	subs	r4, r4, r6
 80081fc:	eb65 75e6 	sbc.w	r5, r5, r6, asr #31
 8008200:	e9cd 4500 	strd	r4, r5, [sp]
			if (clip_events > 0 && VL53L1_p_008 < 0)
 8008204:	f1ba 0f00 	cmp.w	sl, #0
 8008208:	d007      	beq.n	800821a <VL53L1_f_030+0xa4>
 800820a:	2c00      	cmp	r4, #0
 800820c:	f175 0400 	sbcs.w	r4, r5, #0
 8008210:	bfbe      	ittt	lt
 8008212:	2400      	movlt	r4, #0
 8008214:	2500      	movlt	r5, #0
 8008216:	e9cd 4500 	strdlt	r4, r5, [sp]
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 800821a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800821e:	2700      	movs	r7, #0
 8008220:	fbc0 6708 	smlal	r6, r7, r0, r8
			event_sum += VL53L1_p_008;
 8008224:	9c00      	ldr	r4, [sp, #0]
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8008226:	e9cd 6702 	strd	r6, r7, [sp, #8]
			event_sum += VL53L1_p_008;
 800822a:	1912      	adds	r2, r2, r4
 800822c:	9c01      	ldr	r4, [sp, #4]
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 800822e:	9e00      	ldr	r6, [sp, #0]
			event_sum += VL53L1_p_008;
 8008230:	eb44 0303 	adc.w	r3, r4, r3
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8008234:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 8008238:	4365      	muls	r5, r4
 800823a:	9c03      	ldr	r4, [sp, #12]
 800823c:	fb06 5704 	mla	r7, r6, r4, r5
 8008240:	9c02      	ldr	r4, [sp, #8]
 8008242:	fba4 4506 	umull	r4, r5, r4, r6
 8008246:	443d      	add	r5, r7
			weighted_sum +=
 8008248:	eb1c 0c04 	adds.w	ip, ip, r4
 800824c:	eb45 0101 	adc.w	r1, r5, r1
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 8008250:	3001      	adds	r0, #1
 8008252:	b200      	sxth	r0, r0
 8008254:	e7a2      	b.n	800819c <VL53L1_f_030+0x26>

08008256 <VL53L1_f_027>:
{
 8008256:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825a:	461e      	mov	r6, r3
	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 800825c:	2324      	movs	r3, #36	; 0x24
 800825e:	fb03 6300 	mla	r3, r3, r0, r6
{
 8008262:	4689      	mov	r9, r1
 8008264:	4692      	mov	sl, r2
	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 8008266:	f893 117e 	ldrb.w	r1, [r3, #382]	; 0x17e
 800826a:	78f2      	ldrb	r2, [r6, #3]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 800826c:	f893 517c 	ldrb.w	r5, [r3, #380]	; 0x17c
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 8008270:	f893 8180 	ldrb.w	r8, [r3, #384]	; 0x180
{
 8008274:	4604      	mov	r4, r0
	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 8008276:	fbb1 f0f2 	udiv	r0, r1, r2
 800827a:	fb02 1010 	mls	r0, r2, r0, r1
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 800827e:	b2c0      	uxtb	r0, r0
 8008280:	1a40      	subs	r0, r0, r1
 8008282:	fa1f fb80 	uxth.w	fp, r0
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 8008286:	fa15 f080 	uxtah	r0, r5, r0
	window_width = VL53L1_p_016 - VL53L1_p_015;
 800828a:	eba8 0505 	sub.w	r5, r8, r5
			VL53L1_p_015 + window_width,
 800828e:	2d03      	cmp	r5, #3
 8008290:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
 8008294:	bfa8      	it	ge
 8008296:	2503      	movge	r5, #3
 8008298:	00bf      	lsls	r7, r7, #2
 800829a:	b2ad      	uxth	r5, r5
		VL53L1_f_030(
 800829c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
			VL53L1_p_015 + window_width,
 80082a0:	fa15 f180 	uxtah	r1, r5, r0
		VL53L1_f_030(
 80082a4:	4433      	add	r3, r6
 80082a6:	e9cd a300 	strd	sl, r3, [sp]
 80082aa:	b209      	sxth	r1, r1
 80082ac:	464b      	mov	r3, r9
 80082ae:	b200      	sxth	r0, r0
 80082b0:	f7ff ff61 	bl	8008176 <VL53L1_f_030>
	if (status == VL53L1_ERROR_NONE)
 80082b4:	b968      	cbnz	r0, 80082d2 <VL53L1_f_027+0x7c>
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 80082b6:	eb08 010b 	add.w	r1, r8, fp
			VL53L1_f_030(
 80082ba:	f507 77cc 	add.w	r7, r7, #408	; 0x198
				VL53L1_p_016 - window_width,
 80082be:	1b48      	subs	r0, r1, r5
			VL53L1_f_030(
 80082c0:	4437      	add	r7, r6
 80082c2:	e9cd a700 	strd	sl, r7, [sp]
 80082c6:	78f2      	ldrb	r2, [r6, #3]
 80082c8:	464b      	mov	r3, r9
 80082ca:	b209      	sxth	r1, r1
 80082cc:	b200      	sxth	r0, r0
 80082ce:	f7ff ff52 	bl	8008176 <VL53L1_f_030>
	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 80082d2:	2324      	movs	r3, #36	; 0x24
 80082d4:	fb03 6204 	mla	r2, r3, r4, r6
	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 80082d8:	fb03 6304 	mla	r3, r3, r4, r6
	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 80082dc:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
 80082e0:	f8d2 5198 	ldr.w	r5, [r2, #408]	; 0x198
 80082e4:	42a9      	cmp	r1, r5
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 80082e6:	bf84      	itt	hi
 80082e8:	f8c2 5190 	strhi.w	r5, [r2, #400]	; 0x190
		pdata->VL53L1_p_029 = tmp_phase;
 80082ec:	f8c2 1198 	strhi.w	r1, [r2, #408]	; 0x198
	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 80082f0:	e9d3 1264 	ldrd	r1, r2, [r3, #400]	; 0x190
 80082f4:	428a      	cmp	r2, r1
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 80082f6:	bf38      	it	cc
 80082f8:	f8c3 2190 	strcc.w	r2, [r3, #400]	; 0x190
	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 80082fc:	2324      	movs	r3, #36	; 0x24
 80082fe:	fb03 6404 	mla	r4, r3, r4, r6
 8008302:	e9d4 3265 	ldrd	r3, r2, [r4, #404]	; 0x194
 8008306:	4293      	cmp	r3, r2
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 8008308:	bf88      	it	hi
 800830a:	f8c4 3198 	strhi.w	r3, [r4, #408]	; 0x198
}
 800830e:	b003      	add	sp, #12
 8008310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008314 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	461e      	mov	r6, r3
 8008318:	9b06      	ldr	r3, [sp, #24]
 800831a:	4615      	mov	r5, r2
 800831c:	4604      	mov	r4, r0

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 800831e:	22ac      	movs	r2, #172	; 0xac
 8008320:	4618      	mov	r0, r3
 8008322:	f002 ffed 	bl	800b300 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8008326:	f895 1178 	ldrb.w	r1, [r5, #376]	; 0x178
	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 800832a:	4603      	mov	r3, r0
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 800832c:	2024      	movs	r0, #36	; 0x24
 800832e:	fb00 5004 	mla	r0, r0, r4, r5
		palgo->VL53L1_p_031);
 8008332:	78ef      	ldrb	r7, [r5, #3]
		lb < (palgo->VL53L1_p_049 +
 8008334:	f895 2178 	ldrb.w	r2, [r5, #376]	; 0x178
 8008338:	443a      	add	r2, r7
	for (lb = palgo->VL53L1_p_049;
 800833a:	4291      	cmp	r1, r2
 800833c:	db01      	blt.n	8008342 <VL53L1_f_023+0x2e>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800833e:	2000      	movs	r0, #0
 8008340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 8008342:	f890 217c 	ldrb.w	r2, [r0, #380]	; 0x17c
 8008346:	428a      	cmp	r2, r1
 8008348:	d803      	bhi.n	8008352 <VL53L1_f_023+0x3e>
 800834a:	f890 2180 	ldrb.w	r2, [r0, #384]	; 0x180
 800834e:	428a      	cmp	r2, r1
 8008350:	d20a      	bcs.n	8008368 <VL53L1_f_023+0x54>
			i =  lb % palgo->VL53L1_p_031;
 8008352:	fbb1 f4f7 	udiv	r4, r1, r7
			if (i < ppulse->VL53L1_p_024)
 8008356:	7a9a      	ldrb	r2, [r3, #10]
			i =  lb % palgo->VL53L1_p_031;
 8008358:	fb07 1414 	mls	r4, r7, r4, r1
 800835c:	b2e4      	uxtb	r4, r4
			if (i < ppulse->VL53L1_p_024)
 800835e:	42a2      	cmp	r2, r4
				ppulse->bin_data[i] = pad_value;
 8008360:	bf84      	itt	hi
 8008362:	3406      	addhi	r4, #6
 8008364:	f843 6024 	strhi.w	r6, [r3, r4, lsl #2]
		lb++) {
 8008368:	3101      	adds	r1, #1
 800836a:	b2c9      	uxtb	r1, r1
 800836c:	e7e1      	b.n	8008332 <VL53L1_f_023+0x1e>

0800836e <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800836e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	VL53L1_Error status      = VL53L1_ERROR_NONE;
	VL53L1_Error func_status = VL53L1_ERROR_NONE;

	uint8_t  i    = 0;
	int32_t  VL53L1_p_003    = 0;
 8008372:	2400      	movs	r4, #0
{
 8008374:	b092      	sub	sp, #72	; 0x48
	int32_t  VL53L1_p_018    = 0;
 8008376:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	int32_t  VL53L1_p_001    = 0;
	int32_t  a_zp = 0;
 800837a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	int32_t  c_zp = 0;
	int32_t  ax   = 0;
 800837e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	int32_t  bx   = 0;
	int32_t  cx   = 0;
 8008382:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
{
 8008386:	460d      	mov	r5, r1

	i = bin % VL53L1_p_031;



	VL53L1_f_013(
 8008388:	ac0b      	add	r4, sp, #44	; 0x2c
{
 800838a:	4619      	mov	r1, r3
	i = bin % VL53L1_p_031;
 800838c:	fbb0 f3f2 	udiv	r3, r0, r2
 8008390:	fb03 0012 	mls	r0, r3, r2, r0
	VL53L1_f_013(
 8008394:	ab0e      	add	r3, sp, #56	; 0x38
	i = bin % VL53L1_p_031;
 8008396:	b2c0      	uxtb	r0, r0
{
 8008398:	9e19      	ldr	r6, [sp, #100]	; 0x64
	VL53L1_f_013(
 800839a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	9400      	str	r4, [sp, #0]
 80083a0:	ab0d      	add	r3, sp, #52	; 0x34
 80083a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
{
 80083a6:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
 80083aa:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	VL53L1_f_013(
 80083ac:	f000 faeb 	bl	8008986 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 80083b0:	ab0c      	add	r3, sp, #48	; 0x30
 80083b2:	e9cd 4300 	strd	r4, r3, [sp]
 80083b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083ba:	ab0a      	add	r3, sp, #40	; 0x28
 80083bc:	4632      	mov	r2, r6
 80083be:	f000 fae2 	bl	8008986 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 80083c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083c6:	f1b8 0f00 	cmp.w	r8, #0
 80083ca:	d007      	beq.n	80083dc <VL53L1_f_026+0x6e>
		VL53L1_f_013(
 80083cc:	ab11      	add	r3, sp, #68	; 0x44
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	ab10      	add	r3, sp, #64	; 0x40
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80083d6:	ab0f      	add	r3, sp, #60	; 0x3c
 80083d8:	f000 fad5 	bl	8008986 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 80083dc:	9707      	str	r7, [sp, #28]
 80083de:	f8b6 3086 	ldrh.w	r3, [r6, #134]	; 0x86
 80083e2:	9306      	str	r3, [sp, #24]
 80083e4:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083ec:	9304      	str	r3, [sp, #16]
 80083ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083f0:	9303      	str	r3, [sp, #12]
 80083f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083f4:	9302      	str	r3, [sp, #8]
 80083f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008400:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8008404:	4628      	mov	r0, r5
 8008406:	f001 fb36 	bl	8009a76 <VL53L1_f_014>
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 800840a:	300f      	adds	r0, #15
		*psigma_est = 0xFFFF;
 800840c:	bf08      	it	eq
 800840e:	f64f 73ff 	movweq	r3, #65535	; 0xffff


	return status;
}
 8008412:	f04f 0000 	mov.w	r0, #0
		*psigma_est = 0xFFFF;
 8008416:	bf08      	it	eq
 8008418:	803b      	strheq	r3, [r7, #0]
}
 800841a:	b012      	add	sp, #72	; 0x48
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008420 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 8008420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008422:	9c07      	ldr	r4, [sp, #28]
 8008424:	e9dd c505 	ldrd	ip, r5, [sp, #20]
	uint16_t  lower_phase_limit = 0;
	uint16_t  upper_phase_limit = 0;



	pdata->range_id              = range_id;
 8008428:	7020      	strb	r0, [r4, #0]
	pdata->time_stamp            = 0;
 800842a:	2000      	movs	r0, #0
 800842c:	6060      	str	r0, [r4, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 800842e:	7828      	ldrb	r0, [r5, #0]
 8008430:	7220      	strb	r0, [r4, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 8008432:	786e      	ldrb	r6, [r5, #1]
 8008434:	7266      	strb	r6, [r4, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8008436:	78ae      	ldrb	r6, [r5, #2]
 8008438:	72a6      	strb	r6, [r4, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 800843a:	78ee      	ldrb	r6, [r5, #3]
 800843c:	72e6      	strb	r6, [r4, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 800843e:	792e      	ldrb	r6, [r5, #4]
 8008440:	7326      	strb	r6, [r4, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8008442:	3601      	adds	r6, #1
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 8008444:	796f      	ldrb	r7, [r5, #5]
 8008446:	7367      	strb	r7, [r4, #13]
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8008448:	1a36      	subs	r6, r6, r0
	pdata->VL53L1_p_030  =
 800844a:	7426      	strb	r6, [r4, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 800844c:	696e      	ldr	r6, [r5, #20]
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 800844e:	69ef      	ldr	r7, [r5, #28]
	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 8008450:	f8bc 009c 	ldrh.w	r0, [ip, #156]	; 0x9c
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8008454:	f8b5 e020 	ldrh.w	lr, [r5, #32]
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 8008458:	87e6      	strh	r6, [r4, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 800845a:	8b2e      	ldrh	r6, [r5, #24]
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 800845c:	f8a4 7042 	strh.w	r7, [r4, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 8008460:	68ef      	ldr	r7, [r5, #12]
 8008462:	62a7      	str	r7, [r4, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 8008464:	692f      	ldr	r7, [r5, #16]
	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 8008466:	82a0      	strh	r0, [r4, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8008468:	f8a4 e03c 	strh.w	lr, [r4, #60]	; 0x3c
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 800846c:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 8008470:	62e7      	str	r7, [r4, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 8008472:	68ad      	ldr	r5, [r5, #8]
 8008474:	6265      	str	r5, [r4, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 8008476:	f8dc 5088 	ldr.w	r5, [ip, #136]	; 0x88
 800847a:	61a5      	str	r5, [r4, #24]


	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;


	if (sigma_thres > 0 &&
 800847c:	b9a3      	cbnz	r3, 80084a8 <VL53L1_f_029+0x88>
	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800847e:	2313      	movs	r3, #19
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
	if (lower_phase_limit < pdata->zero_distance_phase)
 8008480:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8008484:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 8008488:	ea4f 2301 	mov.w	r3, r1, lsl #8
	if (lower_phase_limit < pdata->zero_distance_phase)
 800848c:	d903      	bls.n	8008496 <VL53L1_f_029+0x76>
		lower_phase_limit =
 800848e:	1ac3      	subs	r3, r0, r3
		lower_phase_limit  = 0;

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
	upper_phase_limit += pbins->zero_distance_phase;

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 8008490:	b29b      	uxth	r3, r3
 8008492:	429e      	cmp	r6, r3
 8008494:	d304      	bcc.n	80084a0 <VL53L1_f_029+0x80>
	upper_phase_limit += pbins->zero_distance_phase;
 8008496:	eb00 2202 	add.w	r2, r0, r2, lsl #8
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 800849a:	b290      	uxth	r0, r2
 800849c:	4286      	cmp	r6, r0
 800849e:	d902      	bls.n	80084a6 <VL53L1_f_029+0x86>
		pdata->VL53L1_p_014 > upper_phase_limit)
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 80084a0:	2305      	movs	r3, #5
 80084a2:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a

}
 80084a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sigma_thres > 0 &&
 80084a8:	ebbe 1f43 	cmp.w	lr, r3, lsl #5
 80084ac:	d9e7      	bls.n	800847e <VL53L1_f_029+0x5e>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 80084ae:	2306      	movs	r3, #6
 80084b0:	e7e6      	b.n	8008480 <VL53L1_f_029+0x60>

080084b2 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 80084b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	4698      	mov	r8, r3

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);

	uint8_t  lb     = 0;
	uint8_t  i     = 0;
	int32_t  suma  = 0;
 80084ba:	2300      	movs	r3, #0
	int32_t  sumb  = 0;
 80084bc:	e9cd 3303 	strd	r3, r3, [sp, #12]
	int32_t  sumc  = 0;
 80084c0:	9305      	str	r3, [sp, #20]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 80084c2:	7853      	ldrb	r3, [r2, #1]
 80084c4:	f888 3001 	strb.w	r3, [r8, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 80084c8:	7813      	ldrb	r3, [r2, #0]
 80084ca:	f888 3000 	strb.w	r3, [r8]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80084ce:	2724      	movs	r7, #36	; 0x24
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 80084d0:	7893      	ldrb	r3, [r2, #2]
 80084d2:	f888 3002 	strb.w	r3, [r8, #2]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80084d6:	fb07 2700 	mla	r7, r7, r0, r2
{
 80084da:	4689      	mov	r9, r1
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80084dc:	f897 617c 	ldrb.w	r6, [r7, #380]	; 0x17c
{
 80084e0:	4615      	mov	r5, r2

		i =  lb  % palgo3->VL53L1_p_031;


		VL53L1_f_013(
 80084e2:	f10d 0a14 	add.w	sl, sp, #20
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80084e6:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 80084ea:	42b3      	cmp	r3, r6
 80084ec:	d203      	bcs.n	80084f6 <VL53L1_f_034+0x44>
			(sumb + sumc) -
			(suma + palgo3->VL53L1_p_004);
	}

	return status;
}
 80084ee:	2000      	movs	r0, #0
 80084f0:	b006      	add	sp, #24
 80084f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i =  lb  % palgo3->VL53L1_p_031;
 80084f6:	78e8      	ldrb	r0, [r5, #3]
 80084f8:	fbb6 f4f0 	udiv	r4, r6, r0
 80084fc:	fb00 6414 	mls	r4, r0, r4, r6
 8008500:	b2e4      	uxtb	r4, r4
		VL53L1_f_013(
 8008502:	ab04      	add	r3, sp, #16
 8008504:	f897 1182 	ldrb.w	r1, [r7, #386]	; 0x182
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	4620      	mov	r0, r4
 800850c:	ab03      	add	r3, sp, #12
 800850e:	464a      	mov	r2, r9
 8008510:	f8cd a004 	str.w	sl, [sp, #4]
 8008514:	f000 fa37 	bl	8008986 <VL53L1_f_013>
		pfiltered->VL53L1_p_003[i] = suma;
 8008518:	eb08 0484 	add.w	r4, r8, r4, lsl #2
			(sumc + palgo3->VL53L1_p_004);
 800851c:	f8d5 c008 	ldr.w	ip, [r5, #8]
		pfiltered->VL53L1_p_003[i] = suma;
 8008520:	9b03      	ldr	r3, [sp, #12]
		pfiltered->VL53L1_p_018[i] = sumb;
 8008522:	9a04      	ldr	r2, [sp, #16]
		pfiltered->VL53L1_p_001[i] = sumc;
 8008524:	9905      	ldr	r1, [sp, #20]
		pfiltered->VL53L1_p_003[i] = suma;
 8008526:	6063      	str	r3, [r4, #4]
			(suma + sumb) -
 8008528:	1898      	adds	r0, r3, r2
		pfiltered->VL53L1_p_018[i] = sumb;
 800852a:	6662      	str	r2, [r4, #100]	; 0x64
			(sumc + palgo3->VL53L1_p_004);
 800852c:	eb01 0e0c 	add.w	lr, r1, ip
			(sumb + sumc) -
 8008530:	440a      	add	r2, r1
			(suma + palgo3->VL53L1_p_004);
 8008532:	4463      	add	r3, ip
			(suma + sumb) -
 8008534:	eba0 000e 	sub.w	r0, r0, lr
			(sumb + sumc) -
 8008538:	1ad2      	subs	r2, r2, r3
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800853a:	3601      	adds	r6, #1
		pfiltered->VL53L1_p_001[i] = sumc;
 800853c:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
		pfiltered->VL53L1_p_039[i] =
 8008540:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
		pfiltered->VL53L1_p_040[i] =
 8008544:	f8c4 2184 	str.w	r2, [r4, #388]	; 0x184
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8008548:	b2f6      	uxtb	r6, r6
 800854a:	e7cc      	b.n	80084e6 <VL53L1_f_034+0x34>

0800854c <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	b085      	sub	sp, #20
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
	int64_t  half_b_minus_amb = 0;


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8008552:	469a      	mov	sl, r3
 8008554:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8008558:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
 800855a:	9003      	str	r0, [sp, #12]
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 800855c:	ebba 0a03 	subs.w	sl, sl, r3
 8008560:	eb6b 7be3 	sbc.w	fp, fp, r3, asr #31
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8008564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008566:	ebba 0a01 	subs.w	sl, sl, r1
 800856a:	eb6b 7be1 	sbc.w	fp, fp, r1, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 800856e:	990f      	ldr	r1, [sp, #60]	; 0x3c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8008570:	ebba 0a03 	subs.w	sl, sl, r3
 8008574:	eb6b 7be3 	sbc.w	fp, fp, r3, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8008578:	17d5      	asrs	r5, r2, #31
 800857a:	1a54      	subs	r4, r2, r1
 800857c:	eb65 75e1 	sbc.w	r5, r5, r1, asr #31
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8008580:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008582:	1a64      	subs	r4, r4, r1
 8008584:	eb65 75e1 	sbc.w	r5, r5, r1, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8008588:	032f      	lsls	r7, r5, #12
 800858a:	ea47 5714 	orr.w	r7, r7, r4, lsr #20
 800858e:	0326      	lsls	r6, r4, #12

	if (half_b_minus_amb != 0) {
 8008590:	ea56 0307 	orrs.w	r3, r6, r7
 8008594:	d04e      	beq.n	8008634 <VL53L1_f_036+0xe8>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8008596:	ea4f 610b 	mov.w	r1, fp, lsl #24
 800859a:	ea4f 600a 	mov.w	r0, sl, lsl #24
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800859e:	1980      	adds	r0, r0, r6
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 80085a0:	ea41 211a 	orr.w	r1, r1, sl, lsr #8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 80085a4:	ea4f 3345 	mov.w	r3, r5, lsl #13
 80085a8:	ea4f 3244 	mov.w	r2, r4, lsl #13
 80085ac:	ea43 43d4 	orr.w	r3, r3, r4, lsr #19
 80085b0:	eb47 0101 	adc.w	r1, r7, r1
 80085b4:	f7f8 fb00 	bl	8000bb8 <__aeabi_ldivmod>
		mean_phase += 2048;
		mean_phase += (4096 * (int64_t)bin);
 80085b8:	9b03      	ldr	r3, [sp, #12]
		mean_phase += 2048;
 80085ba:	f510 6000 	adds.w	r0, r0, #2048	; 0x800
		mean_phase += (4096 * (int64_t)bin);
 80085be:	ea4f 3303 	mov.w	r3, r3, lsl #12
		mean_phase += 2048;
 80085c2:	f141 0100 	adc.w	r1, r1, #0

		mean_phase  = do_division_s((mean_phase + 1), 2);

		if (mean_phase  < 0)
 80085c6:	f06f 0201 	mvn.w	r2, #1
		mean_phase += (4096 * (int64_t)bin);
 80085ca:	eb13 0800 	adds.w	r8, r3, r0
 80085ce:	f04f 0300 	mov.w	r3, #0
 80085d2:	eb43 0901 	adc.w	r9, r3, r1
		if (mean_phase  < 0)
 80085d6:	f04f 33ff 	mov.w	r3, #4294967295
 80085da:	4590      	cmp	r8, r2
 80085dc:	eb79 0303 	sbcs.w	r3, r9, r3
 80085e0:	db26      	blt.n	8008630 <VL53L1_f_036+0xe4>
		mean_phase  = do_division_s((mean_phase + 1), 2);
 80085e2:	f118 0301 	adds.w	r3, r8, #1
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	f149 0300 	adc.w	r3, r9, #0
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085f2:	0fdb      	lsrs	r3, r3, #31
 80085f4:	18c0      	adds	r0, r0, r3
 80085f6:	f141 0100 	adc.w	r1, r1, #0
 80085fa:	0840      	lsrs	r0, r0, #1
 80085fc:	ea40 74c1 	orr.w	r4, r0, r1, lsl #31
 8008600:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008604:	104d      	asrs	r5, r1, #1
 8008606:	42a0      	cmp	r0, r4
 8008608:	f04f 0100 	mov.w	r1, #0
 800860c:	eb71 0305 	sbcs.w	r3, r1, r5
 8008610:	da00      	bge.n	8008614 <VL53L1_f_036+0xc8>
 8008612:	4604      	mov	r4, r0
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;

		mean_phase32 = (int32_t)mean_phase;
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8008614:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8008618:	02c9      	lsls	r1, r1, #11
		mean_phase32 = mean_phase32 %
 800861a:	fbb4 f3f1 	udiv	r3, r4, r1
 800861e:	fb01 4213 	mls	r2, r1, r3, r4
		mean_phase = mean_phase32;
 8008622:	4611      	mov	r1, r2

		status = VL53L1_ERROR_NONE;
 8008624:	2000      	movs	r0, #0
	}

	*pmean_phase = (uint32_t)mean_phase;
 8008626:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008628:	6019      	str	r1, [r3, #0]

	return status;
}
 800862a:	b005      	add	sp, #20
 800862c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mean_phase = 0;
 8008630:	2400      	movs	r4, #0
 8008632:	e7ef      	b.n	8008614 <VL53L1_f_036+0xc8>
	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8008634:	f64f 71ff 	movw	r1, #65535	; 0xffff
	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008638:	f06f 000e 	mvn.w	r0, #14
 800863c:	e7f3      	b.n	8008626 <VL53L1_f_036+0xda>

0800863e <VL53L1_f_035>:
{
 800863e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008642:	461e      	mov	r6, r3
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8008644:	2324      	movs	r3, #36	; 0x24
 8008646:	fb03 6800 	mla	r8, r3, r0, r6
{
 800864a:	b089      	sub	sp, #36	; 0x24
					VL53L1_f_036(
 800864c:	f508 73ca 	add.w	r3, r8, #404	; 0x194
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8008650:	f898 017c 	ldrb.w	r0, [r8, #380]	; 0x17c
					VL53L1_f_036(
 8008654:	9307      	str	r3, [sp, #28]
{
 8008656:	4617      	mov	r7, r2
					VL53L1_f_036(
 8008658:	f04f 0900 	mov.w	r9, #0
				pfiltered->VL53L1_p_043[i] = 1;
 800865c:	f04f 0b01 	mov.w	fp, #1
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8008660:	f898 3180 	ldrb.w	r3, [r8, #384]	; 0x180
 8008664:	4283      	cmp	r3, r0
 8008666:	d803      	bhi.n	8008670 <VL53L1_f_035+0x32>
}
 8008668:	2000      	movs	r0, #0
 800866a:	b009      	add	sp, #36	; 0x24
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		i =  lb    % palgo3->VL53L1_p_031;
 8008670:	f896 c003 	ldrb.w	ip, [r6, #3]
		if (i < palgo3->VL53L1_p_024 &&
 8008674:	78b2      	ldrb	r2, [r6, #2]
		i =  lb    % palgo3->VL53L1_p_031;
 8008676:	fbb0 f4fc 	udiv	r4, r0, ip
 800867a:	fb0c 0414 	mls	r4, ip, r4, r0
 800867e:	b2e4      	uxtb	r4, r4
		if (i < palgo3->VL53L1_p_024 &&
 8008680:	42a2      	cmp	r2, r4
 8008682:	f100 0a01 	add.w	sl, r0, #1
 8008686:	d912      	bls.n	80086ae <VL53L1_f_035+0x70>
		j = (lb+1) % palgo3->VL53L1_p_031;
 8008688:	fbba f3fc 	udiv	r3, sl, ip
 800868c:	fb0c a313 	mls	r3, ip, r3, sl
		if (i < palgo3->VL53L1_p_024 &&
 8008690:	b2d9      	uxtb	r1, r3
 8008692:	428a      	cmp	r2, r1
 8008694:	d90b      	bls.n	80086ae <VL53L1_f_035+0x70>
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8008696:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 800869a:	443c      	add	r4, r7
 800869c:	f8d1 5124 	ldr.w	r5, [r1, #292]	; 0x124
 80086a0:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
 80086a4:	2d00      	cmp	r5, #0
 80086a6:	d105      	bne.n	80086b4 <VL53L1_f_035+0x76>
 80086a8:	b92a      	cbnz	r2, 80086b6 <VL53L1_f_035+0x78>
				pfiltered->VL53L1_p_043[i] = 0;
 80086aa:	f884 21e4 	strb.w	r2, [r4, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 80086ae:	fa5f f08a 	uxtb.w	r0, sl
 80086b2:	e7d5      	b.n	8008660 <VL53L1_f_035+0x22>
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 80086b4:	db16      	blt.n	80086e4 <VL53L1_f_035+0xa6>
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	db20      	blt.n	80086fc <VL53L1_f_035+0xbe>
					VL53L1_f_036(
 80086ba:	9b07      	ldr	r3, [sp, #28]
				pfiltered->VL53L1_p_043[i] = 1;
 80086bc:	f884 b1e4 	strb.w	fp, [r4, #484]	; 0x1e4
				pdata->VL53L1_p_025 = lb;
 80086c0:	f888 017e 	strb.w	r0, [r8, #382]	; 0x17e
					VL53L1_f_036(
 80086c4:	e9cd c304 	strd	ip, r3, [sp, #16]
 80086c8:	68b3      	ldr	r3, [r6, #8]
 80086ca:	e9cd 9900 	strd	r9, r9, [sp]
 80086ce:	e9cd 9302 	strd	r9, r3, [sp, #8]
 80086d2:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 80086d6:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 80086d8:	6849      	ldr	r1, [r1, #4]
 80086da:	f7ff ff37 	bl	800854c <VL53L1_f_036>
				if (func_status ==
 80086de:	300f      	adds	r0, #15
 80086e0:	d1e5      	bne.n	80086ae <VL53L1_f_035+0x70>
 80086e2:	e00b      	b.n	80086fc <VL53L1_f_035+0xbe>
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 80086e4:	2a00      	cmp	r2, #0
 80086e6:	db09      	blt.n	80086fc <VL53L1_f_035+0xbe>
 80086e8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 80086ec:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80086f0:	2a00      	cmp	r2, #0
 80086f2:	db03      	blt.n	80086fc <VL53L1_f_035+0xbe>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 80086f4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	dbde      	blt.n	80086ba <VL53L1_f_035+0x7c>
					pfiltered->VL53L1_p_043[i] = 0;
 80086fc:	f884 91e4 	strb.w	r9, [r4, #484]	; 0x1e4
 8008700:	e7d5      	b.n	80086ae <VL53L1_f_035+0x70>

08008702 <VL53L1_f_033>:
{
 8008702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008706:	b089      	sub	sp, #36	; 0x24
 8008708:	4699      	mov	r9, r3
 800870a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800870c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8008710:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8008712:	9307      	str	r3, [sp, #28]
		&(palgo3->VL53L1_p_010),
 8008714:	f504 7727 	add.w	r7, r4, #668	; 0x29c
{
 8008718:	4683      	mov	fp, r0
	VL53L1_f_016(palgo3);
 800871a:	4620      	mov	r0, r4
{
 800871c:	4615      	mov	r5, r2
 800871e:	4688      	mov	r8, r1
	VL53L1_f_016(palgo3);
 8008720:	f7ff fae1 	bl	8007ce6 <VL53L1_f_016>
	memcpy(
 8008724:	22ac      	movs	r2, #172	; 0xac
 8008726:	4649      	mov	r1, r9
 8008728:	4638      	mov	r0, r7
 800872a:	f002 fde9 	bl	800b300 <memcpy>
	presults->cfg_device_state = pbins_input->cfg_device_state;
 800872e:	f899 3000 	ldrb.w	r3, [r9]
 8008732:	7033      	strb	r3, [r6, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8008734:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008738:	7073      	strb	r3, [r6, #1]
	presults->zone_id          = pbins_input->zone_id;
 800873a:	f899 3002 	ldrb.w	r3, [r9, #2]
 800873e:	70b3      	strb	r3, [r6, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8008740:	f899 307b 	ldrb.w	r3, [r9, #123]	; 0x7b
 8008744:	70f3      	strb	r3, [r6, #3]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8008746:	2304      	movs	r3, #4
 8008748:	7473      	strb	r3, [r6, #17]
	presults->active_results   = 0;
 800874a:	2300      	movs	r3, #0
		presults->VL53L1_p_007[p] = 0;
 800874c:	e9c6 3301 	strd	r3, r3, [r6, #4]
	presults->active_results   = 0;
 8008750:	74b3      	strb	r3, [r6, #18]
		presults->VL53L1_p_007[p] = 0;
 8008752:	60f3      	str	r3, [r6, #12]
	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 8008754:	4638      	mov	r0, r7
 8008756:	f7fe ffc9 	bl	80076ec <VL53L1_hist_calc_zero_distance_phase>
	if (ppost_cfg->hist_amb_est_method ==
 800875a:	792b      	ldrb	r3, [r5, #4]
 800875c:	2b02      	cmp	r3, #2
 800875e:	d170      	bne.n	8008842 <VL53L1_f_033+0x140>
		VL53L1_hist_estimate_ambient_from_thresholded_bins(
 8008760:	7968      	ldrb	r0, [r5, #5]
 8008762:	4639      	mov	r1, r7
 8008764:	f7ff f941 	bl	80079ea <VL53L1_hist_estimate_ambient_from_thresholded_bins>
	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 8008768:	4638      	mov	r0, r7
 800876a:	f7fe ffd7 	bl	800771c <VL53L1_hist_remove_ambient_bins>
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800876e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8008772:	b12b      	cbz	r3, 8008780 <VL53L1_f_033+0x7e>
		VL53L1_f_004(
 8008774:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008776:	f504 7252 	add.w	r2, r4, #840	; 0x348
 800877a:	4639      	mov	r1, r7
 800877c:	f000 f9c2 	bl	8008b04 <VL53L1_f_004>
	pdmax_cfg->ambient_thresh_sigma =
 8008780:	79ab      	ldrb	r3, [r5, #6]
 8008782:	f888 3001 	strb.w	r3, [r8, #1]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8008786:	f108 0316 	add.w	r3, r8, #22
 800878a:	9306      	str	r3, [sp, #24]
 800878c:	f108 090c 	add.w	r9, r8, #12
 8008790:	f106 0a04 	add.w	sl, r6, #4
	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8008794:	2300      	movs	r3, #0
		if (status == VL53L1_ERROR_NONE) {
 8008796:	b95b      	cbnz	r3, 80087b0 <VL53L1_f_033+0xae>
			VL53L1_f_001(
 8008798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	f8cd a004 	str.w	sl, [sp, #4]
 80087a0:	463b      	mov	r3, r7
 80087a2:	f8b9 0000 	ldrh.w	r0, [r9]
 80087a6:	4642      	mov	r2, r8
 80087a8:	4659      	mov	r1, fp
 80087aa:	f7ff f983 	bl	8007ab4 <VL53L1_f_001>
 80087ae:	4603      	mov	r3, r0
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 80087b0:	9a06      	ldr	r2, [sp, #24]
 80087b2:	f109 0902 	add.w	r9, r9, #2
 80087b6:	454a      	cmp	r2, r9
 80087b8:	f10a 0a02 	add.w	sl, sl, #2
 80087bc:	d1eb      	bne.n	8008796 <VL53L1_f_033+0x94>
	if (status == VL53L1_ERROR_NONE)
 80087be:	b9db      	cbnz	r3, 80087f8 <VL53L1_f_033+0xf6>
			VL53L1_f_018(
 80087c0:	f504 7352 	add.w	r3, r4, #840	; 0x348
 80087c4:	e9cd 7300 	strd	r7, r3, [sp]
 80087c8:	68ea      	ldr	r2, [r5, #12]
 80087ca:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80087ce:	79a9      	ldrb	r1, [r5, #6]
 80087d0:	8928      	ldrh	r0, [r5, #8]
 80087d2:	9402      	str	r4, [sp, #8]
 80087d4:	f7ff fac6 	bl	8007d64 <VL53L1_f_018>
	if (status == VL53L1_ERROR_NONE)
 80087d8:	4603      	mov	r3, r0
 80087da:	b968      	cbnz	r0, 80087f8 <VL53L1_f_033+0xf6>
			VL53L1_f_019(palgo3);
 80087dc:	4620      	mov	r0, r4
 80087de:	f7ff fb4c 	bl	8007e7a <VL53L1_f_019>
	if (status == VL53L1_ERROR_NONE)
 80087e2:	4603      	mov	r3, r0
 80087e4:	b940      	cbnz	r0, 80087f8 <VL53L1_f_033+0xf6>
			VL53L1_f_020(palgo3);
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7ff fb6f 	bl	8007eca <VL53L1_f_020>
	if (status == VL53L1_ERROR_NONE)
 80087ec:	4603      	mov	r3, r0
 80087ee:	b918      	cbnz	r0, 80087f8 <VL53L1_f_033+0xf6>
			VL53L1_f_021(palgo3);
 80087f0:	4620      	mov	r0, r4
 80087f2:	f7ff fba4 	bl	8007f3e <VL53L1_f_021>
 80087f6:	4603      	mov	r3, r0
				VL53L1_f_023(
 80087f8:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80087fc:	f04f 0900 	mov.w	r9, #0
				VL53L1_f_023(
 8008800:	f504 7a7d 	add.w	sl, r4, #1012	; 0x3f4
				VL53L1_f_023(
 8008804:	9206      	str	r2, [sp, #24]
				VL53L1_f_023(
 8008806:	f204 5b4c 	addw	fp, r4, #1356	; 0x54c
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 800880a:	f894 217a 	ldrb.w	r2, [r4, #378]	; 0x17a
 800880e:	fa5f f889 	uxtb.w	r8, r9
 8008812:	4542      	cmp	r2, r8
 8008814:	d819      	bhi.n	800884a <VL53L1_f_033+0x148>
	if (status == VL53L1_ERROR_NONE)
 8008816:	b923      	cbnz	r3, 8008822 <VL53L1_f_033+0x120>
			VL53L1_f_028(
 8008818:	7868      	ldrb	r0, [r5, #1]
 800881a:	4621      	mov	r1, r4
 800881c:	f7ff fbee 	bl	8007ffc <VL53L1_f_028>
 8008820:	4603      	mov	r3, r0
	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8008822:	f04f 0900 	mov.w	r9, #0
			prange_data =
 8008826:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
 800882a:	f04f 0b14 	mov.w	fp, #20
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 800882e:	f894 117a 	ldrb.w	r1, [r4, #378]	; 0x17a
 8008832:	fa5f f289 	uxtb.w	r2, r9
 8008836:	4291      	cmp	r1, r2
 8008838:	d864      	bhi.n	8008904 <VL53L1_f_033+0x202>
}
 800883a:	4618      	mov	r0, r3
 800883c:	b009      	add	sp, #36	; 0x24
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL53L1_hist_estimate_ambient_from_ambient_bins(
 8008842:	4638      	mov	r0, r7
 8008844:	f7ff f905 	bl	8007a52 <VL53L1_hist_estimate_ambient_from_ambient_bins>
 8008848:	e78e      	b.n	8008768 <VL53L1_f_033+0x66>
		if (status == VL53L1_ERROR_NONE)
 800884a:	2b00      	cmp	r3, #0
 800884c:	d157      	bne.n	80088fe <VL53L1_f_033+0x1fc>
				VL53L1_f_022(
 800884e:	4622      	mov	r2, r4
 8008850:	4639      	mov	r1, r7
 8008852:	4640      	mov	r0, r8
 8008854:	f7ff fc64 	bl	8008120 <VL53L1_f_022>
		if (status == VL53L1_ERROR_NONE)
 8008858:	4603      	mov	r3, r0
 800885a:	2800      	cmp	r0, #0
 800885c:	d14f      	bne.n	80088fe <VL53L1_f_033+0x1fc>
				VL53L1_f_023(
 800885e:	f8cd a000 	str.w	sl, [sp]
 8008862:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8008866:	4622      	mov	r2, r4
 8008868:	4639      	mov	r1, r7
 800886a:	4640      	mov	r0, r8
 800886c:	f7ff fd52 	bl	8008314 <VL53L1_f_023>
		if (status == VL53L1_ERROR_NONE) {
 8008870:	4603      	mov	r3, r0
 8008872:	2800      	cmp	r0, #0
 8008874:	d143      	bne.n	80088fe <VL53L1_f_033+0x1fc>
				VL53L1_f_023(
 8008876:	9a06      	ldr	r2, [sp, #24]
 8008878:	9200      	str	r2, [sp, #0]
 800887a:	4639      	mov	r1, r7
 800887c:	4622      	mov	r2, r4
 800887e:	4640      	mov	r0, r8
 8008880:	f7ff fd48 	bl	8008314 <VL53L1_f_023>
		if (status == VL53L1_ERROR_NONE) {
 8008884:	4603      	mov	r3, r0
 8008886:	2800      	cmp	r0, #0
 8008888:	d139      	bne.n	80088fe <VL53L1_f_033+0x1fc>
				VL53L1_f_023(
 800888a:	f8cd b000 	str.w	fp, [sp]
 800888e:	4622      	mov	r2, r4
 8008890:	f504 7152 	add.w	r1, r4, #840	; 0x348
 8008894:	4640      	mov	r0, r8
 8008896:	f7ff fd3d 	bl	8008314 <VL53L1_f_023>
		if (status == VL53L1_ERROR_NONE)
 800889a:	4603      	mov	r3, r0
 800889c:	bb78      	cbnz	r0, 80088fe <VL53L1_f_033+0x1fc>
				VL53L1_f_034(
 800889e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088a0:	4622      	mov	r2, r4
 80088a2:	4651      	mov	r1, sl
 80088a4:	4640      	mov	r0, r8
 80088a6:	f7ff fe04 	bl	80084b2 <VL53L1_f_034>
		if (status == VL53L1_ERROR_NONE)
 80088aa:	4603      	mov	r3, r0
 80088ac:	bb38      	cbnz	r0, 80088fe <VL53L1_f_033+0x1fc>
				VL53L1_f_035(
 80088ae:	4623      	mov	r3, r4
 80088b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088b2:	8a29      	ldrh	r1, [r5, #16]
 80088b4:	4640      	mov	r0, r8
 80088b6:	f7ff fec2 	bl	800863e <VL53L1_f_035>
		if (status == VL53L1_ERROR_NONE)
 80088ba:	4603      	mov	r3, r0
 80088bc:	b9f8      	cbnz	r0, 80088fe <VL53L1_f_033+0x1fc>
			VL53L1_f_026(
 80088be:	2224      	movs	r2, #36	; 0x24
 80088c0:	fb02 f208 	mul.w	r2, r2, r8
 80088c4:	18a1      	adds	r1, r4, r2
 80088c6:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 80088ca:	4422      	add	r2, r4
 80088cc:	f891 3182 	ldrb.w	r3, [r1, #386]	; 0x182
 80088d0:	f891 017e 	ldrb.w	r0, [r1, #382]	; 0x17e
 80088d4:	7e29      	ldrb	r1, [r5, #24]
 80088d6:	e9cd b203 	strd	fp, r2, [sp, #12]
 80088da:	9a06      	ldr	r2, [sp, #24]
 80088dc:	e9cd a201 	strd	sl, r2, [sp, #4]
 80088e0:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80088e4:	9200      	str	r2, [sp, #0]
 80088e6:	78e2      	ldrb	r2, [r4, #3]
 80088e8:	f7ff fd41 	bl	800836e <VL53L1_f_026>
		if (status == VL53L1_ERROR_NONE)
 80088ec:	4603      	mov	r3, r0
 80088ee:	b930      	cbnz	r0, 80088fe <VL53L1_f_033+0x1fc>
				VL53L1_f_027(
 80088f0:	4623      	mov	r3, r4
 80088f2:	463a      	mov	r2, r7
 80088f4:	2101      	movs	r1, #1
 80088f6:	4640      	mov	r0, r8
 80088f8:	f7ff fcad 	bl	8008256 <VL53L1_f_027>
 80088fc:	4603      	mov	r3, r0
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 80088fe:	f109 0901 	add.w	r9, r9, #1
 8008902:	e782      	b.n	800880a <VL53L1_f_033+0x108>
		if (!(presults->active_results < presults->max_results))
 8008904:	7cb0      	ldrb	r0, [r6, #18]
 8008906:	7c71      	ldrb	r1, [r6, #17]
 8008908:	4281      	cmp	r1, r0
 800890a:	d939      	bls.n	8008980 <VL53L1_f_033+0x27e>
		if (ppulse_data->VL53L1_p_013 >
 800890c:	2124      	movs	r1, #36	; 0x24
 800890e:	fb01 fe02 	mul.w	lr, r1, r2
 8008912:	eb04 0c0e 	add.w	ip, r4, lr
 8008916:	696a      	ldr	r2, [r5, #20]
 8008918:	f8dc 118c 	ldr.w	r1, [ip, #396]	; 0x18c
 800891c:	4291      	cmp	r1, r2
 800891e:	dd2f      	ble.n	8008980 <VL53L1_f_033+0x27e>
			ppost_cfg->signal_total_events_limit &&
 8008920:	f89c 117e 	ldrb.w	r1, [ip, #382]	; 0x17e
 8008924:	29ff      	cmp	r1, #255	; 0xff
 8008926:	d02b      	beq.n	8008980 <VL53L1_f_033+0x27e>
			if (status == VL53L1_ERROR_NONE)
 8008928:	bb3b      	cbnz	r3, 800897a <VL53L1_f_033+0x278>
			prange_data =
 800892a:	fb1a b800 	smlabb	r8, sl, r0, fp
		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 800892e:	f50e 72be 	add.w	r2, lr, #380	; 0x17c
			prange_data =
 8008932:	44b0      	add	r8, r6
		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8008934:	4422      	add	r2, r4
				VL53L1_f_029(
 8008936:	e9cd 7200 	strd	r7, r2, [sp]
 800893a:	8b6b      	ldrh	r3, [r5, #26]
 800893c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8008940:	f895 1020 	ldrb.w	r1, [r5, #32]
 8008944:	f8cd 8008 	str.w	r8, [sp, #8]
 8008948:	f7ff fd6a 	bl	8008420 <VL53L1_f_029>
				VL53L1_f_011(
 800894c:	9b07      	ldr	r3, [sp, #28]
 800894e:	e9cd 8300 	strd	r8, r3, [sp]
 8008952:	f8b4 3318 	ldrh.w	r3, [r4, #792]	; 0x318
 8008956:	f8d4 2324 	ldr.w	r2, [r4, #804]	; 0x324
 800895a:	f8b4 1322 	ldrh.w	r1, [r4, #802]	; 0x322
 800895e:	f8b4 031e 	ldrh.w	r0, [r4, #798]	; 0x31e
 8008962:	f000 f841 	bl	80089e8 <VL53L1_f_011>
			if (status == VL53L1_ERROR_NONE)
 8008966:	4603      	mov	r3, r0
 8008968:	b938      	cbnz	r0, 800897a <VL53L1_f_033+0x278>
 800896a:	9006      	str	r0, [sp, #24]
				VL53L1_f_012(
 800896c:	f9b5 101c 	ldrsh.w	r1, [r5, #28]
 8008970:	8be8      	ldrh	r0, [r5, #30]
 8008972:	4642      	mov	r2, r8
 8008974:	f000 f880 	bl	8008a78 <VL53L1_f_012>
 8008978:	9b06      	ldr	r3, [sp, #24]
			presults->active_results++;
 800897a:	7cb2      	ldrb	r2, [r6, #18]
 800897c:	3201      	adds	r2, #1
 800897e:	74b2      	strb	r2, [r6, #18]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8008980:	f109 0901 	add.w	r9, r9, #1
 8008984:	e753      	b.n	800882e <VL53L1_f_033+0x12c>

08008986 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 8008986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


	uint8_t w = 0;
	uint8_t j = 0;

	*pa = 0;
 800898a:	2500      	movs	r5, #0
	*pb = pbins->bin_data[VL53L1_p_018];
 800898c:	1d84      	adds	r4, r0, #6
	*pa = 0;
 800898e:	601d      	str	r5, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 8008990:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
{
 8008994:	9e07      	ldr	r6, [sp, #28]
	*pb = pbins->bin_data[VL53L1_p_018];
 8008996:	9c06      	ldr	r4, [sp, #24]
	*pc = 0;

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8008998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
	*pb = pbins->bin_data[VL53L1_p_018];
 800899c:	6027      	str	r7, [r4, #0]
	*pc = 0;
 800899e:	6035      	str	r5, [r6, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80089a0:	fa5f fe85 	uxtb.w	lr, r5
 80089a4:	45f4      	cmp	ip, lr
 80089a6:	da01      	bge.n	80089ac <VL53L1_f_013+0x26>
		if (w < filter_woi)
			*pa += pbins->bin_data[j];
		else if (w > filter_woi)
			*pc += pbins->bin_data[j];
	}
}
 80089a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80089ac:	f892 800a 	ldrb.w	r8, [r2, #10]
 80089b0:	eb00 040e 	add.w	r4, r0, lr
 80089b4:	4444      	add	r4, r8
 80089b6:	1a67      	subs	r7, r4, r1
		if (w < filter_woi)
 80089b8:	4571      	cmp	r1, lr
			filter_woi) % pbins->VL53L1_p_024;
 80089ba:	fb97 f4f8 	sdiv	r4, r7, r8
 80089be:	fb08 7414 	mls	r4, r8, r4, r7
		if (w < filter_woi)
 80089c2:	d908      	bls.n	80089d6 <VL53L1_f_013+0x50>
			*pa += pbins->bin_data[j];
 80089c4:	b2e4      	uxtb	r4, r4
 80089c6:	3406      	adds	r4, #6
 80089c8:	681f      	ldr	r7, [r3, #0]
 80089ca:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80089ce:	4427      	add	r7, r4
 80089d0:	601f      	str	r7, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80089d2:	3501      	adds	r5, #1
 80089d4:	e7e4      	b.n	80089a0 <VL53L1_f_013+0x1a>
		else if (w > filter_woi)
 80089d6:	d2fc      	bcs.n	80089d2 <VL53L1_f_013+0x4c>
			*pc += pbins->bin_data[j];
 80089d8:	b2e4      	uxtb	r4, r4
 80089da:	3406      	adds	r4, #6
 80089dc:	6837      	ldr	r7, [r6, #0]
 80089de:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80089e2:	4427      	add	r7, r4
 80089e4:	6037      	str	r7, [r6, #0]
 80089e6:	e7f4      	b.n	80089d2 <VL53L1_f_013+0x4c>

080089e8 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 80089e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089ea:	9c06      	ldr	r4, [sp, #24]
 80089ec:	f89d 501c 	ldrb.w	r5, [sp, #28]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 80089f0:	81e0      	strh	r0, [r4, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 80089f2:	8261      	strh	r1, [r4, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 80089f4:	61a2      	str	r2, [r4, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 80089f6:	82e3      	strh	r3, [r4, #22]



	if (pdata->fast_osc_frequency == 0)
 80089f8:	b101      	cbz	r1, 80089fc <VL53L1_f_011+0x14>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (pdata->total_periods_elapsed == 0)
 80089fa:	b912      	cbnz	r2, 8008a02 <VL53L1_f_011+0x1a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80089fc:	f06f 000e 	mvn.w	r0, #14

	}

	LOG_FUNCTION_END(status);

	return status;
 8008a00:	e038      	b.n	8008a74 <VL53L1_f_011+0x8c>
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 8008a02:	4608      	mov	r0, r1
 8008a04:	f7fe fe26 	bl	8007654 <VL53L1_calc_pll_period_us>
		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8008a08:	69a3      	ldr	r3, [r4, #24]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8008a0a:	89e1      	ldrh	r1, [r4, #14]
		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8008a0c:	3301      	adds	r3, #1
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8008a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 8008a12:	4606      	mov	r6, r0
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	f7fe fe23 	bl	8007660 <VL53L1_duration_maths>
			((uint32_t)pdata->VL53L1_p_030) << 4,
 8008a1a:	7c21      	ldrb	r1, [r4, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 8008a1c:	9b01      	ldr	r3, [sp, #4]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8008a1e:	61e0      	str	r0, [r4, #28]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 8008a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a24:	0109      	lsls	r1, r1, #4
 8008a26:	4630      	mov	r0, r6
 8008a28:	f7fe fe1a 	bl	8007660 <VL53L1_duration_maths>
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8008a2c:	69e1      	ldr	r1, [r4, #28]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 8008a2e:	6220      	str	r0, [r4, #32]
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8008a30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008a32:	f7fe febc 	bl	80077ae <VL53L1_rate_maths>
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8008a36:	6a21      	ldr	r1, [r4, #32]
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8008a38:	8620      	strh	r0, [r4, #48]	; 0x30
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8008a3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008a3c:	f7fe feb7 	bl	80077ae <VL53L1_rate_maths>
 8008a40:	8660      	strh	r0, [r4, #50]	; 0x32
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 8008a42:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8008a46:	f7fe feb2 	bl	80077ae <VL53L1_rate_maths>
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 8008a4a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			VL53L1_rate_per_spad_maths(
 8008a4c:	8ae2      	ldrh	r2, [r4, #22]
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 8008a4e:	86a0      	strh	r0, [r4, #52]	; 0x34
		count_rate_total =
 8008a50:	1819      	adds	r1, r3, r0
		if (histo_merge_nb > 1)
 8008a52:	2d01      	cmp	r5, #1
			VL53L1_rate_per_spad_maths(
 8008a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
			count_rate_total /= histo_merge_nb;
 8008a58:	bf88      	it	hi
 8008a5a:	fbb1 f1f5 	udivhi	r1, r1, r5
			VL53L1_rate_per_spad_maths(
 8008a5e:	2006      	movs	r0, #6
 8008a60:	f7fe fec6 	bl	80077f0 <VL53L1_rate_per_spad_maths>
			VL53L1_events_per_spad_maths(
 8008a64:	69e2      	ldr	r2, [r4, #28]
		pdata->total_rate_per_spad_mcps   =
 8008a66:	86e0      	strh	r0, [r4, #54]	; 0x36
			VL53L1_events_per_spad_maths(
 8008a68:	8ae1      	ldrh	r1, [r4, #22]
 8008a6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008a6c:	f7fe fe0c 	bl	8007688 <VL53L1_events_per_spad_maths>
		pdata->VL53L1_p_012   =
 8008a70:	63a0      	str	r0, [r4, #56]	; 0x38
 8008a72:	2000      	movs	r0, #0
}
 8008a74:	b002      	add	sp, #8
 8008a76:	bd70      	pop	{r4, r5, r6, pc}

08008a78 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 8008a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 8008a7a:	e9cd 0100 	strd	r0, r1, [sp]
{
 8008a7e:	4614      	mov	r4, r2
 8008a80:	4605      	mov	r5, r0
 8008a82:	460e      	mov	r6, r1
		(int16_t)VL53L1_range_maths(
 8008a84:	8a92      	ldrh	r2, [r2, #20]
 8008a86:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8008a88:	8a60      	ldrh	r0, [r4, #18]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f7fe fec2 	bl	8007814 <VL53L1_range_maths>
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8008a90:	8aa2      	ldrh	r2, [r4, #20]
 8008a92:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
		(int16_t)VL53L1_range_maths(
 8008a96:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
		(int16_t)VL53L1_range_maths(
 8008a9a:	e9cd 5600 	strd	r5, r6, [sp]
 8008a9e:	8a60      	ldrh	r0, [r4, #18]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f7fe feb7 	bl	8007814 <VL53L1_range_maths>
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 8008aa6:	e9cd 5600 	strd	r5, r6, [sp]
		(int16_t)VL53L1_range_maths(
 8008aaa:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
		(int16_t)VL53L1_range_maths(
 8008aae:	8aa2      	ldrh	r2, [r4, #20]
 8008ab0:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8008ab4:	8a60      	ldrh	r0, [r4, #18]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f7fe feac 	bl	8007814 <VL53L1_range_maths>
 8008abc:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8008ac0:	b002      	add	sp, #8
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}

08008ac4 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4604      	mov	r4, r0
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 8008ac8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
{
 8008acc:	460d      	mov	r5, r1
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 8008ace:	f7fe fefb 	bl	80078c8 <VL53L1_decode_vcsel_period>

	remapped_phase = (uint32_t)pdata2->zero_distance_phase % period;
 8008ad2:	f8b5 109c 	ldrh.w	r1, [r5, #156]	; 0x9c


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8008ad6:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
	period = 2048 *
 8008ada:	02c0      	lsls	r0, r0, #11
	remapped_phase = (uint32_t)pdata2->zero_distance_phase % period;
 8008adc:	fbb1 f3f0 	udiv	r3, r1, r0
 8008ae0:	fb00 1013 	mls	r0, r0, r3, r1
	phase_delta = (int32_t)pdata1->zero_distance_phase
 8008ae4:	1a13      	subs	r3, r2, r0
				- (int32_t)remapped_phase;



	if (phase_delta > 0)
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dd04      	ble.n	8008af4 <VL53L1_f_038+0x30>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 8008aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aee:	f343 20c7 	sbfx	r0, r3, #11, #8
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);

	LOG_FUNCTION_END(0);

	return bin_offset;
}
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8008af4:	f5b3 6080 	subs.w	r0, r3, #1024	; 0x400
 8008af8:	bf48      	it	mi
 8008afa:	f203 30ff 	addwmi	r0, r3, #1023	; 0x3ff
 8008afe:	f340 20c7 	sbfx	r0, r0, #11, #8
 8008b02:	e7f6      	b.n	8008af2 <VL53L1_f_038+0x2e>

08008b04 <VL53L1_f_004>:
{
 8008b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b08:	4615      	mov	r5, r2
 8008b0a:	4604      	mov	r4, r0
	memcpy(
 8008b0c:	22ac      	movs	r2, #172	; 0xac
 8008b0e:	4628      	mov	r0, r5
{
 8008b10:	460e      	mov	r6, r1
	memcpy(
 8008b12:	f002 fbf5 	bl	800b300 <memcpy>
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8008b16:	2300      	movs	r3, #0
 8008b18:	7a68      	ldrb	r0, [r5, #9]
 8008b1a:	f105 0218 	add.w	r2, r5, #24
		pxtalk_realigned->bin_data[i] = 0;
 8008b1e:	461f      	mov	r7, r3
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8008b20:	b2d9      	uxtb	r1, r3
 8008b22:	4288      	cmp	r0, r1
 8008b24:	d813      	bhi.n	8008b4e <VL53L1_f_004+0x4a>
	bin_offset =  VL53L1_f_038(
 8008b26:	4621      	mov	r1, r4
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7ff ffcb 	bl	8008ac4 <VL53L1_f_038>
	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8008b2e:	7ab2      	ldrb	r2, [r6, #10]
 8008b30:	7aa7      	ldrb	r7, [r4, #10]
 8008b32:	4297      	cmp	r7, r2
 8008b34:	bf28      	it	cs
 8008b36:	4617      	movcs	r7, r2
	for (i = 0 ; i <  min_bins ; i++) {
 8008b38:	3418      	adds	r4, #24
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	f04f 0c00 	mov.w	ip, #0
 8008b40:	b252      	sxtb	r2, r2
 8008b42:	fa5f f38c 	uxtb.w	r3, ip
 8008b46:	42bb      	cmp	r3, r7
 8008b48:	d305      	bcc.n	8008b56 <VL53L1_f_004+0x52>
}
 8008b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pxtalk_realigned->bin_data[i] = 0;
 8008b4e:	f842 7b04 	str.w	r7, [r2], #4
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8008b52:	3301      	adds	r3, #1
 8008b54:	e7e4      	b.n	8008b20 <VL53L1_f_004+0x1c>
		if (bin_offset >= 0)
 8008b56:	2800      	cmp	r0, #0
					% (int8_t)pbins->VL53L1_p_024;
 8008b58:	bfb5      	itete	lt
 8008b5a:	eb02 0e01 	addlt.w	lr, r2, r1
				% (int8_t)pbins->VL53L1_p_024;
 8008b5e:	fb91 f3f2 	sdivge	r3, r1, r2
					% (int8_t)pbins->VL53L1_p_024;
 8008b62:	fb9e f3f2 	sdivlt	r3, lr, r2
				% (int8_t)pbins->VL53L1_p_024;
 8008b66:	fb02 1313 	mlsge	r3, r2, r3, r1
					% (int8_t)pbins->VL53L1_p_024;
 8008b6a:	bfb8      	it	lt
 8008b6c:	fb02 e313 	mlslt	r3, r2, r3, lr
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8008b70:	b25b      	sxtb	r3, r3
		if (pbins->bin_data[(uint8_t)bin_access] >
 8008b72:	fa5f f883 	uxtb.w	r8, r3
 8008b76:	eb06 0388 	add.w	r3, r6, r8, lsl #2
			pxtalk->bin_data[i]) {
 8008b7a:	f8d4 9000 	ldr.w	r9, [r4]
		if (pbins->bin_data[(uint8_t)bin_access] >
 8008b7e:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8008b82:	45ce      	cmp	lr, r9
				- pxtalk->bin_data[i];
 8008b84:	bfcc      	ite	gt
 8008b86:	ebae 0e09 	subgt.w	lr, lr, r9
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8008b8a:	f04f 0e00 	movle.w	lr, #0
 8008b8e:	f8c3 e018 	str.w	lr, [r3, #24]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8008b92:	f108 0306 	add.w	r3, r8, #6
			pxtalk->bin_data[i];
 8008b96:	f854 eb04 	ldr.w	lr, [r4], #4
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8008b9a:	f845 e023 	str.w	lr, [r5, r3, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8008b9e:	f10c 0c01 	add.w	ip, ip, #1
 8008ba2:	3101      	adds	r1, #1
 8008ba4:	e7cd      	b.n	8008b42 <VL53L1_f_004+0x3e>

08008ba6 <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 8008ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008baa:	460c      	mov	r4, r1

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 8008bac:	22ac      	movs	r2, #172	; 0xac
 8008bae:	4601      	mov	r1, r0
{
 8008bb0:	b088      	sub	sp, #32
 8008bb2:	4607      	mov	r7, r0
	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f002 fba3 	bl	800b300 <memcpy>


	podata->VL53L1_p_024 = 0;

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 8008bba:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
	podata->VL53L1_p_024 = 0;
 8008bbe:	2300      	movs	r3, #0
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 8008bc0:	60e2      	str	r2, [r4, #12]

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8008bc2:	7a60      	ldrb	r0, [r4, #9]
	podata->VL53L1_p_024 = 0;
 8008bc4:	72a3      	strb	r3, [r4, #10]
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 8008bc6:	f241 0210 	movw	r2, #4112	; 0x1010
 8008bca:	8222      	strh	r2, [r4, #16]
		podata->bin_data[lc] = 0;
 8008bcc:	461d      	mov	r5, r3
 8008bce:	f104 0218 	add.w	r2, r4, #24
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8008bd2:	b2d9      	uxtb	r1, r3
 8008bd4:	4288      	cmp	r0, r1
 8008bd6:	d864      	bhi.n	8008ca2 <VL53L1_f_039+0xfc>
 8008bd8:	466a      	mov	r2, sp
 8008bda:	ad04      	add	r5, sp, #16
 8008bdc:	4629      	mov	r1, r5
 8008bde:	2310      	movs	r3, #16
 8008be0:	4616      	mov	r6, r2



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
		bin_initial_index[lc] = 0x00;
 8008be2:	2000      	movs	r0, #0
 8008be4:	3b01      	subs	r3, #1
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8008be6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		bin_initial_index[lc] = 0x00;
 8008bea:	f802 0b01 	strb.w	r0, [r2], #1
		bin_repeat_count[lc]  = 0x00;
 8008bee:	f801 0b01 	strb.w	r0, [r1], #1
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8008bf2:	d1f7      	bne.n	8008be4 <VL53L1_f_039+0x3e>
 8008bf4:	f107 0c0c 	add.w	ip, r7, #12
 8008bf8:	469e      	mov	lr, r3
 8008bfa:	3728      	adds	r7, #40	; 0x28

	bin_seq_length = 0x00;

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {

		bin_cfg = pidata->bin_seq[lc];
 8008bfc:	f81c 0b01 	ldrb.w	r0, [ip], #1



		if (bin_repeat_count[bin_cfg] == 0) {
 8008c00:	aa08      	add	r2, sp, #32
 8008c02:	4402      	add	r2, r0
 8008c04:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8008c08:	b949      	cbnz	r1, 8008c1e <VL53L1_f_039+0x78>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8008c0a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8008c0e:	f802 8c20 	strb.w	r8, [r2, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8008c12:	eb04 0803 	add.w	r8, r4, r3
			bin_seq_length++;
 8008c16:	3301      	adds	r3, #1
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8008c18:	f888 000c 	strb.w	r0, [r8, #12]
			bin_seq_length++;
 8008c1c:	b2db      	uxtb	r3, r3
		}

		bin_repeat_count[bin_cfg]++;
 8008c1e:	3101      	adds	r1, #1
 8008c20:	f802 1c10 	strb.w	r1, [r2, #-16]



		VL53L1_p_018 = bin_initial_index[bin_cfg];

		for (i = 0 ; i < 4 ; i++)
 8008c24:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8008c28:	3206      	adds	r2, #6
 8008c2a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008c2e:	f1a7 0110 	sub.w	r1, r7, #16
			podata->bin_data[VL53L1_p_018+i] +=
				pidata->bin_data[lc*4+i];
 8008c32:	f851 8b04 	ldr.w	r8, [r1], #4
			podata->bin_data[VL53L1_p_018+i] +=
 8008c36:	6810      	ldr	r0, [r2, #0]
		for (i = 0 ; i < 4 ; i++)
 8008c38:	42b9      	cmp	r1, r7
			podata->bin_data[VL53L1_p_018+i] +=
 8008c3a:	4440      	add	r0, r8
 8008c3c:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0 ; i < 4 ; i++)
 8008c40:	d1f7      	bne.n	8008c32 <VL53L1_f_039+0x8c>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8008c42:	f10e 0e04 	add.w	lr, lr, #4
 8008c46:	f1be 0f18 	cmp.w	lr, #24
 8008c4a:	f101 0710 	add.w	r7, r1, #16
 8008c4e:	d1d5      	bne.n	8008bfc <VL53L1_f_039+0x56>
 8008c50:	f104 020c 	add.w	r2, r4, #12
 8008c54:	f104 0012 	add.w	r0, r4, #18



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {

		bin_cfg = podata->bin_seq[lc];
 8008c58:	f812 1b01 	ldrb.w	r1, [r2], #1

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 8008c5c:	290f      	cmp	r1, #15
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 8008c5e:	bf9b      	ittet	ls
 8008c60:	af08      	addls	r7, sp, #32
 8008c62:	19c9      	addls	r1, r1, r7
		else
			podata->bin_rep[lc] = 0;
 8008c64:	2100      	movhi	r1, #0
				bin_repeat_count[bin_cfg];
 8008c66:	f811 1c10 	ldrbls.w	r1, [r1, #-16]
 8008c6a:	7151      	strb	r1, [r2, #5]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8008c6c:	4282      	cmp	r2, r0
 8008c6e:	d1f3      	bne.n	8008c58 <VL53L1_f_039+0xb2>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	72a3      	strb	r3, [r4, #10]
 8008c74:	2000      	movs	r0, #0



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {

		repeat_count = (int32_t)bin_repeat_count[lc];
 8008c76:	f815 7b01 	ldrb.w	r7, [r5], #1

		if (repeat_count > 0) {
 8008c7a:	b9b7      	cbnz	r7, 8008caa <VL53L1_f_039+0x104>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	2810      	cmp	r0, #16
 8008c80:	d1f9      	bne.n	8008c76 <VL53L1_f_039+0xd0>
		}
	}



	podata->number_of_ambient_bins = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	72e3      	strb	r3, [r4, #11]
	if ((bin_repeat_count[7] > 0) ||
 8008c86:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8008c8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8008c8e:	4313      	orrs	r3, r2
		(bin_repeat_count[15] > 0))
		podata->number_of_ambient_bins = 4;
 8008c90:	bf18      	it	ne
 8008c92:	2304      	movne	r3, #4

	LOG_FUNCTION_END(status);

	return status;
}
 8008c94:	f04f 0000 	mov.w	r0, #0
		podata->number_of_ambient_bins = 4;
 8008c98:	bf18      	it	ne
 8008c9a:	72e3      	strbne	r3, [r4, #11]
}
 8008c9c:	b008      	add	sp, #32
 8008c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		podata->bin_data[lc] = 0;
 8008ca2:	f842 5b04 	str.w	r5, [r2], #4
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	e793      	b.n	8008bd2 <VL53L1_f_039+0x2c>
			for (i = 0 ; i < 4 ; i++) {
 8008caa:	5c33      	ldrb	r3, [r6, r0]
 8008cac:	3306      	adds	r3, #6
					(repeat_count/2);
 8008cae:	ea4f 0c67 	mov.w	ip, r7, asr #1
 8008cb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cb6:	2204      	movs	r2, #4
				podata->bin_data[VL53L1_p_018+i] +=
 8008cb8:	6819      	ldr	r1, [r3, #0]
				podata->bin_data[VL53L1_p_018+i] /=
 8008cba:	3a01      	subs	r2, #1
			for (i = 0 ; i < 4 ; i++) {
 8008cbc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				podata->bin_data[VL53L1_p_018+i] +=
 8008cc0:	4461      	add	r1, ip
				podata->bin_data[VL53L1_p_018+i] /=
 8008cc2:	fb91 f1f7 	sdiv	r1, r1, r7
 8008cc6:	f843 1b04 	str.w	r1, [r3], #4
			for (i = 0 ; i < 4 ; i++) {
 8008cca:	d1f5      	bne.n	8008cb8 <VL53L1_f_039+0x112>
 8008ccc:	e7d6      	b.n	8008c7c <VL53L1_f_039+0xd6>

08008cce <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8008cce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd2:	ed2d 8b02 	vpush	{d8}
 8008cd6:	b0c1      	sub	sp, #260	; 0x104
	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8008cd8:	f04f 0800 	mov.w	r8, #0
{
 8008cdc:	9f4c      	ldr	r7, [sp, #304]	; 0x130
 8008cde:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
	uint32_t xtalk_rate_kcps               = 0;
 8008ce0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
			pbins_input,
			pbins_averaged);



	VL53L1_init_histogram_bin_data_struct(
 8008ce4:	f107 0948 	add.w	r9, r7, #72	; 0x48
{
 8008ce8:	ee08 0a10 	vmov	s16, r0
 8008cec:	468a      	mov	sl, r1
	VL53L1_f_039(
 8008cee:	4618      	mov	r0, r3
 8008cf0:	a915      	add	r1, sp, #84	; 0x54
{
 8008cf2:	461e      	mov	r6, r3
 8008cf4:	4614      	mov	r4, r2
	VL53L1_f_039(
 8008cf6:	f7ff ff56 	bl	8008ba6 <VL53L1_f_039>
	VL53L1_init_histogram_bin_data_struct(
 8008cfa:	7ab9      	ldrb	r1, [r7, #10]
 8008cfc:	464a      	mov	r2, r9
 8008cfe:	4640      	mov	r0, r8
 8008d00:	f7fe fe08 	bl	8007914 <VL53L1_init_histogram_bin_data_struct>
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8008d04:	4649      	mov	r1, r9
 8008d06:	4638      	mov	r0, r7
 8008d08:	f7fe fde3 	bl	80078d2 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 8008d0c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008d10:	b1eb      	cbz	r3, 8008d4e <VL53L1_hist_process_data+0x80>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
		status =
		VL53L1_f_040(
 8008d12:	ab0a      	add	r3, sp, #40	; 0x28
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
 8008d1a:	9303      	str	r3, [sp, #12]
 8008d1c:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
 8008d20:	9302      	str	r3, [sp, #8]
 8008d22:	f8b6 307c 	ldrh.w	r3, [r6, #124]	; 0x7c
 8008d26:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8008d2a:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8008d2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008d30:	e9cd 8300 	strd	r8, r3, [sp]
 8008d34:	4643      	mov	r3, r8
 8008d36:	f000 ffe3 	bl	8009d00 <VL53L1_f_040>
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8008d3a:	b940      	cbnz	r0, 8008d4e <VL53L1_hist_process_data+0x80>
 8008d3c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008d40:	b12b      	cbz	r3, 8008d4e <VL53L1_hist_process_data+0x80>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
		status =
			VL53L1_f_041(
 8008d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d44:	464b      	mov	r3, r9
 8008d46:	4639      	mov	r1, r7
 8008d48:	a815      	add	r0, sp, #84	; 0x54
 8008d4a:	f001 f882 	bl	8009e52 <VL53L1_f_041>





	presults->xmonitor.total_periods_elapsed =
 8008d4e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8008d50:	f8c5 315c 	str.w	r3, [r5, #348]	; 0x15c
		pbins_averaged->total_periods_elapsed;
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8008d54:	2600      	movs	r6, #0
	presults->xmonitor.VL53L1_p_006 =
 8008d56:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 8008d5a:	f8a5 315a 	strh.w	r3, [r5, #346]	; 0x15a
	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8008d5e:	f8a5 6174 	strh.w	r6, [r5, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8008d62:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8008d66:	f885 6144 	strb.w	r6, [r5, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8008d6a:	f885 618e 	strb.w	r6, [r5, #398]	; 0x18e



	xtalk_enable = 0;
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8008d6e:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
	xtalk_enable = 0;
 8008d72:	ebb8 0806 	subs.w	r8, r8, r6
 8008d76:	bf18      	it	ne
 8008d78:	f04f 0801 	movne.w	r8, #1
			delta_mm <
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {



				memcpy(
 8008d7c:	f505 7ba2 	add.w	fp, r5, #324	; 0x144
		VL53L1_f_033(
 8008d80:	9b50      	ldr	r3, [sp, #320]	; 0x140
		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8008d82:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
		VL53L1_f_033(
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8008d8c:	ab0b      	add	r3, sp, #44	; 0x2c
 8008d8e:	9303      	str	r3, [sp, #12]
 8008d90:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8008d92:	9302      	str	r3, [sp, #8]
 8008d94:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8008d96:	4622      	mov	r2, r4
 8008d98:	e9cd 9300 	strd	r9, r3, [sp]
 8008d9c:	ee18 0a10 	vmov	r0, s16
 8008da0:	ab15      	add	r3, sp, #84	; 0x54
 8008da2:	4651      	mov	r1, sl
 8008da4:	f7ff fcad 	bl	8008702 <VL53L1_f_033>
		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8008da8:	ea40 0206 	orr.w	r2, r0, r6
 8008dac:	f012 0fff 	tst.w	r2, #255	; 0xff
		VL53L1_f_033(
 8008db0:	4603      	mov	r3, r0
		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8008db2:	d00b      	beq.n	8008dcc <VL53L1_hist_process_data+0xfe>
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8008db4:	3601      	adds	r6, #1
 8008db6:	b2f2      	uxtb	r2, r6
 8008db8:	4590      	cmp	r8, r2
 8008dba:	d2e1      	bcs.n	8008d80 <VL53L1_hist_process_data+0xb2>
	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;

	LOG_FUNCTION_END(status);

	return status;
}
 8008dbc:	4618      	mov	r0, r3
	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8008dbe:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
}
 8008dc2:	b041      	add	sp, #260	; 0x104
 8008dc4:	ecbd 8b02 	vpop	{d8}
 8008dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (presults->active_results == 0) {
 8008dcc:	7ca9      	ldrb	r1, [r5, #18]
 8008dce:	b931      	cbnz	r1, 8008dde <VL53L1_hist_process_data+0x110>
			pdata->ambient_count_rate_mcps =
 8008dd0:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8008dd4:	f8a5 2048 	strh.w	r2, [r5, #72]	; 0x48
			pdata->VL53L1_p_006 =
 8008dd8:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8008ddc:	856a      	strh	r2, [r5, #42]	; 0x2a
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8008dde:	9850      	ldr	r0, [sp, #320]	; 0x140
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8008de0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8008de2:	7800      	ldrb	r0, [r0, #0]
 8008de4:	4342      	muls	r2, r0
		max_xtalk_rate_per_spad_kcps <<= 4;
 8008de6:	0112      	lsls	r2, r2, #4
 8008de8:	9207      	str	r2, [sp, #28]
		for (t = 0 ; t < presults->active_results ; t++) {
 8008dea:	224c      	movs	r2, #76	; 0x4c
 8008dec:	fb12 5201 	smlabb	r2, r2, r1, r5
 8008df0:	462f      	mov	r7, r5
 8008df2:	9208      	str	r2, [sp, #32]
 8008df4:	9a08      	ldr	r2, [sp, #32]
 8008df6:	42ba      	cmp	r2, r7
 8008df8:	d0dc      	beq.n	8008db4 <VL53L1_hist_process_data+0xe6>
			if (pdata->max_range_mm > pdata->min_range_mm)
 8008dfa:	f9b7 105c 	ldrsh.w	r1, [r7, #92]	; 0x5c
 8008dfe:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
			if (pdata->median_range_mm  >
 8008e02:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
			if (pdata->max_range_mm > pdata->min_range_mm)
 8008e06:	4291      	cmp	r1, r2
					pdata->max_range_mm -
 8008e08:	bfcc      	ite	gt
 8008e0a:	1a8a      	subgt	r2, r1, r2
					pdata->min_range_mm -
 8008e0c:	1a52      	suble	r2, r2, r1
			if (pdata->median_range_mm  >
 8008e0e:	f9b7 105a 	ldrsh.w	r1, [r7, #90]	; 0x5a
 8008e12:	4288      	cmp	r0, r1
				delta_mm =
 8008e14:	b212      	sxth	r2, r2
			if (pdata->median_range_mm  >
 8008e16:	da1b      	bge.n	8008e50 <VL53L1_hist_process_data+0x182>
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8008e18:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8008e1c:	4288      	cmp	r0, r1
 8008e1e:	dd17      	ble.n	8008e50 <VL53L1_hist_process_data+0x182>
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8008e20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008e22:	9807      	ldr	r0, [sp, #28]
 8008e24:	4281      	cmp	r1, r0
 8008e26:	d213      	bcs.n	8008e50 <VL53L1_hist_process_data+0x182>
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8008e28:	9850      	ldr	r0, [sp, #320]	; 0x140
			XtalkDetectMaxSigma =
 8008e2a:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8008e2c:	7800      	ldrb	r0, [r0, #0]
 8008e2e:	4341      	muls	r1, r0
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8008e30:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
			max_xtalk_rate_per_spad_kcps &&
 8008e34:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 8008e38:	d20a      	bcs.n	8008e50 <VL53L1_hist_process_data+0x182>
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8008e3a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8008e3c:	428a      	cmp	r2, r1
 8008e3e:	da07      	bge.n	8008e50 <VL53L1_hist_process_data+0x182>
				memcpy(
 8008e40:	224c      	movs	r2, #76	; 0x4c
 8008e42:	f107 0114 	add.w	r1, r7, #20
 8008e46:	4658      	mov	r0, fp
 8008e48:	9309      	str	r3, [sp, #36]	; 0x24
 8008e4a:	f002 fa59 	bl	800b300 <memcpy>
 8008e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		for (t = 0 ; t < presults->active_results ; t++) {
 8008e50:	374c      	adds	r7, #76	; 0x4c
 8008e52:	e7cf      	b.n	8008df4 <VL53L1_hist_process_data+0x126>

08008e54 <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4604      	mov	r4, r0
 8008e58:	460d      	mov	r5, r1
 8008e5a:	4616      	mov	r6, r2




	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_disable_firmware(Dev);
 8008e5c:	f7fd f920 	bl	80060a0 <VL53L1_disable_firmware>




	if (status == VL53L1_ERROR_NONE)
 8008e60:	bb50      	cbnz	r0, 8008eb8 <VL53L1_nvm_enable+0x64>
		status = VL53L1_enable_powerforce(Dev);
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7fd f925 	bl	80060b2 <VL53L1_enable_powerforce>



	if (status == VL53L1_ERROR_NONE)
 8008e68:	bb30      	cbnz	r0, 8008eb8 <VL53L1_nvm_enable+0x64>
		status = VL53L1_WaitUs(
 8008e6a:	21fa      	movs	r1, #250	; 0xfa
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f7f8 fbed 	bl	800164c <VL53L1_WaitUs>
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8008e72:	bb08      	cbnz	r0, 8008eb8 <VL53L1_nvm_enable+0x64>
		status = VL53L1_WrByte(
 8008e74:	2201      	movs	r2, #1
 8008e76:	f240 7181 	movw	r1, #1921	; 0x781
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f7f8 fb8a 	bl	8001594 <VL53L1_WrByte>
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8008e80:	b9d0      	cbnz	r0, 8008eb8 <VL53L1_nvm_enable+0x64>
		status = VL53L1_WrByte(
 8008e82:	2205      	movs	r2, #5
 8008e84:	f240 6183 	movw	r1, #1667	; 0x683
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f7f8 fb83 	bl	8001594 <VL53L1_WrByte>
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8008e8e:	b998      	cbnz	r0, 8008eb8 <VL53L1_nvm_enable+0x64>
		status = VL53L1_WaitUs(
 8008e90:	4631      	mov	r1, r6
 8008e92:	4620      	mov	r0, r4
 8008e94:	f7f8 fbda 	bl	800164c <VL53L1_WaitUs>
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8008e98:	b970      	cbnz	r0, 8008eb8 <VL53L1_nvm_enable+0x64>
		status = VL53L1_WrByte(
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f7f8 fb77 	bl	8001594 <VL53L1_WrByte>
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8008ea6:	b938      	cbnz	r0, 8008eb8 <VL53L1_nvm_enable+0x64>
		status = VL53L1_WrWord(
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f240 7184 	movw	r1, #1924	; 0x784

	LOG_FUNCTION_END(status);

	return status;

}
 8008eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		status = VL53L1_WrWord(
 8008eb4:	f7f8 bb80 	b.w	80015b8 <VL53L1_WrWord>
}
 8008eb8:	bd70      	pop	{r4, r5, r6, pc}

08008eba <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8008eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	461e      	mov	r6, r3
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8008ec0:	460c      	mov	r4, r1
	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8008ec2:	2000      	movs	r0, #0
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8008ec4:	188f      	adds	r7, r1, r2
	for (nvm_addr = start_address;
 8008ec6:	42bc      	cmp	r4, r7
 8008ec8:	db00      	blt.n	8008ecc <VL53L1_nvm_read+0x12>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (status == VL53L1_ERROR_NONE)
 8008ecc:	bb00      	cbnz	r0, 8008f10 <VL53L1_nvm_read+0x56>
			status = VL53L1_WrByte(
 8008ece:	4622      	mov	r2, r4
 8008ed0:	f240 7194 	movw	r1, #1940	; 0x794
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f7f8 fb5d 	bl	8001594 <VL53L1_WrByte>
		if (status == VL53L1_ERROR_NONE)
 8008eda:	b9c8      	cbnz	r0, 8008f10 <VL53L1_nvm_read+0x56>
			status = VL53L1_WrByte(
 8008edc:	4602      	mov	r2, r0
 8008ede:	f240 7183 	movw	r1, #1923	; 0x783
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f7f8 fb56 	bl	8001594 <VL53L1_WrByte>
		if (status == VL53L1_ERROR_NONE)
 8008ee8:	b990      	cbnz	r0, 8008f10 <VL53L1_nvm_read+0x56>
			status = VL53L1_WaitUs(
 8008eea:	2105      	movs	r1, #5
 8008eec:	4628      	mov	r0, r5
 8008eee:	f7f8 fbad 	bl	800164c <VL53L1_WaitUs>
		if (status == VL53L1_ERROR_NONE)
 8008ef2:	b968      	cbnz	r0, 8008f10 <VL53L1_nvm_read+0x56>
			status = VL53L1_WrByte(
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f240 7183 	movw	r1, #1923	; 0x783
 8008efa:	4628      	mov	r0, r5
 8008efc:	f7f8 fb4a 	bl	8001594 <VL53L1_WrByte>
		if (status == VL53L1_ERROR_NONE)
 8008f00:	b930      	cbnz	r0, 8008f10 <VL53L1_nvm_read+0x56>
			status = VL53L1_ReadMulti(
 8008f02:	2304      	movs	r3, #4
 8008f04:	4632      	mov	r2, r6
 8008f06:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7f8 fb2a 	bl	8001564 <VL53L1_ReadMulti>
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8008f10:	3401      	adds	r4, #1
		pdata = pdata + 4;
 8008f12:	3604      	adds	r6, #4
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8008f14:	b2e4      	uxtb	r4, r4
 8008f16:	e7d6      	b.n	8008ec6 <VL53L1_nvm_read+0xc>

08008f18 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8008f18:	b510      	push	{r4, lr}
	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_WrByte(
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f240 7183 	movw	r1, #1923	; 0x783
{
 8008f20:	4604      	mov	r4, r0
		status = VL53L1_WrByte(
 8008f22:	f7f8 fb37 	bl	8001594 <VL53L1_WrByte>
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8008f26:	b978      	cbnz	r0, 8008f48 <VL53L1_nvm_disable+0x30>
		status = VL53L1_WrByte(
 8008f28:	4602      	mov	r2, r0
 8008f2a:	f240 7181 	movw	r1, #1921	; 0x781
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f7f8 fb30 	bl	8001594 <VL53L1_WrByte>
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 8008f34:	b940      	cbnz	r0, 8008f48 <VL53L1_nvm_disable+0x30>
		status = VL53L1_disable_powerforce(Dev);
 8008f36:	4620      	mov	r0, r4
 8008f38:	f7fd f8be 	bl	80060b8 <VL53L1_disable_powerforce>



	if (status == VL53L1_ERROR_NONE)
 8008f3c:	b920      	cbnz	r0, 8008f48 <VL53L1_nvm_disable+0x30>
		status = VL53L1_enable_firmware(Dev);
 8008f3e:	4620      	mov	r0, r4

	LOG_FUNCTION_END(status);

	return status;

}
 8008f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		status = VL53L1_enable_firmware(Dev);
 8008f44:	f7fd b8a9 	b.w	800609a <VL53L1_enable_firmware>
}
 8008f48:	bd10      	pop	{r4, pc}

08008f4a <VL53L1_nvm_decode_cal_peak_rate_map>:
	VL53L1_Error status   = VL53L1_ERROR_NONE;

	uint8_t   *ptmp = NULL;
	uint8_t       i = 0;

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8008f4a:	2837      	cmp	r0, #55	; 0x37
{
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	460d      	mov	r5, r1
 8008f50:	4614      	mov	r4, r2
	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8008f52:	d91c      	bls.n	8008f8e <VL53L1_nvm_decode_cal_peak_rate_map+0x44>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8008f54:	2002      	movs	r0, #2
 8008f56:	f7fd f859 	bl	800600c <VL53L1_i2c_decode_uint16_t>

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8008f5a:	1ca9      	adds	r1, r5, #2
	pdata->cal_distance_mm =
 8008f5c:	8020      	strh	r0, [r4, #0]
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8008f5e:	2002      	movs	r0, #2
 8008f60:	f7fd f854 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8008f64:	2319      	movs	r3, #25
 8008f66:	80a3      	strh	r3, [r4, #4]
	pdata->cal_reflectance_pc =
 8008f68:	0980      	lsrs	r0, r0, #6
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 8008f6a:	2305      	movs	r3, #5
	pdata->cal_reflectance_pc =
 8008f6c:	8060      	strh	r0, [r4, #2]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 8008f6e:	80e3      	strh	r3, [r4, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8008f70:	8123      	strh	r3, [r4, #8]

	ptmp = pbuffer + 4;
 8008f72:	1d2e      	adds	r6, r5, #4
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8008f74:	340a      	adds	r4, #10
 8008f76:	3536      	adds	r5, #54	; 0x36
		pdata->peak_rate_mcps[i] =
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8008f78:	4631      	mov	r1, r6
 8008f7a:	2002      	movs	r0, #2
 8008f7c:	f7fd f846 	bl	800600c <VL53L1_i2c_decode_uint16_t>
		ptmp += 2;
 8008f80:	3602      	adds	r6, #2
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8008f82:	42ae      	cmp	r6, r5
		pdata->peak_rate_mcps[i] =
 8008f84:	f824 0b02 	strh.w	r0, [r4], #2
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8008f88:	d1f6      	bne.n	8008f78 <VL53L1_nvm_decode_cal_peak_rate_map+0x2e>
	}

	return status;
 8008f8a:	2000      	movs	r0, #0
}
 8008f8c:	bd70      	pop	{r4, r5, r6, pc}
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8008f8e:	f06f 0008 	mvn.w	r0, #8
 8008f92:	e7fb      	b.n	8008f8c <VL53L1_nvm_decode_cal_peak_rate_map+0x42>

08008f94 <VL53L1_nvm_decode_additional_offset_cal_data>:
	VL53L1_additional_offset_cal_data_t *pdata)
{

	VL53L1_Error status   = VL53L1_ERROR_NONE;

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8008f94:	2807      	cmp	r0, #7
{
 8008f96:	b538      	push	{r3, r4, r5, lr}
 8008f98:	460d      	mov	r5, r1
 8008f9a:	4614      	mov	r4, r2
	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8008f9c:	d914      	bls.n	8008fc8 <VL53L1_nvm_decode_additional_offset_cal_data+0x34>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8008f9e:	2002      	movs	r0, #2
 8008fa0:	f7fd f834 	bl	800600c <VL53L1_i2c_decode_uint16_t>

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8008fa4:	1ca9      	adds	r1, r5, #2
	pdata->result__mm_inner_actual_effective_spads =
 8008fa6:	8020      	strh	r0, [r4, #0]
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8008fa8:	2002      	movs	r0, #2
 8008faa:	f7fd f82f 	bl	800600c <VL53L1_i2c_decode_uint16_t>

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8008fae:	1d29      	adds	r1, r5, #4
	pdata->result__mm_outer_actual_effective_spads =
 8008fb0:	8060      	strh	r0, [r4, #2]
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8008fb2:	2002      	movs	r0, #2
 8008fb4:	f7fd f82a 	bl	800600c <VL53L1_i2c_decode_uint16_t>

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8008fb8:	1da9      	adds	r1, r5, #6
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8008fba:	80a0      	strh	r0, [r4, #4]
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8008fbc:	2002      	movs	r0, #2
 8008fbe:	f7fd f825 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8008fc2:	80e0      	strh	r0, [r4, #6]

	return status;
 8008fc4:	2000      	movs	r0, #0
}
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8008fc8:	f06f 0008 	mvn.w	r0, #8
 8008fcc:	e7fb      	b.n	8008fc6 <VL53L1_nvm_decode_additional_offset_cal_data+0x32>

08008fce <VL53L1_nvm_decode_fmt_range_results_data>:
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{

	VL53L1_Error status   = VL53L1_ERROR_NONE;

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8008fce:	280f      	cmp	r0, #15
{
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	460d      	mov	r5, r1
 8008fd4:	4614      	mov	r4, r2
	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8008fd6:	d92b      	bls.n	8009030 <VL53L1_nvm_decode_fmt_range_results_data+0x62>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8008fd8:	2002      	movs	r0, #2
 8008fda:	f7fd f817 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__actual_effective_rtn_spads =
 8008fde:	8020      	strh	r0, [r4, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 8008fe0:	78ab      	ldrb	r3, [r5, #2]
 8008fe2:	70a3      	strb	r3, [r4, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8008fe4:	78eb      	ldrb	r3, [r5, #3]
 8008fe6:	70e3      	strb	r3, [r4, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8008fe8:	1d29      	adds	r1, r5, #4
 8008fea:	2002      	movs	r0, #2
 8008fec:	f7fd f80e 	bl	800600c <VL53L1_i2c_decode_uint16_t>

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8008ff0:	1da9      	adds	r1, r5, #6
	pdata->result__peak_signal_count_rate_rtn_mcps =
 8008ff2:	80a0      	strh	r0, [r4, #4]
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8008ff4:	2002      	movs	r0, #2
 8008ff6:	f7fd f809 	bl	800600c <VL53L1_i2c_decode_uint16_t>

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8008ffa:	f105 0108 	add.w	r1, r5, #8
	pdata->result__ambient_count_rate_rtn_mcps =
 8008ffe:	80e0      	strh	r0, [r4, #6]
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8009000:	2002      	movs	r0, #2
 8009002:	f7fd f803 	bl	800600c <VL53L1_i2c_decode_uint16_t>

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 8009006:	f105 010a 	add.w	r1, r5, #10
	pdata->result__peak_signal_count_rate_ref_mcps =
 800900a:	8120      	strh	r0, [r4, #8]
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 800900c:	2002      	movs	r0, #2
 800900e:	f7fc fffd 	bl	800600c <VL53L1_i2c_decode_uint16_t>

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8009012:	f105 010c 	add.w	r1, r5, #12
	pdata->result__ambient_count_rate_ref_mcps =
 8009016:	8160      	strh	r0, [r4, #10]
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8009018:	2002      	movs	r0, #2
 800901a:	f7fc fff7 	bl	800600c <VL53L1_i2c_decode_uint16_t>

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 800901e:	f105 010e 	add.w	r1, r5, #14
	pdata->measured_distance_mm =
 8009022:	81a0      	strh	r0, [r4, #12]
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 8009024:	2002      	movs	r0, #2
 8009026:	f7fc fff1 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->measured_distance_stdev_mm =
 800902a:	81e0      	strh	r0, [r4, #14]

	return status;
 800902c:	2000      	movs	r0, #0
}
 800902e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8009030:	f06f 0008 	mvn.w	r0, #8
 8009034:	e7fb      	b.n	800902e <VL53L1_nvm_decode_fmt_range_results_data+0x60>

08009036 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8009036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009038:	460d      	mov	r5, r1
 800903a:	4616      	mov	r6, r2
	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_nvm_enable(
 800903c:	2104      	movs	r1, #4
 800903e:	2232      	movs	r2, #50	; 0x32
{
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	4604      	mov	r4, r0
		status = VL53L1_nvm_enable(
 8009044:	f7ff ff06 	bl	8008e54 <VL53L1_nvm_enable>
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 8009048:	9b01      	ldr	r3, [sp, #4]
 800904a:	b958      	cbnz	r0, 8009064 <VL53L1_read_nvm_raw_data+0x2e>
		status = VL53L1_nvm_read(
 800904c:	4632      	mov	r2, r6
 800904e:	4629      	mov	r1, r5
 8009050:	4620      	mov	r0, r4
 8009052:	f7ff ff32 	bl	8008eba <VL53L1_nvm_read>
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 8009056:	b928      	cbnz	r0, 8009064 <VL53L1_read_nvm_raw_data+0x2e>
		status = VL53L1_nvm_disable(Dev);
 8009058:	4620      	mov	r0, r4

	LOG_FUNCTION_END(status);

	return status;

}
 800905a:	b002      	add	sp, #8
 800905c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		status = VL53L1_nvm_disable(Dev);
 8009060:	f7ff bf5a 	b.w	8008f18 <VL53L1_nvm_disable>
}
 8009064:	b002      	add	sp, #8
 8009066:	bd70      	pop	{r4, r5, r6, pc}

08009068 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 8009068:	b513      	push	{r0, r1, r4, lr}
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 800906a:	2201      	movs	r2, #1
{
 800906c:	460c      	mov	r4, r1
		VL53L1_read_nvm_raw_data(
 800906e:	ab01      	add	r3, sp, #4
 8009070:	212e      	movs	r1, #46	; 0x2e
 8009072:	f7ff ffe0 	bl	8009036 <VL53L1_read_nvm_raw_data>
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8009076:	b960      	cbnz	r0, 8009092 <VL53L1_read_nvm_optical_centre+0x2a>
	tmp -= (uint16_t)*(pbuffer + 2);
 8009078:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800907c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009080:	b29b      	uxth	r3, r3
	if (tmp > 0x0FF)
 8009082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		tmp = 0;
 8009086:	bf08      	it	eq
 8009088:	2300      	moveq	r3, #0
	pdata->x_centre = (uint8_t)tmp;
 800908a:	7023      	strb	r3, [r4, #0]
	pdata->y_centre = *(pbuffer + 3);
 800908c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009090:	7063      	strb	r3, [r4, #1]
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
}
 8009092:	b002      	add	sp, #8
 8009094:	bd10      	pop	{r4, pc}

08009096 <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 8009096:	b510      	push	{r4, lr}
 8009098:	b08e      	sub	sp, #56	; 0x38
 800909a:	460c      	mov	r4, r1
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 800909c:	466b      	mov	r3, sp
 800909e:	220e      	movs	r2, #14
 80090a0:	2157      	movs	r1, #87	; 0x57
 80090a2:	f7ff ffc8 	bl	8009036 <VL53L1_read_nvm_raw_data>
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80090a6:	b920      	cbnz	r0, 80090b2 <VL53L1_read_nvm_cal_peak_rate_map+0x1c>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 80090a8:	4622      	mov	r2, r4
 80090aa:	4669      	mov	r1, sp
 80090ac:	2038      	movs	r0, #56	; 0x38
 80090ae:	f7ff ff4c 	bl	8008f4a <VL53L1_nvm_decode_cal_peak_rate_map>
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
}
 80090b2:	b00e      	add	sp, #56	; 0x38
 80090b4:	bd10      	pop	{r4, pc}

080090b6 <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 80090b6:	b513      	push	{r0, r1, r4, lr}
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80090b8:	2202      	movs	r2, #2
{
 80090ba:	460c      	mov	r4, r1
		VL53L1_read_nvm_raw_data(
 80090bc:	466b      	mov	r3, sp
 80090be:	2165      	movs	r1, #101	; 0x65
 80090c0:	f7ff ffb9 	bl	8009036 <VL53L1_read_nvm_raw_data>
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80090c4:	b920      	cbnz	r0, 80090d0 <VL53L1_read_nvm_additional_offset_cal_data+0x1a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 80090c6:	4622      	mov	r2, r4
 80090c8:	4669      	mov	r1, sp
 80090ca:	2008      	movs	r0, #8
 80090cc:	f7ff ff62 	bl	8008f94 <VL53L1_nvm_decode_additional_offset_cal_data>

	LOG_FUNCTION_END(status);

	return status;

}
 80090d0:	b002      	add	sp, #8
 80090d2:	bd10      	pop	{r4, pc}

080090d4 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 80090d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090d6:	4614      	mov	r4, r2

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 80090d8:	466b      	mov	r3, sp
 80090da:	2204      	movs	r2, #4
 80090dc:	f3c1 0187 	ubfx	r1, r1, #2, #8
 80090e0:	f7ff ffa9 	bl	8009036 <VL53L1_read_nvm_raw_data>
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80090e4:	b920      	cbnz	r0, 80090f0 <VL53L1_read_nvm_fmt_range_results_data+0x1c>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 80090e6:	4622      	mov	r2, r4
 80090e8:	4669      	mov	r1, sp
 80090ea:	2010      	movs	r0, #16
 80090ec:	f7ff ff6f 	bl	8008fce <VL53L1_nvm_decode_fmt_range_results_data>

	LOG_FUNCTION_END(status);

	return status;

}
 80090f0:	b004      	add	sp, #16
 80090f2:	bd10      	pop	{r4, pc}

080090f4 <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80090f4:	290a      	cmp	r1, #10
{
 80090f6:	b538      	push	{r3, r4, r5, lr}
 80090f8:	4605      	mov	r5, r0
 80090fa:	4614      	mov	r4, r2
	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80090fc:	d924      	bls.n	8009148 <VL53L1_i2c_encode_static_nvm_managed+0x54>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80090fe:	7803      	ldrb	r3, [r0, #0]
 8009100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   0) =
 8009104:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8009106:	7843      	ldrb	r3, [r0, #1]
 8009108:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   1) =
 800910c:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800910e:	7883      	ldrb	r3, [r0, #2]
 8009110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   2) =
 8009114:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8009116:	78c3      	ldrb	r3, [r0, #3]
 8009118:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800911c:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800911e:	7903      	ldrb	r3, [r0, #4]
 8009120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   4) =
 8009124:	7113      	strb	r3, [r2, #4]
	VL53L1_i2c_encode_uint16_t(
 8009126:	88c0      	ldrh	r0, [r0, #6]
 8009128:	3205      	adds	r2, #5
 800912a:	2102      	movs	r1, #2
 800912c:	f7fc ff66 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 8009130:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   7) =
 8009132:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->vhv_config__count_thresh;
 8009134:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   8) =
 8009136:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8009138:	7aab      	ldrb	r3, [r5, #10]
 800913a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 800913e:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->vhv_config__init;
 8009140:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer +  10) =
 8009142:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 8009144:	2000      	movs	r0, #0
}
 8009146:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009148:	f06f 0009 	mvn.w	r0, #9
 800914c:	e7fb      	b.n	8009146 <VL53L1_i2c_encode_static_nvm_managed+0x52>

0800914e <VL53L1_i2c_decode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800914e:	280a      	cmp	r0, #10
{
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	460d      	mov	r5, r1
 8009154:	4614      	mov	r4, r2
	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8009156:	d924      	bls.n	80091a2 <VL53L1_i2c_decode_static_nvm_managed+0x54>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8009158:	780b      	ldrb	r3, [r1, #0]
 800915a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->i2c_slave__device_address =
 800915e:	7013      	strb	r3, [r2, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8009160:	784b      	ldrb	r3, [r1, #1]
 8009162:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 8009166:	7053      	strb	r3, [r2, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8009168:	788b      	ldrb	r3, [r1, #2]
 800916a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 800916e:	7093      	strb	r3, [r2, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8009170:	78cb      	ldrb	r3, [r1, #3]
 8009172:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 8009176:	70d3      	strb	r3, [r2, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8009178:	790b      	ldrb	r3, [r1, #4]
 800917a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim =
 800917e:	7113      	strb	r3, [r2, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8009180:	3105      	adds	r1, #5
 8009182:	2002      	movs	r0, #2
 8009184:	f7fc ff42 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 8009188:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800918a:	79eb      	ldrb	r3, [r5, #7]
 800918c:	7223      	strb	r3, [r4, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800918e:	7a2b      	ldrb	r3, [r5, #8]
 8009190:	7263      	strb	r3, [r4, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8009192:	7a6b      	ldrb	r3, [r5, #9]
 8009194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 8009198:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 800919a:	7aab      	ldrb	r3, [r5, #10]
 800919c:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800919e:	2000      	movs	r0, #0
}
 80091a0:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80091a2:	f06f 0009 	mvn.w	r0, #9
 80091a6:	e7fb      	b.n	80091a0 <VL53L1_i2c_decode_static_nvm_managed+0x52>

080091a8 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80091a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091aa:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_ReadMulti(
 80091ac:	230b      	movs	r3, #11
 80091ae:	aa01      	add	r2, sp, #4
 80091b0:	2101      	movs	r1, #1
 80091b2:	f7f8 f9d7 	bl	8001564 <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80091b6:	b920      	cbnz	r0, 80091c2 <VL53L1_get_static_nvm_managed+0x1a>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80091b8:	4622      	mov	r2, r4
 80091ba:	a901      	add	r1, sp, #4
 80091bc:	200b      	movs	r0, #11
 80091be:	f7ff ffc6 	bl	800914e <VL53L1_i2c_decode_static_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 80091c2:	b004      	add	sp, #16
 80091c4:	bd10      	pop	{r4, pc}

080091c6 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80091c6:	2916      	cmp	r1, #22
{
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	4604      	mov	r4, r0
 80091cc:	4615      	mov	r5, r2
	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80091ce:	d948      	bls.n	8009262 <VL53L1_i2c_encode_customer_nvm_managed+0x9c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80091d0:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 80091d2:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__spad_enables_ref_1;
 80091d4:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 80091d6:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->global_config__spad_enables_ref_2;
 80091d8:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 80091da:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->global_config__spad_enables_ref_3;
 80091dc:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 80091de:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->global_config__spad_enables_ref_4;
 80091e0:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 80091e2:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80091e4:	7943      	ldrb	r3, [r0, #5]
 80091e6:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   5) =
 80091ea:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->global_config__ref_en_start_select;
 80091ec:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer +   6) =
 80091ee:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80091f0:	79c3      	ldrb	r3, [r0, #7]
 80091f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   7) =
 80091f6:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80091f8:	7a03      	ldrb	r3, [r0, #8]
 80091fa:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   8) =
 80091fe:	7213      	strb	r3, [r2, #8]
	VL53L1_i2c_encode_uint16_t(
 8009200:	8940      	ldrh	r0, [r0, #10]
 8009202:	3209      	adds	r2, #9
 8009204:	2102      	movs	r1, #2
 8009206:	f7fc fef9 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800920a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800920e:	f105 020b 	add.w	r2, r5, #11
 8009212:	2102      	movs	r1, #2
 8009214:	f7fc ff05 	bl	8006022 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8009218:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800921c:	f105 020d 	add.w	r2, r5, #13
 8009220:	2102      	movs	r1, #2
 8009222:	f7fc fefe 	bl	8006022 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8009226:	8a20      	ldrh	r0, [r4, #16]
 8009228:	f105 020f 	add.w	r2, r5, #15
 800922c:	2102      	movs	r1, #2
 800922e:	f7fc fee5 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
 8009232:	8a60      	ldrh	r0, [r4, #18]
 8009234:	f105 0211 	add.w	r2, r5, #17
 8009238:	2102      	movs	r1, #2
 800923a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800923e:	f7fc fef0 	bl	8006022 <VL53L1_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8009242:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8009246:	f105 0213 	add.w	r2, r5, #19
 800924a:	2102      	movs	r1, #2
 800924c:	f7fc fee9 	bl	8006022 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8009250:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8009254:	f105 0215 	add.w	r2, r5, #21
 8009258:	2102      	movs	r1, #2
 800925a:	f7fc fee2 	bl	8006022 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800925e:	2000      	movs	r0, #0
}
 8009260:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009262:	f06f 0009 	mvn.w	r0, #9
 8009266:	e7fb      	b.n	8009260 <VL53L1_i2c_encode_customer_nvm_managed+0x9a>

08009268 <VL53L1_i2c_decode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8009268:	2816      	cmp	r0, #22
{
 800926a:	b538      	push	{r3, r4, r5, lr}
 800926c:	460d      	mov	r5, r1
 800926e:	4614      	mov	r4, r2
	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8009270:	d944      	bls.n	80092fc <VL53L1_i2c_decode_customer_nvm_managed+0x94>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8009272:	780b      	ldrb	r3, [r1, #0]
	pdata->global_config__spad_enables_ref_0 =
 8009274:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 8009276:	784b      	ldrb	r3, [r1, #1]
 8009278:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800927a:	788b      	ldrb	r3, [r1, #2]
 800927c:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800927e:	78cb      	ldrb	r3, [r1, #3]
 8009280:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8009282:	790b      	ldrb	r3, [r1, #4]
 8009284:	7113      	strb	r3, [r2, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8009286:	794b      	ldrb	r3, [r1, #5]
 8009288:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 800928c:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 800928e:	798b      	ldrb	r3, [r1, #6]
 8009290:	7193      	strb	r3, [r2, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8009292:	79cb      	ldrb	r3, [r1, #7]
 8009294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 8009298:	71d3      	strb	r3, [r2, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800929a:	7a0b      	ldrb	r3, [r1, #8]
 800929c:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 80092a0:	7213      	strb	r3, [r2, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 80092a2:	3109      	adds	r1, #9
 80092a4:	2002      	movs	r0, #2
 80092a6:	f7fc feb1 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80092aa:	f105 010b 	add.w	r1, r5, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80092ae:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80092b0:	2002      	movs	r0, #2
 80092b2:	f7fc febe 	bl	8006032 <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80092b6:	f105 010d 	add.w	r1, r5, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80092ba:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80092bc:	2002      	movs	r0, #2
 80092be:	f7fc feb8 	bl	8006032 <VL53L1_i2c_decode_int16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80092c2:	f105 010f 	add.w	r1, r5, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80092c6:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80092c8:	2002      	movs	r0, #2
 80092ca:	f7fc fe9f 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80092ce:	f105 0111 	add.w	r1, r5, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 80092d2:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80092d4:	2002      	movs	r0, #2
 80092d6:	f7fc feac 	bl	8006032 <VL53L1_i2c_decode_int16_t>
 80092da:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 80092de:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80092e0:	f105 0113 	add.w	r1, r5, #19
 80092e4:	2002      	movs	r0, #2
 80092e6:	f7fc fea4 	bl	8006032 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80092ea:	f105 0115 	add.w	r1, r5, #21
	pdata->mm_config__inner_offset_mm =
 80092ee:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80092f0:	2002      	movs	r0, #2
 80092f2:	f7fc fe9e 	bl	8006032 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 80092f6:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 80092f8:	2000      	movs	r0, #0
}
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80092fc:	f06f 0009 	mvn.w	r0, #9
 8009300:	e7fb      	b.n	80092fa <VL53L1_i2c_decode_customer_nvm_managed+0x92>

08009302 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8009302:	b510      	push	{r4, lr}
 8009304:	b086      	sub	sp, #24
 8009306:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_ReadMulti(
 8009308:	2317      	movs	r3, #23
 800930a:	466a      	mov	r2, sp
 800930c:	210d      	movs	r1, #13
 800930e:	f7f8 f929 	bl	8001564 <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8009312:	b920      	cbnz	r0, 800931e <VL53L1_get_customer_nvm_managed+0x1c>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8009314:	4622      	mov	r2, r4
 8009316:	4669      	mov	r1, sp
 8009318:	2017      	movs	r0, #23
 800931a:	f7ff ffa5 	bl	8009268 <VL53L1_i2c_decode_customer_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800931e:	b006      	add	sp, #24
 8009320:	bd10      	pop	{r4, pc}

08009322 <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 8009322:	291f      	cmp	r1, #31
{
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	4604      	mov	r4, r0
 8009328:	4615      	mov	r5, r2
	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 800932a:	d965      	bls.n	80093f8 <VL53L1_i2c_encode_static_config+0xd6>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 800932c:	8800      	ldrh	r0, [r0, #0]
 800932e:	2102      	movs	r1, #2
 8009330:	f7fc fe64 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8009334:	78a3      	ldrb	r3, [r4, #2]
 8009336:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800933a:	70ab      	strb	r3, [r5, #2]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800933c:	78e3      	ldrb	r3, [r4, #3]
 800933e:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   3) =
 8009342:	70eb      	strb	r3, [r5, #3]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8009344:	7923      	ldrb	r3, [r4, #4]
 8009346:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800934a:	712b      	strb	r3, [r5, #4]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800934c:	7963      	ldrb	r3, [r4, #5]
 800934e:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +   5) =
 8009352:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8009354:	79a3      	ldrb	r3, [r4, #6]
 8009356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 800935a:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800935c:	79e3      	ldrb	r3, [r4, #7]
 800935e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   7) =
 8009362:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8009364:	7a23      	ldrb	r3, [r4, #8]
 8009366:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   8) =
 800936a:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->pad_i2c_hv__config;
 800936c:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   9) =
 800936e:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8009370:	7aa3      	ldrb	r3, [r4, #10]
 8009372:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  10) =
 8009376:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8009378:	7ae3      	ldrb	r3, [r4, #11]
 800937a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800937e:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8009380:	7b23      	ldrb	r3, [r4, #12]
 8009382:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  12) =
 8009386:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8009388:	7b63      	ldrb	r3, [r4, #13]
 800938a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  13) =
 800938e:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8009390:	7ba3      	ldrb	r3, [r4, #14]
 8009392:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  14) =
 8009396:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8009398:	7be3      	ldrb	r3, [r4, #15]
 800939a:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  15) =
 800939e:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80093a0:	7c23      	ldrb	r3, [r4, #16]
 80093a2:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  16) =
 80093a6:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80093a8:	7c63      	ldrb	r3, [r4, #17]
 80093aa:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  17) =
 80093ae:	746b      	strb	r3, [r5, #17]
	*(pbuffer +  18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 80093b0:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer +  18) =
 80093b2:	74ab      	strb	r3, [r5, #18]
	*(pbuffer +  19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 80093b4:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer +  19) =
 80093b6:	74eb      	strb	r3, [r5, #19]
	*(pbuffer +  20) =
		pdata->sigma_estimator__sigma_ref_mm;
 80093b8:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer +  20) =
 80093ba:	752b      	strb	r3, [r5, #20]
	*(pbuffer +  21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80093bc:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer +  21) =
 80093be:	756b      	strb	r3, [r5, #21]
	*(pbuffer +  22) =
		pdata->spare_host_config__static_config_spare_0;
 80093c0:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer +  22) =
 80093c2:	75ab      	strb	r3, [r5, #22]
	*(pbuffer +  23) =
		pdata->spare_host_config__static_config_spare_1;
 80093c4:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer +  23) =
 80093c6:	75eb      	strb	r3, [r5, #23]
	VL53L1_i2c_encode_uint16_t(
 80093c8:	8b20      	ldrh	r0, [r4, #24]
 80093ca:	f105 0218 	add.w	r2, r5, #24
 80093ce:	2102      	movs	r1, #2
 80093d0:	f7fc fe14 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
		pdata->algo__range_ignore_valid_height_mm;
 80093d4:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer +  26) =
 80093d6:	76ab      	strb	r3, [r5, #26]
	*(pbuffer +  27) =
		pdata->algo__range_min_clip;
 80093d8:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer +  27) =
 80093da:	76eb      	strb	r3, [r5, #27]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80093dc:	7f23      	ldrb	r3, [r4, #28]
 80093de:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  28) =
 80093e2:	772b      	strb	r3, [r5, #28]
	*(pbuffer +  29) =
		pdata->spare_host_config__static_config_spare_2;
 80093e4:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer +  29) =
 80093e6:	776b      	strb	r3, [r5, #29]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80093e8:	7fa3      	ldrb	r3, [r4, #30]
 80093ea:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  30) =
 80093ee:	77ab      	strb	r3, [r5, #30]
	*(pbuffer +  31) =
		pdata->sd_config__reset_stages_lsb;
 80093f0:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer +  31) =
 80093f2:	77eb      	strb	r3, [r5, #31]
	LOG_FUNCTION_END(status);


	return status;
 80093f4:	2000      	movs	r0, #0
}
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80093f8:	f06f 0009 	mvn.w	r0, #9
 80093fc:	e7fb      	b.n	80093f6 <VL53L1_i2c_encode_static_config+0xd4>

080093fe <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 80093fe:	2915      	cmp	r1, #21
{
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4605      	mov	r5, r0
 8009404:	4614      	mov	r4, r2
	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8009406:	d93c      	bls.n	8009482 <VL53L1_i2c_encode_general_config+0x84>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8009408:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800940a:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__stream_divider;
 800940c:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800940e:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->system__interrupt_config_gpio;
 8009410:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 8009412:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8009414:	78c3      	ldrb	r3, [r0, #3]
 8009416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   3) =
 800941a:	70d3      	strb	r3, [r2, #3]
	VL53L1_i2c_encode_uint16_t(
 800941c:	8880      	ldrh	r0, [r0, #4]
 800941e:	3204      	adds	r2, #4
 8009420:	2102      	movs	r1, #2
 8009422:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009426:	f7fc fde9 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800942a:	79ab      	ldrb	r3, [r5, #6]
 800942c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 8009430:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->phasecal_config__timeout_macrop;
 8009432:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer +   7) =
 8009434:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->phasecal_config__target;
 8009436:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   8) =
 8009438:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800943a:	7a6b      	ldrb	r3, [r5, #9]
 800943c:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   9) =
 8009440:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8009442:	7aab      	ldrb	r3, [r5, #10]
 8009444:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  11) =
 8009448:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 800944a:	89a8      	ldrh	r0, [r5, #12]
 800944c:	f104 020c 	add.w	r2, r4, #12
 8009450:	2102      	movs	r1, #2
 8009452:	f7fc fdd3 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8009456:	89e8      	ldrh	r0, [r5, #14]
 8009458:	f104 020e 	add.w	r2, r4, #14
 800945c:	2102      	movs	r1, #2
 800945e:	f7fc fdcd 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8009462:	8a28      	ldrh	r0, [r5, #16]
 8009464:	f104 0210 	add.w	r2, r4, #16
 8009468:	2102      	movs	r1, #2
 800946a:	f7fc fdc7 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
		pdata->dss_config__manual_block_select;
 800946e:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 8009470:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->dss_config__aperture_attenuation;
 8009472:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 8009474:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->dss_config__max_spads_limit;
 8009476:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 8009478:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->dss_config__min_spads_limit;
 800947a:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 800947c:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 800947e:	2000      	movs	r0, #0
}
 8009480:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009482:	f06f 0009 	mvn.w	r0, #9
 8009486:	e7fb      	b.n	8009480 <VL53L1_i2c_encode_general_config+0x82>

08009488 <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8009488:	2916      	cmp	r1, #22
{
 800948a:	b538      	push	{r3, r4, r5, lr}
 800948c:	4605      	mov	r5, r0
 800948e:	4614      	mov	r4, r2
	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8009490:	d93a      	bls.n	8009508 <VL53L1_i2c_encode_timing_config+0x80>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8009492:	7803      	ldrb	r3, [r0, #0]
 8009494:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   0) =
 8009498:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->mm_config__timeout_macrop_a_lo;
 800949a:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800949c:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800949e:	7883      	ldrb	r3, [r0, #2]
 80094a0:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   2) =
 80094a4:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->mm_config__timeout_macrop_b_lo;
 80094a6:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 80094a8:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80094aa:	7903      	ldrb	r3, [r0, #4]
 80094ac:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 80094b0:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->range_config__timeout_macrop_a_lo;
 80094b2:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer +   5) =
 80094b4:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80094b6:	7983      	ldrb	r3, [r0, #6]
 80094b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   6) =
 80094bc:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80094be:	79c3      	ldrb	r3, [r0, #7]
 80094c0:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   7) =
 80094c4:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->range_config__timeout_macrop_b_lo;
 80094c6:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer +   8) =
 80094c8:	7213      	strb	r3, [r2, #8]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80094ca:	7a43      	ldrb	r3, [r0, #9]
 80094cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 80094d0:	7253      	strb	r3, [r2, #9]
	VL53L1_i2c_encode_uint16_t(
 80094d2:	8940      	ldrh	r0, [r0, #10]
 80094d4:	320a      	adds	r2, #10
 80094d6:	2102      	movs	r1, #2
 80094d8:	f7fc fd90 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 80094dc:	89a8      	ldrh	r0, [r5, #12]
 80094de:	f104 020c 	add.w	r2, r4, #12
 80094e2:	2102      	movs	r1, #2
 80094e4:	f7fc fd8a 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
		pdata->range_config__valid_phase_low;
 80094e8:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer +  14) =
 80094ea:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->range_config__valid_phase_high;
 80094ec:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer +  15) =
 80094ee:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 80094f0:	6928      	ldr	r0, [r5, #16]
 80094f2:	f104 0212 	add.w	r2, r4, #18
 80094f6:	2104      	movs	r1, #4
 80094f8:	f7fc fdaa 	bl	8006050 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80094fc:	7d2b      	ldrb	r3, [r5, #20]
 80094fe:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  22) =
 8009502:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 8009504:	2000      	movs	r0, #0
}
 8009506:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009508:	f06f 0009 	mvn.w	r0, #9
 800950c:	e7fb      	b.n	8009506 <VL53L1_i2c_encode_timing_config+0x7e>

0800950e <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800950e:	2911      	cmp	r1, #17
{
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4604      	mov	r4, r0
 8009514:	4615      	mov	r5, r2
	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8009516:	d939      	bls.n	800958c <VL53L1_i2c_encode_dynamic_config+0x7e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8009518:	7803      	ldrb	r3, [r0, #0]
 800951a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   0) =
 800951e:	f802 3b01 	strb.w	r3, [r2], #1
	VL53L1_i2c_encode_uint16_t(
 8009522:	2102      	movs	r1, #2
 8009524:	8840      	ldrh	r0, [r0, #2]
 8009526:	f7fc fd69 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800952a:	88a0      	ldrh	r0, [r4, #4]
 800952c:	1cea      	adds	r2, r5, #3
 800952e:	2102      	movs	r1, #2
 8009530:	f7fc fd64 	bl	8005ffc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8009534:	79a3      	ldrb	r3, [r4, #6]
 8009536:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   5) =
 800953a:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800953c:	79e3      	ldrb	r3, [r4, #7]
 800953e:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +   6) =
 8009542:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->sd_config__woi_sd0;
 8009544:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer +   7) =
 8009546:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->sd_config__woi_sd1;
 8009548:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   8) =
 800954a:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800954c:	7aa3      	ldrb	r3, [r4, #10]
 800954e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   9) =
 8009552:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8009554:	7ae3      	ldrb	r3, [r4, #11]
 8009556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +  10) =
 800955a:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800955c:	7b23      	ldrb	r3, [r4, #12]
 800955e:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 8009562:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8009564:	7b63      	ldrb	r3, [r4, #13]
 8009566:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  12) =
 800956a:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800956c:	7ba3      	ldrb	r3, [r4, #14]
 800956e:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  13) =
 8009572:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->roi_config__user_roi_centre_spad;
 8009574:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer +  14) =
 8009576:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 8009578:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer +  15) =
 800957a:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->system__sequence_config;
 800957c:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer +  16) =
 800957e:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8009580:	7ca3      	ldrb	r3, [r4, #18]
 8009582:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  17) =
 8009586:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 8009588:	2000      	movs	r0, #0
}
 800958a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800958c:	f06f 0009 	mvn.w	r0, #9
 8009590:	e7fb      	b.n	800958a <VL53L1_i2c_encode_dynamic_config+0x7c>

08009592 <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8009592:	2904      	cmp	r1, #4
 8009594:	d913      	bls.n	80095be <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8009596:	7803      	ldrb	r3, [r0, #0]
 8009598:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   0) =
 800959c:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800959e:	7843      	ldrb	r3, [r0, #1]
 80095a0:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   1) =
 80095a4:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 80095a6:	7883      	ldrb	r3, [r0, #2]
 80095a8:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 80095ac:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80095ae:	78c3      	ldrb	r3, [r0, #3]
 80095b0:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 80095b4:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->system__mode_start;
 80095b6:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 80095b8:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 80095ba:	2000      	movs	r0, #0
 80095bc:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80095be:	f06f 0009 	mvn.w	r0, #9
}
 80095c2:	4770      	bx	lr

080095c4 <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 80095c4:	282b      	cmp	r0, #43	; 0x2b
{
 80095c6:	b538      	push	{r3, r4, r5, lr}
 80095c8:	460d      	mov	r5, r1
 80095ca:	4614      	mov	r4, r2
	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 80095cc:	f240 8086 	bls.w	80096dc <VL53L1_i2c_decode_system_results+0x118>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80095d0:	780b      	ldrb	r3, [r1, #0]
 80095d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 80095d6:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 80095d8:	784b      	ldrb	r3, [r1, #1]
 80095da:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 80095dc:	788b      	ldrb	r3, [r1, #2]
 80095de:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 80095e2:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 80095e4:	78cb      	ldrb	r3, [r1, #3]
 80095e6:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 80095e8:	3104      	adds	r1, #4
 80095ea:	2002      	movs	r0, #2
 80095ec:	f7fc fd0e 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 80095f0:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 80095f2:	80a0      	strh	r0, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 80095f4:	2002      	movs	r0, #2
 80095f6:	f7fc fd09 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 80095fa:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80095fe:	80e0      	strh	r0, [r4, #6]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8009600:	2002      	movs	r0, #2
 8009602:	f7fc fd03 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8009606:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 800960a:	8120      	strh	r0, [r4, #8]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800960c:	2002      	movs	r0, #2
 800960e:	f7fc fcfd 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8009612:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 8009616:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8009618:	2002      	movs	r0, #2
 800961a:	f7fc fcf7 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800961e:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 8009622:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8009624:	2002      	movs	r0, #2
 8009626:	f7fc fcf1 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800962a:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800962e:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8009630:	2002      	movs	r0, #2
 8009632:	f7fc fceb 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8009636:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800963a:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800963c:	2002      	movs	r0, #2
 800963e:	f7fc fce5 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8009642:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8009646:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8009648:	2002      	movs	r0, #2
 800964a:	f7fc fcdf 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800964e:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8009652:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8009654:	2002      	movs	r0, #2
 8009656:	f7fc fcd9 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800965a:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800965e:	82e0      	strh	r0, [r4, #22]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8009660:	2002      	movs	r0, #2
 8009662:	f7fc fcd3 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8009666:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 800966a:	8320      	strh	r0, [r4, #24]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800966c:	2002      	movs	r0, #2
 800966e:	f7fc fccd 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8009672:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8009676:	8360      	strh	r0, [r4, #26]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8009678:	2002      	movs	r0, #2
 800967a:	f7fc fcc7 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800967e:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 8009682:	83a0      	strh	r0, [r4, #28]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8009684:	2002      	movs	r0, #2
 8009686:	f7fc fcc1 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800968a:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 800968e:	83e0      	strh	r0, [r4, #30]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8009690:	2002      	movs	r0, #2
 8009692:	f7fc fcbb 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8009696:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 800969a:	8420      	strh	r0, [r4, #32]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800969c:	2002      	movs	r0, #2
 800969e:	f7fc fcb5 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 80096a2:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80096a6:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 80096a8:	2002      	movs	r0, #2
 80096aa:	f7fc fcaf 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 80096ae:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 80096b2:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 80096b4:	2002      	movs	r0, #2
 80096b6:	f7fc fca9 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 80096ba:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 80096be:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 80096c0:	2002      	movs	r0, #2
 80096c2:	f7fc fca3 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 80096c6:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 80096c8:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 80096cc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 80096d0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80096d4:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80096d8:	2000      	movs	r0, #0
}
 80096da:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80096dc:	f06f 0009 	mvn.w	r0, #9
 80096e0:	e7fb      	b.n	80096da <VL53L1_i2c_decode_system_results+0x116>

080096e2 <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 80096e2:	2820      	cmp	r0, #32
{
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	460d      	mov	r5, r1
 80096e8:	4614      	mov	r4, r2
	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 80096ea:	d932      	bls.n	8009752 <VL53L1_i2c_decode_core_results+0x70>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80096ec:	2004      	movs	r0, #4
 80096ee:	f7fc fcb7 	bl	8006060 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80096f2:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 80096f4:	6020      	str	r0, [r4, #0]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80096f6:	2004      	movs	r0, #4
 80096f8:	f7fc fcb2 	bl	8006060 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80096fc:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 8009700:	6060      	str	r0, [r4, #4]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8009702:	2004      	movs	r0, #4
 8009704:	f7fc fcb6 	bl	8006074 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8009708:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 800970c:	60a0      	str	r0, [r4, #8]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800970e:	2004      	movs	r0, #4
 8009710:	f7fc fca6 	bl	8006060 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8009714:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 8009718:	60e0      	str	r0, [r4, #12]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800971a:	2004      	movs	r0, #4
 800971c:	f7fc fca0 	bl	8006060 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8009720:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 8009724:	6120      	str	r0, [r4, #16]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8009726:	2004      	movs	r0, #4
 8009728:	f7fc fc9a 	bl	8006060 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800972c:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 8009730:	6160      	str	r0, [r4, #20]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8009732:	2004      	movs	r0, #4
 8009734:	f7fc fc9e 	bl	8006074 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8009738:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 800973c:	61a0      	str	r0, [r4, #24]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800973e:	2004      	movs	r0, #4
 8009740:	f7fc fc8e 	bl	8006060 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 8009744:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 8009746:	f895 3020 	ldrb.w	r3, [r5, #32]
 800974a:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800974e:	2000      	movs	r0, #0
}
 8009750:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009752:	f06f 0009 	mvn.w	r0, #9
 8009756:	e7fb      	b.n	8009750 <VL53L1_i2c_decode_core_results+0x6e>

08009758 <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8009758:	2837      	cmp	r0, #55	; 0x37
{
 800975a:	b538      	push	{r3, r4, r5, lr}
 800975c:	460d      	mov	r5, r1
 800975e:	4614      	mov	r4, r2
	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8009760:	f240 80d0 	bls.w	8009904 <VL53L1_i2c_decode_debug_results+0x1ac>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8009764:	2002      	movs	r0, #2
 8009766:	f7fc fc51 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 800976a:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800976c:	78ab      	ldrb	r3, [r5, #2]
 800976e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 8009772:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8009774:	78eb      	ldrb	r3, [r5, #3]
 8009776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800977a:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800977c:	792b      	ldrb	r3, [r5, #4]
 800977e:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 8009782:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8009784:	796b      	ldrb	r3, [r5, #5]
 8009786:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 800978a:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800978c:	79ab      	ldrb	r3, [r5, #6]
 800978e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 8009792:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8009794:	79eb      	ldrb	r3, [r5, #7]
 8009796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 800979a:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800979c:	f105 0108 	add.w	r1, r5, #8
 80097a0:	2002      	movs	r0, #2
 80097a2:	f7fc fc33 	bl	800600c <VL53L1_i2c_decode_uint16_t>
 80097a6:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 80097aa:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80097ac:	7aab      	ldrb	r3, [r5, #10]
 80097ae:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 80097b2:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80097b4:	7aeb      	ldrb	r3, [r5, #11]
 80097b6:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 80097ba:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80097bc:	7b2b      	ldrb	r3, [r5, #12]
 80097be:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 80097c2:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80097c4:	7b6b      	ldrb	r3, [r5, #13]
 80097c6:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 80097ca:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80097cc:	7bab      	ldrb	r3, [r5, #14]
 80097ce:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 80097d2:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80097d4:	7beb      	ldrb	r3, [r5, #15]
 80097d6:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 80097da:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 80097dc:	7c2b      	ldrb	r3, [r5, #16]
 80097de:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80097e0:	7c6b      	ldrb	r3, [r5, #17]
 80097e2:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80097e4:	f105 0112 	add.w	r1, r5, #18
 80097e8:	2002      	movs	r0, #2
 80097ea:	f7fc fc0f 	bl	800600c <VL53L1_i2c_decode_uint16_t>
 80097ee:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 80097f2:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80097f4:	f105 0116 	add.w	r1, r5, #22
 80097f8:	2002      	movs	r0, #2
 80097fa:	f7fc fc07 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80097fe:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 8009802:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8009804:	2002      	movs	r0, #2
 8009806:	f7fc fc01 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 800980a:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800980c:	7eab      	ldrb	r3, [r5, #26]
 800980e:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 8009812:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8009814:	7eeb      	ldrb	r3, [r5, #27]
 8009816:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 800981a:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 800981c:	7f2b      	ldrb	r3, [r5, #28]
 800981e:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8009820:	7f6b      	ldrb	r3, [r5, #29]
 8009822:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8009824:	7fab      	ldrb	r3, [r5, #30]
 8009826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 800982a:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800982c:	7feb      	ldrb	r3, [r5, #31]
 800982e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 8009832:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8009834:	f895 3020 	ldrb.w	r3, [r5, #32]
 8009838:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 800983c:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800983e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8009842:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 8009846:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8009848:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800984c:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8009850:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8009854:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8009858:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800985c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8009860:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8009864:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 8009868:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800986c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8009870:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 8009874:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8009878:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800987c:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 8009880:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8009884:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8009888:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 800988c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8009890:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8009894:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 8009898:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800989c:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 80098a0:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 80098a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80098a8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80098ac:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 80098b0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80098b4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80098b8:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 80098bc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80098c0:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80098c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 80098c8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80098cc:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 80098d0:	2004      	movs	r0, #4
 80098d2:	f7fc fbc5 	bl	8006060 <VL53L1_i2c_decode_uint32_t>
 80098d6:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 80098da:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80098dc:	f105 0132 	add.w	r1, r5, #50	; 0x32
 80098e0:	2004      	movs	r0, #4
 80098e2:	f7fc fbbd 	bl	8006060 <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 80098e6:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80098e8:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 80098ec:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 80098f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80098f4:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 80098f8:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 80098fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8009900:	2000      	movs	r0, #0
}
 8009902:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009904:	f06f 0009 	mvn.w	r0, #9
 8009908:	e7fb      	b.n	8009902 <VL53L1_i2c_decode_debug_results+0x1aa>

0800990a <VL53L1_i2c_decode_nvm_copy_data>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 800990a:	2830      	cmp	r0, #48	; 0x30
{
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	460d      	mov	r5, r1
 8009910:	4614      	mov	r4, r2
	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8009912:	f240 809c 	bls.w	8009a4e <VL53L1_i2c_decode_nvm_copy_data+0x144>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8009916:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__model_id =
 8009918:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 800991a:	784b      	ldrb	r3, [r1, #1]
 800991c:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800991e:	788b      	ldrb	r3, [r1, #2]
 8009920:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8009922:	3103      	adds	r1, #3
 8009924:	2002      	movs	r0, #2
 8009926:	f7fc fb71 	bl	800600c <VL53L1_i2c_decode_uint16_t>
	pdata->identification__module_id =
 800992a:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800992c:	796b      	ldrb	r3, [r5, #5]
 800992e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim_max =
 8009932:	71a3      	strb	r3, [r4, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8009934:	79ab      	ldrb	r3, [r5, #6]
 8009936:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 800993a:	71e3      	strb	r3, [r4, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800993c:	79eb      	ldrb	r3, [r5, #7]
 800993e:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 8009942:	7223      	strb	r3, [r4, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8009944:	7a2b      	ldrb	r3, [r5, #8]
 8009946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion =
 800994a:	7263      	strb	r3, [r4, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800994c:	7a6b      	ldrb	r3, [r5, #9]
 800994e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion_max =
 8009952:	72a3      	strb	r3, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8009954:	7aab      	ldrb	r3, [r5, #10]
 8009956:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 800995a:	72e3      	strb	r3, [r4, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800995c:	7aeb      	ldrb	r3, [r5, #11]
 800995e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->laser_safety__key =
 8009962:	7323      	strb	r3, [r4, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8009964:	7b2b      	ldrb	r3, [r5, #12]
 8009966:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 800996a:	7363      	strb	r3, [r4, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800996c:	7b6b      	ldrb	r3, [r5, #13]
 800996e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__clip =
 8009972:	73a3      	strb	r3, [r4, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8009974:	7bab      	ldrb	r3, [r5, #14]
 8009976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__mult =
 800997a:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800997c:	7beb      	ldrb	r3, [r5, #15]
 800997e:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8009980:	7c2b      	ldrb	r3, [r5, #16]
 8009982:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8009984:	7c6b      	ldrb	r3, [r5, #17]
 8009986:	74a3      	strb	r3, [r4, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8009988:	7cab      	ldrb	r3, [r5, #18]
 800998a:	74e3      	strb	r3, [r4, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800998c:	7ceb      	ldrb	r3, [r5, #19]
 800998e:	7523      	strb	r3, [r4, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8009990:	7d2b      	ldrb	r3, [r5, #20]
 8009992:	7563      	strb	r3, [r4, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8009994:	7d6b      	ldrb	r3, [r5, #21]
 8009996:	75a3      	strb	r3, [r4, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8009998:	7dab      	ldrb	r3, [r5, #22]
 800999a:	75e3      	strb	r3, [r4, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800999c:	7deb      	ldrb	r3, [r5, #23]
 800999e:	7623      	strb	r3, [r4, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80099a0:	7e2b      	ldrb	r3, [r5, #24]
 80099a2:	7663      	strb	r3, [r4, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80099a4:	7e6b      	ldrb	r3, [r5, #25]
 80099a6:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80099a8:	7eab      	ldrb	r3, [r5, #26]
 80099aa:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80099ac:	7eeb      	ldrb	r3, [r5, #27]
 80099ae:	7723      	strb	r3, [r4, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80099b0:	7f2b      	ldrb	r3, [r5, #28]
 80099b2:	7763      	strb	r3, [r4, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80099b4:	7f6b      	ldrb	r3, [r5, #29]
 80099b6:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80099b8:	7fab      	ldrb	r3, [r5, #30]
 80099ba:	77e3      	strb	r3, [r4, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80099bc:	7feb      	ldrb	r3, [r5, #31]
 80099be:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80099c2:	f895 3020 	ldrb.w	r3, [r5, #32]
 80099c6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80099ca:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80099ce:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80099d2:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80099d6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80099da:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80099de:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80099e2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80099e6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80099ea:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80099ee:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80099f2:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 80099f6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80099fa:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 80099fe:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8009a02:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8009a06:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8009a0a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8009a0e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8009a12:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8009a16:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8009a1a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8009a1e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8009a22:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8009a26:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8009a2a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8009a2e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8009a32:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 8009a36:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8009a3a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8009a3e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8009a42:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8009a46:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8009a4a:	2000      	movs	r0, #0
}
 8009a4c:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009a4e:	f06f 0009 	mvn.w	r0, #9
 8009a52:	e7fb      	b.n	8009a4c <VL53L1_i2c_decode_nvm_copy_data+0x142>

08009a54 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8009a54:	b510      	push	{r4, lr}
 8009a56:	b08e      	sub	sp, #56	; 0x38
 8009a58:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_ReadMulti(
 8009a5a:	2331      	movs	r3, #49	; 0x31
 8009a5c:	aa01      	add	r2, sp, #4
 8009a5e:	f240 110f 	movw	r1, #271	; 0x10f
 8009a62:	f7f7 fd7f 	bl	8001564 <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8009a66:	b920      	cbnz	r0, 8009a72 <VL53L1_get_nvm_copy_data+0x1e>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8009a68:	4622      	mov	r2, r4
 8009a6a:	a901      	add	r1, sp, #4
 8009a6c:	2031      	movs	r0, #49	; 0x31
 8009a6e:	f7ff ff4c 	bl	800990a <VL53L1_i2c_decode_nvm_copy_data>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8009a72:	b00e      	add	sp, #56	; 0x38
 8009a74:	bd10      	pop	{r4, pc}

08009a76 <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8009a76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	9004      	str	r0, [sp, #16]
	uint64_t tmp0        = 0;
	uint64_t tmp1        = 0;
	uint64_t b_minus_amb = 0;
	uint64_t VL53L1_p_041   = 0;

	*psigma_est  = VL53L1_D_002;
 8009a80:	9917      	ldr	r1, [sp, #92]	; 0x5c
{
 8009a82:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8009a86:	469b      	mov	fp, r3
	*psigma_est  = VL53L1_D_002;
 8009a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a8c:	800b      	strh	r3, [r1, #0]



	if (fast_osc_frequency != 0) {
 8009a8e:	b920      	cbnz	r0, 8009a9a <VL53L1_f_014+0x24>
	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009a90:	f06f 000e 	mvn.w	r0, #14
		}

	}

	return status;
}
 8009a94:	b007      	add	sp, #28
 8009a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9a:	9205      	str	r2, [sp, #20]
		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 8009a9c:	f7fd fe7a 	bl	8007794 <VL53L1_calc_pll_period_mm>
 8009aa0:	9a05      	ldr	r2, [sp, #20]
 8009aa2:	9d15      	ldr	r5, [sp, #84]	; 0x54
		if (VL53L1_p_004 > VL53L1_p_018)
 8009aa4:	4295      	cmp	r5, r2
		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 8009aa6:	4680      	mov	r8, r0
		if (VL53L1_p_004 > VL53L1_p_018)
 8009aa8:	f04f 0100 	mov.w	r1, #0
 8009aac:	4610      	mov	r0, r2
 8009aae:	f04f 0c00 	mov.w	ip, #0
 8009ab2:	f240 80c9 	bls.w	8009c48 <VL53L1_f_014+0x1d2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8009ab6:	1aae      	subs	r6, r5, r2
 8009ab8:	eb6c 0701 	sbc.w	r7, ip, r1
		if (VL53L1_p_003 > VL53L1_p_001)
 8009abc:	2200      	movs	r2, #0
 8009abe:	455c      	cmp	r4, fp
 8009ac0:	4696      	mov	lr, r2
 8009ac2:	f240 80c5 	bls.w	8009c50 <VL53L1_f_014+0x1da>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8009ac6:	ebb4 030b 	subs.w	r3, r4, fp
 8009aca:	eb62 0402 	sbc.w	r4, r2, r2
		if (b_minus_amb != 0) {
 8009ace:	ea56 0207 	orrs.w	r2, r6, r7
 8009ad2:	d0dd      	beq.n	8009a90 <VL53L1_f_014+0x1a>
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8009ad4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ad6:	1880      	adds	r0, r0, r2
 8009ad8:	f141 0100 	adc.w	r1, r1, #0
			if (tmp0 > VL53L1_D_003)
 8009adc:	eb10 0905 	adds.w	r9, r0, r5
 8009ae0:	eb41 0a0c 	adc.w	sl, r1, ip
			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 8009ae4:	435c      	muls	r4, r3
 8009ae6:	fba3 bc03 	umull	fp, ip, r3, r3
 8009aea:	2100      	movs	r1, #0
 8009aec:	4551      	cmp	r1, sl
 8009aee:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
 8009af2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009af6:	bf08      	it	eq
 8009af8:	4548      	cmpeq	r0, r9
			tmp1 = tmp1 << 8;
 8009afa:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8009afe:	bf38      	it	cc
 8009b00:	468a      	movcc	sl, r1
 8009b02:	ea43 611b 	orr.w	r1, r3, fp, lsr #24
 8009b06:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009b0a:	bf38      	it	cc
 8009b0c:	4681      	movcc	r9, r0
			if (tmp1 > VL53L1_D_004)
 8009b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b12:	428b      	cmp	r3, r1
 8009b14:	ea4f 200b 	mov.w	r0, fp, lsl #8
 8009b18:	bf08      	it	eq
 8009b1a:	4282      	cmpeq	r2, r0
 8009b1c:	bf3c      	itt	cc
 8009b1e:	4610      	movcc	r0, r2
 8009b20:	4619      	movcc	r1, r3
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8009b22:	4632      	mov	r2, r6
 8009b24:	463b      	mov	r3, r7
 8009b26:	f7f7 f897 	bl	8000c58 <__aeabi_uldivmod>
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8009b2a:	4632      	mov	r2, r6
 8009b2c:	463b      	mov	r3, r7
 8009b2e:	f7f7 f893 	bl	8000c58 <__aeabi_uldivmod>
 8009b32:	460b      	mov	r3, r1
			tmp0 = tmp1 * tmp0;
 8009b34:	217f      	movs	r1, #127	; 0x7f
 8009b36:	4299      	cmp	r1, r3
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8009b38:	4602      	mov	r2, r0
			tmp0 = tmp1 * tmp0;
 8009b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3e:	bf08      	it	eq
 8009b40:	4290      	cmpeq	r0, r2
 8009b42:	bf3c      	itt	cc
 8009b44:	4602      	movcc	r2, r0
 8009b46:	460b      	movcc	r3, r1
 8009b48:	fb02 f10a 	mul.w	r1, r2, sl
 8009b4c:	fb09 1103 	mla	r1, r9, r3, r1
 8009b50:	fba2 2309 	umull	r2, r3, r2, r9
 8009b54:	440b      	add	r3, r1
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8009b56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8009b58:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009b5a:	1864      	adds	r4, r4, r1
 8009b5c:	9914      	ldr	r1, [sp, #80]	; 0x50
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8009b5e:	f04f 0500 	mov.w	r5, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8009b62:	f145 0500 	adc.w	r5, r5, #0
 8009b66:	1864      	adds	r4, r4, r1
 8009b68:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b6a:	f145 0500 	adc.w	r5, r5, #0
			if (tmp1 > (uint64_t)VL53L1_D_003)
 8009b6e:	1864      	adds	r4, r4, r1
 8009b70:	f145 0500 	adc.w	r5, r5, #0
 8009b74:	2100      	movs	r1, #0
 8009b76:	42a9      	cmp	r1, r5
 8009b78:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009b7c:	bf08      	it	eq
 8009b7e:	42a0      	cmpeq	r0, r4
 8009b80:	bf3c      	itt	cc
 8009b82:	4604      	movcc	r4, r0
 8009b84:	460d      	movcc	r5, r1
			tmp1 = tmp1 << 8;
 8009b86:	0220      	lsls	r0, r4, #8
 8009b88:	0229      	lsls	r1, r5, #8
			tmp0 = tmp1 + tmp0;
 8009b8a:	1880      	adds	r0, r0, r2
			tmp1 = tmp1 << 8;
 8009b8c:	ea41 6114 	orr.w	r1, r1, r4, lsr #24
			tmp0 = tmp1 + tmp0;
 8009b90:	eb41 0303 	adc.w	r3, r1, r3
 8009b94:	9000      	str	r0, [sp, #0]
 8009b96:	9301      	str	r3, [sp, #4]
			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8009b98:	e9dd 3400 	ldrd	r3, r4, [sp]
 8009b9c:	2c01      	cmp	r4, #1
 8009b9e:	bf08      	it	eq
 8009ba0:	2b00      	cmpeq	r3, #0
 8009ba2:	d35a      	bcc.n	8009c5a <VL53L1_f_014+0x1e4>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8009ba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ba8:	4632      	mov	r2, r6
 8009baa:	463b      	mov	r3, r7
 8009bac:	f7f7 f854 	bl	8000c58 <__aeabi_uldivmod>
				tmp0 = tmp0 * pll_period_mm;
 8009bb0:	fba0 4508 	umull	r4, r5, r0, r8
 8009bb4:	fb08 5501 	mla	r5, r8, r1, r5
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8009bb8:	2c00      	cmp	r4, #0
 8009bba:	f175 0300 	sbcs.w	r3, r5, #0
 8009bbe:	db59      	blt.n	8009c74 <VL53L1_f_014+0x1fe>
			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8009bc0:	2d01      	cmp	r5, #1
 8009bc2:	bf08      	it	eq
 8009bc4:	2c00      	cmpeq	r4, #0
 8009bc6:	d35a      	bcc.n	8009c7e <VL53L1_f_014+0x208>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8009bc8:	463b      	mov	r3, r7
 8009bca:	4632      	mov	r2, r6
 8009bcc:	4620      	mov	r0, r4
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f7f7 f842 	bl	8000c58 <__aeabi_uldivmod>
				tmp0 = do_division_u(tmp0, 4);
 8009bd4:	0880      	lsrs	r0, r0, #2
 8009bd6:	ea40 7081 	orr.w	r0, r0, r1, lsl #30
				tmp0 = tmp0 * pll_period_mm;
 8009bda:	fba0 6708 	umull	r6, r7, r0, r8
				tmp0 = do_division_u(tmp0, 4);
 8009bde:	0889      	lsrs	r1, r1, #2
				tmp0 = tmp0 * pll_period_mm;
 8009be0:	fb08 7701 	mla	r7, r8, r1, r7
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8009be4:	2e00      	cmp	r6, #0
 8009be6:	f177 0300 	sbcs.w	r3, r7, #0
 8009bea:	da03      	bge.n	8009bf4 <VL53L1_f_014+0x17e>
				tmp0 = (uint64_t)VL53L1_D_006;
 8009bec:	f04f 36ff 	mov.w	r6, #4294967295
 8009bf0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
			tmp0 = tmp0 >> 2;
 8009bf4:	08bd      	lsrs	r5, r7, #2
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	08b2      	lsrs	r2, r6, #2
			if (tmp0 > (uint64_t)VL53L1_D_007)
 8009bfa:	42ab      	cmp	r3, r5
 8009bfc:	ea42 7487 	orr.w	r4, r2, r7, lsl #30
 8009c00:	f04f 32ff 	mov.w	r2, #4294967295
 8009c04:	bf08      	it	eq
 8009c06:	42a2      	cmpeq	r2, r4
 8009c08:	bf38      	it	cc
 8009c0a:	461d      	movcc	r5, r3
			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8009c0c:	9b04      	ldr	r3, [sp, #16]
 8009c0e:	ea4f 10c3 	mov.w	r0, r3, lsl #7
			tmp1 = tmp1 * tmp1;
 8009c12:	fba0 0100 	umull	r0, r1, r0, r0
 8009c16:	bf38      	it	cc
 8009c18:	4614      	movcc	r4, r2
			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8009c1a:	1903      	adds	r3, r0, r4
 8009c1c:	9302      	str	r3, [sp, #8]
 8009c1e:	eb41 0305 	adc.w	r3, r1, r5
 8009c22:	9303      	str	r3, [sp, #12]
 8009c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	428b      	cmp	r3, r1
 8009c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c30:	bf08      	it	eq
 8009c32:	4282      	cmpeq	r2, r0
 8009c34:	bf38      	it	cc
 8009c36:	e9cd 2302 	strdcc	r2, r3, [sp, #8]
 8009c3a:	9802      	ldr	r0, [sp, #8]
 8009c3c:	f7fd fd43 	bl	80076c6 <VL53L1_isqrt>
			*psigma_est = (uint16_t)sigma_int;
 8009c40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c42:	8018      	strh	r0, [r3, #0]
			status = VL53L1_ERROR_NONE;
 8009c44:	2000      	movs	r0, #0
 8009c46:	e725      	b.n	8009a94 <VL53L1_f_014+0x1e>
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8009c48:	1b56      	subs	r6, r2, r5
 8009c4a:	eb61 070c 	sbc.w	r7, r1, ip
 8009c4e:	e735      	b.n	8009abc <VL53L1_f_014+0x46>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8009c50:	ebbb 0304 	subs.w	r3, fp, r4
 8009c54:	eb62 0402 	sbc.w	r4, r2, r2
 8009c58:	e739      	b.n	8009ace <VL53L1_f_014+0x58>
				tmp0 = tmp0 * pll_period_mm;
 8009c5a:	9b00      	ldr	r3, [sp, #0]
 8009c5c:	fba3 0108 	umull	r0, r1, r3, r8
 8009c60:	9b01      	ldr	r3, [sp, #4]
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8009c62:	4632      	mov	r2, r6
				tmp0 = tmp0 * pll_period_mm;
 8009c64:	fb08 1103 	mla	r1, r8, r3, r1
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8009c68:	463b      	mov	r3, r7
 8009c6a:	f7f6 fff5 	bl	8000c58 <__aeabi_uldivmod>
 8009c6e:	4604      	mov	r4, r0
 8009c70:	460d      	mov	r5, r1
 8009c72:	e7a1      	b.n	8009bb8 <VL53L1_f_014+0x142>
				tmp0 = (uint64_t)VL53L1_D_006;
 8009c74:	f04f 34ff 	mov.w	r4, #4294967295
 8009c78:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8009c7c:	e7a4      	b.n	8009bc8 <VL53L1_f_014+0x152>
				tmp0 = tmp0 * pll_period_mm;
 8009c7e:	fba4 0108 	umull	r0, r1, r4, r8
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8009c82:	4632      	mov	r2, r6
 8009c84:	463b      	mov	r3, r7
				tmp0 = tmp0 * pll_period_mm;
 8009c86:	fb08 1105 	mla	r1, r8, r5, r1
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8009c8a:	f7f6 ffe5 	bl	8000c58 <__aeabi_uldivmod>
				tmp0 = do_division_u(tmp0, 4);
 8009c8e:	0886      	lsrs	r6, r0, #2
 8009c90:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
 8009c94:	088f      	lsrs	r7, r1, #2
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8009c96:	e7ad      	b.n	8009bf4 <VL53L1_f_014+0x17e>

08009c98 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8009c98:	b537      	push	{r0, r1, r2, r4, r5, lr}

	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  gpio__mux_active_high_hv = 0;
	uint8_t  gpio__tio_hv_status      = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f88d 3007 	strb.w	r3, [sp, #7]

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8009ca0:	f890 3376 	ldrb.w	r3, [r0, #886]	; 0x376
{
 8009ca4:	460d      	mov	r5, r1
	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8009ca6:	f083 0310 	eor.w	r3, r3, #16
	else
		interrupt_ready = 0x00;



	status = VL53L1_RdByte(
 8009caa:	f10d 0207 	add.w	r2, sp, #7
 8009cae:	2131      	movs	r1, #49	; 0x31
		interrupt_ready = 0x01;
 8009cb0:	f3c3 1400 	ubfx	r4, r3, #4, #1
	status = VL53L1_RdByte(
 8009cb4:	f7f7 fc94 	bl	80015e0 <VL53L1_RdByte>
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8009cb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	1b1a      	subs	r2, r3, r4
 8009cc2:	4253      	negs	r3, r2
 8009cc4:	4153      	adcs	r3, r2
 8009cc6:	702b      	strb	r3, [r5, #0]
		*pready = 0x00;

	LOG_FUNCTION_END(status);

	return status;
}
 8009cc8:	b003      	add	sp, #12
 8009cca:	bd30      	pop	{r4, r5, pc}

08009ccc <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8009ccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cce:	460e      	mov	r6, r1

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8009cd0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 8009cd4:	4605      	mov	r5, r0
	status = VL53L1_WaitUs(
 8009cd6:	f7f7 fcb9 	bl	800164c <VL53L1_WaitUs>
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8009cda:	4604      	mov	r4, r0
 8009cdc:	b968      	cbnz	r0, 8009cfa <VL53L1_poll_for_boot_completion+0x2e>
		status =
			VL53L1_WaitValueMaskEx(
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e9cd 3300 	strd	r3, r3, [sp]
 8009ce4:	22e5      	movs	r2, #229	; 0xe5
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f7f7 fcb9 	bl	8001660 <VL53L1_WaitValueMaskEx>
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8009cee:	4604      	mov	r4, r0
 8009cf0:	b918      	cbnz	r0, 8009cfa <VL53L1_poll_for_boot_completion+0x2e>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8009cf2:	2103      	movs	r1, #3
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f7fb fffa 	bl	8005cee <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
}
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	b002      	add	sp, #8
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}

08009d00 <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	b08d      	sub	sp, #52	; 0x34
 8009d06:	4680      	mov	r8, r0
 8009d08:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64




	if (status == VL53L1_ERROR_NONE) {
		VL53L1_decode_row_col(
 8009d0c:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
{
 8009d10:	9109      	str	r1, [sp, #36]	; 0x24
 8009d12:	4617      	mov	r7, r2
 8009d14:	4699      	mov	r9, r3
		VL53L1_decode_row_col(
 8009d16:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
	uint8_t row = 0;
 8009d1a:	2300      	movs	r3, #0
		VL53L1_decode_row_col(
 8009d1c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
	uint8_t row = 0;
 8009d20:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	uint8_t col = 0;
 8009d24:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
{
 8009d28:	f99d 6058 	ldrsb.w	r6, [sp, #88]	; 0x58
		VL53L1_decode_row_col(
 8009d2c:	f7fd fe2a 	bl	8007984 <VL53L1_decode_row_col>
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8009d30:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
			bound_l_x = (int16_t) col -
 8009d34:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8009d38:	f014 0f10 	tst.w	r4, #16
 8009d3c:	ea4f 1c54 	mov.w	ip, r4, lsr #5
			bound_l_x = (int16_t) col -
 8009d40:	bf18      	it	ne
 8009d42:	f101 33ff 	addne.w	r3, r1, #4294967295
 8009d46:	f004 020f 	and.w	r2, r4, #15
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8009d4a:	bf08      	it	eq
 8009d4c:	eba1 030c 	subeq.w	r3, r1, ip
 8009d50:	f3c4 0e42 	ubfx	lr, r4, #1, #3
			bound_l_x = (int16_t) col -
 8009d54:	bf18      	it	ne
 8009d56:	eba3 030c 	subne.w	r3, r3, ip
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8009d5a:	07e4      	lsls	r4, r4, #31
			bound_d_y = (int16_t) row -
 8009d5c:	bf4a      	itet	mi
 8009d5e:	f100 32ff 	addmi.w	r2, r0, #4294967295
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
		else
			bound_d_y = (int16_t) row -
 8009d62:	eba0 0252 	subpl.w	r2, r0, r2, lsr #1
			bound_d_y = (int16_t) row -
 8009d66:	eba2 020e 	submi.w	r2, r2, lr
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8009d6a:	fa12 f486 	uxtah	r4, r2, r6
 8009d6e:	0064      	lsls	r4, r4, #1
		bound_l_x =  (2 * bound_l_x) - 15 +
 8009d70:	fa13 f389 	uxtah	r3, r3, r9
		bound_d_y =  (2 * bound_d_y) - 15 +
 8009d74:	3c0f      	subs	r4, #15




	if (status == VL53L1_ERROR_NONE) {
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8009d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
		bound_l_x =  (2 * bound_l_x) - 15 +
 8009d78:	005b      	lsls	r3, r3, #1
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8009d7a:	b224      	sxth	r4, r4
		bound_l_x =  (2 * bound_l_x) - 15 +
 8009d7c:	3b0f      	subs	r3, #15
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8009d7e:	fb84 4507 	smull	r4, r5, r4, r7
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8009d82:	fbc3 4582 	smlalbb	r4, r5, r3, r2
					((int64_t)ygradient));
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8009d86:	f114 0a01 	adds.w	sl, r4, #1
 8009d8a:	f145 0b00 	adc.w	fp, r5, #0
 8009d8e:	ea4f 74db 	mov.w	r4, fp, lsr #31
 8009d92:	eb1a 0204 	adds.w	r2, sl, r4
 8009d96:	f14b 0300 	adc.w	r3, fp, #0
 8009d9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d9e:	9b04      	ldr	r3, [sp, #16]
		bound_u_y =  (2 * bound_u_y) - 15 +
 8009da0:	fa10 f086 	uxtah	r0, r0, r6
		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8009da4:	b289      	uxth	r1, r1
		bound_u_y =  (2 * bound_u_y) - 15 +
 8009da6:	4470      	add	r0, lr
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8009da8:	085c      	lsrs	r4, r3, #1
		bound_r_x =  (2 * bound_r_x) - 15 +
 8009daa:	fa11 f189 	uxtah	r1, r1, r9
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8009dae:	9b05      	ldr	r3, [sp, #20]
		bound_u_y =  (2 * bound_u_y) - 15 +
 8009db0:	0040      	lsls	r0, r0, #1
		bound_r_x =  (2 * bound_r_x) - 15 +
 8009db2:	448c      	add	ip, r1
		bound_u_y =  (2 * bound_u_y) - 15 +
 8009db4:	380f      	subs	r0, #15
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8009db6:	ea44 7ac3 	orr.w	sl, r4, r3, lsl #31
 8009dba:	105a      	asrs	r2, r3, #1
		bound_r_x =  (2 * bound_r_x) - 15 +
 8009dbc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
		xtalk_rate_ll += ((int64_t)mean_offset * 4);

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8009dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8009dc2:	b200      	sxth	r0, r0
		bound_r_x =  (2 * bound_r_x) - 15 +
 8009dc4:	f1ac 0c0f 	sub.w	ip, ip, #15
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8009dc8:	fb80 0107 	smull	r0, r1, r0, r7
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8009dcc:	fbc3 018c 	smlalbb	r0, r1, r3, ip
			((int64_t)ygradient));
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8009dd0:	1c43      	adds	r3, r0, #1
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8009dd2:	f04f 0500 	mov.w	r5, #0
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8009dd6:	9302      	str	r3, [sp, #8]
 8009dd8:	eb41 0305 	adc.w	r3, r1, r5
 8009ddc:	9303      	str	r3, [sp, #12]
 8009dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009de2:	0fdb      	lsrs	r3, r3, #31
 8009de4:	18c0      	adds	r0, r0, r3
 8009de6:	f141 0100 	adc.w	r1, r1, #0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8009dea:	ea4f 0488 	mov.w	r4, r8, lsl #2
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8009dee:	0846      	lsrs	r6, r0, #1
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8009df0:	eb14 0a0a 	adds.w	sl, r4, sl
 8009df4:	ea4f 7b98 	mov.w	fp, r8, lsr #30
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8009df8:	ea46 70c1 	orr.w	r0, r6, r1, lsl #31
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8009dfc:	eb4b 0202 	adc.w	r2, fp, r2
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8009e00:	104b      	asrs	r3, r1, #1
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8009e02:	1824      	adds	r4, r4, r0
 8009e04:	eb4b 0b03 	adc.w	fp, fp, r3
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
		xtalk_avg = do_division_s(
 8009e08:	eb1a 0304 	adds.w	r3, sl, r4
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	eb42 030b 	adc.w	r3, r2, fp
 8009e12:	9301      	str	r3, [sp, #4]
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
		if (xtalk_avg < 0)
 8009e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e18:	f06f 0201 	mvn.w	r2, #1
 8009e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e20:	4290      	cmp	r0, r2
 8009e22:	eb71 0303 	sbcs.w	r3, r1, r3
 8009e26:	db0e      	blt.n	8009e46 <VL53L1_f_040+0x146>
		xtalk_avg = do_division_s(
 8009e28:	9b00      	ldr	r3, [sp, #0]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	9306      	str	r3, [sp, #24]
 8009e2e:	9b01      	ldr	r3, [sp, #4]
 8009e30:	416b      	adcs	r3, r5
 8009e32:	9307      	str	r3, [sp, #28]
 8009e34:	0fd9      	lsrs	r1, r3, #31
 8009e36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e3a:	1852      	adds	r2, r2, r1
 8009e3c:	f143 0300 	adc.w	r3, r3, #0
 8009e40:	0855      	lsrs	r5, r2, #1
 8009e42:	ea45 75c3 	orr.w	r5, r5, r3, lsl #31





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8009e46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
}
 8009e48:	2000      	movs	r0, #0
	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8009e4a:	601d      	str	r5, [r3, #0]
}
 8009e4c:	b00d      	add	sp, #52	; 0x34
 8009e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e52 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8009e52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e56:	4682      	mov	sl, r0
 8009e58:	460c      	mov	r4, r1
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8009e5a:	f8da 108c 	ldr.w	r1, [sl, #140]	; 0x8c
{
 8009e5e:	4610      	mov	r0, r2
	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8009e60:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 8009e64:	f04f 0900 	mov.w	r9, #0
 8009e68:	fbe1 8900 	umlal	r8, r9, r1, r0
{
 8009e6c:	461d      	mov	r5, r3
	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8009e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e72:	2300      	movs	r3, #0
 8009e74:	4640      	mov	r0, r8
 8009e76:	4649      	mov	r1, r9
 8009e78:	f7f6 feee 	bl	8000c58 <__aeabi_uldivmod>




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8009e7c:	f8ba 207c 	ldrh.w	r2, [sl, #124]	; 0x7c





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8009e80:	f894 e00a 	ldrb.w	lr, [r4, #10]
	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8009e84:	468c      	mov	ip, r1
	xtalk_total_events = xtalk_events_per_spad *
 8009e86:	fba0 0102 	umull	r0, r1, r0, r2
 8009e8a:	fb0c 1102 	mla	r1, ip, r2, r1
	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8009e8e:	0a02      	lsrs	r2, r0, #8
 8009e90:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009e94:	0a0b      	lsrs	r3, r1, #8
	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8009e96:	f512 6680 	adds.w	r6, r2, #1024	; 0x400
 8009e9a:	f143 0700 	adc.w	r7, r3, #0
	if (xtalk_total_events > 0xFFFFFFFF)
 8009e9e:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 8009ea2:	bf08      	it	eq
 8009ea4:	2e00      	cmpeq	r6, #0
	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8009ea6:	bf3d      	ittte	cc
 8009ea8:	0af1      	lsrcc	r1, r6, #11
 8009eaa:	ea41 5147 	orrcc.w	r1, r1, r7, lsl #21
 8009eae:	ea4f 2cd7 	movcc.w	ip, r7, lsr #11
		xtalk_total_events = 0xFFFFFFFF;
 8009eb2:	f04f 31ff 	movcs.w	r1, #4294967295
 8009eb6:	bf28      	it	cs
 8009eb8:	f04f 0c00 	movcs.w	ip, #0
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8009ebc:	340c      	adds	r4, #12
 8009ebe:	f105 0318 	add.w	r3, r5, #24
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	b2c2      	uxtb	r2, r0
 8009ec6:	4596      	cmp	lr, r2
 8009ec8:	d802      	bhi.n	8009ed0 <VL53L1_f_041+0x7e>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8009ed0:	f854 2b04 	ldr.w	r2, [r4], #4
 8009ed4:	fba2 6701 	umull	r6, r7, r2, r1
 8009ed8:	fb02 770c 	mla	r7, r2, ip, r7
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8009edc:	f516 7200 	adds.w	r2, r6, #512	; 0x200
 8009ee0:	f147 0500 	adc.w	r5, r7, #0
 8009ee4:	0a92      	lsrs	r2, r2, #10
 8009ee6:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8009eea:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8009eee:	3001      	adds	r0, #1
 8009ef0:	e7e8      	b.n	8009ec4 <VL53L1_f_041+0x72>

08009ef2 <VL53L1_init_zone_config_histogram_bins>:
}


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 8009ef2:	b510      	push	{r4, lr}

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8009ef4:	f810 1b80 	ldrb.w	r1, [r0], #128
 8009ef8:	2300      	movs	r3, #0
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 8009efa:	2401      	movs	r4, #1
	for (i = 0; i < pdata->max_zones; i++)
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	4291      	cmp	r1, r2
 8009f00:	d801      	bhi.n	8009f06 <VL53L1_init_zone_config_histogram_bins+0x14>

	LOG_FUNCTION_END(status);

	return status;
}
 8009f02:	2000      	movs	r0, #0
 8009f04:	bd10      	pop	{r4, pc}
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 8009f06:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < pdata->max_zones; i++)
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	e7f6      	b.n	8009efc <VL53L1_init_zone_config_histogram_bins+0xa>

08009f0e <VL53L1_init_zone_config_structure>:
{
 8009f0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f12:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8009f14:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 8009f18:	9201      	str	r2, [sp, #4]
	for (x = 0 ; x < x_zones ; x++) {
 8009f1a:	f04f 0c00 	mov.w	ip, #0
	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 8009f1e:	2219      	movs	r2, #25
{
 8009f20:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 8009f24:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8009f28:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 8009f2c:	703a      	strb	r2, [r7, #0]
	for (x = 0 ; x < x_zones ; x++) {
 8009f2e:	4645      	mov	r5, r8
	i = 0;
 8009f30:	4664      	mov	r4, ip
	for (x = 0 ; x < x_zones ; x++) {
 8009f32:	9e01      	ldr	r6, [sp, #4]
 8009f34:	fa5f f28c 	uxtb.w	r2, ip
 8009f38:	4296      	cmp	r6, r2
 8009f3a:	d821      	bhi.n	8009f80 <VL53L1_init_zone_config_structure+0x72>
	status = VL53L1_init_zone_config_histogram_bins(pdata);
 8009f3c:	4638      	mov	r0, r7
}
 8009f3e:	b003      	add	sp, #12
 8009f40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	status = VL53L1_init_zone_config_histogram_bins(pdata);
 8009f44:	f7ff bfd5 	b.w	8009ef2 <VL53L1_init_zone_config_histogram_bins>
			if (i < VL53L1_MAX_USER_ZONES) {
 8009f48:	2a18      	cmp	r2, #24
 8009f4a:	d80a      	bhi.n	8009f62 <VL53L1_init_zone_config_structure+0x54>
				pdata->active_zones = (uint8_t)i;
 8009f4c:	eb07 0e82 	add.w	lr, r7, r2, lsl #2
 8009f50:	707a      	strb	r2, [r7, #1]
				pdata->user_zones[i].height   = height;
 8009f52:	f88e b01f 	strb.w	fp, [lr, #31]
				pdata->user_zones[i].width    = width;
 8009f56:	f88e a01e 	strb.w	sl, [lr, #30]
				pdata->user_zones[i].x_centre =
 8009f5a:	f88e 001c 	strb.w	r0, [lr, #28]
				pdata->user_zones[i].y_centre =
 8009f5e:	f88e 601d 	strb.w	r6, [lr, #29]
			i++;
 8009f62:	3201      	adds	r2, #1
 8009f64:	444e      	add	r6, r9
 8009f66:	b292      	uxth	r2, r2
		for (y = 0 ; y <  y_zones ; y++) {
 8009f68:	b2f6      	uxtb	r6, r6
 8009f6a:	42aa      	cmp	r2, r5
 8009f6c:	d1ec      	bne.n	8009f48 <VL53L1_init_zone_config_structure+0x3a>
 8009f6e:	4444      	add	r4, r8
 8009f70:	4445      	add	r5, r8
 8009f72:	4408      	add	r0, r1
 8009f74:	b2a4      	uxth	r4, r4
	for (x = 0 ; x < x_zones ; x++) {
 8009f76:	f10c 0c01 	add.w	ip, ip, #1
 8009f7a:	b2ad      	uxth	r5, r5
 8009f7c:	b2c0      	uxtb	r0, r0
 8009f7e:	e7d8      	b.n	8009f32 <VL53L1_init_zone_config_structure+0x24>
 8009f80:	461e      	mov	r6, r3
 8009f82:	4622      	mov	r2, r4
 8009f84:	e7f1      	b.n	8009f6a <VL53L1_init_zone_config_structure+0x5c>

08009f86 <VL53L1_zone_preset_xtalk_planar>:
	pgeneral->global_config__stream_divider = 0x05;
 8009f86:	2305      	movs	r3, #5
 8009f88:	7043      	strb	r3, [r0, #1]
	pzone_cfg->active_zones                 = 0x04;
 8009f8a:	2304      	movs	r3, #4
 8009f8c:	704b      	strb	r3, [r1, #1]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8009f8e:	f640 0304 	movw	r3, #2052	; 0x804
 8009f92:	838b      	strh	r3, [r1, #28]
	pzone_cfg->user_zones[0].width          = 7;
 8009f94:	f640 7307 	movw	r3, #3847	; 0xf07
 8009f98:	83cb      	strh	r3, [r1, #30]
	pzone_cfg->user_zones[1].width          = 7;
 8009f9a:	844b      	strh	r3, [r1, #34]	; 0x22
	pzone_cfg->user_zones[2].x_centre       = 8;
 8009f9c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8009fa0:	848b      	strh	r3, [r1, #36]	; 0x24
	pzone_cfg->user_zones[2].width          = 15;
 8009fa2:	f240 730f 	movw	r3, #1807	; 0x70f
	pzone_cfg->user_zones[1].x_centre       = 12;
 8009fa6:	f640 020c 	movw	r2, #2060	; 0x80c
	pzone_cfg->user_zones[2].width          = 15;
 8009faa:	84cb      	strh	r3, [r1, #38]	; 0x26
	pzone_cfg->user_zones[3].width          = 15;
 8009fac:	854b      	strh	r3, [r1, #42]	; 0x2a
	pzone_cfg->user_zones[4].x_centre       = 8;
 8009fae:	f640 0308 	movw	r3, #2056	; 0x808
	pzone_cfg->user_zones[1].x_centre       = 12;
 8009fb2:	840a      	strh	r2, [r1, #32]
	pzone_cfg->user_zones[4].x_centre       = 8;
 8009fb4:	858b      	strh	r3, [r1, #44]	; 0x2c
	pzone_cfg->user_zones[3].x_centre       = 8;
 8009fb6:	f640 4208 	movw	r2, #3080	; 0xc08
	pzone_cfg->user_zones[4].width          = 15;
 8009fba:	f640 730f 	movw	r3, #3855	; 0xf0f
	pzone_cfg->user_zones[3].x_centre       = 8;
 8009fbe:	850a      	strh	r2, [r1, #40]	; 0x28
	pzone_cfg->user_zones[4].width          = 15;
 8009fc0:	85cb      	strh	r3, [r1, #46]	; 0x2e
	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	f7ff bf95 	b.w	8009ef2 <VL53L1_init_zone_config_histogram_bins>

08009fc8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009fc8:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <SystemInit+0x18>)
 8009fca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009fce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009fda:	609a      	str	r2, [r3, #8]
#endif
}
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	e000ed00 	.word	0xe000ed00

08009fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009fe4:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009fe6:	4a0e      	ldr	r2, [pc, #56]	; (800a020 <HAL_InitTick+0x3c>)
 8009fe8:	4e0e      	ldr	r6, [pc, #56]	; (800a024 <HAL_InitTick+0x40>)
{
 8009fea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009ff0:	7830      	ldrb	r0, [r6, #0]
 8009ff2:	fbb3 f3f0 	udiv	r3, r3, r0
 8009ff6:	6810      	ldr	r0, [r2, #0]
 8009ff8:	fbb0 f0f3 	udiv	r0, r0, r3
 8009ffc:	f000 f8a6 	bl	800a14c <HAL_SYSTICK_Config>
 800a000:	4604      	mov	r4, r0
 800a002:	b950      	cbnz	r0, 800a01a <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a004:	2d0f      	cmp	r5, #15
 800a006:	d808      	bhi.n	800a01a <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a008:	4602      	mov	r2, r0
 800a00a:	4629      	mov	r1, r5
 800a00c:	f04f 30ff 	mov.w	r0, #4294967295
 800a010:	f000 f85c 	bl	800a0cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a014:	6075      	str	r5, [r6, #4]
 800a016:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800a018:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a01a:	2001      	movs	r0, #1
 800a01c:	e7fc      	b.n	800a018 <HAL_InitTick+0x34>
 800a01e:	bf00      	nop
 800a020:	20000030 	.word	0x20000030
 800a024:	20000034 	.word	0x20000034

0800a028 <HAL_Init>:
{
 800a028:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a02a:	4b0b      	ldr	r3, [pc, #44]	; (800a058 <HAL_Init+0x30>)
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a032:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a03a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a042:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a044:	2003      	movs	r0, #3
 800a046:	f000 f82f 	bl	800a0a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800a04a:	2000      	movs	r0, #0
 800a04c:	f7ff ffca 	bl	8009fe4 <HAL_InitTick>
  HAL_MspInit();
 800a050:	f7f7 f9a2 	bl	8001398 <HAL_MspInit>
}
 800a054:	2000      	movs	r0, #0
 800a056:	bd08      	pop	{r3, pc}
 800a058:	40023c00 	.word	0x40023c00

0800a05c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800a05c:	4a03      	ldr	r2, [pc, #12]	; (800a06c <HAL_IncTick+0x10>)
 800a05e:	4b04      	ldr	r3, [pc, #16]	; (800a070 <HAL_IncTick+0x14>)
 800a060:	6811      	ldr	r1, [r2, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	440b      	add	r3, r1
 800a066:	6013      	str	r3, [r2, #0]
}
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	20003448 	.word	0x20003448
 800a070:	20000034 	.word	0x20000034

0800a074 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a074:	4b01      	ldr	r3, [pc, #4]	; (800a07c <HAL_GetTick+0x8>)
 800a076:	6818      	ldr	r0, [r3, #0]
}
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	20003448 	.word	0x20003448

0800a080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a084:	f7ff fff6 	bl	800a074 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a088:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800a08a:	bf1c      	itt	ne
 800a08c:	4b05      	ldrne	r3, [pc, #20]	; (800a0a4 <HAL_Delay+0x24>)
 800a08e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800a090:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800a092:	bf18      	it	ne
 800a094:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a096:	f7ff ffed 	bl	800a074 <HAL_GetTick>
 800a09a:	1b43      	subs	r3, r0, r5
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	d3fa      	bcc.n	800a096 <HAL_Delay+0x16>
  {
  }
}
 800a0a0:	bd38      	pop	{r3, r4, r5, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20000034 	.word	0x20000034

0800a0a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a0a8:	4907      	ldr	r1, [pc, #28]	; (800a0c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800a0aa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a0ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a0b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a0b2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a0b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a0b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a0ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a0bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a0c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800a0c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a0c6:	4770      	bx	lr
 800a0c8:	e000ed00 	.word	0xe000ed00

0800a0cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a0cc:	4b16      	ldr	r3, [pc, #88]	; (800a128 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a0ce:	b530      	push	{r4, r5, lr}
 800a0d0:	68dc      	ldr	r4, [r3, #12]
 800a0d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a0d6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0da:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a0dc:	2d04      	cmp	r5, #4
 800a0de:	bf28      	it	cs
 800a0e0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0e2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0e4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0e8:	bf8c      	ite	hi
 800a0ea:	3c03      	subhi	r4, #3
 800a0ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0ee:	fa03 f505 	lsl.w	r5, r3, r5
 800a0f2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a0f6:	40a3      	lsls	r3, r4
 800a0f8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0fc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800a0fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a100:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a104:	bfac      	ite	ge
 800a106:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a10a:	4a08      	ldrlt	r2, [pc, #32]	; (800a12c <HAL_NVIC_SetPriority+0x60>)
 800a10c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a110:	bfb8      	it	lt
 800a112:	f000 000f 	andlt.w	r0, r0, #15
 800a116:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a118:	bfaa      	itet	ge
 800a11a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a11e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a120:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a124:	bd30      	pop	{r4, r5, pc}
 800a126:	bf00      	nop
 800a128:	e000ed00 	.word	0xe000ed00
 800a12c:	e000ed14 	.word	0xe000ed14

0800a130 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a130:	2800      	cmp	r0, #0
 800a132:	db08      	blt.n	800a146 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a134:	0942      	lsrs	r2, r0, #5
 800a136:	2301      	movs	r3, #1
 800a138:	f000 001f 	and.w	r0, r0, #31
 800a13c:	fa03 f000 	lsl.w	r0, r3, r0
 800a140:	4b01      	ldr	r3, [pc, #4]	; (800a148 <HAL_NVIC_EnableIRQ+0x18>)
 800a142:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a146:	4770      	bx	lr
 800a148:	e000e100 	.word	0xe000e100

0800a14c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a14c:	3801      	subs	r0, #1
 800a14e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800a152:	d20a      	bcs.n	800a16a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a154:	4b06      	ldr	r3, [pc, #24]	; (800a170 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a156:	4a07      	ldr	r2, [pc, #28]	; (800a174 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a158:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a15a:	21f0      	movs	r1, #240	; 0xf0
 800a15c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a160:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a162:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a164:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a168:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800a16a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	e000e010 	.word	0xe000e010
 800a174:	e000ed00 	.word	0xe000ed00

0800a178 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800a178:	4b04      	ldr	r3, [pc, #16]	; (800a18c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800a17a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800a17c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800a17e:	bf0c      	ite	eq
 800a180:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800a184:	f022 0204 	bicne.w	r2, r2, #4
 800a188:	601a      	str	r2, [r3, #0]
  }
}
 800a18a:	4770      	bx	lr
 800a18c:	e000e010 	.word	0xe000e010

0800a190 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800a190:	4770      	bx	lr

0800a192 <HAL_SYSTICK_IRQHandler>:
{
 800a192:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800a194:	f7ff fffc 	bl	800a190 <HAL_SYSTICK_Callback>
}
 800a198:	bd08      	pop	{r3, pc}
	...

0800a19c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1a0:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800a330 <HAL_GPIO_Init+0x194>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a1a4:	4a60      	ldr	r2, [pc, #384]	; (800a328 <HAL_GPIO_Init+0x18c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a1a6:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800a1a8:	f04f 0901 	mov.w	r9, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a1ac:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800a1ae:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a1b2:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800a1b6:	43ac      	bics	r4, r5
 800a1b8:	f040 80a6 	bne.w	800a308 <HAL_GPIO_Init+0x16c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a1bc:	684c      	ldr	r4, [r1, #4]
 800a1be:	f024 0c10 	bic.w	ip, r4, #16
 800a1c2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800a1c6:	2503      	movs	r5, #3
 800a1c8:	f10c 37ff 	add.w	r7, ip, #4294967295
 800a1cc:	fa05 f50e 	lsl.w	r5, r5, lr
 800a1d0:	2f01      	cmp	r7, #1
 800a1d2:	ea6f 0505 	mvn.w	r5, r5
 800a1d6:	d811      	bhi.n	800a1fc <HAL_GPIO_Init+0x60>
        temp = GPIOx->OSPEEDR; 
 800a1d8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a1da:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a1de:	68cf      	ldr	r7, [r1, #12]
 800a1e0:	fa07 f70e 	lsl.w	r7, r7, lr
 800a1e4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800a1e8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800a1ea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a1ec:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a1f0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800a1f4:	409f      	lsls	r7, r3
 800a1f6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800a1fa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800a1fc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a1fe:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a202:	688f      	ldr	r7, [r1, #8]
 800a204:	fa07 f70e 	lsl.w	r7, r7, lr
 800a208:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a20c:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800a210:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a212:	d116      	bne.n	800a242 <HAL_GPIO_Init+0xa6>
        temp = GPIOx->AFR[position >> 3U];
 800a214:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800a218:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a21c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800a220:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a224:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800a228:	f04f 0c0f 	mov.w	ip, #15
 800a22c:	fa0c fc0b 	lsl.w	ip, ip, fp
 800a230:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a234:	690f      	ldr	r7, [r1, #16]
 800a236:	fa07 f70b 	lsl.w	r7, r7, fp
 800a23a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800a23e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800a242:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a244:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a246:	f004 0703 	and.w	r7, r4, #3
 800a24a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800a24e:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 800a252:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a254:	00e5      	lsls	r5, r4, #3
 800a256:	d557      	bpl.n	800a308 <HAL_GPIO_Init+0x16c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a258:	f04f 0b00 	mov.w	fp, #0
 800a25c:	f8cd b004 	str.w	fp, [sp, #4]
 800a260:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a264:	4d31      	ldr	r5, [pc, #196]	; (800a32c <HAL_GPIO_Init+0x190>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a266:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800a26a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800a26e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800a272:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800a276:	9701      	str	r7, [sp, #4]
 800a278:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800a27a:	f023 0703 	bic.w	r7, r3, #3
 800a27e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800a282:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a286:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800a28a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a28e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800a292:	f04f 0c0f 	mov.w	ip, #15
 800a296:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a29a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a29c:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a2a0:	d039      	beq.n	800a316 <HAL_GPIO_Init+0x17a>
 800a2a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a2a6:	42a8      	cmp	r0, r5
 800a2a8:	d037      	beq.n	800a31a <HAL_GPIO_Init+0x17e>
 800a2aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a2ae:	42a8      	cmp	r0, r5
 800a2b0:	d035      	beq.n	800a31e <HAL_GPIO_Init+0x182>
 800a2b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a2b6:	42a8      	cmp	r0, r5
 800a2b8:	d033      	beq.n	800a322 <HAL_GPIO_Init+0x186>
 800a2ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a2be:	42a8      	cmp	r0, r5
 800a2c0:	bf0c      	ite	eq
 800a2c2:	2504      	moveq	r5, #4
 800a2c4:	2507      	movne	r5, #7
 800a2c6:	fa05 f50e 	lsl.w	r5, r5, lr
 800a2ca:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a2ce:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800a2d0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800a2d2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a2d4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800a2d8:	bf0c      	ite	eq
 800a2da:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800a2dc:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800a2de:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800a2e0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a2e2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800a2e6:	bf0c      	ite	eq
 800a2e8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800a2ea:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800a2ec:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a2ee:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a2f0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800a2f4:	bf0c      	ite	eq
 800a2f6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800a2f8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800a2fa:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800a2fc:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a2fe:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800a300:	bf54      	ite	pl
 800a302:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800a304:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800a306:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a308:	3301      	adds	r3, #1
 800a30a:	2b10      	cmp	r3, #16
 800a30c:	f47f af4e 	bne.w	800a1ac <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 800a310:	b003      	add	sp, #12
 800a312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a316:	465d      	mov	r5, fp
 800a318:	e7d5      	b.n	800a2c6 <HAL_GPIO_Init+0x12a>
 800a31a:	2501      	movs	r5, #1
 800a31c:	e7d3      	b.n	800a2c6 <HAL_GPIO_Init+0x12a>
 800a31e:	2502      	movs	r5, #2
 800a320:	e7d1      	b.n	800a2c6 <HAL_GPIO_Init+0x12a>
 800a322:	2503      	movs	r5, #3
 800a324:	e7cf      	b.n	800a2c6 <HAL_GPIO_Init+0x12a>
 800a326:	bf00      	nop
 800a328:	40013c00 	.word	0x40013c00
 800a32c:	40020000 	.word	0x40020000
 800a330:	40023800 	.word	0x40023800

0800a334 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a334:	6903      	ldr	r3, [r0, #16]
 800a336:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800a338:	bf14      	ite	ne
 800a33a:	2001      	movne	r0, #1
 800a33c:	2000      	moveq	r0, #0
 800a33e:	4770      	bx	lr

0800a340 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a340:	b10a      	cbz	r2, 800a346 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a342:	6181      	str	r1, [r0, #24]
  }
}
 800a344:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a346:	0409      	lsls	r1, r1, #16
 800a348:	e7fb      	b.n	800a342 <HAL_GPIO_WritePin+0x2>
	...

0800a34c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a34c:	4a04      	ldr	r2, [pc, #16]	; (800a360 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800a34e:	6951      	ldr	r1, [r2, #20]
 800a350:	4201      	tst	r1, r0
{
 800a352:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a354:	d002      	beq.n	800a35c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a356:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a358:	f7f6 fe34 	bl	8000fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 800a35c:	bd08      	pop	{r3, pc}
 800a35e:	bf00      	nop
 800a360:	40013c00 	.word	0x40013c00

0800a364 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a364:	6801      	ldr	r1, [r0, #0]
 800a366:	694b      	ldr	r3, [r1, #20]
 800a368:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800a36c:	f04f 0200 	mov.w	r2, #0
 800a370:	d010      	beq.n	800a394 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a372:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800a376:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800a378:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800a37a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a37c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a380:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a384:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a386:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a38a:	f043 0304 	orr.w	r3, r3, #4
 800a38e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800a390:	2001      	movs	r0, #1
 800a392:	4770      	bx	lr
  }
  return HAL_OK;
 800a394:	4618      	mov	r0, r3
}
 800a396:	4770      	bx	lr

0800a398 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800a398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39c:	4604      	mov	r4, r0
 800a39e:	460f      	mov	r7, r1
 800a3a0:	4616      	mov	r6, r2
 800a3a2:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a3a4:	6825      	ldr	r5, [r4, #0]
 800a3a6:	6968      	ldr	r0, [r5, #20]
 800a3a8:	ea27 0000 	bic.w	r0, r7, r0
 800a3ac:	b280      	uxth	r0, r0
 800a3ae:	b1b8      	cbz	r0, 800a3e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a3b0:	696b      	ldr	r3, [r5, #20]
 800a3b2:	055a      	lsls	r2, r3, #21
 800a3b4:	d516      	bpl.n	800a3e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3b6:	682b      	ldr	r3, [r5, #0]
 800a3b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3bc:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3be:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800a3c2:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3c4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3ca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a3d4:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3d8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800a3da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800a3de:	2001      	movs	r0, #1
}
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800a3e4:	1c73      	adds	r3, r6, #1
 800a3e6:	d0de      	beq.n	800a3a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e8:	f7ff fe44 	bl	800a074 <HAL_GetTick>
 800a3ec:	eba0 0008 	sub.w	r0, r0, r8
 800a3f0:	42b0      	cmp	r0, r6
 800a3f2:	d801      	bhi.n	800a3f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800a3f4:	2e00      	cmp	r6, #0
 800a3f6:	d1d5      	bne.n	800a3a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a3f8:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800a3fa:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a3fc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a3fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a402:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a406:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a408:	f042 0220 	orr.w	r2, r2, #32
 800a40c:	e7e4      	b.n	800a3d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800a40e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800a40e:	b570      	push	{r4, r5, r6, lr}
 800a410:	4604      	mov	r4, r0
 800a412:	460d      	mov	r5, r1
 800a414:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	075b      	lsls	r3, r3, #29
 800a41c:	d501      	bpl.n	800a422 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800a41e:	2000      	movs	r0, #0
}
 800a420:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a422:	4620      	mov	r0, r4
 800a424:	f7ff ff9e 	bl	800a364 <I2C_IsAcknowledgeFailed>
 800a428:	b9a8      	cbnz	r0, 800a456 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800a42a:	1c6a      	adds	r2, r5, #1
 800a42c:	d0f3      	beq.n	800a416 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42e:	f7ff fe21 	bl	800a074 <HAL_GetTick>
 800a432:	1b80      	subs	r0, r0, r6
 800a434:	42a8      	cmp	r0, r5
 800a436:	d801      	bhi.n	800a43c <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800a438:	2d00      	cmp	r5, #0
 800a43a:	d1ec      	bne.n	800a416 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a43c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800a43e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a440:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a442:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a446:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a44a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800a44c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a450:	f042 0220 	orr.w	r2, r2, #32
 800a454:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a456:	2001      	movs	r0, #1
 800a458:	e7e2      	b.n	800a420 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800a45a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800a45a:	b570      	push	{r4, r5, r6, lr}
 800a45c:	4604      	mov	r4, r0
 800a45e:	460d      	mov	r5, r1
 800a460:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a462:	6821      	ldr	r1, [r4, #0]
 800a464:	694b      	ldr	r3, [r1, #20]
 800a466:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800a46a:	d001      	beq.n	800a470 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800a46c:	2000      	movs	r0, #0
 800a46e:	e010      	b.n	800a492 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a470:	694a      	ldr	r2, [r1, #20]
 800a472:	06d2      	lsls	r2, r2, #27
 800a474:	d50e      	bpl.n	800a494 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a476:	f06f 0210 	mvn.w	r2, #16
 800a47a:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800a47c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a47e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a480:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a484:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a488:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a48a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800a48c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800a490:	2001      	movs	r0, #1
}
 800a492:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a494:	f7ff fdee 	bl	800a074 <HAL_GetTick>
 800a498:	1b80      	subs	r0, r0, r6
 800a49a:	42a8      	cmp	r0, r5
 800a49c:	d801      	bhi.n	800a4a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	d1df      	bne.n	800a462 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a4a2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800a4a4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a4a6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a4a8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a4b2:	f042 0220 	orr.w	r2, r2, #32
 800a4b6:	e7e8      	b.n	800a48a <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800a4b8 <I2C_WaitOnFlagUntilTimeout>:
{
 800a4b8:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800a4bc:	4606      	mov	r6, r0
 800a4be:	460f      	mov	r7, r1
 800a4c0:	4691      	mov	r9, r2
 800a4c2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4c8:	6833      	ldr	r3, [r6, #0]
 800a4ca:	f1ba 0f01 	cmp.w	sl, #1
 800a4ce:	bf0c      	ite	eq
 800a4d0:	695c      	ldreq	r4, [r3, #20]
 800a4d2:	699c      	ldrne	r4, [r3, #24]
 800a4d4:	ea27 0404 	bic.w	r4, r7, r4
 800a4d8:	b2a4      	uxth	r4, r4
 800a4da:	fab4 f484 	clz	r4, r4
 800a4de:	0964      	lsrs	r4, r4, #5
 800a4e0:	45a1      	cmp	r9, r4
 800a4e2:	d001      	beq.n	800a4e8 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	e017      	b.n	800a518 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800a4e8:	1c6a      	adds	r2, r5, #1
 800a4ea:	d0ee      	beq.n	800a4ca <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ec:	f7ff fdc2 	bl	800a074 <HAL_GetTick>
 800a4f0:	9b08      	ldr	r3, [sp, #32]
 800a4f2:	1ac0      	subs	r0, r0, r3
 800a4f4:	42a8      	cmp	r0, r5
 800a4f6:	d801      	bhi.n	800a4fc <I2C_WaitOnFlagUntilTimeout+0x44>
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	d1e5      	bne.n	800a4c8 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a4fc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800a4fe:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a500:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a502:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a506:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a50a:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800a50c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a510:	f042 0220 	orr.w	r2, r2, #32
 800a514:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800a516:	2001      	movs	r0, #1
}
 800a518:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

0800a51c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800a51c:	b570      	push	{r4, r5, r6, lr}
 800a51e:	4604      	mov	r4, r0
 800a520:	460d      	mov	r5, r1
 800a522:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	061b      	lsls	r3, r3, #24
 800a52a:	d501      	bpl.n	800a530 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800a52c:	2000      	movs	r0, #0
}
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a530:	4620      	mov	r0, r4
 800a532:	f7ff ff17 	bl	800a364 <I2C_IsAcknowledgeFailed>
 800a536:	b9a8      	cbnz	r0, 800a564 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800a538:	1c6a      	adds	r2, r5, #1
 800a53a:	d0f3      	beq.n	800a524 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a53c:	f7ff fd9a 	bl	800a074 <HAL_GetTick>
 800a540:	1b80      	subs	r0, r0, r6
 800a542:	42a8      	cmp	r0, r5
 800a544:	d801      	bhi.n	800a54a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800a546:	2d00      	cmp	r5, #0
 800a548:	d1ec      	bne.n	800a524 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a54a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800a54c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a54e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a550:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a554:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a558:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800a55a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a55e:	f042 0220 	orr.w	r2, r2, #32
 800a562:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a564:	2001      	movs	r0, #1
 800a566:	e7e2      	b.n	800a52e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

0800a568 <HAL_I2C_Init>:
{
 800a568:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800a56a:	4604      	mov	r4, r0
 800a56c:	b908      	cbnz	r0, 800a572 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800a56e:	2001      	movs	r0, #1
}
 800a570:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a572:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a576:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a57a:	b91b      	cbnz	r3, 800a584 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800a57c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800a580:	f7f6 ff3a 	bl	80013f8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a584:	2324      	movs	r3, #36	; 0x24
 800a586:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	f022 0201 	bic.w	r2, r2, #1
 800a592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a59a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5a2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a5a4:	f000 fd48 	bl	800b038 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a5a8:	4a3f      	ldr	r2, [pc, #252]	; (800a6a8 <HAL_I2C_Init+0x140>)
 800a5aa:	6863      	ldr	r3, [r4, #4]
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	bf94      	ite	ls
 800a5b0:	4a3e      	ldrls	r2, [pc, #248]	; (800a6ac <HAL_I2C_Init+0x144>)
 800a5b2:	4a3f      	ldrhi	r2, [pc, #252]	; (800a6b0 <HAL_I2C_Init+0x148>)
 800a5b4:	4290      	cmp	r0, r2
 800a5b6:	bf8c      	ite	hi
 800a5b8:	2200      	movhi	r2, #0
 800a5ba:	2201      	movls	r2, #1
 800a5bc:	2a00      	cmp	r2, #0
 800a5be:	d1d6      	bne.n	800a56e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a5c0:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800a5c2:	4e3c      	ldr	r6, [pc, #240]	; (800a6b4 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a5c4:	684a      	ldr	r2, [r1, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800a5c6:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a5ca:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a5ce:	4332      	orrs	r2, r6
 800a5d0:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a5d2:	4a35      	ldr	r2, [pc, #212]	; (800a6a8 <HAL_I2C_Init+0x140>)
 800a5d4:	6a0d      	ldr	r5, [r1, #32]
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	bf84      	itt	hi
 800a5da:	f44f 7296 	movhi.w	r2, #300	; 0x12c
 800a5de:	4372      	mulhi	r2, r6
 800a5e0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800a5e4:	bf91      	iteee	ls
 800a5e6:	1c72      	addls	r2, r6, #1
 800a5e8:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 800a5ec:	fbb2 f2f6 	udivhi	r2, r2, r6
 800a5f0:	3201      	addhi	r2, #1
 800a5f2:	432a      	orrs	r2, r5
 800a5f4:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a5f6:	69cd      	ldr	r5, [r1, #28]
 800a5f8:	1e42      	subs	r2, r0, #1
 800a5fa:	482b      	ldr	r0, [pc, #172]	; (800a6a8 <HAL_I2C_Init+0x140>)
 800a5fc:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800a600:	4283      	cmp	r3, r0
 800a602:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800a606:	d832      	bhi.n	800a66e <HAL_I2C_Init+0x106>
 800a608:	005b      	lsls	r3, r3, #1
 800a60a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a60e:	f640 72fc 	movw	r2, #4092	; 0xffc
 800a612:	3301      	adds	r3, #1
 800a614:	4213      	tst	r3, r2
 800a616:	d042      	beq.n	800a69e <HAL_I2C_Init+0x136>
 800a618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a61c:	432b      	orrs	r3, r5
 800a61e:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a620:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800a624:	680a      	ldr	r2, [r1, #0]
 800a626:	4303      	orrs	r3, r0
 800a628:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a62c:	4313      	orrs	r3, r2
 800a62e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a630:	688a      	ldr	r2, [r1, #8]
 800a632:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800a636:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800a63a:	4303      	orrs	r3, r0
 800a63c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a640:	4313      	orrs	r3, r2
 800a642:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a644:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800a648:	68ca      	ldr	r2, [r1, #12]
 800a64a:	4303      	orrs	r3, r0
 800a64c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a650:	4313      	orrs	r3, r2
 800a652:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800a654:	680b      	ldr	r3, [r1, #0]
 800a656:	f043 0301 	orr.w	r3, r3, #1
 800a65a:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a65c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800a65e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a660:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a662:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a666:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a668:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800a66c:	e780      	b.n	800a570 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a66e:	68a0      	ldr	r0, [r4, #8]
 800a670:	b950      	cbnz	r0, 800a688 <HAL_I2C_Init+0x120>
 800a672:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a676:	fbb2 f3f3 	udiv	r3, r2, r3
 800a67a:	3301      	adds	r3, #1
 800a67c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a680:	b17b      	cbz	r3, 800a6a2 <HAL_I2C_Init+0x13a>
 800a682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a686:	e7c9      	b.n	800a61c <HAL_I2C_Init+0xb4>
 800a688:	2019      	movs	r0, #25
 800a68a:	4343      	muls	r3, r0
 800a68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a690:	3301      	adds	r3, #1
 800a692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a696:	b123      	cbz	r3, 800a6a2 <HAL_I2C_Init+0x13a>
 800a698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a69c:	e7be      	b.n	800a61c <HAL_I2C_Init+0xb4>
 800a69e:	2304      	movs	r3, #4
 800a6a0:	e7bc      	b.n	800a61c <HAL_I2C_Init+0xb4>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e7ba      	b.n	800a61c <HAL_I2C_Init+0xb4>
 800a6a6:	bf00      	nop
 800a6a8:	000186a0 	.word	0x000186a0
 800a6ac:	001e847f 	.word	0x001e847f
 800a6b0:	003d08ff 	.word	0x003d08ff
 800a6b4:	000f4240 	.word	0x000f4240

0800a6b8 <HAL_I2C_Master_Transmit>:
{
 800a6b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6bc:	4604      	mov	r4, r0
 800a6be:	b085      	sub	sp, #20
 800a6c0:	4698      	mov	r8, r3
 800a6c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a6c4:	460d      	mov	r5, r1
 800a6c6:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800a6c8:	f7ff fcd4 	bl	800a074 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6cc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800a6d0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800a6d2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6d4:	d004      	beq.n	800a6e0 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 800a6d6:	2502      	movs	r5, #2
}
 800a6d8:	4628      	mov	r0, r5
 800a6da:	b005      	add	sp, #20
 800a6dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6e0:	9000      	str	r0, [sp, #0]
 800a6e2:	495d      	ldr	r1, [pc, #372]	; (800a858 <HAL_I2C_Master_Transmit+0x1a0>)
 800a6e4:	2319      	movs	r3, #25
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f7ff fee5 	bl	800a4b8 <I2C_WaitOnFlagUntilTimeout>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d1f1      	bne.n	800a6d6 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800a6f2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d0ed      	beq.n	800a6d6 <HAL_I2C_Master_Transmit+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a6fa:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a702:	680b      	ldr	r3, [r1, #0]
 800a704:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800a706:	bf5e      	ittt	pl
 800a708:	680b      	ldrpl	r3, [r1, #0]
 800a70a:	f043 0301 	orrpl.w	r3, r3, #1
 800a70e:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a710:	680b      	ldr	r3, [r1, #0]
 800a712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a716:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a718:	2321      	movs	r3, #33	; 0x21
 800a71a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a71e:	2310      	movs	r3, #16
 800a720:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a724:	2300      	movs	r3, #0
 800a726:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800a728:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a72c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a72e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a730:	4b4a      	ldr	r3, [pc, #296]	; (800a85c <HAL_I2C_Master_Transmit+0x1a4>)
 800a732:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a734:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 800a736:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a73a:	2b08      	cmp	r3, #8
 800a73c:	d004      	beq.n	800a748 <HAL_I2C_Master_Transmit+0x90>
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d002      	beq.n	800a748 <HAL_I2C_Master_Transmit+0x90>
 800a742:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a746:	d104      	bne.n	800a752 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a748:	680b      	ldr	r3, [r1, #0]
 800a74a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a74e:	600b      	str	r3, [r1, #0]
 800a750:	e002      	b.n	800a758 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a752:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a754:	2b12      	cmp	r3, #18
 800a756:	d0f7      	beq.n	800a748 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a758:	2200      	movs	r2, #0
 800a75a:	9600      	str	r6, [sp, #0]
 800a75c:	463b      	mov	r3, r7
 800a75e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a762:	4620      	mov	r0, r4
 800a764:	f7ff fea8 	bl	800a4b8 <I2C_WaitOnFlagUntilTimeout>
 800a768:	6822      	ldr	r2, [r4, #0]
 800a76a:	b138      	cbz	r0, 800a77c <HAL_I2C_Master_Transmit+0xc4>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a76c:	6813      	ldr	r3, [r2, #0]
 800a76e:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a770:	bf44      	itt	mi
 800a772:	f44f 7300 	movmi.w	r3, #512	; 0x200
 800a776:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a778:	2501      	movs	r5, #1
 800a77a:	e7ad      	b.n	800a6d8 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a77c:	6923      	ldr	r3, [r4, #16]
 800a77e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a782:	d121      	bne.n	800a7c8 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a784:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800a788:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a78a:	4935      	ldr	r1, [pc, #212]	; (800a860 <HAL_I2C_Master_Transmit+0x1a8>)
 800a78c:	4633      	mov	r3, r6
 800a78e:	463a      	mov	r2, r7
 800a790:	4620      	mov	r0, r4
 800a792:	f7ff fe01 	bl	800a398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a796:	4605      	mov	r5, r0
 800a798:	2800      	cmp	r0, #0
 800a79a:	d1ed      	bne.n	800a778 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	9003      	str	r0, [sp, #12]
 800a7a0:	695a      	ldr	r2, [r3, #20]
 800a7a2:	9203      	str	r2, [sp, #12]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	9303      	str	r3, [sp, #12]
 800a7a8:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800a7aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a7ac:	b9f3      	cbnz	r3, 800a7ec <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7ae:	6821      	ldr	r1, [r4, #0]
 800a7b0:	680a      	ldr	r2, [r1, #0]
 800a7b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7b6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800a7be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800a7c6:	e787      	b.n	800a6d8 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a7c8:	11eb      	asrs	r3, r5, #7
 800a7ca:	f003 0306 	and.w	r3, r3, #6
 800a7ce:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800a7d2:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a7d4:	4923      	ldr	r1, [pc, #140]	; (800a864 <HAL_I2C_Master_Transmit+0x1ac>)
 800a7d6:	4633      	mov	r3, r6
 800a7d8:	463a      	mov	r2, r7
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f7ff fddc 	bl	800a398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	d1c9      	bne.n	800a778 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	b2ed      	uxtb	r5, r5
 800a7e8:	611d      	str	r5, [r3, #16]
 800a7ea:	e7ce      	b.n	800a78a <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7ec:	4632      	mov	r2, r6
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f7ff fe93 	bl	800a51c <I2C_WaitOnTXEFlagUntilTimeout>
 800a7f6:	b140      	cbz	r0, 800a80a <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d1bc      	bne.n	800a778 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7fe:	6822      	ldr	r2, [r4, #0]
 800a800:	6813      	ldr	r3, [r2, #0]
 800a802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	e7b6      	b.n	800a778 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a80c:	6820      	ldr	r0, [r4, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a814:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800a816:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a818:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a81a:	3a01      	subs	r2, #1
 800a81c:	b292      	uxth	r2, r2
 800a81e:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a820:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a822:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 800a826:	1e51      	subs	r1, r2, #1
 800a828:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a82a:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 800a82e:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a830:	d00a      	beq.n	800a848 <HAL_I2C_Master_Transmit+0x190>
 800a832:	b149      	cbz	r1, 800a848 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a834:	7859      	ldrb	r1, [r3, #1]
 800a836:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 800a838:	3302      	adds	r3, #2
 800a83a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800a83c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a83e:	3b01      	subs	r3, #1
 800a840:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800a842:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800a844:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800a846:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a848:	4632      	mov	r2, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	4620      	mov	r0, r4
 800a84e:	f7ff fdde 	bl	800a40e <I2C_WaitOnBTFFlagUntilTimeout>
 800a852:	2800      	cmp	r0, #0
 800a854:	d0a9      	beq.n	800a7aa <HAL_I2C_Master_Transmit+0xf2>
 800a856:	e7cf      	b.n	800a7f8 <HAL_I2C_Master_Transmit+0x140>
 800a858:	00100002 	.word	0x00100002
 800a85c:	ffff0000 	.word	0xffff0000
 800a860:	00010002 	.word	0x00010002
 800a864:	00010008 	.word	0x00010008

0800a868 <HAL_I2C_Master_Receive>:
{
 800a868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a86c:	4604      	mov	r4, r0
 800a86e:	b089      	sub	sp, #36	; 0x24
 800a870:	4698      	mov	r8, r3
 800a872:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800a874:	460e      	mov	r6, r1
 800a876:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800a878:	f7ff fbfc 	bl	800a074 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a87c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800a880:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800a882:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a884:	d004      	beq.n	800a890 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800a886:	2602      	movs	r6, #2
}
 800a888:	4630      	mov	r0, r6
 800a88a:	b009      	add	sp, #36	; 0x24
 800a88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a890:	9000      	str	r0, [sp, #0]
 800a892:	499a      	ldr	r1, [pc, #616]	; (800aafc <HAL_I2C_Master_Receive+0x294>)
 800a894:	2319      	movs	r3, #25
 800a896:	2201      	movs	r2, #1
 800a898:	4620      	mov	r0, r4
 800a89a:	f7ff fe0d 	bl	800a4b8 <I2C_WaitOnFlagUntilTimeout>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d1f1      	bne.n	800a886 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800a8a2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d0ed      	beq.n	800a886 <HAL_I2C_Master_Receive+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a8aa:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a8b2:	680b      	ldr	r3, [r1, #0]
 800a8b4:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800a8b6:	bf5e      	ittt	pl
 800a8b8:	680b      	ldrpl	r3, [r1, #0]
 800a8ba:	f043 0301 	orrpl.w	r3, r3, #1
 800a8be:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8c0:	680b      	ldr	r3, [r1, #0]
 800a8c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8c6:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a8c8:	2322      	movs	r3, #34	; 0x22
 800a8ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a8ce:	2310      	movs	r3, #16
 800a8d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800a8d8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a8dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a8de:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a8e0:	4b87      	ldr	r3, [pc, #540]	; (800ab00 <HAL_I2C_Master_Receive+0x298>)
 800a8e2:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a8e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8e6:	680a      	ldr	r2, [r1, #0]
    hi2c->pBuffPtr    = pData;
 800a8e8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a8f0:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8f2:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a8f4:	d004      	beq.n	800a900 <HAL_I2C_Master_Receive+0x98>
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d002      	beq.n	800a900 <HAL_I2C_Master_Receive+0x98>
 800a8fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a8fe:	d104      	bne.n	800a90a <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a900:	680b      	ldr	r3, [r1, #0]
 800a902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a906:	600b      	str	r3, [r1, #0]
 800a908:	e002      	b.n	800a910 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a90a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a90c:	2b11      	cmp	r3, #17
 800a90e:	d0f7      	beq.n	800a900 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a910:	463b      	mov	r3, r7
 800a912:	9500      	str	r5, [sp, #0]
 800a914:	2200      	movs	r2, #0
 800a916:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7ff fdcc 	bl	800a4b8 <I2C_WaitOnFlagUntilTimeout>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	b138      	cbz	r0, 800a934 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a924:	681b      	ldr	r3, [r3, #0]
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a926:	05d8      	lsls	r0, r3, #23
 800a928:	d502      	bpl.n	800a930 <HAL_I2C_Master_Receive+0xc8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a92a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a92e:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a930:	2601      	movs	r6, #1
 800a932:	e7a9      	b.n	800a888 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a934:	6922      	ldr	r2, [r4, #16]
 800a936:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a93a:	d127      	bne.n	800a98c <HAL_I2C_Master_Receive+0x124>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a93c:	f046 0601 	orr.w	r6, r6, #1
 800a940:	b2f6      	uxtb	r6, r6
 800a942:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a944:	496f      	ldr	r1, [pc, #444]	; (800ab04 <HAL_I2C_Master_Receive+0x29c>)
 800a946:	462b      	mov	r3, r5
 800a948:	463a      	mov	r2, r7
 800a94a:	4620      	mov	r0, r4
 800a94c:	f7ff fd24 	bl	800a398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a950:	4606      	mov	r6, r0
 800a952:	2800      	cmp	r0, #0
 800a954:	d1ec      	bne.n	800a930 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 800a956:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	2a00      	cmp	r2, #0
 800a95c:	d14b      	bne.n	800a9f6 <HAL_I2C_Master_Receive+0x18e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a95e:	9003      	str	r0, [sp, #12]
 800a960:	695a      	ldr	r2, [r3, #20]
 800a962:	9203      	str	r2, [sp, #12]
 800a964:	699a      	ldr	r2, [r3, #24]
 800a966:	9203      	str	r2, [sp, #12]
 800a968:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a970:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a972:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800ab0c <HAL_I2C_Master_Receive+0x2a4>
    while (hi2c->XferSize > 0U)
 800a976:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d164      	bne.n	800aa46 <HAL_I2C_Master_Receive+0x1de>
    hi2c->State = HAL_I2C_STATE_READY;
 800a97c:	2220      	movs	r2, #32
 800a97e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800a982:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a986:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800a98a:	e77d      	b.n	800a888 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a98c:	ea4f 18e6 	mov.w	r8, r6, asr #7
 800a990:	f008 0806 	and.w	r8, r8, #6
 800a994:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800a998:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a99a:	495b      	ldr	r1, [pc, #364]	; (800ab08 <HAL_I2C_Master_Receive+0x2a0>)
 800a99c:	462b      	mov	r3, r5
 800a99e:	463a      	mov	r2, r7
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f7ff fcf9 	bl	800a398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d1c2      	bne.n	800a930 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a9aa:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9ac:	4955      	ldr	r1, [pc, #340]	; (800ab04 <HAL_I2C_Master_Receive+0x29c>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a9ae:	b2f6      	uxtb	r6, r6
 800a9b0:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9b2:	463a      	mov	r2, r7
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7ff fcee 	bl	800a398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d1b7      	bne.n	800a930 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	9007      	str	r0, [sp, #28]
 800a9c4:	695a      	ldr	r2, [r3, #20]
 800a9c6:	9207      	str	r2, [sp, #28]
 800a9c8:	699a      	ldr	r2, [r3, #24]
 800a9ca:	9207      	str	r2, [sp, #28]
 800a9cc:	9a07      	ldr	r2, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9d4:	601a      	str	r2, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9da:	4602      	mov	r2, r0
 800a9dc:	9500      	str	r5, [sp, #0]
 800a9de:	463b      	mov	r3, r7
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f7ff fd69 	bl	800a4b8 <I2C_WaitOnFlagUntilTimeout>
 800a9e6:	6822      	ldr	r2, [r4, #0]
 800a9e8:	b108      	cbz	r0, 800a9ee <HAL_I2C_Master_Receive+0x186>
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a9ea:	6813      	ldr	r3, [r2, #0]
 800a9ec:	e79b      	b.n	800a926 <HAL_I2C_Master_Receive+0xbe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a9ee:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800a9f2:	6113      	str	r3, [r2, #16]
 800a9f4:	e7a6      	b.n	800a944 <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 1U)
 800a9f6:	2a01      	cmp	r2, #1
 800a9f8:	d10a      	bne.n	800aa10 <HAL_I2C_Master_Receive+0x1a8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa00:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa02:	9004      	str	r0, [sp, #16]
 800aa04:	695a      	ldr	r2, [r3, #20]
 800aa06:	9204      	str	r2, [sp, #16]
 800aa08:	699a      	ldr	r2, [r3, #24]
 800aa0a:	9204      	str	r2, [sp, #16]
 800aa0c:	9a04      	ldr	r2, [sp, #16]
 800aa0e:	e7ac      	b.n	800a96a <HAL_I2C_Master_Receive+0x102>
    else if (hi2c->XferSize == 2U)
 800aa10:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa12:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800aa14:	d10d      	bne.n	800aa32 <HAL_I2C_Master_Receive+0x1ca>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa1a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa22:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa24:	9005      	str	r0, [sp, #20]
 800aa26:	695a      	ldr	r2, [r3, #20]
 800aa28:	9205      	str	r2, [sp, #20]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	9305      	str	r3, [sp, #20]
 800aa2e:	9b05      	ldr	r3, [sp, #20]
 800aa30:	e79f      	b.n	800a972 <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aa36:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa38:	9006      	str	r0, [sp, #24]
 800aa3a:	695a      	ldr	r2, [r3, #20]
 800aa3c:	9206      	str	r2, [sp, #24]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	9306      	str	r3, [sp, #24]
 800aa42:	9b06      	ldr	r3, [sp, #24]
 800aa44:	e795      	b.n	800a972 <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d862      	bhi.n	800ab10 <HAL_I2C_Master_Receive+0x2a8>
        if (hi2c->XferSize == 1U)
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d116      	bne.n	800aa7c <HAL_I2C_Master_Receive+0x214>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa4e:	462a      	mov	r2, r5
 800aa50:	4639      	mov	r1, r7
 800aa52:	4620      	mov	r0, r4
 800aa54:	f7ff fd01 	bl	800a45a <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	f47f af69 	bne.w	800a930 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	691a      	ldr	r2, [r3, #16]
 800aa62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa64:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800aa66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa68:	3301      	adds	r3, #1
 800aa6a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800aa6c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800aa72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aa74:	3b01      	subs	r3, #1
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	8563      	strh	r3, [r4, #42]	; 0x2a
 800aa7a:	e77c      	b.n	800a976 <HAL_I2C_Master_Receive+0x10e>
        else if (hi2c->XferSize == 2U)
 800aa7c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa7e:	9500      	str	r5, [sp, #0]
 800aa80:	463b      	mov	r3, r7
 800aa82:	f04f 0200 	mov.w	r2, #0
 800aa86:	4641      	mov	r1, r8
 800aa88:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800aa8a:	d11a      	bne.n	800aac2 <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa8c:	f7ff fd14 	bl	800a4b8 <I2C_WaitOnFlagUntilTimeout>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	f47f af4d 	bne.w	800a930 <HAL_I2C_Master_Receive+0xc8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa9e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aaa0:	691a      	ldr	r2, [r3, #16]
 800aaa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaa4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800aaa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aaa8:	1c53      	adds	r3, r2, #1
 800aaaa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800aaac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aaae:	3b01      	subs	r3, #1
 800aab0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800aab2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aab4:	3b01      	subs	r3, #1
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aaba:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	7053      	strb	r3, [r2, #1]
 800aac0:	e7d1      	b.n	800aa66 <HAL_I2C_Master_Receive+0x1fe>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aac2:	f7ff fcf9 	bl	800a4b8 <I2C_WaitOnFlagUntilTimeout>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f47f af32 	bne.w	800a930 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aad4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aad6:	691a      	ldr	r2, [r3, #16]
 800aad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aada:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800aadc:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aade:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 800aae0:	3301      	adds	r3, #1
 800aae2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800aae4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aae6:	3b01      	subs	r3, #1
 800aae8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800aaea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aaec:	3b01      	subs	r3, #1
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	463b      	mov	r3, r7
 800aaf6:	4641      	mov	r1, r8
 800aaf8:	4620      	mov	r0, r4
 800aafa:	e7c7      	b.n	800aa8c <HAL_I2C_Master_Receive+0x224>
 800aafc:	00100002 	.word	0x00100002
 800ab00:	ffff0000 	.word	0xffff0000
 800ab04:	00010002 	.word	0x00010002
 800ab08:	00010008 	.word	0x00010008
 800ab0c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab10:	462a      	mov	r2, r5
 800ab12:	4639      	mov	r1, r7
 800ab14:	4620      	mov	r0, r4
 800ab16:	f7ff fca0 	bl	800a45a <I2C_WaitOnRXNEFlagUntilTimeout>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f47f af08 	bne.w	800a930 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	691a      	ldr	r2, [r3, #16]
 800ab24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab26:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ab28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab2a:	1c53      	adds	r3, r2, #1
 800ab2c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800ab2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ab30:	3b01      	subs	r3, #1
 800ab32:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800ab34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ab36:	3b01      	subs	r3, #1
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	6959      	ldr	r1, [r3, #20]
 800ab40:	0749      	lsls	r1, r1, #29
 800ab42:	f57f af18 	bpl.w	800a976 <HAL_I2C_Master_Receive+0x10e>
 800ab46:	e7b9      	b.n	800aabc <HAL_I2C_Master_Receive+0x254>

0800ab48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	b340      	cbz	r0, 800aba2 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab50:	6803      	ldr	r3, [r0, #0]
 800ab52:	07dd      	lsls	r5, r3, #31
 800ab54:	d410      	bmi.n	800ab78 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	0798      	lsls	r0, r3, #30
 800ab5a:	d45e      	bmi.n	800ac1a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	071a      	lsls	r2, r3, #28
 800ab60:	f100 80a0 	bmi.w	800aca4 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	075b      	lsls	r3, r3, #29
 800ab68:	f100 80be 	bmi.w	800ace8 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab6c:	69a0      	ldr	r0, [r4, #24]
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f040 811f 	bne.w	800adb2 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800ab74:	2000      	movs	r0, #0
 800ab76:	e02b      	b.n	800abd0 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ab78:	4ba6      	ldr	r3, [pc, #664]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
 800ab7a:	689a      	ldr	r2, [r3, #8]
 800ab7c:	f002 020c 	and.w	r2, r2, #12
 800ab80:	2a04      	cmp	r2, #4
 800ab82:	d007      	beq.n	800ab94 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ab84:	689a      	ldr	r2, [r3, #8]
 800ab86:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ab8a:	2a08      	cmp	r2, #8
 800ab8c:	d10b      	bne.n	800aba6 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ab8e:	685a      	ldr	r2, [r3, #4]
 800ab90:	0251      	lsls	r1, r2, #9
 800ab92:	d508      	bpl.n	800aba6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab94:	4b9f      	ldr	r3, [pc, #636]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	039a      	lsls	r2, r3, #14
 800ab9a:	d5dc      	bpl.n	800ab56 <HAL_RCC_OscConfig+0xe>
 800ab9c:	6863      	ldr	r3, [r4, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1d9      	bne.n	800ab56 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800aba2:	2001      	movs	r0, #1
 800aba4:	e014      	b.n	800abd0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aba6:	6862      	ldr	r2, [r4, #4]
 800aba8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800abac:	d113      	bne.n	800abd6 <HAL_RCC_OscConfig+0x8e>
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800abb4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800abb6:	f7ff fa5d 	bl	800a074 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abba:	4e96      	ldr	r6, [pc, #600]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800abbc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abbe:	6833      	ldr	r3, [r6, #0]
 800abc0:	039b      	lsls	r3, r3, #14
 800abc2:	d4c8      	bmi.n	800ab56 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800abc4:	f7ff fa56 	bl	800a074 <HAL_GetTick>
 800abc8:	1b40      	subs	r0, r0, r5
 800abca:	2864      	cmp	r0, #100	; 0x64
 800abcc:	d9f7      	bls.n	800abbe <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800abce:	2003      	movs	r0, #3
}
 800abd0:	b002      	add	sp, #8
 800abd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abd6:	4d8f      	ldr	r5, [pc, #572]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
 800abd8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	d107      	bne.n	800abf0 <HAL_RCC_OscConfig+0xa8>
 800abe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abe4:	602b      	str	r3, [r5, #0]
 800abe6:	682b      	ldr	r3, [r5, #0]
 800abe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abec:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800abee:	e7e2      	b.n	800abb6 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abf4:	602b      	str	r3, [r5, #0]
 800abf6:	682b      	ldr	r3, [r5, #0]
 800abf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abfc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800abfe:	2a00      	cmp	r2, #0
 800ac00:	d1d9      	bne.n	800abb6 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800ac02:	f7ff fa37 	bl	800a074 <HAL_GetTick>
 800ac06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac08:	682b      	ldr	r3, [r5, #0]
 800ac0a:	039f      	lsls	r7, r3, #14
 800ac0c:	d5a3      	bpl.n	800ab56 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ac0e:	f7ff fa31 	bl	800a074 <HAL_GetTick>
 800ac12:	1b80      	subs	r0, r0, r6
 800ac14:	2864      	cmp	r0, #100	; 0x64
 800ac16:	d9f7      	bls.n	800ac08 <HAL_RCC_OscConfig+0xc0>
 800ac18:	e7d9      	b.n	800abce <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ac1a:	4b7e      	ldr	r3, [pc, #504]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
 800ac1c:	689a      	ldr	r2, [r3, #8]
 800ac1e:	f012 0f0c 	tst.w	r2, #12
 800ac22:	d007      	beq.n	800ac34 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ac24:	689a      	ldr	r2, [r3, #8]
 800ac26:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ac2a:	2a08      	cmp	r2, #8
 800ac2c:	d111      	bne.n	800ac52 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	025e      	lsls	r6, r3, #9
 800ac32:	d40e      	bmi.n	800ac52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac34:	4b77      	ldr	r3, [pc, #476]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	0795      	lsls	r5, r2, #30
 800ac3a:	d502      	bpl.n	800ac42 <HAL_RCC_OscConfig+0xfa>
 800ac3c:	68e2      	ldr	r2, [r4, #12]
 800ac3e:	2a01      	cmp	r2, #1
 800ac40:	d1af      	bne.n	800aba2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	6921      	ldr	r1, [r4, #16]
 800ac46:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800ac4a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800ac4e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac50:	e784      	b.n	800ab5c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ac52:	68e2      	ldr	r2, [r4, #12]
 800ac54:	4b70      	ldr	r3, [pc, #448]	; (800ae18 <HAL_RCC_OscConfig+0x2d0>)
 800ac56:	b1b2      	cbz	r2, 800ac86 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 800ac58:	2201      	movs	r2, #1
 800ac5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ac5c:	f7ff fa0a 	bl	800a074 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac60:	4d6c      	ldr	r5, [pc, #432]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800ac62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	0798      	lsls	r0, r3, #30
 800ac68:	d507      	bpl.n	800ac7a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac6a:	682b      	ldr	r3, [r5, #0]
 800ac6c:	6922      	ldr	r2, [r4, #16]
 800ac6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ac72:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	e770      	b.n	800ab5c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac7a:	f7ff f9fb 	bl	800a074 <HAL_GetTick>
 800ac7e:	1b80      	subs	r0, r0, r6
 800ac80:	2802      	cmp	r0, #2
 800ac82:	d9ef      	bls.n	800ac64 <HAL_RCC_OscConfig+0x11c>
 800ac84:	e7a3      	b.n	800abce <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800ac86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ac88:	f7ff f9f4 	bl	800a074 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac8c:	4e61      	ldr	r6, [pc, #388]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800ac8e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac90:	6833      	ldr	r3, [r6, #0]
 800ac92:	0799      	lsls	r1, r3, #30
 800ac94:	f57f af62 	bpl.w	800ab5c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac98:	f7ff f9ec 	bl	800a074 <HAL_GetTick>
 800ac9c:	1b40      	subs	r0, r0, r5
 800ac9e:	2802      	cmp	r0, #2
 800aca0:	d9f6      	bls.n	800ac90 <HAL_RCC_OscConfig+0x148>
 800aca2:	e794      	b.n	800abce <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aca4:	6962      	ldr	r2, [r4, #20]
 800aca6:	4b5d      	ldr	r3, [pc, #372]	; (800ae1c <HAL_RCC_OscConfig+0x2d4>)
 800aca8:	b17a      	cbz	r2, 800acca <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 800acaa:	2201      	movs	r2, #1
 800acac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800acae:	f7ff f9e1 	bl	800a074 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acb2:	4e58      	ldr	r6, [pc, #352]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800acb4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acb6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800acb8:	079f      	lsls	r7, r3, #30
 800acba:	f53f af53 	bmi.w	800ab64 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800acbe:	f7ff f9d9 	bl	800a074 <HAL_GetTick>
 800acc2:	1b40      	subs	r0, r0, r5
 800acc4:	2802      	cmp	r0, #2
 800acc6:	d9f6      	bls.n	800acb6 <HAL_RCC_OscConfig+0x16e>
 800acc8:	e781      	b.n	800abce <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800acca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800accc:	f7ff f9d2 	bl	800a074 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800acd0:	4e50      	ldr	r6, [pc, #320]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800acd2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800acd4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800acd6:	0798      	lsls	r0, r3, #30
 800acd8:	f57f af44 	bpl.w	800ab64 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800acdc:	f7ff f9ca 	bl	800a074 <HAL_GetTick>
 800ace0:	1b40      	subs	r0, r0, r5
 800ace2:	2802      	cmp	r0, #2
 800ace4:	d9f6      	bls.n	800acd4 <HAL_RCC_OscConfig+0x18c>
 800ace6:	e772      	b.n	800abce <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ace8:	4b4a      	ldr	r3, [pc, #296]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
 800acea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acec:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800acf0:	d128      	bne.n	800ad44 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 800acf2:	9201      	str	r2, [sp, #4]
 800acf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acf6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800acfa:	641a      	str	r2, [r3, #64]	; 0x40
 800acfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad02:	9301      	str	r3, [sp, #4]
 800ad04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800ad06:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad08:	4d45      	ldr	r5, [pc, #276]	; (800ae20 <HAL_RCC_OscConfig+0x2d8>)
 800ad0a:	682b      	ldr	r3, [r5, #0]
 800ad0c:	05d9      	lsls	r1, r3, #23
 800ad0e:	d51b      	bpl.n	800ad48 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad10:	68a3      	ldr	r3, [r4, #8]
 800ad12:	4d40      	ldr	r5, [pc, #256]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d127      	bne.n	800ad68 <HAL_RCC_OscConfig+0x220>
 800ad18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ad1a:	f043 0301 	orr.w	r3, r3, #1
 800ad1e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800ad20:	f7ff f9a8 	bl	800a074 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad24:	4e3b      	ldr	r6, [pc, #236]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800ad26:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad28:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad2c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800ad2e:	079b      	lsls	r3, r3, #30
 800ad30:	d539      	bpl.n	800ada6 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 800ad32:	2f00      	cmp	r7, #0
 800ad34:	f43f af1a 	beq.w	800ab6c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad38:	4a36      	ldr	r2, [pc, #216]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
 800ad3a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ad3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad40:	6413      	str	r3, [r2, #64]	; 0x40
 800ad42:	e713      	b.n	800ab6c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800ad44:	2700      	movs	r7, #0
 800ad46:	e7df      	b.n	800ad08 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad4e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ad50:	f7ff f990 	bl	800a074 <HAL_GetTick>
 800ad54:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad56:	682b      	ldr	r3, [r5, #0]
 800ad58:	05da      	lsls	r2, r3, #23
 800ad5a:	d4d9      	bmi.n	800ad10 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad5c:	f7ff f98a 	bl	800a074 <HAL_GetTick>
 800ad60:	1b80      	subs	r0, r0, r6
 800ad62:	2802      	cmp	r0, #2
 800ad64:	d9f7      	bls.n	800ad56 <HAL_RCC_OscConfig+0x20e>
 800ad66:	e732      	b.n	800abce <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad68:	2b05      	cmp	r3, #5
 800ad6a:	d104      	bne.n	800ad76 <HAL_RCC_OscConfig+0x22e>
 800ad6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ad6e:	f043 0304 	orr.w	r3, r3, #4
 800ad72:	672b      	str	r3, [r5, #112]	; 0x70
 800ad74:	e7d0      	b.n	800ad18 <HAL_RCC_OscConfig+0x1d0>
 800ad76:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800ad78:	f022 0201 	bic.w	r2, r2, #1
 800ad7c:	672a      	str	r2, [r5, #112]	; 0x70
 800ad7e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800ad80:	f022 0204 	bic.w	r2, r2, #4
 800ad84:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1ca      	bne.n	800ad20 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 800ad8a:	f7ff f973 	bl	800a074 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad8e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800ad92:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ad96:	0798      	lsls	r0, r3, #30
 800ad98:	d5cb      	bpl.n	800ad32 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad9a:	f7ff f96b 	bl	800a074 <HAL_GetTick>
 800ad9e:	1b80      	subs	r0, r0, r6
 800ada0:	4540      	cmp	r0, r8
 800ada2:	d9f7      	bls.n	800ad94 <HAL_RCC_OscConfig+0x24c>
 800ada4:	e713      	b.n	800abce <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ada6:	f7ff f965 	bl	800a074 <HAL_GetTick>
 800adaa:	1b40      	subs	r0, r0, r5
 800adac:	4540      	cmp	r0, r8
 800adae:	d9bd      	bls.n	800ad2c <HAL_RCC_OscConfig+0x1e4>
 800adb0:	e70d      	b.n	800abce <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800adb2:	4d18      	ldr	r5, [pc, #96]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
 800adb4:	68ab      	ldr	r3, [r5, #8]
 800adb6:	f003 030c 	and.w	r3, r3, #12
 800adba:	2b08      	cmp	r3, #8
 800adbc:	d047      	beq.n	800ae4e <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adbe:	4e19      	ldr	r6, [pc, #100]	; (800ae24 <HAL_RCC_OscConfig+0x2dc>)
 800adc0:	2300      	movs	r3, #0
 800adc2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800adc4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adc6:	d135      	bne.n	800ae34 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 800adc8:	f7ff f954 	bl	800a074 <HAL_GetTick>
 800adcc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adce:	682b      	ldr	r3, [r5, #0]
 800add0:	0199      	lsls	r1, r3, #6
 800add2:	d429      	bmi.n	800ae28 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800add4:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800add8:	4313      	orrs	r3, r2
 800adda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800addc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800ade0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ade2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ade6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ade8:	0852      	lsrs	r2, r2, #1
 800adea:	3a01      	subs	r2, #1
 800adec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adf0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800adf2:	2301      	movs	r3, #1
 800adf4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800adf6:	f7ff f93d 	bl	800a074 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adfa:	4d06      	ldr	r5, [pc, #24]	; (800ae14 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800adfc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adfe:	682b      	ldr	r3, [r5, #0]
 800ae00:	019a      	lsls	r2, r3, #6
 800ae02:	f53f aeb7 	bmi.w	800ab74 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae06:	f7ff f935 	bl	800a074 <HAL_GetTick>
 800ae0a:	1b00      	subs	r0, r0, r4
 800ae0c:	2802      	cmp	r0, #2
 800ae0e:	d9f6      	bls.n	800adfe <HAL_RCC_OscConfig+0x2b6>
 800ae10:	e6dd      	b.n	800abce <HAL_RCC_OscConfig+0x86>
 800ae12:	bf00      	nop
 800ae14:	40023800 	.word	0x40023800
 800ae18:	42470000 	.word	0x42470000
 800ae1c:	42470e80 	.word	0x42470e80
 800ae20:	40007000 	.word	0x40007000
 800ae24:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae28:	f7ff f924 	bl	800a074 <HAL_GetTick>
 800ae2c:	1bc0      	subs	r0, r0, r7
 800ae2e:	2802      	cmp	r0, #2
 800ae30:	d9cd      	bls.n	800adce <HAL_RCC_OscConfig+0x286>
 800ae32:	e6cc      	b.n	800abce <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800ae34:	f7ff f91e 	bl	800a074 <HAL_GetTick>
 800ae38:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae3a:	682b      	ldr	r3, [r5, #0]
 800ae3c:	019b      	lsls	r3, r3, #6
 800ae3e:	f57f ae99 	bpl.w	800ab74 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae42:	f7ff f917 	bl	800a074 <HAL_GetTick>
 800ae46:	1b00      	subs	r0, r0, r4
 800ae48:	2802      	cmp	r0, #2
 800ae4a:	d9f6      	bls.n	800ae3a <HAL_RCC_OscConfig+0x2f2>
 800ae4c:	e6bf      	b.n	800abce <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae4e:	2801      	cmp	r0, #1
 800ae50:	f43f aebe 	beq.w	800abd0 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800ae54:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae56:	69e2      	ldr	r2, [r4, #28]
 800ae58:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800ae5c:	4291      	cmp	r1, r2
 800ae5e:	f47f aea0 	bne.w	800aba2 <HAL_RCC_OscConfig+0x5a>
 800ae62:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae68:	428a      	cmp	r2, r1
 800ae6a:	f47f ae9a 	bne.w	800aba2 <HAL_RCC_OscConfig+0x5a>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae70:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800ae74:	401a      	ands	r2, r3
 800ae76:	428a      	cmp	r2, r1
 800ae78:	f47f ae93 	bne.w	800aba2 <HAL_RCC_OscConfig+0x5a>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ae7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ae7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ae82:	428a      	cmp	r2, r1
 800ae84:	f47f ae8d 	bne.w	800aba2 <HAL_RCC_OscConfig+0x5a>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ae88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ae8a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	f43f ae70 	beq.w	800ab74 <HAL_RCC_OscConfig+0x2c>
 800ae94:	e685      	b.n	800aba2 <HAL_RCC_OscConfig+0x5a>
 800ae96:	bf00      	nop

0800ae98 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae98:	4913      	ldr	r1, [pc, #76]	; (800aee8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800ae9a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae9c:	688b      	ldr	r3, [r1, #8]
 800ae9e:	f003 030c 	and.w	r3, r3, #12
 800aea2:	2b04      	cmp	r3, #4
 800aea4:	d01c      	beq.n	800aee0 <HAL_RCC_GetSysClockFreq+0x48>
 800aea6:	2b08      	cmp	r3, #8
 800aea8:	d11c      	bne.n	800aee4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aeaa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aeac:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aeae:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aeb0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aeb4:	bf14      	ite	ne
 800aeb6:	480d      	ldrne	r0, [pc, #52]	; (800aeec <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aeb8:	480d      	ldreq	r0, [pc, #52]	; (800aef0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aeba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800aebe:	bf18      	it	ne
 800aec0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aec2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aec6:	fba1 0100 	umull	r0, r1, r1, r0
 800aeca:	f7f5 fec5 	bl	8000c58 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800aece:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <HAL_RCC_GetSysClockFreq+0x50>)
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800aed6:	3301      	adds	r3, #1
 800aed8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800aeda:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800aede:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aee0:	4802      	ldr	r0, [pc, #8]	; (800aeec <HAL_RCC_GetSysClockFreq+0x54>)
 800aee2:	e7fc      	b.n	800aede <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800aee4:	4802      	ldr	r0, [pc, #8]	; (800aef0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800aee6:	e7fa      	b.n	800aede <HAL_RCC_GetSysClockFreq+0x46>
 800aee8:	40023800 	.word	0x40023800
 800aeec:	007a1200 	.word	0x007a1200
 800aef0:	00f42400 	.word	0x00f42400

0800aef4 <HAL_RCC_ClockConfig>:
{
 800aef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800aefa:	4604      	mov	r4, r0
 800aefc:	b910      	cbnz	r0, 800af04 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800aefe:	2001      	movs	r0, #1
}
 800af00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800af04:	4b44      	ldr	r3, [pc, #272]	; (800b018 <HAL_RCC_ClockConfig+0x124>)
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	f002 020f 	and.w	r2, r2, #15
 800af0c:	428a      	cmp	r2, r1
 800af0e:	d328      	bcc.n	800af62 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af10:	6822      	ldr	r2, [r4, #0]
 800af12:	0797      	lsls	r7, r2, #30
 800af14:	d42d      	bmi.n	800af72 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af16:	07d0      	lsls	r0, r2, #31
 800af18:	d441      	bmi.n	800af9e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800af1a:	4b3f      	ldr	r3, [pc, #252]	; (800b018 <HAL_RCC_ClockConfig+0x124>)
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	f002 020f 	and.w	r2, r2, #15
 800af22:	42aa      	cmp	r2, r5
 800af24:	d866      	bhi.n	800aff4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af26:	6822      	ldr	r2, [r4, #0]
 800af28:	0751      	lsls	r1, r2, #29
 800af2a:	d46c      	bmi.n	800b006 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af2c:	0713      	lsls	r3, r2, #28
 800af2e:	d507      	bpl.n	800af40 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af30:	4a3a      	ldr	r2, [pc, #232]	; (800b01c <HAL_RCC_ClockConfig+0x128>)
 800af32:	6921      	ldr	r1, [r4, #16]
 800af34:	6893      	ldr	r3, [r2, #8]
 800af36:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800af3a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800af3e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af40:	f7ff ffaa 	bl	800ae98 <HAL_RCC_GetSysClockFreq>
 800af44:	4b35      	ldr	r3, [pc, #212]	; (800b01c <HAL_RCC_ClockConfig+0x128>)
 800af46:	4a36      	ldr	r2, [pc, #216]	; (800b020 <HAL_RCC_ClockConfig+0x12c>)
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800af4e:	5cd3      	ldrb	r3, [r2, r3]
 800af50:	40d8      	lsrs	r0, r3
 800af52:	4b34      	ldr	r3, [pc, #208]	; (800b024 <HAL_RCC_ClockConfig+0x130>)
 800af54:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800af56:	4b34      	ldr	r3, [pc, #208]	; (800b028 <HAL_RCC_ClockConfig+0x134>)
 800af58:	6818      	ldr	r0, [r3, #0]
 800af5a:	f7ff f843 	bl	8009fe4 <HAL_InitTick>
  return HAL_OK;
 800af5e:	2000      	movs	r0, #0
 800af60:	e7ce      	b.n	800af00 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af62:	b2ca      	uxtb	r2, r1
 800af64:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 030f 	and.w	r3, r3, #15
 800af6c:	428b      	cmp	r3, r1
 800af6e:	d1c6      	bne.n	800aefe <HAL_RCC_ClockConfig+0xa>
 800af70:	e7ce      	b.n	800af10 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af72:	4b2a      	ldr	r3, [pc, #168]	; (800b01c <HAL_RCC_ClockConfig+0x128>)
 800af74:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af78:	bf1e      	ittt	ne
 800af7a:	6899      	ldrne	r1, [r3, #8]
 800af7c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 800af80:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af82:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af84:	bf42      	ittt	mi
 800af86:	6899      	ldrmi	r1, [r3, #8]
 800af88:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800af8c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af8e:	4923      	ldr	r1, [pc, #140]	; (800b01c <HAL_RCC_ClockConfig+0x128>)
 800af90:	68a0      	ldr	r0, [r4, #8]
 800af92:	688b      	ldr	r3, [r1, #8]
 800af94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af98:	4303      	orrs	r3, r0
 800af9a:	608b      	str	r3, [r1, #8]
 800af9c:	e7bb      	b.n	800af16 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af9e:	6862      	ldr	r2, [r4, #4]
 800afa0:	4b1e      	ldr	r3, [pc, #120]	; (800b01c <HAL_RCC_ClockConfig+0x128>)
 800afa2:	2a01      	cmp	r2, #1
 800afa4:	d11c      	bne.n	800afe0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afac:	d0a7      	beq.n	800aefe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800afae:	4e1b      	ldr	r6, [pc, #108]	; (800b01c <HAL_RCC_ClockConfig+0x128>)
 800afb0:	68b3      	ldr	r3, [r6, #8]
 800afb2:	f023 0303 	bic.w	r3, r3, #3
 800afb6:	4313      	orrs	r3, r2
 800afb8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800afba:	f7ff f85b 	bl	800a074 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afbe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800afc2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afc4:	68b3      	ldr	r3, [r6, #8]
 800afc6:	6862      	ldr	r2, [r4, #4]
 800afc8:	f003 030c 	and.w	r3, r3, #12
 800afcc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800afd0:	d0a3      	beq.n	800af1a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afd2:	f7ff f84f 	bl	800a074 <HAL_GetTick>
 800afd6:	1bc0      	subs	r0, r0, r7
 800afd8:	4540      	cmp	r0, r8
 800afda:	d9f3      	bls.n	800afc4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800afdc:	2003      	movs	r0, #3
 800afde:	e78f      	b.n	800af00 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800afe0:	1e91      	subs	r1, r2, #2
 800afe2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afe4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800afe6:	d802      	bhi.n	800afee <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afe8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800afec:	e7de      	b.n	800afac <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afee:	f013 0f02 	tst.w	r3, #2
 800aff2:	e7db      	b.n	800afac <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aff4:	b2ea      	uxtb	r2, r5
 800aff6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 030f 	and.w	r3, r3, #15
 800affe:	42ab      	cmp	r3, r5
 800b000:	f47f af7d 	bne.w	800aefe <HAL_RCC_ClockConfig+0xa>
 800b004:	e78f      	b.n	800af26 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b006:	4905      	ldr	r1, [pc, #20]	; (800b01c <HAL_RCC_ClockConfig+0x128>)
 800b008:	68e0      	ldr	r0, [r4, #12]
 800b00a:	688b      	ldr	r3, [r1, #8]
 800b00c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800b010:	4303      	orrs	r3, r0
 800b012:	608b      	str	r3, [r1, #8]
 800b014:	e78a      	b.n	800af2c <HAL_RCC_ClockConfig+0x38>
 800b016:	bf00      	nop
 800b018:	40023c00 	.word	0x40023c00
 800b01c:	40023800 	.word	0x40023800
 800b020:	0800decc 	.word	0x0800decc
 800b024:	20000030 	.word	0x20000030
 800b028:	20000038 	.word	0x20000038

0800b02c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800b02c:	4b01      	ldr	r3, [pc, #4]	; (800b034 <HAL_RCC_GetHCLKFreq+0x8>)
 800b02e:	6818      	ldr	r0, [r3, #0]
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	20000030 	.word	0x20000030

0800b038 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b038:	4b04      	ldr	r3, [pc, #16]	; (800b04c <HAL_RCC_GetPCLK1Freq+0x14>)
 800b03a:	4a05      	ldr	r2, [pc, #20]	; (800b050 <HAL_RCC_GetPCLK1Freq+0x18>)
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800b042:	5cd3      	ldrb	r3, [r2, r3]
 800b044:	4a03      	ldr	r2, [pc, #12]	; (800b054 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b046:	6810      	ldr	r0, [r2, #0]
}
 800b048:	40d8      	lsrs	r0, r3
 800b04a:	4770      	bx	lr
 800b04c:	40023800 	.word	0x40023800
 800b050:	0800dedc 	.word	0x0800dedc
 800b054:	20000030 	.word	0x20000030

0800b058 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b058:	4b04      	ldr	r3, [pc, #16]	; (800b06c <HAL_RCC_GetPCLK2Freq+0x14>)
 800b05a:	4a05      	ldr	r2, [pc, #20]	; (800b070 <HAL_RCC_GetPCLK2Freq+0x18>)
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800b062:	5cd3      	ldrb	r3, [r2, r3]
 800b064:	4a03      	ldr	r2, [pc, #12]	; (800b074 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b066:	6810      	ldr	r0, [r2, #0]
}
 800b068:	40d8      	lsrs	r0, r3
 800b06a:	4770      	bx	lr
 800b06c:	40023800 	.word	0x40023800
 800b070:	0800dedc 	.word	0x0800dedc
 800b074:	20000030 	.word	0x20000030

0800b078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b078:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b07a:	6803      	ldr	r3, [r0, #0]
 800b07c:	68c1      	ldr	r1, [r0, #12]
 800b07e:	691a      	ldr	r2, [r3, #16]
{
 800b080:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b082:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800b086:	430a      	orrs	r2, r1
 800b088:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b08a:	6925      	ldr	r5, [r4, #16]
 800b08c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b08e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b090:	69c0      	ldr	r0, [r0, #28]
 800b092:	432a      	orrs	r2, r5
 800b094:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800b096:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b09a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800b09c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b0a0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800b0a2:	430a      	orrs	r2, r1
 800b0a4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0a6:	695a      	ldr	r2, [r3, #20]
 800b0a8:	69a1      	ldr	r1, [r4, #24]
 800b0aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b0ae:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0b0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0b4:	615a      	str	r2, [r3, #20]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0b6:	4a25      	ldr	r2, [pc, #148]	; (800b14c <UART_SetConfig+0xd4>)
 800b0b8:	d128      	bne.n	800b10c <UART_SetConfig+0x94>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d003      	beq.n	800b0c6 <UART_SetConfig+0x4e>
 800b0be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d11f      	bne.n	800b106 <UART_SetConfig+0x8e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0c6:	f7ff ffc7 	bl	800b058 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0ca:	6862      	ldr	r2, [r4, #4]
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	1892      	adds	r2, r2, r2
 800b0d0:	f04f 0119 	mov.w	r1, #25
 800b0d4:	415b      	adcs	r3, r3
 800b0d6:	fba0 0101 	umull	r0, r1, r0, r1
 800b0da:	f7f5 fdbd 	bl	8000c58 <__aeabi_uldivmod>
 800b0de:	2164      	movs	r1, #100	; 0x64
 800b0e0:	fbb0 f5f1 	udiv	r5, r0, r1
 800b0e4:	fb01 0315 	mls	r3, r1, r5, r0
 800b0e8:	00db      	lsls	r3, r3, #3
 800b0ea:	3332      	adds	r3, #50	; 0x32
 800b0ec:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0f0:	f003 0207 	and.w	r2, r3, #7
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	6821      	ldr	r1, [r4, #0]
 800b0f8:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800b0fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b100:	4413      	add	r3, r2
 800b102:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b104:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800b106:	f7ff ff97 	bl	800b038 <HAL_RCC_GetPCLK1Freq>
 800b10a:	e7de      	b.n	800b0ca <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d002      	beq.n	800b116 <UART_SetConfig+0x9e>
 800b110:	4a0f      	ldr	r2, [pc, #60]	; (800b150 <UART_SetConfig+0xd8>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d117      	bne.n	800b146 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b116:	f7ff ff9f 	bl	800b058 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b11a:	6863      	ldr	r3, [r4, #4]
 800b11c:	2119      	movs	r1, #25
 800b11e:	009a      	lsls	r2, r3, #2
 800b120:	fba0 0101 	umull	r0, r1, r0, r1
 800b124:	0f9b      	lsrs	r3, r3, #30
 800b126:	f7f5 fd97 	bl	8000c58 <__aeabi_uldivmod>
 800b12a:	2264      	movs	r2, #100	; 0x64
 800b12c:	fbb0 f1f2 	udiv	r1, r0, r2
 800b130:	fb02 0311 	mls	r3, r2, r1, r0
 800b134:	6824      	ldr	r4, [r4, #0]
 800b136:	011b      	lsls	r3, r3, #4
 800b138:	3332      	adds	r3, #50	; 0x32
 800b13a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b13e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b142:	60a3      	str	r3, [r4, #8]
}
 800b144:	e7de      	b.n	800b104 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b146:	f7ff ff77 	bl	800b038 <HAL_RCC_GetPCLK1Freq>
 800b14a:	e7e6      	b.n	800b11a <UART_SetConfig+0xa2>
 800b14c:	40011000 	.word	0x40011000
 800b150:	40011400 	.word	0x40011400

0800b154 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800b154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b156:	4604      	mov	r4, r0
 800b158:	460e      	mov	r6, r1
 800b15a:	4617      	mov	r7, r2
 800b15c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b15e:	6822      	ldr	r2, [r4, #0]
 800b160:	6813      	ldr	r3, [r2, #0]
 800b162:	ea36 0303 	bics.w	r3, r6, r3
 800b166:	d101      	bne.n	800b16c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 800b168:	2000      	movs	r0, #0
 800b16a:	e014      	b.n	800b196 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800b16c:	1c6b      	adds	r3, r5, #1
 800b16e:	d0f7      	beq.n	800b160 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b170:	b995      	cbnz	r5, 800b198 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	68da      	ldr	r2, [r3, #12]
 800b176:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b17a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b17c:	695a      	ldr	r2, [r3, #20]
 800b17e:	f022 0201 	bic.w	r2, r2, #1
 800b182:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800b184:	2320      	movs	r3, #32
 800b186:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b18a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800b18e:	2300      	movs	r3, #0
 800b190:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800b194:	2003      	movs	r0, #3
}
 800b196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b198:	f7fe ff6c 	bl	800a074 <HAL_GetTick>
 800b19c:	1bc0      	subs	r0, r0, r7
 800b19e:	4285      	cmp	r5, r0
 800b1a0:	d2dd      	bcs.n	800b15e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800b1a2:	e7e6      	b.n	800b172 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

0800b1a4 <HAL_UART_Init>:
{
 800b1a4:	b510      	push	{r4, lr}
  if (huart == NULL)
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	b340      	cbz	r0, 800b1fc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b1aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b1ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b1b2:	b91b      	cbnz	r3, 800b1bc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800b1b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800b1b8:	f7f6 f948 	bl	800144c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800b1bc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b1be:	2324      	movs	r3, #36	; 0x24
 800b1c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800b1c4:	68d3      	ldr	r3, [r2, #12]
 800b1c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1ca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f7ff ff53 	bl	800b078 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	691a      	ldr	r2, [r3, #16]
 800b1d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1dc:	695a      	ldr	r2, [r3, #20]
 800b1de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1e2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800b1e4:	68da      	ldr	r2, [r3, #12]
 800b1e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b1ea:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ec:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800b1ee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1f0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b1f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b1f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800b1fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b1fc:	2001      	movs	r0, #1
 800b1fe:	e7fc      	b.n	800b1fa <HAL_UART_Init+0x56>

0800b200 <HAL_UART_Transmit>:
{
 800b200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b202:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800b204:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
{
 800b208:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 800b20a:	2a20      	cmp	r2, #32
{
 800b20c:	4604      	mov	r4, r0
 800b20e:	460d      	mov	r5, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800b210:	d150      	bne.n	800b2b4 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800b212:	2900      	cmp	r1, #0
 800b214:	d04c      	beq.n	800b2b0 <HAL_UART_Transmit+0xb0>
 800b216:	2e00      	cmp	r6, #0
 800b218:	d04a      	beq.n	800b2b0 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 800b21a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800b21e:	2a01      	cmp	r2, #1
 800b220:	d048      	beq.n	800b2b4 <HAL_UART_Transmit+0xb4>
 800b222:	2201      	movs	r2, #1
 800b224:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b228:	2700      	movs	r7, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b22a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b22c:	63c7      	str	r7, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b22e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800b232:	f7fe ff1f 	bl	800a074 <HAL_GetTick>
    while (huart->TxXferCount > 0U)
 800b236:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 800b238:	84a6      	strh	r6, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800b23a:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 800b23c:	84e6      	strh	r6, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800b23e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800b242:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800b244:	b289      	uxth	r1, r1
 800b246:	b941      	cbnz	r1, 800b25a <HAL_UART_Transmit+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b248:	2140      	movs	r1, #64	; 0x40
 800b24a:	4620      	mov	r0, r4
 800b24c:	f7ff ff82 	bl	800b154 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800b250:	b9a8      	cbnz	r0, 800b27e <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 800b252:	2320      	movs	r3, #32
 800b254:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800b258:	e012      	b.n	800b280 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 800b25a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800b25c:	3901      	subs	r1, #1
 800b25e:	b289      	uxth	r1, r1
 800b260:	84e1      	strh	r1, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b262:	68a1      	ldr	r1, [r4, #8]
 800b264:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b268:	e9cd 2300 	strd	r2, r3, [sp]
 800b26c:	f04f 0180 	mov.w	r1, #128	; 0x80
 800b270:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b272:	d112      	bne.n	800b29a <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b274:	f7ff ff6e 	bl	800b154 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800b278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b27c:	b110      	cbz	r0, 800b284 <HAL_UART_Transmit+0x84>
          return HAL_TIMEOUT;
 800b27e:	2003      	movs	r0, #3
}
 800b280:	b003      	add	sp, #12
 800b282:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b284:	8829      	ldrh	r1, [r5, #0]
 800b286:	6820      	ldr	r0, [r4, #0]
 800b288:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800b28c:	6041      	str	r1, [r0, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b28e:	6921      	ldr	r1, [r4, #16]
 800b290:	b909      	cbnz	r1, 800b296 <HAL_UART_Transmit+0x96>
          pData += 2U;
 800b292:	3502      	adds	r5, #2
 800b294:	e7d5      	b.n	800b242 <HAL_UART_Transmit+0x42>
          pData += 1U;
 800b296:	3501      	adds	r5, #1
 800b298:	e7d3      	b.n	800b242 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b29a:	f7ff ff5b 	bl	800b154 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d1ed      	bne.n	800b27e <HAL_UART_Transmit+0x7e>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b2a2:	6821      	ldr	r1, [r4, #0]
 800b2a4:	f815 0b01 	ldrb.w	r0, [r5], #1
 800b2a8:	6048      	str	r0, [r1, #4]
 800b2aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2ae:	e7c8      	b.n	800b242 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800b2b0:	2001      	movs	r0, #1
 800b2b2:	e7e5      	b.n	800b280 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800b2b4:	2002      	movs	r0, #2
 800b2b6:	e7e3      	b.n	800b280 <HAL_UART_Transmit+0x80>

0800b2b8 <__libc_init_array>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	4d0d      	ldr	r5, [pc, #52]	; (800b2f0 <__libc_init_array+0x38>)
 800b2bc:	4c0d      	ldr	r4, [pc, #52]	; (800b2f4 <__libc_init_array+0x3c>)
 800b2be:	1b64      	subs	r4, r4, r5
 800b2c0:	10a4      	asrs	r4, r4, #2
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	42a6      	cmp	r6, r4
 800b2c6:	d109      	bne.n	800b2dc <__libc_init_array+0x24>
 800b2c8:	4d0b      	ldr	r5, [pc, #44]	; (800b2f8 <__libc_init_array+0x40>)
 800b2ca:	4c0c      	ldr	r4, [pc, #48]	; (800b2fc <__libc_init_array+0x44>)
 800b2cc:	f002 fddc 	bl	800de88 <_init>
 800b2d0:	1b64      	subs	r4, r4, r5
 800b2d2:	10a4      	asrs	r4, r4, #2
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	42a6      	cmp	r6, r4
 800b2d8:	d105      	bne.n	800b2e6 <__libc_init_array+0x2e>
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2e0:	4798      	blx	r3
 800b2e2:	3601      	adds	r6, #1
 800b2e4:	e7ee      	b.n	800b2c4 <__libc_init_array+0xc>
 800b2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ea:	4798      	blx	r3
 800b2ec:	3601      	adds	r6, #1
 800b2ee:	e7f2      	b.n	800b2d6 <__libc_init_array+0x1e>
 800b2f0:	0800e554 	.word	0x0800e554
 800b2f4:	0800e554 	.word	0x0800e554
 800b2f8:	0800e554 	.word	0x0800e554
 800b2fc:	0800e558 	.word	0x0800e558

0800b300 <memcpy>:
 800b300:	440a      	add	r2, r1
 800b302:	4291      	cmp	r1, r2
 800b304:	f100 33ff 	add.w	r3, r0, #4294967295
 800b308:	d100      	bne.n	800b30c <memcpy+0xc>
 800b30a:	4770      	bx	lr
 800b30c:	b510      	push	{r4, lr}
 800b30e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b316:	4291      	cmp	r1, r2
 800b318:	d1f9      	bne.n	800b30e <memcpy+0xe>
 800b31a:	bd10      	pop	{r4, pc}

0800b31c <memset>:
 800b31c:	4402      	add	r2, r0
 800b31e:	4603      	mov	r3, r0
 800b320:	4293      	cmp	r3, r2
 800b322:	d100      	bne.n	800b326 <memset+0xa>
 800b324:	4770      	bx	lr
 800b326:	f803 1b01 	strb.w	r1, [r3], #1
 800b32a:	e7f9      	b.n	800b320 <memset+0x4>

0800b32c <__cvt>:
 800b32c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b330:	ec55 4b10 	vmov	r4, r5, d0
 800b334:	2d00      	cmp	r5, #0
 800b336:	460e      	mov	r6, r1
 800b338:	4619      	mov	r1, r3
 800b33a:	462b      	mov	r3, r5
 800b33c:	bfbb      	ittet	lt
 800b33e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b342:	461d      	movlt	r5, r3
 800b344:	2300      	movge	r3, #0
 800b346:	232d      	movlt	r3, #45	; 0x2d
 800b348:	700b      	strb	r3, [r1, #0]
 800b34a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b34c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b350:	4691      	mov	r9, r2
 800b352:	f023 0820 	bic.w	r8, r3, #32
 800b356:	bfbc      	itt	lt
 800b358:	4622      	movlt	r2, r4
 800b35a:	4614      	movlt	r4, r2
 800b35c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b360:	d005      	beq.n	800b36e <__cvt+0x42>
 800b362:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b366:	d100      	bne.n	800b36a <__cvt+0x3e>
 800b368:	3601      	adds	r6, #1
 800b36a:	2102      	movs	r1, #2
 800b36c:	e000      	b.n	800b370 <__cvt+0x44>
 800b36e:	2103      	movs	r1, #3
 800b370:	ab03      	add	r3, sp, #12
 800b372:	9301      	str	r3, [sp, #4]
 800b374:	ab02      	add	r3, sp, #8
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	ec45 4b10 	vmov	d0, r4, r5
 800b37c:	4653      	mov	r3, sl
 800b37e:	4632      	mov	r2, r6
 800b380:	f000 fe2e 	bl	800bfe0 <_dtoa_r>
 800b384:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b388:	4607      	mov	r7, r0
 800b38a:	d102      	bne.n	800b392 <__cvt+0x66>
 800b38c:	f019 0f01 	tst.w	r9, #1
 800b390:	d022      	beq.n	800b3d8 <__cvt+0xac>
 800b392:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b396:	eb07 0906 	add.w	r9, r7, r6
 800b39a:	d110      	bne.n	800b3be <__cvt+0x92>
 800b39c:	783b      	ldrb	r3, [r7, #0]
 800b39e:	2b30      	cmp	r3, #48	; 0x30
 800b3a0:	d10a      	bne.n	800b3b8 <__cvt+0x8c>
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	f7f5 fb95 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3ae:	b918      	cbnz	r0, 800b3b8 <__cvt+0x8c>
 800b3b0:	f1c6 0601 	rsb	r6, r6, #1
 800b3b4:	f8ca 6000 	str.w	r6, [sl]
 800b3b8:	f8da 3000 	ldr.w	r3, [sl]
 800b3bc:	4499      	add	r9, r3
 800b3be:	2200      	movs	r2, #0
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	f7f5 fb87 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3ca:	b108      	cbz	r0, 800b3d0 <__cvt+0xa4>
 800b3cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3d0:	2230      	movs	r2, #48	; 0x30
 800b3d2:	9b03      	ldr	r3, [sp, #12]
 800b3d4:	454b      	cmp	r3, r9
 800b3d6:	d307      	bcc.n	800b3e8 <__cvt+0xbc>
 800b3d8:	9b03      	ldr	r3, [sp, #12]
 800b3da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3dc:	1bdb      	subs	r3, r3, r7
 800b3de:	4638      	mov	r0, r7
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	b004      	add	sp, #16
 800b3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e8:	1c59      	adds	r1, r3, #1
 800b3ea:	9103      	str	r1, [sp, #12]
 800b3ec:	701a      	strb	r2, [r3, #0]
 800b3ee:	e7f0      	b.n	800b3d2 <__cvt+0xa6>

0800b3f0 <__exponent>:
 800b3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2900      	cmp	r1, #0
 800b3f6:	bfb8      	it	lt
 800b3f8:	4249      	neglt	r1, r1
 800b3fa:	f803 2b02 	strb.w	r2, [r3], #2
 800b3fe:	bfb4      	ite	lt
 800b400:	222d      	movlt	r2, #45	; 0x2d
 800b402:	222b      	movge	r2, #43	; 0x2b
 800b404:	2909      	cmp	r1, #9
 800b406:	7042      	strb	r2, [r0, #1]
 800b408:	dd2a      	ble.n	800b460 <__exponent+0x70>
 800b40a:	f10d 0407 	add.w	r4, sp, #7
 800b40e:	46a4      	mov	ip, r4
 800b410:	270a      	movs	r7, #10
 800b412:	46a6      	mov	lr, r4
 800b414:	460a      	mov	r2, r1
 800b416:	fb91 f6f7 	sdiv	r6, r1, r7
 800b41a:	fb07 1516 	mls	r5, r7, r6, r1
 800b41e:	3530      	adds	r5, #48	; 0x30
 800b420:	2a63      	cmp	r2, #99	; 0x63
 800b422:	f104 34ff 	add.w	r4, r4, #4294967295
 800b426:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b42a:	4631      	mov	r1, r6
 800b42c:	dcf1      	bgt.n	800b412 <__exponent+0x22>
 800b42e:	3130      	adds	r1, #48	; 0x30
 800b430:	f1ae 0502 	sub.w	r5, lr, #2
 800b434:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b438:	1c44      	adds	r4, r0, #1
 800b43a:	4629      	mov	r1, r5
 800b43c:	4561      	cmp	r1, ip
 800b43e:	d30a      	bcc.n	800b456 <__exponent+0x66>
 800b440:	f10d 0209 	add.w	r2, sp, #9
 800b444:	eba2 020e 	sub.w	r2, r2, lr
 800b448:	4565      	cmp	r5, ip
 800b44a:	bf88      	it	hi
 800b44c:	2200      	movhi	r2, #0
 800b44e:	4413      	add	r3, r2
 800b450:	1a18      	subs	r0, r3, r0
 800b452:	b003      	add	sp, #12
 800b454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b45a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b45e:	e7ed      	b.n	800b43c <__exponent+0x4c>
 800b460:	2330      	movs	r3, #48	; 0x30
 800b462:	3130      	adds	r1, #48	; 0x30
 800b464:	7083      	strb	r3, [r0, #2]
 800b466:	70c1      	strb	r1, [r0, #3]
 800b468:	1d03      	adds	r3, r0, #4
 800b46a:	e7f1      	b.n	800b450 <__exponent+0x60>

0800b46c <_printf_float>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	ed2d 8b02 	vpush	{d8}
 800b474:	b08d      	sub	sp, #52	; 0x34
 800b476:	460c      	mov	r4, r1
 800b478:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b47c:	4616      	mov	r6, r2
 800b47e:	461f      	mov	r7, r3
 800b480:	4605      	mov	r5, r0
 800b482:	f001 fd51 	bl	800cf28 <_localeconv_r>
 800b486:	f8d0 a000 	ldr.w	sl, [r0]
 800b48a:	4650      	mov	r0, sl
 800b48c:	f7f4 fea8 	bl	80001e0 <strlen>
 800b490:	2300      	movs	r3, #0
 800b492:	930a      	str	r3, [sp, #40]	; 0x28
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	9305      	str	r3, [sp, #20]
 800b498:	f8d8 3000 	ldr.w	r3, [r8]
 800b49c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b4a0:	3307      	adds	r3, #7
 800b4a2:	f023 0307 	bic.w	r3, r3, #7
 800b4a6:	f103 0208 	add.w	r2, r3, #8
 800b4aa:	f8c8 2000 	str.w	r2, [r8]
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b4b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b4ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4be:	9307      	str	r3, [sp, #28]
 800b4c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4c4:	ee08 0a10 	vmov	s16, r0
 800b4c8:	4b9f      	ldr	r3, [pc, #636]	; (800b748 <_printf_float+0x2dc>)
 800b4ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d2:	f7f5 fb33 	bl	8000b3c <__aeabi_dcmpun>
 800b4d6:	bb88      	cbnz	r0, 800b53c <_printf_float+0xd0>
 800b4d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4dc:	4b9a      	ldr	r3, [pc, #616]	; (800b748 <_printf_float+0x2dc>)
 800b4de:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e2:	f7f5 fb0d 	bl	8000b00 <__aeabi_dcmple>
 800b4e6:	bb48      	cbnz	r0, 800b53c <_printf_float+0xd0>
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4640      	mov	r0, r8
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	f7f5 fafc 	bl	8000aec <__aeabi_dcmplt>
 800b4f4:	b110      	cbz	r0, 800b4fc <_printf_float+0x90>
 800b4f6:	232d      	movs	r3, #45	; 0x2d
 800b4f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4fc:	4b93      	ldr	r3, [pc, #588]	; (800b74c <_printf_float+0x2e0>)
 800b4fe:	4894      	ldr	r0, [pc, #592]	; (800b750 <_printf_float+0x2e4>)
 800b500:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b504:	bf94      	ite	ls
 800b506:	4698      	movls	r8, r3
 800b508:	4680      	movhi	r8, r0
 800b50a:	2303      	movs	r3, #3
 800b50c:	6123      	str	r3, [r4, #16]
 800b50e:	9b05      	ldr	r3, [sp, #20]
 800b510:	f023 0204 	bic.w	r2, r3, #4
 800b514:	6022      	str	r2, [r4, #0]
 800b516:	f04f 0900 	mov.w	r9, #0
 800b51a:	9700      	str	r7, [sp, #0]
 800b51c:	4633      	mov	r3, r6
 800b51e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b520:	4621      	mov	r1, r4
 800b522:	4628      	mov	r0, r5
 800b524:	f000 f9d8 	bl	800b8d8 <_printf_common>
 800b528:	3001      	adds	r0, #1
 800b52a:	f040 8090 	bne.w	800b64e <_printf_float+0x1e2>
 800b52e:	f04f 30ff 	mov.w	r0, #4294967295
 800b532:	b00d      	add	sp, #52	; 0x34
 800b534:	ecbd 8b02 	vpop	{d8}
 800b538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53c:	4642      	mov	r2, r8
 800b53e:	464b      	mov	r3, r9
 800b540:	4640      	mov	r0, r8
 800b542:	4649      	mov	r1, r9
 800b544:	f7f5 fafa 	bl	8000b3c <__aeabi_dcmpun>
 800b548:	b140      	cbz	r0, 800b55c <_printf_float+0xf0>
 800b54a:	464b      	mov	r3, r9
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	bfbc      	itt	lt
 800b550:	232d      	movlt	r3, #45	; 0x2d
 800b552:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b556:	487f      	ldr	r0, [pc, #508]	; (800b754 <_printf_float+0x2e8>)
 800b558:	4b7f      	ldr	r3, [pc, #508]	; (800b758 <_printf_float+0x2ec>)
 800b55a:	e7d1      	b.n	800b500 <_printf_float+0x94>
 800b55c:	6863      	ldr	r3, [r4, #4]
 800b55e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b562:	9206      	str	r2, [sp, #24]
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	d13f      	bne.n	800b5e8 <_printf_float+0x17c>
 800b568:	2306      	movs	r3, #6
 800b56a:	6063      	str	r3, [r4, #4]
 800b56c:	9b05      	ldr	r3, [sp, #20]
 800b56e:	6861      	ldr	r1, [r4, #4]
 800b570:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b574:	2300      	movs	r3, #0
 800b576:	9303      	str	r3, [sp, #12]
 800b578:	ab0a      	add	r3, sp, #40	; 0x28
 800b57a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b57e:	ab09      	add	r3, sp, #36	; 0x24
 800b580:	ec49 8b10 	vmov	d0, r8, r9
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	6022      	str	r2, [r4, #0]
 800b588:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b58c:	4628      	mov	r0, r5
 800b58e:	f7ff fecd 	bl	800b32c <__cvt>
 800b592:	9b06      	ldr	r3, [sp, #24]
 800b594:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b596:	2b47      	cmp	r3, #71	; 0x47
 800b598:	4680      	mov	r8, r0
 800b59a:	d108      	bne.n	800b5ae <_printf_float+0x142>
 800b59c:	1cc8      	adds	r0, r1, #3
 800b59e:	db02      	blt.n	800b5a6 <_printf_float+0x13a>
 800b5a0:	6863      	ldr	r3, [r4, #4]
 800b5a2:	4299      	cmp	r1, r3
 800b5a4:	dd41      	ble.n	800b62a <_printf_float+0x1be>
 800b5a6:	f1ab 0b02 	sub.w	fp, fp, #2
 800b5aa:	fa5f fb8b 	uxtb.w	fp, fp
 800b5ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5b2:	d820      	bhi.n	800b5f6 <_printf_float+0x18a>
 800b5b4:	3901      	subs	r1, #1
 800b5b6:	465a      	mov	r2, fp
 800b5b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5bc:	9109      	str	r1, [sp, #36]	; 0x24
 800b5be:	f7ff ff17 	bl	800b3f0 <__exponent>
 800b5c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5c4:	1813      	adds	r3, r2, r0
 800b5c6:	2a01      	cmp	r2, #1
 800b5c8:	4681      	mov	r9, r0
 800b5ca:	6123      	str	r3, [r4, #16]
 800b5cc:	dc02      	bgt.n	800b5d4 <_printf_float+0x168>
 800b5ce:	6822      	ldr	r2, [r4, #0]
 800b5d0:	07d2      	lsls	r2, r2, #31
 800b5d2:	d501      	bpl.n	800b5d8 <_printf_float+0x16c>
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	6123      	str	r3, [r4, #16]
 800b5d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d09c      	beq.n	800b51a <_printf_float+0xae>
 800b5e0:	232d      	movs	r3, #45	; 0x2d
 800b5e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5e6:	e798      	b.n	800b51a <_printf_float+0xae>
 800b5e8:	9a06      	ldr	r2, [sp, #24]
 800b5ea:	2a47      	cmp	r2, #71	; 0x47
 800b5ec:	d1be      	bne.n	800b56c <_printf_float+0x100>
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1bc      	bne.n	800b56c <_printf_float+0x100>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e7b9      	b.n	800b56a <_printf_float+0xfe>
 800b5f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b5fa:	d118      	bne.n	800b62e <_printf_float+0x1c2>
 800b5fc:	2900      	cmp	r1, #0
 800b5fe:	6863      	ldr	r3, [r4, #4]
 800b600:	dd0b      	ble.n	800b61a <_printf_float+0x1ae>
 800b602:	6121      	str	r1, [r4, #16]
 800b604:	b913      	cbnz	r3, 800b60c <_printf_float+0x1a0>
 800b606:	6822      	ldr	r2, [r4, #0]
 800b608:	07d0      	lsls	r0, r2, #31
 800b60a:	d502      	bpl.n	800b612 <_printf_float+0x1a6>
 800b60c:	3301      	adds	r3, #1
 800b60e:	440b      	add	r3, r1
 800b610:	6123      	str	r3, [r4, #16]
 800b612:	65a1      	str	r1, [r4, #88]	; 0x58
 800b614:	f04f 0900 	mov.w	r9, #0
 800b618:	e7de      	b.n	800b5d8 <_printf_float+0x16c>
 800b61a:	b913      	cbnz	r3, 800b622 <_printf_float+0x1b6>
 800b61c:	6822      	ldr	r2, [r4, #0]
 800b61e:	07d2      	lsls	r2, r2, #31
 800b620:	d501      	bpl.n	800b626 <_printf_float+0x1ba>
 800b622:	3302      	adds	r3, #2
 800b624:	e7f4      	b.n	800b610 <_printf_float+0x1a4>
 800b626:	2301      	movs	r3, #1
 800b628:	e7f2      	b.n	800b610 <_printf_float+0x1a4>
 800b62a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b630:	4299      	cmp	r1, r3
 800b632:	db05      	blt.n	800b640 <_printf_float+0x1d4>
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	6121      	str	r1, [r4, #16]
 800b638:	07d8      	lsls	r0, r3, #31
 800b63a:	d5ea      	bpl.n	800b612 <_printf_float+0x1a6>
 800b63c:	1c4b      	adds	r3, r1, #1
 800b63e:	e7e7      	b.n	800b610 <_printf_float+0x1a4>
 800b640:	2900      	cmp	r1, #0
 800b642:	bfd4      	ite	le
 800b644:	f1c1 0202 	rsble	r2, r1, #2
 800b648:	2201      	movgt	r2, #1
 800b64a:	4413      	add	r3, r2
 800b64c:	e7e0      	b.n	800b610 <_printf_float+0x1a4>
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	055a      	lsls	r2, r3, #21
 800b652:	d407      	bmi.n	800b664 <_printf_float+0x1f8>
 800b654:	6923      	ldr	r3, [r4, #16]
 800b656:	4642      	mov	r2, r8
 800b658:	4631      	mov	r1, r6
 800b65a:	4628      	mov	r0, r5
 800b65c:	47b8      	blx	r7
 800b65e:	3001      	adds	r0, #1
 800b660:	d12c      	bne.n	800b6bc <_printf_float+0x250>
 800b662:	e764      	b.n	800b52e <_printf_float+0xc2>
 800b664:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b668:	f240 80e0 	bls.w	800b82c <_printf_float+0x3c0>
 800b66c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b670:	2200      	movs	r2, #0
 800b672:	2300      	movs	r3, #0
 800b674:	f7f5 fa30 	bl	8000ad8 <__aeabi_dcmpeq>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d034      	beq.n	800b6e6 <_printf_float+0x27a>
 800b67c:	4a37      	ldr	r2, [pc, #220]	; (800b75c <_printf_float+0x2f0>)
 800b67e:	2301      	movs	r3, #1
 800b680:	4631      	mov	r1, r6
 800b682:	4628      	mov	r0, r5
 800b684:	47b8      	blx	r7
 800b686:	3001      	adds	r0, #1
 800b688:	f43f af51 	beq.w	800b52e <_printf_float+0xc2>
 800b68c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b690:	429a      	cmp	r2, r3
 800b692:	db02      	blt.n	800b69a <_printf_float+0x22e>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	07d8      	lsls	r0, r3, #31
 800b698:	d510      	bpl.n	800b6bc <_printf_float+0x250>
 800b69a:	ee18 3a10 	vmov	r3, s16
 800b69e:	4652      	mov	r2, sl
 800b6a0:	4631      	mov	r1, r6
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	47b8      	blx	r7
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	f43f af41 	beq.w	800b52e <_printf_float+0xc2>
 800b6ac:	f04f 0800 	mov.w	r8, #0
 800b6b0:	f104 091a 	add.w	r9, r4, #26
 800b6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	4543      	cmp	r3, r8
 800b6ba:	dc09      	bgt.n	800b6d0 <_printf_float+0x264>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	079b      	lsls	r3, r3, #30
 800b6c0:	f100 8105 	bmi.w	800b8ce <_printf_float+0x462>
 800b6c4:	68e0      	ldr	r0, [r4, #12]
 800b6c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6c8:	4298      	cmp	r0, r3
 800b6ca:	bfb8      	it	lt
 800b6cc:	4618      	movlt	r0, r3
 800b6ce:	e730      	b.n	800b532 <_printf_float+0xc6>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	464a      	mov	r2, r9
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	47b8      	blx	r7
 800b6da:	3001      	adds	r0, #1
 800b6dc:	f43f af27 	beq.w	800b52e <_printf_float+0xc2>
 800b6e0:	f108 0801 	add.w	r8, r8, #1
 800b6e4:	e7e6      	b.n	800b6b4 <_printf_float+0x248>
 800b6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	dc39      	bgt.n	800b760 <_printf_float+0x2f4>
 800b6ec:	4a1b      	ldr	r2, [pc, #108]	; (800b75c <_printf_float+0x2f0>)
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	47b8      	blx	r7
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	f43f af19 	beq.w	800b52e <_printf_float+0xc2>
 800b6fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b700:	4313      	orrs	r3, r2
 800b702:	d102      	bne.n	800b70a <_printf_float+0x29e>
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	07d9      	lsls	r1, r3, #31
 800b708:	d5d8      	bpl.n	800b6bc <_printf_float+0x250>
 800b70a:	ee18 3a10 	vmov	r3, s16
 800b70e:	4652      	mov	r2, sl
 800b710:	4631      	mov	r1, r6
 800b712:	4628      	mov	r0, r5
 800b714:	47b8      	blx	r7
 800b716:	3001      	adds	r0, #1
 800b718:	f43f af09 	beq.w	800b52e <_printf_float+0xc2>
 800b71c:	f04f 0900 	mov.w	r9, #0
 800b720:	f104 0a1a 	add.w	sl, r4, #26
 800b724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b726:	425b      	negs	r3, r3
 800b728:	454b      	cmp	r3, r9
 800b72a:	dc01      	bgt.n	800b730 <_printf_float+0x2c4>
 800b72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b72e:	e792      	b.n	800b656 <_printf_float+0x1ea>
 800b730:	2301      	movs	r3, #1
 800b732:	4652      	mov	r2, sl
 800b734:	4631      	mov	r1, r6
 800b736:	4628      	mov	r0, r5
 800b738:	47b8      	blx	r7
 800b73a:	3001      	adds	r0, #1
 800b73c:	f43f aef7 	beq.w	800b52e <_printf_float+0xc2>
 800b740:	f109 0901 	add.w	r9, r9, #1
 800b744:	e7ee      	b.n	800b724 <_printf_float+0x2b8>
 800b746:	bf00      	nop
 800b748:	7fefffff 	.word	0x7fefffff
 800b74c:	0800e16c 	.word	0x0800e16c
 800b750:	0800e170 	.word	0x0800e170
 800b754:	0800e178 	.word	0x0800e178
 800b758:	0800e174 	.word	0x0800e174
 800b75c:	0800e131 	.word	0x0800e131
 800b760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b762:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b764:	429a      	cmp	r2, r3
 800b766:	bfa8      	it	ge
 800b768:	461a      	movge	r2, r3
 800b76a:	2a00      	cmp	r2, #0
 800b76c:	4691      	mov	r9, r2
 800b76e:	dc37      	bgt.n	800b7e0 <_printf_float+0x374>
 800b770:	f04f 0b00 	mov.w	fp, #0
 800b774:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b778:	f104 021a 	add.w	r2, r4, #26
 800b77c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b77e:	9305      	str	r3, [sp, #20]
 800b780:	eba3 0309 	sub.w	r3, r3, r9
 800b784:	455b      	cmp	r3, fp
 800b786:	dc33      	bgt.n	800b7f0 <_printf_float+0x384>
 800b788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b78c:	429a      	cmp	r2, r3
 800b78e:	db3b      	blt.n	800b808 <_printf_float+0x39c>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	07da      	lsls	r2, r3, #31
 800b794:	d438      	bmi.n	800b808 <_printf_float+0x39c>
 800b796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b798:	9b05      	ldr	r3, [sp, #20]
 800b79a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	eba2 0901 	sub.w	r9, r2, r1
 800b7a2:	4599      	cmp	r9, r3
 800b7a4:	bfa8      	it	ge
 800b7a6:	4699      	movge	r9, r3
 800b7a8:	f1b9 0f00 	cmp.w	r9, #0
 800b7ac:	dc35      	bgt.n	800b81a <_printf_float+0x3ae>
 800b7ae:	f04f 0800 	mov.w	r8, #0
 800b7b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7b6:	f104 0a1a 	add.w	sl, r4, #26
 800b7ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7be:	1a9b      	subs	r3, r3, r2
 800b7c0:	eba3 0309 	sub.w	r3, r3, r9
 800b7c4:	4543      	cmp	r3, r8
 800b7c6:	f77f af79 	ble.w	800b6bc <_printf_float+0x250>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4652      	mov	r2, sl
 800b7ce:	4631      	mov	r1, r6
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	47b8      	blx	r7
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	f43f aeaa 	beq.w	800b52e <_printf_float+0xc2>
 800b7da:	f108 0801 	add.w	r8, r8, #1
 800b7de:	e7ec      	b.n	800b7ba <_printf_float+0x34e>
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4642      	mov	r2, r8
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	47b8      	blx	r7
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d1c0      	bne.n	800b770 <_printf_float+0x304>
 800b7ee:	e69e      	b.n	800b52e <_printf_float+0xc2>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	4631      	mov	r1, r6
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	9205      	str	r2, [sp, #20]
 800b7f8:	47b8      	blx	r7
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	f43f ae97 	beq.w	800b52e <_printf_float+0xc2>
 800b800:	9a05      	ldr	r2, [sp, #20]
 800b802:	f10b 0b01 	add.w	fp, fp, #1
 800b806:	e7b9      	b.n	800b77c <_printf_float+0x310>
 800b808:	ee18 3a10 	vmov	r3, s16
 800b80c:	4652      	mov	r2, sl
 800b80e:	4631      	mov	r1, r6
 800b810:	4628      	mov	r0, r5
 800b812:	47b8      	blx	r7
 800b814:	3001      	adds	r0, #1
 800b816:	d1be      	bne.n	800b796 <_printf_float+0x32a>
 800b818:	e689      	b.n	800b52e <_printf_float+0xc2>
 800b81a:	9a05      	ldr	r2, [sp, #20]
 800b81c:	464b      	mov	r3, r9
 800b81e:	4442      	add	r2, r8
 800b820:	4631      	mov	r1, r6
 800b822:	4628      	mov	r0, r5
 800b824:	47b8      	blx	r7
 800b826:	3001      	adds	r0, #1
 800b828:	d1c1      	bne.n	800b7ae <_printf_float+0x342>
 800b82a:	e680      	b.n	800b52e <_printf_float+0xc2>
 800b82c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b82e:	2a01      	cmp	r2, #1
 800b830:	dc01      	bgt.n	800b836 <_printf_float+0x3ca>
 800b832:	07db      	lsls	r3, r3, #31
 800b834:	d538      	bpl.n	800b8a8 <_printf_float+0x43c>
 800b836:	2301      	movs	r3, #1
 800b838:	4642      	mov	r2, r8
 800b83a:	4631      	mov	r1, r6
 800b83c:	4628      	mov	r0, r5
 800b83e:	47b8      	blx	r7
 800b840:	3001      	adds	r0, #1
 800b842:	f43f ae74 	beq.w	800b52e <_printf_float+0xc2>
 800b846:	ee18 3a10 	vmov	r3, s16
 800b84a:	4652      	mov	r2, sl
 800b84c:	4631      	mov	r1, r6
 800b84e:	4628      	mov	r0, r5
 800b850:	47b8      	blx	r7
 800b852:	3001      	adds	r0, #1
 800b854:	f43f ae6b 	beq.w	800b52e <_printf_float+0xc2>
 800b858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b85c:	2200      	movs	r2, #0
 800b85e:	2300      	movs	r3, #0
 800b860:	f7f5 f93a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b864:	b9d8      	cbnz	r0, 800b89e <_printf_float+0x432>
 800b866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b868:	f108 0201 	add.w	r2, r8, #1
 800b86c:	3b01      	subs	r3, #1
 800b86e:	4631      	mov	r1, r6
 800b870:	4628      	mov	r0, r5
 800b872:	47b8      	blx	r7
 800b874:	3001      	adds	r0, #1
 800b876:	d10e      	bne.n	800b896 <_printf_float+0x42a>
 800b878:	e659      	b.n	800b52e <_printf_float+0xc2>
 800b87a:	2301      	movs	r3, #1
 800b87c:	4652      	mov	r2, sl
 800b87e:	4631      	mov	r1, r6
 800b880:	4628      	mov	r0, r5
 800b882:	47b8      	blx	r7
 800b884:	3001      	adds	r0, #1
 800b886:	f43f ae52 	beq.w	800b52e <_printf_float+0xc2>
 800b88a:	f108 0801 	add.w	r8, r8, #1
 800b88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b890:	3b01      	subs	r3, #1
 800b892:	4543      	cmp	r3, r8
 800b894:	dcf1      	bgt.n	800b87a <_printf_float+0x40e>
 800b896:	464b      	mov	r3, r9
 800b898:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b89c:	e6dc      	b.n	800b658 <_printf_float+0x1ec>
 800b89e:	f04f 0800 	mov.w	r8, #0
 800b8a2:	f104 0a1a 	add.w	sl, r4, #26
 800b8a6:	e7f2      	b.n	800b88e <_printf_float+0x422>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	4642      	mov	r2, r8
 800b8ac:	e7df      	b.n	800b86e <_printf_float+0x402>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	464a      	mov	r2, r9
 800b8b2:	4631      	mov	r1, r6
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	47b8      	blx	r7
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	f43f ae38 	beq.w	800b52e <_printf_float+0xc2>
 800b8be:	f108 0801 	add.w	r8, r8, #1
 800b8c2:	68e3      	ldr	r3, [r4, #12]
 800b8c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8c6:	1a5b      	subs	r3, r3, r1
 800b8c8:	4543      	cmp	r3, r8
 800b8ca:	dcf0      	bgt.n	800b8ae <_printf_float+0x442>
 800b8cc:	e6fa      	b.n	800b6c4 <_printf_float+0x258>
 800b8ce:	f04f 0800 	mov.w	r8, #0
 800b8d2:	f104 0919 	add.w	r9, r4, #25
 800b8d6:	e7f4      	b.n	800b8c2 <_printf_float+0x456>

0800b8d8 <_printf_common>:
 800b8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8dc:	4616      	mov	r6, r2
 800b8de:	4699      	mov	r9, r3
 800b8e0:	688a      	ldr	r2, [r1, #8]
 800b8e2:	690b      	ldr	r3, [r1, #16]
 800b8e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	bfb8      	it	lt
 800b8ec:	4613      	movlt	r3, r2
 800b8ee:	6033      	str	r3, [r6, #0]
 800b8f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8f4:	4607      	mov	r7, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	b10a      	cbz	r2, 800b8fe <_printf_common+0x26>
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	6033      	str	r3, [r6, #0]
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	0699      	lsls	r1, r3, #26
 800b902:	bf42      	ittt	mi
 800b904:	6833      	ldrmi	r3, [r6, #0]
 800b906:	3302      	addmi	r3, #2
 800b908:	6033      	strmi	r3, [r6, #0]
 800b90a:	6825      	ldr	r5, [r4, #0]
 800b90c:	f015 0506 	ands.w	r5, r5, #6
 800b910:	d106      	bne.n	800b920 <_printf_common+0x48>
 800b912:	f104 0a19 	add.w	sl, r4, #25
 800b916:	68e3      	ldr	r3, [r4, #12]
 800b918:	6832      	ldr	r2, [r6, #0]
 800b91a:	1a9b      	subs	r3, r3, r2
 800b91c:	42ab      	cmp	r3, r5
 800b91e:	dc26      	bgt.n	800b96e <_printf_common+0x96>
 800b920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b924:	1e13      	subs	r3, r2, #0
 800b926:	6822      	ldr	r2, [r4, #0]
 800b928:	bf18      	it	ne
 800b92a:	2301      	movne	r3, #1
 800b92c:	0692      	lsls	r2, r2, #26
 800b92e:	d42b      	bmi.n	800b988 <_printf_common+0xb0>
 800b930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b934:	4649      	mov	r1, r9
 800b936:	4638      	mov	r0, r7
 800b938:	47c0      	blx	r8
 800b93a:	3001      	adds	r0, #1
 800b93c:	d01e      	beq.n	800b97c <_printf_common+0xa4>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	68e5      	ldr	r5, [r4, #12]
 800b942:	6832      	ldr	r2, [r6, #0]
 800b944:	f003 0306 	and.w	r3, r3, #6
 800b948:	2b04      	cmp	r3, #4
 800b94a:	bf08      	it	eq
 800b94c:	1aad      	subeq	r5, r5, r2
 800b94e:	68a3      	ldr	r3, [r4, #8]
 800b950:	6922      	ldr	r2, [r4, #16]
 800b952:	bf0c      	ite	eq
 800b954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b958:	2500      	movne	r5, #0
 800b95a:	4293      	cmp	r3, r2
 800b95c:	bfc4      	itt	gt
 800b95e:	1a9b      	subgt	r3, r3, r2
 800b960:	18ed      	addgt	r5, r5, r3
 800b962:	2600      	movs	r6, #0
 800b964:	341a      	adds	r4, #26
 800b966:	42b5      	cmp	r5, r6
 800b968:	d11a      	bne.n	800b9a0 <_printf_common+0xc8>
 800b96a:	2000      	movs	r0, #0
 800b96c:	e008      	b.n	800b980 <_printf_common+0xa8>
 800b96e:	2301      	movs	r3, #1
 800b970:	4652      	mov	r2, sl
 800b972:	4649      	mov	r1, r9
 800b974:	4638      	mov	r0, r7
 800b976:	47c0      	blx	r8
 800b978:	3001      	adds	r0, #1
 800b97a:	d103      	bne.n	800b984 <_printf_common+0xac>
 800b97c:	f04f 30ff 	mov.w	r0, #4294967295
 800b980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b984:	3501      	adds	r5, #1
 800b986:	e7c6      	b.n	800b916 <_printf_common+0x3e>
 800b988:	18e1      	adds	r1, r4, r3
 800b98a:	1c5a      	adds	r2, r3, #1
 800b98c:	2030      	movs	r0, #48	; 0x30
 800b98e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b992:	4422      	add	r2, r4
 800b994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b99c:	3302      	adds	r3, #2
 800b99e:	e7c7      	b.n	800b930 <_printf_common+0x58>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	4622      	mov	r2, r4
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	47c0      	blx	r8
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	d0e6      	beq.n	800b97c <_printf_common+0xa4>
 800b9ae:	3601      	adds	r6, #1
 800b9b0:	e7d9      	b.n	800b966 <_printf_common+0x8e>
	...

0800b9b4 <_printf_i>:
 800b9b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	4691      	mov	r9, r2
 800b9bc:	7e27      	ldrb	r7, [r4, #24]
 800b9be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b9c0:	2f78      	cmp	r7, #120	; 0x78
 800b9c2:	4680      	mov	r8, r0
 800b9c4:	469a      	mov	sl, r3
 800b9c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9ca:	d807      	bhi.n	800b9dc <_printf_i+0x28>
 800b9cc:	2f62      	cmp	r7, #98	; 0x62
 800b9ce:	d80a      	bhi.n	800b9e6 <_printf_i+0x32>
 800b9d0:	2f00      	cmp	r7, #0
 800b9d2:	f000 80d8 	beq.w	800bb86 <_printf_i+0x1d2>
 800b9d6:	2f58      	cmp	r7, #88	; 0x58
 800b9d8:	f000 80a3 	beq.w	800bb22 <_printf_i+0x16e>
 800b9dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9e4:	e03a      	b.n	800ba5c <_printf_i+0xa8>
 800b9e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9ea:	2b15      	cmp	r3, #21
 800b9ec:	d8f6      	bhi.n	800b9dc <_printf_i+0x28>
 800b9ee:	a001      	add	r0, pc, #4	; (adr r0, 800b9f4 <_printf_i+0x40>)
 800b9f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b9f4:	0800ba4d 	.word	0x0800ba4d
 800b9f8:	0800ba61 	.word	0x0800ba61
 800b9fc:	0800b9dd 	.word	0x0800b9dd
 800ba00:	0800b9dd 	.word	0x0800b9dd
 800ba04:	0800b9dd 	.word	0x0800b9dd
 800ba08:	0800b9dd 	.word	0x0800b9dd
 800ba0c:	0800ba61 	.word	0x0800ba61
 800ba10:	0800b9dd 	.word	0x0800b9dd
 800ba14:	0800b9dd 	.word	0x0800b9dd
 800ba18:	0800b9dd 	.word	0x0800b9dd
 800ba1c:	0800b9dd 	.word	0x0800b9dd
 800ba20:	0800bb6d 	.word	0x0800bb6d
 800ba24:	0800ba91 	.word	0x0800ba91
 800ba28:	0800bb4f 	.word	0x0800bb4f
 800ba2c:	0800b9dd 	.word	0x0800b9dd
 800ba30:	0800b9dd 	.word	0x0800b9dd
 800ba34:	0800bb8f 	.word	0x0800bb8f
 800ba38:	0800b9dd 	.word	0x0800b9dd
 800ba3c:	0800ba91 	.word	0x0800ba91
 800ba40:	0800b9dd 	.word	0x0800b9dd
 800ba44:	0800b9dd 	.word	0x0800b9dd
 800ba48:	0800bb57 	.word	0x0800bb57
 800ba4c:	680b      	ldr	r3, [r1, #0]
 800ba4e:	1d1a      	adds	r2, r3, #4
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	600a      	str	r2, [r1, #0]
 800ba54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e0a3      	b.n	800bba8 <_printf_i+0x1f4>
 800ba60:	6825      	ldr	r5, [r4, #0]
 800ba62:	6808      	ldr	r0, [r1, #0]
 800ba64:	062e      	lsls	r6, r5, #24
 800ba66:	f100 0304 	add.w	r3, r0, #4
 800ba6a:	d50a      	bpl.n	800ba82 <_printf_i+0xce>
 800ba6c:	6805      	ldr	r5, [r0, #0]
 800ba6e:	600b      	str	r3, [r1, #0]
 800ba70:	2d00      	cmp	r5, #0
 800ba72:	da03      	bge.n	800ba7c <_printf_i+0xc8>
 800ba74:	232d      	movs	r3, #45	; 0x2d
 800ba76:	426d      	negs	r5, r5
 800ba78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba7c:	485e      	ldr	r0, [pc, #376]	; (800bbf8 <_printf_i+0x244>)
 800ba7e:	230a      	movs	r3, #10
 800ba80:	e019      	b.n	800bab6 <_printf_i+0x102>
 800ba82:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba86:	6805      	ldr	r5, [r0, #0]
 800ba88:	600b      	str	r3, [r1, #0]
 800ba8a:	bf18      	it	ne
 800ba8c:	b22d      	sxthne	r5, r5
 800ba8e:	e7ef      	b.n	800ba70 <_printf_i+0xbc>
 800ba90:	680b      	ldr	r3, [r1, #0]
 800ba92:	6825      	ldr	r5, [r4, #0]
 800ba94:	1d18      	adds	r0, r3, #4
 800ba96:	6008      	str	r0, [r1, #0]
 800ba98:	0628      	lsls	r0, r5, #24
 800ba9a:	d501      	bpl.n	800baa0 <_printf_i+0xec>
 800ba9c:	681d      	ldr	r5, [r3, #0]
 800ba9e:	e002      	b.n	800baa6 <_printf_i+0xf2>
 800baa0:	0669      	lsls	r1, r5, #25
 800baa2:	d5fb      	bpl.n	800ba9c <_printf_i+0xe8>
 800baa4:	881d      	ldrh	r5, [r3, #0]
 800baa6:	4854      	ldr	r0, [pc, #336]	; (800bbf8 <_printf_i+0x244>)
 800baa8:	2f6f      	cmp	r7, #111	; 0x6f
 800baaa:	bf0c      	ite	eq
 800baac:	2308      	moveq	r3, #8
 800baae:	230a      	movne	r3, #10
 800bab0:	2100      	movs	r1, #0
 800bab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bab6:	6866      	ldr	r6, [r4, #4]
 800bab8:	60a6      	str	r6, [r4, #8]
 800baba:	2e00      	cmp	r6, #0
 800babc:	bfa2      	ittt	ge
 800babe:	6821      	ldrge	r1, [r4, #0]
 800bac0:	f021 0104 	bicge.w	r1, r1, #4
 800bac4:	6021      	strge	r1, [r4, #0]
 800bac6:	b90d      	cbnz	r5, 800bacc <_printf_i+0x118>
 800bac8:	2e00      	cmp	r6, #0
 800baca:	d04d      	beq.n	800bb68 <_printf_i+0x1b4>
 800bacc:	4616      	mov	r6, r2
 800bace:	fbb5 f1f3 	udiv	r1, r5, r3
 800bad2:	fb03 5711 	mls	r7, r3, r1, r5
 800bad6:	5dc7      	ldrb	r7, [r0, r7]
 800bad8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800badc:	462f      	mov	r7, r5
 800bade:	42bb      	cmp	r3, r7
 800bae0:	460d      	mov	r5, r1
 800bae2:	d9f4      	bls.n	800bace <_printf_i+0x11a>
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	d10b      	bne.n	800bb00 <_printf_i+0x14c>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	07df      	lsls	r7, r3, #31
 800baec:	d508      	bpl.n	800bb00 <_printf_i+0x14c>
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	6861      	ldr	r1, [r4, #4]
 800baf2:	4299      	cmp	r1, r3
 800baf4:	bfde      	ittt	le
 800baf6:	2330      	movle	r3, #48	; 0x30
 800baf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bafc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb00:	1b92      	subs	r2, r2, r6
 800bb02:	6122      	str	r2, [r4, #16]
 800bb04:	f8cd a000 	str.w	sl, [sp]
 800bb08:	464b      	mov	r3, r9
 800bb0a:	aa03      	add	r2, sp, #12
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4640      	mov	r0, r8
 800bb10:	f7ff fee2 	bl	800b8d8 <_printf_common>
 800bb14:	3001      	adds	r0, #1
 800bb16:	d14c      	bne.n	800bbb2 <_printf_i+0x1fe>
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	b004      	add	sp, #16
 800bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb22:	4835      	ldr	r0, [pc, #212]	; (800bbf8 <_printf_i+0x244>)
 800bb24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	680e      	ldr	r6, [r1, #0]
 800bb2c:	061f      	lsls	r7, r3, #24
 800bb2e:	f856 5b04 	ldr.w	r5, [r6], #4
 800bb32:	600e      	str	r6, [r1, #0]
 800bb34:	d514      	bpl.n	800bb60 <_printf_i+0x1ac>
 800bb36:	07d9      	lsls	r1, r3, #31
 800bb38:	bf44      	itt	mi
 800bb3a:	f043 0320 	orrmi.w	r3, r3, #32
 800bb3e:	6023      	strmi	r3, [r4, #0]
 800bb40:	b91d      	cbnz	r5, 800bb4a <_printf_i+0x196>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	f023 0320 	bic.w	r3, r3, #32
 800bb48:	6023      	str	r3, [r4, #0]
 800bb4a:	2310      	movs	r3, #16
 800bb4c:	e7b0      	b.n	800bab0 <_printf_i+0xfc>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	f043 0320 	orr.w	r3, r3, #32
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	2378      	movs	r3, #120	; 0x78
 800bb58:	4828      	ldr	r0, [pc, #160]	; (800bbfc <_printf_i+0x248>)
 800bb5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb5e:	e7e3      	b.n	800bb28 <_printf_i+0x174>
 800bb60:	065e      	lsls	r6, r3, #25
 800bb62:	bf48      	it	mi
 800bb64:	b2ad      	uxthmi	r5, r5
 800bb66:	e7e6      	b.n	800bb36 <_printf_i+0x182>
 800bb68:	4616      	mov	r6, r2
 800bb6a:	e7bb      	b.n	800bae4 <_printf_i+0x130>
 800bb6c:	680b      	ldr	r3, [r1, #0]
 800bb6e:	6826      	ldr	r6, [r4, #0]
 800bb70:	6960      	ldr	r0, [r4, #20]
 800bb72:	1d1d      	adds	r5, r3, #4
 800bb74:	600d      	str	r5, [r1, #0]
 800bb76:	0635      	lsls	r5, r6, #24
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	d501      	bpl.n	800bb80 <_printf_i+0x1cc>
 800bb7c:	6018      	str	r0, [r3, #0]
 800bb7e:	e002      	b.n	800bb86 <_printf_i+0x1d2>
 800bb80:	0671      	lsls	r1, r6, #25
 800bb82:	d5fb      	bpl.n	800bb7c <_printf_i+0x1c8>
 800bb84:	8018      	strh	r0, [r3, #0]
 800bb86:	2300      	movs	r3, #0
 800bb88:	6123      	str	r3, [r4, #16]
 800bb8a:	4616      	mov	r6, r2
 800bb8c:	e7ba      	b.n	800bb04 <_printf_i+0x150>
 800bb8e:	680b      	ldr	r3, [r1, #0]
 800bb90:	1d1a      	adds	r2, r3, #4
 800bb92:	600a      	str	r2, [r1, #0]
 800bb94:	681e      	ldr	r6, [r3, #0]
 800bb96:	6862      	ldr	r2, [r4, #4]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7f4 fb28 	bl	80001f0 <memchr>
 800bba0:	b108      	cbz	r0, 800bba6 <_printf_i+0x1f2>
 800bba2:	1b80      	subs	r0, r0, r6
 800bba4:	6060      	str	r0, [r4, #4]
 800bba6:	6863      	ldr	r3, [r4, #4]
 800bba8:	6123      	str	r3, [r4, #16]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbb0:	e7a8      	b.n	800bb04 <_printf_i+0x150>
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	4632      	mov	r2, r6
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	4640      	mov	r0, r8
 800bbba:	47d0      	blx	sl
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d0ab      	beq.n	800bb18 <_printf_i+0x164>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	079b      	lsls	r3, r3, #30
 800bbc4:	d413      	bmi.n	800bbee <_printf_i+0x23a>
 800bbc6:	68e0      	ldr	r0, [r4, #12]
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	4298      	cmp	r0, r3
 800bbcc:	bfb8      	it	lt
 800bbce:	4618      	movlt	r0, r3
 800bbd0:	e7a4      	b.n	800bb1c <_printf_i+0x168>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	4632      	mov	r2, r6
 800bbd6:	4649      	mov	r1, r9
 800bbd8:	4640      	mov	r0, r8
 800bbda:	47d0      	blx	sl
 800bbdc:	3001      	adds	r0, #1
 800bbde:	d09b      	beq.n	800bb18 <_printf_i+0x164>
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	68e3      	ldr	r3, [r4, #12]
 800bbe4:	9903      	ldr	r1, [sp, #12]
 800bbe6:	1a5b      	subs	r3, r3, r1
 800bbe8:	42ab      	cmp	r3, r5
 800bbea:	dcf2      	bgt.n	800bbd2 <_printf_i+0x21e>
 800bbec:	e7eb      	b.n	800bbc6 <_printf_i+0x212>
 800bbee:	2500      	movs	r5, #0
 800bbf0:	f104 0619 	add.w	r6, r4, #25
 800bbf4:	e7f5      	b.n	800bbe2 <_printf_i+0x22e>
 800bbf6:	bf00      	nop
 800bbf8:	0800e17c 	.word	0x0800e17c
 800bbfc:	0800e18d 	.word	0x0800e18d

0800bc00 <iprintf>:
 800bc00:	b40f      	push	{r0, r1, r2, r3}
 800bc02:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <iprintf+0x2c>)
 800bc04:	b513      	push	{r0, r1, r4, lr}
 800bc06:	681c      	ldr	r4, [r3, #0]
 800bc08:	b124      	cbz	r4, 800bc14 <iprintf+0x14>
 800bc0a:	69a3      	ldr	r3, [r4, #24]
 800bc0c:	b913      	cbnz	r3, 800bc14 <iprintf+0x14>
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f001 f8ec 	bl	800cdec <__sinit>
 800bc14:	ab05      	add	r3, sp, #20
 800bc16:	9a04      	ldr	r2, [sp, #16]
 800bc18:	68a1      	ldr	r1, [r4, #8]
 800bc1a:	9301      	str	r3, [sp, #4]
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f001 fe59 	bl	800d8d4 <_vfiprintf_r>
 800bc22:	b002      	add	sp, #8
 800bc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc28:	b004      	add	sp, #16
 800bc2a:	4770      	bx	lr
 800bc2c:	2000003c 	.word	0x2000003c

0800bc30 <_puts_r>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	460e      	mov	r6, r1
 800bc34:	4605      	mov	r5, r0
 800bc36:	b118      	cbz	r0, 800bc40 <_puts_r+0x10>
 800bc38:	6983      	ldr	r3, [r0, #24]
 800bc3a:	b90b      	cbnz	r3, 800bc40 <_puts_r+0x10>
 800bc3c:	f001 f8d6 	bl	800cdec <__sinit>
 800bc40:	69ab      	ldr	r3, [r5, #24]
 800bc42:	68ac      	ldr	r4, [r5, #8]
 800bc44:	b913      	cbnz	r3, 800bc4c <_puts_r+0x1c>
 800bc46:	4628      	mov	r0, r5
 800bc48:	f001 f8d0 	bl	800cdec <__sinit>
 800bc4c:	4b2c      	ldr	r3, [pc, #176]	; (800bd00 <_puts_r+0xd0>)
 800bc4e:	429c      	cmp	r4, r3
 800bc50:	d120      	bne.n	800bc94 <_puts_r+0x64>
 800bc52:	686c      	ldr	r4, [r5, #4]
 800bc54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc56:	07db      	lsls	r3, r3, #31
 800bc58:	d405      	bmi.n	800bc66 <_puts_r+0x36>
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	0598      	lsls	r0, r3, #22
 800bc5e:	d402      	bmi.n	800bc66 <_puts_r+0x36>
 800bc60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc62:	f001 f966 	bl	800cf32 <__retarget_lock_acquire_recursive>
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	0719      	lsls	r1, r3, #28
 800bc6a:	d51d      	bpl.n	800bca8 <_puts_r+0x78>
 800bc6c:	6923      	ldr	r3, [r4, #16]
 800bc6e:	b1db      	cbz	r3, 800bca8 <_puts_r+0x78>
 800bc70:	3e01      	subs	r6, #1
 800bc72:	68a3      	ldr	r3, [r4, #8]
 800bc74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	60a3      	str	r3, [r4, #8]
 800bc7c:	bb39      	cbnz	r1, 800bcce <_puts_r+0x9e>
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	da38      	bge.n	800bcf4 <_puts_r+0xc4>
 800bc82:	4622      	mov	r2, r4
 800bc84:	210a      	movs	r1, #10
 800bc86:	4628      	mov	r0, r5
 800bc88:	f000 f85c 	bl	800bd44 <__swbuf_r>
 800bc8c:	3001      	adds	r0, #1
 800bc8e:	d011      	beq.n	800bcb4 <_puts_r+0x84>
 800bc90:	250a      	movs	r5, #10
 800bc92:	e011      	b.n	800bcb8 <_puts_r+0x88>
 800bc94:	4b1b      	ldr	r3, [pc, #108]	; (800bd04 <_puts_r+0xd4>)
 800bc96:	429c      	cmp	r4, r3
 800bc98:	d101      	bne.n	800bc9e <_puts_r+0x6e>
 800bc9a:	68ac      	ldr	r4, [r5, #8]
 800bc9c:	e7da      	b.n	800bc54 <_puts_r+0x24>
 800bc9e:	4b1a      	ldr	r3, [pc, #104]	; (800bd08 <_puts_r+0xd8>)
 800bca0:	429c      	cmp	r4, r3
 800bca2:	bf08      	it	eq
 800bca4:	68ec      	ldreq	r4, [r5, #12]
 800bca6:	e7d5      	b.n	800bc54 <_puts_r+0x24>
 800bca8:	4621      	mov	r1, r4
 800bcaa:	4628      	mov	r0, r5
 800bcac:	f000 f89c 	bl	800bde8 <__swsetup_r>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	d0dd      	beq.n	800bc70 <_puts_r+0x40>
 800bcb4:	f04f 35ff 	mov.w	r5, #4294967295
 800bcb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcba:	07da      	lsls	r2, r3, #31
 800bcbc:	d405      	bmi.n	800bcca <_puts_r+0x9a>
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	059b      	lsls	r3, r3, #22
 800bcc2:	d402      	bmi.n	800bcca <_puts_r+0x9a>
 800bcc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcc6:	f001 f935 	bl	800cf34 <__retarget_lock_release_recursive>
 800bcca:	4628      	mov	r0, r5
 800bccc:	bd70      	pop	{r4, r5, r6, pc}
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	da04      	bge.n	800bcdc <_puts_r+0xac>
 800bcd2:	69a2      	ldr	r2, [r4, #24]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	dc06      	bgt.n	800bce6 <_puts_r+0xb6>
 800bcd8:	290a      	cmp	r1, #10
 800bcda:	d004      	beq.n	800bce6 <_puts_r+0xb6>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	6022      	str	r2, [r4, #0]
 800bce2:	7019      	strb	r1, [r3, #0]
 800bce4:	e7c5      	b.n	800bc72 <_puts_r+0x42>
 800bce6:	4622      	mov	r2, r4
 800bce8:	4628      	mov	r0, r5
 800bcea:	f000 f82b 	bl	800bd44 <__swbuf_r>
 800bcee:	3001      	adds	r0, #1
 800bcf0:	d1bf      	bne.n	800bc72 <_puts_r+0x42>
 800bcf2:	e7df      	b.n	800bcb4 <_puts_r+0x84>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	250a      	movs	r5, #10
 800bcf8:	1c5a      	adds	r2, r3, #1
 800bcfa:	6022      	str	r2, [r4, #0]
 800bcfc:	701d      	strb	r5, [r3, #0]
 800bcfe:	e7db      	b.n	800bcb8 <_puts_r+0x88>
 800bd00:	0800e254 	.word	0x0800e254
 800bd04:	0800e274 	.word	0x0800e274
 800bd08:	0800e234 	.word	0x0800e234

0800bd0c <puts>:
 800bd0c:	4b02      	ldr	r3, [pc, #8]	; (800bd18 <puts+0xc>)
 800bd0e:	4601      	mov	r1, r0
 800bd10:	6818      	ldr	r0, [r3, #0]
 800bd12:	f7ff bf8d 	b.w	800bc30 <_puts_r>
 800bd16:	bf00      	nop
 800bd18:	2000003c 	.word	0x2000003c

0800bd1c <strncpy>:
 800bd1c:	b510      	push	{r4, lr}
 800bd1e:	3901      	subs	r1, #1
 800bd20:	4603      	mov	r3, r0
 800bd22:	b132      	cbz	r2, 800bd32 <strncpy+0x16>
 800bd24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bd28:	f803 4b01 	strb.w	r4, [r3], #1
 800bd2c:	3a01      	subs	r2, #1
 800bd2e:	2c00      	cmp	r4, #0
 800bd30:	d1f7      	bne.n	800bd22 <strncpy+0x6>
 800bd32:	441a      	add	r2, r3
 800bd34:	2100      	movs	r1, #0
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d100      	bne.n	800bd3c <strncpy+0x20>
 800bd3a:	bd10      	pop	{r4, pc}
 800bd3c:	f803 1b01 	strb.w	r1, [r3], #1
 800bd40:	e7f9      	b.n	800bd36 <strncpy+0x1a>
	...

0800bd44 <__swbuf_r>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	460e      	mov	r6, r1
 800bd48:	4614      	mov	r4, r2
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	b118      	cbz	r0, 800bd56 <__swbuf_r+0x12>
 800bd4e:	6983      	ldr	r3, [r0, #24]
 800bd50:	b90b      	cbnz	r3, 800bd56 <__swbuf_r+0x12>
 800bd52:	f001 f84b 	bl	800cdec <__sinit>
 800bd56:	4b21      	ldr	r3, [pc, #132]	; (800bddc <__swbuf_r+0x98>)
 800bd58:	429c      	cmp	r4, r3
 800bd5a:	d12b      	bne.n	800bdb4 <__swbuf_r+0x70>
 800bd5c:	686c      	ldr	r4, [r5, #4]
 800bd5e:	69a3      	ldr	r3, [r4, #24]
 800bd60:	60a3      	str	r3, [r4, #8]
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	071a      	lsls	r2, r3, #28
 800bd66:	d52f      	bpl.n	800bdc8 <__swbuf_r+0x84>
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	b36b      	cbz	r3, 800bdc8 <__swbuf_r+0x84>
 800bd6c:	6923      	ldr	r3, [r4, #16]
 800bd6e:	6820      	ldr	r0, [r4, #0]
 800bd70:	1ac0      	subs	r0, r0, r3
 800bd72:	6963      	ldr	r3, [r4, #20]
 800bd74:	b2f6      	uxtb	r6, r6
 800bd76:	4283      	cmp	r3, r0
 800bd78:	4637      	mov	r7, r6
 800bd7a:	dc04      	bgt.n	800bd86 <__swbuf_r+0x42>
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	4628      	mov	r0, r5
 800bd80:	f000 ffa0 	bl	800ccc4 <_fflush_r>
 800bd84:	bb30      	cbnz	r0, 800bdd4 <__swbuf_r+0x90>
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	60a3      	str	r3, [r4, #8]
 800bd8c:	6823      	ldr	r3, [r4, #0]
 800bd8e:	1c5a      	adds	r2, r3, #1
 800bd90:	6022      	str	r2, [r4, #0]
 800bd92:	701e      	strb	r6, [r3, #0]
 800bd94:	6963      	ldr	r3, [r4, #20]
 800bd96:	3001      	adds	r0, #1
 800bd98:	4283      	cmp	r3, r0
 800bd9a:	d004      	beq.n	800bda6 <__swbuf_r+0x62>
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	07db      	lsls	r3, r3, #31
 800bda0:	d506      	bpl.n	800bdb0 <__swbuf_r+0x6c>
 800bda2:	2e0a      	cmp	r6, #10
 800bda4:	d104      	bne.n	800bdb0 <__swbuf_r+0x6c>
 800bda6:	4621      	mov	r1, r4
 800bda8:	4628      	mov	r0, r5
 800bdaa:	f000 ff8b 	bl	800ccc4 <_fflush_r>
 800bdae:	b988      	cbnz	r0, 800bdd4 <__swbuf_r+0x90>
 800bdb0:	4638      	mov	r0, r7
 800bdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb4:	4b0a      	ldr	r3, [pc, #40]	; (800bde0 <__swbuf_r+0x9c>)
 800bdb6:	429c      	cmp	r4, r3
 800bdb8:	d101      	bne.n	800bdbe <__swbuf_r+0x7a>
 800bdba:	68ac      	ldr	r4, [r5, #8]
 800bdbc:	e7cf      	b.n	800bd5e <__swbuf_r+0x1a>
 800bdbe:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <__swbuf_r+0xa0>)
 800bdc0:	429c      	cmp	r4, r3
 800bdc2:	bf08      	it	eq
 800bdc4:	68ec      	ldreq	r4, [r5, #12]
 800bdc6:	e7ca      	b.n	800bd5e <__swbuf_r+0x1a>
 800bdc8:	4621      	mov	r1, r4
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f000 f80c 	bl	800bde8 <__swsetup_r>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d0cb      	beq.n	800bd6c <__swbuf_r+0x28>
 800bdd4:	f04f 37ff 	mov.w	r7, #4294967295
 800bdd8:	e7ea      	b.n	800bdb0 <__swbuf_r+0x6c>
 800bdda:	bf00      	nop
 800bddc:	0800e254 	.word	0x0800e254
 800bde0:	0800e274 	.word	0x0800e274
 800bde4:	0800e234 	.word	0x0800e234

0800bde8 <__swsetup_r>:
 800bde8:	4b32      	ldr	r3, [pc, #200]	; (800beb4 <__swsetup_r+0xcc>)
 800bdea:	b570      	push	{r4, r5, r6, lr}
 800bdec:	681d      	ldr	r5, [r3, #0]
 800bdee:	4606      	mov	r6, r0
 800bdf0:	460c      	mov	r4, r1
 800bdf2:	b125      	cbz	r5, 800bdfe <__swsetup_r+0x16>
 800bdf4:	69ab      	ldr	r3, [r5, #24]
 800bdf6:	b913      	cbnz	r3, 800bdfe <__swsetup_r+0x16>
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	f000 fff7 	bl	800cdec <__sinit>
 800bdfe:	4b2e      	ldr	r3, [pc, #184]	; (800beb8 <__swsetup_r+0xd0>)
 800be00:	429c      	cmp	r4, r3
 800be02:	d10f      	bne.n	800be24 <__swsetup_r+0x3c>
 800be04:	686c      	ldr	r4, [r5, #4]
 800be06:	89a3      	ldrh	r3, [r4, #12]
 800be08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be0c:	0719      	lsls	r1, r3, #28
 800be0e:	d42c      	bmi.n	800be6a <__swsetup_r+0x82>
 800be10:	06dd      	lsls	r5, r3, #27
 800be12:	d411      	bmi.n	800be38 <__swsetup_r+0x50>
 800be14:	2309      	movs	r3, #9
 800be16:	6033      	str	r3, [r6, #0]
 800be18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be1c:	81a3      	strh	r3, [r4, #12]
 800be1e:	f04f 30ff 	mov.w	r0, #4294967295
 800be22:	e03e      	b.n	800bea2 <__swsetup_r+0xba>
 800be24:	4b25      	ldr	r3, [pc, #148]	; (800bebc <__swsetup_r+0xd4>)
 800be26:	429c      	cmp	r4, r3
 800be28:	d101      	bne.n	800be2e <__swsetup_r+0x46>
 800be2a:	68ac      	ldr	r4, [r5, #8]
 800be2c:	e7eb      	b.n	800be06 <__swsetup_r+0x1e>
 800be2e:	4b24      	ldr	r3, [pc, #144]	; (800bec0 <__swsetup_r+0xd8>)
 800be30:	429c      	cmp	r4, r3
 800be32:	bf08      	it	eq
 800be34:	68ec      	ldreq	r4, [r5, #12]
 800be36:	e7e6      	b.n	800be06 <__swsetup_r+0x1e>
 800be38:	0758      	lsls	r0, r3, #29
 800be3a:	d512      	bpl.n	800be62 <__swsetup_r+0x7a>
 800be3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be3e:	b141      	cbz	r1, 800be52 <__swsetup_r+0x6a>
 800be40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be44:	4299      	cmp	r1, r3
 800be46:	d002      	beq.n	800be4e <__swsetup_r+0x66>
 800be48:	4630      	mov	r0, r6
 800be4a:	f001 fc6f 	bl	800d72c <_free_r>
 800be4e:	2300      	movs	r3, #0
 800be50:	6363      	str	r3, [r4, #52]	; 0x34
 800be52:	89a3      	ldrh	r3, [r4, #12]
 800be54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be58:	81a3      	strh	r3, [r4, #12]
 800be5a:	2300      	movs	r3, #0
 800be5c:	6063      	str	r3, [r4, #4]
 800be5e:	6923      	ldr	r3, [r4, #16]
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	89a3      	ldrh	r3, [r4, #12]
 800be64:	f043 0308 	orr.w	r3, r3, #8
 800be68:	81a3      	strh	r3, [r4, #12]
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	b94b      	cbnz	r3, 800be82 <__swsetup_r+0x9a>
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be78:	d003      	beq.n	800be82 <__swsetup_r+0x9a>
 800be7a:	4621      	mov	r1, r4
 800be7c:	4630      	mov	r0, r6
 800be7e:	f001 f87f 	bl	800cf80 <__smakebuf_r>
 800be82:	89a0      	ldrh	r0, [r4, #12]
 800be84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be88:	f010 0301 	ands.w	r3, r0, #1
 800be8c:	d00a      	beq.n	800bea4 <__swsetup_r+0xbc>
 800be8e:	2300      	movs	r3, #0
 800be90:	60a3      	str	r3, [r4, #8]
 800be92:	6963      	ldr	r3, [r4, #20]
 800be94:	425b      	negs	r3, r3
 800be96:	61a3      	str	r3, [r4, #24]
 800be98:	6923      	ldr	r3, [r4, #16]
 800be9a:	b943      	cbnz	r3, 800beae <__swsetup_r+0xc6>
 800be9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bea0:	d1ba      	bne.n	800be18 <__swsetup_r+0x30>
 800bea2:	bd70      	pop	{r4, r5, r6, pc}
 800bea4:	0781      	lsls	r1, r0, #30
 800bea6:	bf58      	it	pl
 800bea8:	6963      	ldrpl	r3, [r4, #20]
 800beaa:	60a3      	str	r3, [r4, #8]
 800beac:	e7f4      	b.n	800be98 <__swsetup_r+0xb0>
 800beae:	2000      	movs	r0, #0
 800beb0:	e7f7      	b.n	800bea2 <__swsetup_r+0xba>
 800beb2:	bf00      	nop
 800beb4:	2000003c 	.word	0x2000003c
 800beb8:	0800e254 	.word	0x0800e254
 800bebc:	0800e274 	.word	0x0800e274
 800bec0:	0800e234 	.word	0x0800e234

0800bec4 <quorem>:
 800bec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec8:	6903      	ldr	r3, [r0, #16]
 800beca:	690c      	ldr	r4, [r1, #16]
 800becc:	42a3      	cmp	r3, r4
 800bece:	4607      	mov	r7, r0
 800bed0:	f2c0 8081 	blt.w	800bfd6 <quorem+0x112>
 800bed4:	3c01      	subs	r4, #1
 800bed6:	f101 0814 	add.w	r8, r1, #20
 800beda:	f100 0514 	add.w	r5, r0, #20
 800bede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bee2:	9301      	str	r3, [sp, #4]
 800bee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800beec:	3301      	adds	r3, #1
 800beee:	429a      	cmp	r2, r3
 800bef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bef8:	fbb2 f6f3 	udiv	r6, r2, r3
 800befc:	d331      	bcc.n	800bf62 <quorem+0x9e>
 800befe:	f04f 0e00 	mov.w	lr, #0
 800bf02:	4640      	mov	r0, r8
 800bf04:	46ac      	mov	ip, r5
 800bf06:	46f2      	mov	sl, lr
 800bf08:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf0c:	b293      	uxth	r3, r2
 800bf0e:	fb06 e303 	mla	r3, r6, r3, lr
 800bf12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	ebaa 0303 	sub.w	r3, sl, r3
 800bf1c:	0c12      	lsrs	r2, r2, #16
 800bf1e:	f8dc a000 	ldr.w	sl, [ip]
 800bf22:	fb06 e202 	mla	r2, r6, r2, lr
 800bf26:	fa13 f38a 	uxtah	r3, r3, sl
 800bf2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf2e:	fa1f fa82 	uxth.w	sl, r2
 800bf32:	f8dc 2000 	ldr.w	r2, [ip]
 800bf36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bf3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf44:	4581      	cmp	r9, r0
 800bf46:	f84c 3b04 	str.w	r3, [ip], #4
 800bf4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf4e:	d2db      	bcs.n	800bf08 <quorem+0x44>
 800bf50:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf54:	b92b      	cbnz	r3, 800bf62 <quorem+0x9e>
 800bf56:	9b01      	ldr	r3, [sp, #4]
 800bf58:	3b04      	subs	r3, #4
 800bf5a:	429d      	cmp	r5, r3
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	d32e      	bcc.n	800bfbe <quorem+0xfa>
 800bf60:	613c      	str	r4, [r7, #16]
 800bf62:	4638      	mov	r0, r7
 800bf64:	f001 fad2 	bl	800d50c <__mcmp>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	db24      	blt.n	800bfb6 <quorem+0xf2>
 800bf6c:	3601      	adds	r6, #1
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f04f 0c00 	mov.w	ip, #0
 800bf74:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf78:	f8d0 e000 	ldr.w	lr, [r0]
 800bf7c:	b293      	uxth	r3, r2
 800bf7e:	ebac 0303 	sub.w	r3, ip, r3
 800bf82:	0c12      	lsrs	r2, r2, #16
 800bf84:	fa13 f38e 	uxtah	r3, r3, lr
 800bf88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf96:	45c1      	cmp	r9, r8
 800bf98:	f840 3b04 	str.w	r3, [r0], #4
 800bf9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bfa0:	d2e8      	bcs.n	800bf74 <quorem+0xb0>
 800bfa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfaa:	b922      	cbnz	r2, 800bfb6 <quorem+0xf2>
 800bfac:	3b04      	subs	r3, #4
 800bfae:	429d      	cmp	r5, r3
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	d30a      	bcc.n	800bfca <quorem+0x106>
 800bfb4:	613c      	str	r4, [r7, #16]
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	b003      	add	sp, #12
 800bfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfbe:	6812      	ldr	r2, [r2, #0]
 800bfc0:	3b04      	subs	r3, #4
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	d1cc      	bne.n	800bf60 <quorem+0x9c>
 800bfc6:	3c01      	subs	r4, #1
 800bfc8:	e7c7      	b.n	800bf5a <quorem+0x96>
 800bfca:	6812      	ldr	r2, [r2, #0]
 800bfcc:	3b04      	subs	r3, #4
 800bfce:	2a00      	cmp	r2, #0
 800bfd0:	d1f0      	bne.n	800bfb4 <quorem+0xf0>
 800bfd2:	3c01      	subs	r4, #1
 800bfd4:	e7eb      	b.n	800bfae <quorem+0xea>
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	e7ee      	b.n	800bfb8 <quorem+0xf4>
 800bfda:	0000      	movs	r0, r0
 800bfdc:	0000      	movs	r0, r0
	...

0800bfe0 <_dtoa_r>:
 800bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe4:	ed2d 8b02 	vpush	{d8}
 800bfe8:	ec57 6b10 	vmov	r6, r7, d0
 800bfec:	b095      	sub	sp, #84	; 0x54
 800bfee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bff4:	9105      	str	r1, [sp, #20]
 800bff6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bffa:	4604      	mov	r4, r0
 800bffc:	9209      	str	r2, [sp, #36]	; 0x24
 800bffe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c000:	b975      	cbnz	r5, 800c020 <_dtoa_r+0x40>
 800c002:	2010      	movs	r0, #16
 800c004:	f000 fffc 	bl	800d000 <malloc>
 800c008:	4602      	mov	r2, r0
 800c00a:	6260      	str	r0, [r4, #36]	; 0x24
 800c00c:	b920      	cbnz	r0, 800c018 <_dtoa_r+0x38>
 800c00e:	4bb2      	ldr	r3, [pc, #712]	; (800c2d8 <_dtoa_r+0x2f8>)
 800c010:	21ea      	movs	r1, #234	; 0xea
 800c012:	48b2      	ldr	r0, [pc, #712]	; (800c2dc <_dtoa_r+0x2fc>)
 800c014:	f001 fdf4 	bl	800dc00 <__assert_func>
 800c018:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c01c:	6005      	str	r5, [r0, #0]
 800c01e:	60c5      	str	r5, [r0, #12]
 800c020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c022:	6819      	ldr	r1, [r3, #0]
 800c024:	b151      	cbz	r1, 800c03c <_dtoa_r+0x5c>
 800c026:	685a      	ldr	r2, [r3, #4]
 800c028:	604a      	str	r2, [r1, #4]
 800c02a:	2301      	movs	r3, #1
 800c02c:	4093      	lsls	r3, r2
 800c02e:	608b      	str	r3, [r1, #8]
 800c030:	4620      	mov	r0, r4
 800c032:	f001 f82d 	bl	800d090 <_Bfree>
 800c036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c038:	2200      	movs	r2, #0
 800c03a:	601a      	str	r2, [r3, #0]
 800c03c:	1e3b      	subs	r3, r7, #0
 800c03e:	bfb9      	ittee	lt
 800c040:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c044:	9303      	strlt	r3, [sp, #12]
 800c046:	2300      	movge	r3, #0
 800c048:	f8c8 3000 	strge.w	r3, [r8]
 800c04c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c050:	4ba3      	ldr	r3, [pc, #652]	; (800c2e0 <_dtoa_r+0x300>)
 800c052:	bfbc      	itt	lt
 800c054:	2201      	movlt	r2, #1
 800c056:	f8c8 2000 	strlt.w	r2, [r8]
 800c05a:	ea33 0309 	bics.w	r3, r3, r9
 800c05e:	d11b      	bne.n	800c098 <_dtoa_r+0xb8>
 800c060:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c062:	f242 730f 	movw	r3, #9999	; 0x270f
 800c066:	6013      	str	r3, [r2, #0]
 800c068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c06c:	4333      	orrs	r3, r6
 800c06e:	f000 857a 	beq.w	800cb66 <_dtoa_r+0xb86>
 800c072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c074:	b963      	cbnz	r3, 800c090 <_dtoa_r+0xb0>
 800c076:	4b9b      	ldr	r3, [pc, #620]	; (800c2e4 <_dtoa_r+0x304>)
 800c078:	e024      	b.n	800c0c4 <_dtoa_r+0xe4>
 800c07a:	4b9b      	ldr	r3, [pc, #620]	; (800c2e8 <_dtoa_r+0x308>)
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	3308      	adds	r3, #8
 800c080:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c082:	6013      	str	r3, [r2, #0]
 800c084:	9800      	ldr	r0, [sp, #0]
 800c086:	b015      	add	sp, #84	; 0x54
 800c088:	ecbd 8b02 	vpop	{d8}
 800c08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c090:	4b94      	ldr	r3, [pc, #592]	; (800c2e4 <_dtoa_r+0x304>)
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	3303      	adds	r3, #3
 800c096:	e7f3      	b.n	800c080 <_dtoa_r+0xa0>
 800c098:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c09c:	2200      	movs	r2, #0
 800c09e:	ec51 0b17 	vmov	r0, r1, d7
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c0a8:	f7f4 fd16 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0ac:	4680      	mov	r8, r0
 800c0ae:	b158      	cbz	r0, 800c0c8 <_dtoa_r+0xe8>
 800c0b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	6013      	str	r3, [r2, #0]
 800c0b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 8551 	beq.w	800cb60 <_dtoa_r+0xb80>
 800c0be:	488b      	ldr	r0, [pc, #556]	; (800c2ec <_dtoa_r+0x30c>)
 800c0c0:	6018      	str	r0, [r3, #0]
 800c0c2:	1e43      	subs	r3, r0, #1
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	e7dd      	b.n	800c084 <_dtoa_r+0xa4>
 800c0c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c0cc:	aa12      	add	r2, sp, #72	; 0x48
 800c0ce:	a913      	add	r1, sp, #76	; 0x4c
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f001 fabf 	bl	800d654 <__d2b>
 800c0d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0da:	4683      	mov	fp, r0
 800c0dc:	2d00      	cmp	r5, #0
 800c0de:	d07c      	beq.n	800c1da <_dtoa_r+0x1fa>
 800c0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c0e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c0ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c0f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c0f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c0fa:	4b7d      	ldr	r3, [pc, #500]	; (800c2f0 <_dtoa_r+0x310>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	4630      	mov	r0, r6
 800c100:	4639      	mov	r1, r7
 800c102:	f7f4 f8c9 	bl	8000298 <__aeabi_dsub>
 800c106:	a36e      	add	r3, pc, #440	; (adr r3, 800c2c0 <_dtoa_r+0x2e0>)
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	f7f4 fa7c 	bl	8000608 <__aeabi_dmul>
 800c110:	a36d      	add	r3, pc, #436	; (adr r3, 800c2c8 <_dtoa_r+0x2e8>)
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	f7f4 f8c1 	bl	800029c <__adddf3>
 800c11a:	4606      	mov	r6, r0
 800c11c:	4628      	mov	r0, r5
 800c11e:	460f      	mov	r7, r1
 800c120:	f7f4 fa08 	bl	8000534 <__aeabi_i2d>
 800c124:	a36a      	add	r3, pc, #424	; (adr r3, 800c2d0 <_dtoa_r+0x2f0>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f7f4 fa6d 	bl	8000608 <__aeabi_dmul>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4630      	mov	r0, r6
 800c134:	4639      	mov	r1, r7
 800c136:	f7f4 f8b1 	bl	800029c <__adddf3>
 800c13a:	4606      	mov	r6, r0
 800c13c:	460f      	mov	r7, r1
 800c13e:	f7f4 fd13 	bl	8000b68 <__aeabi_d2iz>
 800c142:	2200      	movs	r2, #0
 800c144:	4682      	mov	sl, r0
 800c146:	2300      	movs	r3, #0
 800c148:	4630      	mov	r0, r6
 800c14a:	4639      	mov	r1, r7
 800c14c:	f7f4 fcce 	bl	8000aec <__aeabi_dcmplt>
 800c150:	b148      	cbz	r0, 800c166 <_dtoa_r+0x186>
 800c152:	4650      	mov	r0, sl
 800c154:	f7f4 f9ee 	bl	8000534 <__aeabi_i2d>
 800c158:	4632      	mov	r2, r6
 800c15a:	463b      	mov	r3, r7
 800c15c:	f7f4 fcbc 	bl	8000ad8 <__aeabi_dcmpeq>
 800c160:	b908      	cbnz	r0, 800c166 <_dtoa_r+0x186>
 800c162:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c166:	f1ba 0f16 	cmp.w	sl, #22
 800c16a:	d854      	bhi.n	800c216 <_dtoa_r+0x236>
 800c16c:	4b61      	ldr	r3, [pc, #388]	; (800c2f4 <_dtoa_r+0x314>)
 800c16e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c17a:	f7f4 fcb7 	bl	8000aec <__aeabi_dcmplt>
 800c17e:	2800      	cmp	r0, #0
 800c180:	d04b      	beq.n	800c21a <_dtoa_r+0x23a>
 800c182:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c186:	2300      	movs	r3, #0
 800c188:	930e      	str	r3, [sp, #56]	; 0x38
 800c18a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c18c:	1b5d      	subs	r5, r3, r5
 800c18e:	1e6b      	subs	r3, r5, #1
 800c190:	9304      	str	r3, [sp, #16]
 800c192:	bf43      	ittte	mi
 800c194:	2300      	movmi	r3, #0
 800c196:	f1c5 0801 	rsbmi	r8, r5, #1
 800c19a:	9304      	strmi	r3, [sp, #16]
 800c19c:	f04f 0800 	movpl.w	r8, #0
 800c1a0:	f1ba 0f00 	cmp.w	sl, #0
 800c1a4:	db3b      	blt.n	800c21e <_dtoa_r+0x23e>
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c1ac:	4453      	add	r3, sl
 800c1ae:	9304      	str	r3, [sp, #16]
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	9306      	str	r3, [sp, #24]
 800c1b4:	9b05      	ldr	r3, [sp, #20]
 800c1b6:	2b09      	cmp	r3, #9
 800c1b8:	d869      	bhi.n	800c28e <_dtoa_r+0x2ae>
 800c1ba:	2b05      	cmp	r3, #5
 800c1bc:	bfc4      	itt	gt
 800c1be:	3b04      	subgt	r3, #4
 800c1c0:	9305      	strgt	r3, [sp, #20]
 800c1c2:	9b05      	ldr	r3, [sp, #20]
 800c1c4:	f1a3 0302 	sub.w	r3, r3, #2
 800c1c8:	bfcc      	ite	gt
 800c1ca:	2500      	movgt	r5, #0
 800c1cc:	2501      	movle	r5, #1
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d869      	bhi.n	800c2a6 <_dtoa_r+0x2c6>
 800c1d2:	e8df f003 	tbb	[pc, r3]
 800c1d6:	4e2c      	.short	0x4e2c
 800c1d8:	5a4c      	.short	0x5a4c
 800c1da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c1de:	441d      	add	r5, r3
 800c1e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c1e4:	2b20      	cmp	r3, #32
 800c1e6:	bfc1      	itttt	gt
 800c1e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c1ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c1f0:	fa09 f303 	lslgt.w	r3, r9, r3
 800c1f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c1f8:	bfda      	itte	le
 800c1fa:	f1c3 0320 	rsble	r3, r3, #32
 800c1fe:	fa06 f003 	lslle.w	r0, r6, r3
 800c202:	4318      	orrgt	r0, r3
 800c204:	f7f4 f986 	bl	8000514 <__aeabi_ui2d>
 800c208:	2301      	movs	r3, #1
 800c20a:	4606      	mov	r6, r0
 800c20c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c210:	3d01      	subs	r5, #1
 800c212:	9310      	str	r3, [sp, #64]	; 0x40
 800c214:	e771      	b.n	800c0fa <_dtoa_r+0x11a>
 800c216:	2301      	movs	r3, #1
 800c218:	e7b6      	b.n	800c188 <_dtoa_r+0x1a8>
 800c21a:	900e      	str	r0, [sp, #56]	; 0x38
 800c21c:	e7b5      	b.n	800c18a <_dtoa_r+0x1aa>
 800c21e:	f1ca 0300 	rsb	r3, sl, #0
 800c222:	9306      	str	r3, [sp, #24]
 800c224:	2300      	movs	r3, #0
 800c226:	eba8 080a 	sub.w	r8, r8, sl
 800c22a:	930d      	str	r3, [sp, #52]	; 0x34
 800c22c:	e7c2      	b.n	800c1b4 <_dtoa_r+0x1d4>
 800c22e:	2300      	movs	r3, #0
 800c230:	9308      	str	r3, [sp, #32]
 800c232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c234:	2b00      	cmp	r3, #0
 800c236:	dc39      	bgt.n	800c2ac <_dtoa_r+0x2cc>
 800c238:	f04f 0901 	mov.w	r9, #1
 800c23c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c240:	464b      	mov	r3, r9
 800c242:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c246:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c248:	2200      	movs	r2, #0
 800c24a:	6042      	str	r2, [r0, #4]
 800c24c:	2204      	movs	r2, #4
 800c24e:	f102 0614 	add.w	r6, r2, #20
 800c252:	429e      	cmp	r6, r3
 800c254:	6841      	ldr	r1, [r0, #4]
 800c256:	d92f      	bls.n	800c2b8 <_dtoa_r+0x2d8>
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 fed9 	bl	800d010 <_Balloc>
 800c25e:	9000      	str	r0, [sp, #0]
 800c260:	2800      	cmp	r0, #0
 800c262:	d14b      	bne.n	800c2fc <_dtoa_r+0x31c>
 800c264:	4b24      	ldr	r3, [pc, #144]	; (800c2f8 <_dtoa_r+0x318>)
 800c266:	4602      	mov	r2, r0
 800c268:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c26c:	e6d1      	b.n	800c012 <_dtoa_r+0x32>
 800c26e:	2301      	movs	r3, #1
 800c270:	e7de      	b.n	800c230 <_dtoa_r+0x250>
 800c272:	2300      	movs	r3, #0
 800c274:	9308      	str	r3, [sp, #32]
 800c276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c278:	eb0a 0903 	add.w	r9, sl, r3
 800c27c:	f109 0301 	add.w	r3, r9, #1
 800c280:	2b01      	cmp	r3, #1
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	bfb8      	it	lt
 800c286:	2301      	movlt	r3, #1
 800c288:	e7dd      	b.n	800c246 <_dtoa_r+0x266>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e7f2      	b.n	800c274 <_dtoa_r+0x294>
 800c28e:	2501      	movs	r5, #1
 800c290:	2300      	movs	r3, #0
 800c292:	9305      	str	r3, [sp, #20]
 800c294:	9508      	str	r5, [sp, #32]
 800c296:	f04f 39ff 	mov.w	r9, #4294967295
 800c29a:	2200      	movs	r2, #0
 800c29c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c2a0:	2312      	movs	r3, #18
 800c2a2:	9209      	str	r2, [sp, #36]	; 0x24
 800c2a4:	e7cf      	b.n	800c246 <_dtoa_r+0x266>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	9308      	str	r3, [sp, #32]
 800c2aa:	e7f4      	b.n	800c296 <_dtoa_r+0x2b6>
 800c2ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c2b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c2b4:	464b      	mov	r3, r9
 800c2b6:	e7c6      	b.n	800c246 <_dtoa_r+0x266>
 800c2b8:	3101      	adds	r1, #1
 800c2ba:	6041      	str	r1, [r0, #4]
 800c2bc:	0052      	lsls	r2, r2, #1
 800c2be:	e7c6      	b.n	800c24e <_dtoa_r+0x26e>
 800c2c0:	636f4361 	.word	0x636f4361
 800c2c4:	3fd287a7 	.word	0x3fd287a7
 800c2c8:	8b60c8b3 	.word	0x8b60c8b3
 800c2cc:	3fc68a28 	.word	0x3fc68a28
 800c2d0:	509f79fb 	.word	0x509f79fb
 800c2d4:	3fd34413 	.word	0x3fd34413
 800c2d8:	0800e1ab 	.word	0x0800e1ab
 800c2dc:	0800e1c2 	.word	0x0800e1c2
 800c2e0:	7ff00000 	.word	0x7ff00000
 800c2e4:	0800e1a7 	.word	0x0800e1a7
 800c2e8:	0800e19e 	.word	0x0800e19e
 800c2ec:	0800e132 	.word	0x0800e132
 800c2f0:	3ff80000 	.word	0x3ff80000
 800c2f4:	0800e320 	.word	0x0800e320
 800c2f8:	0800e221 	.word	0x0800e221
 800c2fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2fe:	9a00      	ldr	r2, [sp, #0]
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	9b01      	ldr	r3, [sp, #4]
 800c304:	2b0e      	cmp	r3, #14
 800c306:	f200 80ad 	bhi.w	800c464 <_dtoa_r+0x484>
 800c30a:	2d00      	cmp	r5, #0
 800c30c:	f000 80aa 	beq.w	800c464 <_dtoa_r+0x484>
 800c310:	f1ba 0f00 	cmp.w	sl, #0
 800c314:	dd36      	ble.n	800c384 <_dtoa_r+0x3a4>
 800c316:	4ac3      	ldr	r2, [pc, #780]	; (800c624 <_dtoa_r+0x644>)
 800c318:	f00a 030f 	and.w	r3, sl, #15
 800c31c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c320:	ed93 7b00 	vldr	d7, [r3]
 800c324:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c328:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c32c:	eeb0 8a47 	vmov.f32	s16, s14
 800c330:	eef0 8a67 	vmov.f32	s17, s15
 800c334:	d016      	beq.n	800c364 <_dtoa_r+0x384>
 800c336:	4bbc      	ldr	r3, [pc, #752]	; (800c628 <_dtoa_r+0x648>)
 800c338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c33c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c340:	f7f4 fa8c 	bl	800085c <__aeabi_ddiv>
 800c344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c348:	f007 070f 	and.w	r7, r7, #15
 800c34c:	2503      	movs	r5, #3
 800c34e:	4eb6      	ldr	r6, [pc, #728]	; (800c628 <_dtoa_r+0x648>)
 800c350:	b957      	cbnz	r7, 800c368 <_dtoa_r+0x388>
 800c352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c356:	ec53 2b18 	vmov	r2, r3, d8
 800c35a:	f7f4 fa7f 	bl	800085c <__aeabi_ddiv>
 800c35e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c362:	e029      	b.n	800c3b8 <_dtoa_r+0x3d8>
 800c364:	2502      	movs	r5, #2
 800c366:	e7f2      	b.n	800c34e <_dtoa_r+0x36e>
 800c368:	07f9      	lsls	r1, r7, #31
 800c36a:	d508      	bpl.n	800c37e <_dtoa_r+0x39e>
 800c36c:	ec51 0b18 	vmov	r0, r1, d8
 800c370:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c374:	f7f4 f948 	bl	8000608 <__aeabi_dmul>
 800c378:	ec41 0b18 	vmov	d8, r0, r1
 800c37c:	3501      	adds	r5, #1
 800c37e:	107f      	asrs	r7, r7, #1
 800c380:	3608      	adds	r6, #8
 800c382:	e7e5      	b.n	800c350 <_dtoa_r+0x370>
 800c384:	f000 80a6 	beq.w	800c4d4 <_dtoa_r+0x4f4>
 800c388:	f1ca 0600 	rsb	r6, sl, #0
 800c38c:	4ba5      	ldr	r3, [pc, #660]	; (800c624 <_dtoa_r+0x644>)
 800c38e:	4fa6      	ldr	r7, [pc, #664]	; (800c628 <_dtoa_r+0x648>)
 800c390:	f006 020f 	and.w	r2, r6, #15
 800c394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c3a0:	f7f4 f932 	bl	8000608 <__aeabi_dmul>
 800c3a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3a8:	1136      	asrs	r6, r6, #4
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2502      	movs	r5, #2
 800c3ae:	2e00      	cmp	r6, #0
 800c3b0:	f040 8085 	bne.w	800c4be <_dtoa_r+0x4de>
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1d2      	bne.n	800c35e <_dtoa_r+0x37e>
 800c3b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f000 808c 	beq.w	800c4d8 <_dtoa_r+0x4f8>
 800c3c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3c4:	4b99      	ldr	r3, [pc, #612]	; (800c62c <_dtoa_r+0x64c>)
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	f7f4 fb8e 	bl	8000aec <__aeabi_dcmplt>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	f000 8081 	beq.w	800c4d8 <_dtoa_r+0x4f8>
 800c3d6:	9b01      	ldr	r3, [sp, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d07d      	beq.n	800c4d8 <_dtoa_r+0x4f8>
 800c3dc:	f1b9 0f00 	cmp.w	r9, #0
 800c3e0:	dd3c      	ble.n	800c45c <_dtoa_r+0x47c>
 800c3e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c3e6:	9307      	str	r3, [sp, #28]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	4b91      	ldr	r3, [pc, #580]	; (800c630 <_dtoa_r+0x650>)
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	4639      	mov	r1, r7
 800c3f0:	f7f4 f90a 	bl	8000608 <__aeabi_dmul>
 800c3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3f8:	3501      	adds	r5, #1
 800c3fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c3fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c402:	4628      	mov	r0, r5
 800c404:	f7f4 f896 	bl	8000534 <__aeabi_i2d>
 800c408:	4632      	mov	r2, r6
 800c40a:	463b      	mov	r3, r7
 800c40c:	f7f4 f8fc 	bl	8000608 <__aeabi_dmul>
 800c410:	4b88      	ldr	r3, [pc, #544]	; (800c634 <_dtoa_r+0x654>)
 800c412:	2200      	movs	r2, #0
 800c414:	f7f3 ff42 	bl	800029c <__adddf3>
 800c418:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c41c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c420:	9303      	str	r3, [sp, #12]
 800c422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c424:	2b00      	cmp	r3, #0
 800c426:	d15c      	bne.n	800c4e2 <_dtoa_r+0x502>
 800c428:	4b83      	ldr	r3, [pc, #524]	; (800c638 <_dtoa_r+0x658>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	4630      	mov	r0, r6
 800c42e:	4639      	mov	r1, r7
 800c430:	f7f3 ff32 	bl	8000298 <__aeabi_dsub>
 800c434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c438:	4606      	mov	r6, r0
 800c43a:	460f      	mov	r7, r1
 800c43c:	f7f4 fb74 	bl	8000b28 <__aeabi_dcmpgt>
 800c440:	2800      	cmp	r0, #0
 800c442:	f040 8296 	bne.w	800c972 <_dtoa_r+0x992>
 800c446:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c44a:	4630      	mov	r0, r6
 800c44c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c450:	4639      	mov	r1, r7
 800c452:	f7f4 fb4b 	bl	8000aec <__aeabi_dcmplt>
 800c456:	2800      	cmp	r0, #0
 800c458:	f040 8288 	bne.w	800c96c <_dtoa_r+0x98c>
 800c45c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c460:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c466:	2b00      	cmp	r3, #0
 800c468:	f2c0 8158 	blt.w	800c71c <_dtoa_r+0x73c>
 800c46c:	f1ba 0f0e 	cmp.w	sl, #14
 800c470:	f300 8154 	bgt.w	800c71c <_dtoa_r+0x73c>
 800c474:	4b6b      	ldr	r3, [pc, #428]	; (800c624 <_dtoa_r+0x644>)
 800c476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c47a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c480:	2b00      	cmp	r3, #0
 800c482:	f280 80e3 	bge.w	800c64c <_dtoa_r+0x66c>
 800c486:	9b01      	ldr	r3, [sp, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f300 80df 	bgt.w	800c64c <_dtoa_r+0x66c>
 800c48e:	f040 826d 	bne.w	800c96c <_dtoa_r+0x98c>
 800c492:	4b69      	ldr	r3, [pc, #420]	; (800c638 <_dtoa_r+0x658>)
 800c494:	2200      	movs	r2, #0
 800c496:	4640      	mov	r0, r8
 800c498:	4649      	mov	r1, r9
 800c49a:	f7f4 f8b5 	bl	8000608 <__aeabi_dmul>
 800c49e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4a2:	f7f4 fb37 	bl	8000b14 <__aeabi_dcmpge>
 800c4a6:	9e01      	ldr	r6, [sp, #4]
 800c4a8:	4637      	mov	r7, r6
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f040 8243 	bne.w	800c936 <_dtoa_r+0x956>
 800c4b0:	9d00      	ldr	r5, [sp, #0]
 800c4b2:	2331      	movs	r3, #49	; 0x31
 800c4b4:	f805 3b01 	strb.w	r3, [r5], #1
 800c4b8:	f10a 0a01 	add.w	sl, sl, #1
 800c4bc:	e23f      	b.n	800c93e <_dtoa_r+0x95e>
 800c4be:	07f2      	lsls	r2, r6, #31
 800c4c0:	d505      	bpl.n	800c4ce <_dtoa_r+0x4ee>
 800c4c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4c6:	f7f4 f89f 	bl	8000608 <__aeabi_dmul>
 800c4ca:	3501      	adds	r5, #1
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	1076      	asrs	r6, r6, #1
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	e76c      	b.n	800c3ae <_dtoa_r+0x3ce>
 800c4d4:	2502      	movs	r5, #2
 800c4d6:	e76f      	b.n	800c3b8 <_dtoa_r+0x3d8>
 800c4d8:	9b01      	ldr	r3, [sp, #4]
 800c4da:	f8cd a01c 	str.w	sl, [sp, #28]
 800c4de:	930c      	str	r3, [sp, #48]	; 0x30
 800c4e0:	e78d      	b.n	800c3fe <_dtoa_r+0x41e>
 800c4e2:	9900      	ldr	r1, [sp, #0]
 800c4e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c4e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4e8:	4b4e      	ldr	r3, [pc, #312]	; (800c624 <_dtoa_r+0x644>)
 800c4ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4ee:	4401      	add	r1, r0
 800c4f0:	9102      	str	r1, [sp, #8]
 800c4f2:	9908      	ldr	r1, [sp, #32]
 800c4f4:	eeb0 8a47 	vmov.f32	s16, s14
 800c4f8:	eef0 8a67 	vmov.f32	s17, s15
 800c4fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c500:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c504:	2900      	cmp	r1, #0
 800c506:	d045      	beq.n	800c594 <_dtoa_r+0x5b4>
 800c508:	494c      	ldr	r1, [pc, #304]	; (800c63c <_dtoa_r+0x65c>)
 800c50a:	2000      	movs	r0, #0
 800c50c:	f7f4 f9a6 	bl	800085c <__aeabi_ddiv>
 800c510:	ec53 2b18 	vmov	r2, r3, d8
 800c514:	f7f3 fec0 	bl	8000298 <__aeabi_dsub>
 800c518:	9d00      	ldr	r5, [sp, #0]
 800c51a:	ec41 0b18 	vmov	d8, r0, r1
 800c51e:	4639      	mov	r1, r7
 800c520:	4630      	mov	r0, r6
 800c522:	f7f4 fb21 	bl	8000b68 <__aeabi_d2iz>
 800c526:	900c      	str	r0, [sp, #48]	; 0x30
 800c528:	f7f4 f804 	bl	8000534 <__aeabi_i2d>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4630      	mov	r0, r6
 800c532:	4639      	mov	r1, r7
 800c534:	f7f3 feb0 	bl	8000298 <__aeabi_dsub>
 800c538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c53a:	3330      	adds	r3, #48	; 0x30
 800c53c:	f805 3b01 	strb.w	r3, [r5], #1
 800c540:	ec53 2b18 	vmov	r2, r3, d8
 800c544:	4606      	mov	r6, r0
 800c546:	460f      	mov	r7, r1
 800c548:	f7f4 fad0 	bl	8000aec <__aeabi_dcmplt>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d165      	bne.n	800c61c <_dtoa_r+0x63c>
 800c550:	4632      	mov	r2, r6
 800c552:	463b      	mov	r3, r7
 800c554:	4935      	ldr	r1, [pc, #212]	; (800c62c <_dtoa_r+0x64c>)
 800c556:	2000      	movs	r0, #0
 800c558:	f7f3 fe9e 	bl	8000298 <__aeabi_dsub>
 800c55c:	ec53 2b18 	vmov	r2, r3, d8
 800c560:	f7f4 fac4 	bl	8000aec <__aeabi_dcmplt>
 800c564:	2800      	cmp	r0, #0
 800c566:	f040 80b9 	bne.w	800c6dc <_dtoa_r+0x6fc>
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	429d      	cmp	r5, r3
 800c56e:	f43f af75 	beq.w	800c45c <_dtoa_r+0x47c>
 800c572:	4b2f      	ldr	r3, [pc, #188]	; (800c630 <_dtoa_r+0x650>)
 800c574:	ec51 0b18 	vmov	r0, r1, d8
 800c578:	2200      	movs	r2, #0
 800c57a:	f7f4 f845 	bl	8000608 <__aeabi_dmul>
 800c57e:	4b2c      	ldr	r3, [pc, #176]	; (800c630 <_dtoa_r+0x650>)
 800c580:	ec41 0b18 	vmov	d8, r0, r1
 800c584:	2200      	movs	r2, #0
 800c586:	4630      	mov	r0, r6
 800c588:	4639      	mov	r1, r7
 800c58a:	f7f4 f83d 	bl	8000608 <__aeabi_dmul>
 800c58e:	4606      	mov	r6, r0
 800c590:	460f      	mov	r7, r1
 800c592:	e7c4      	b.n	800c51e <_dtoa_r+0x53e>
 800c594:	ec51 0b17 	vmov	r0, r1, d7
 800c598:	f7f4 f836 	bl	8000608 <__aeabi_dmul>
 800c59c:	9b02      	ldr	r3, [sp, #8]
 800c59e:	9d00      	ldr	r5, [sp, #0]
 800c5a0:	930c      	str	r3, [sp, #48]	; 0x30
 800c5a2:	ec41 0b18 	vmov	d8, r0, r1
 800c5a6:	4639      	mov	r1, r7
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f7f4 fadd 	bl	8000b68 <__aeabi_d2iz>
 800c5ae:	9011      	str	r0, [sp, #68]	; 0x44
 800c5b0:	f7f3 ffc0 	bl	8000534 <__aeabi_i2d>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	4639      	mov	r1, r7
 800c5bc:	f7f3 fe6c 	bl	8000298 <__aeabi_dsub>
 800c5c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5c2:	3330      	adds	r3, #48	; 0x30
 800c5c4:	f805 3b01 	strb.w	r3, [r5], #1
 800c5c8:	9b02      	ldr	r3, [sp, #8]
 800c5ca:	429d      	cmp	r5, r3
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	460f      	mov	r7, r1
 800c5d0:	f04f 0200 	mov.w	r2, #0
 800c5d4:	d134      	bne.n	800c640 <_dtoa_r+0x660>
 800c5d6:	4b19      	ldr	r3, [pc, #100]	; (800c63c <_dtoa_r+0x65c>)
 800c5d8:	ec51 0b18 	vmov	r0, r1, d8
 800c5dc:	f7f3 fe5e 	bl	800029c <__adddf3>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	4639      	mov	r1, r7
 800c5e8:	f7f4 fa9e 	bl	8000b28 <__aeabi_dcmpgt>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d175      	bne.n	800c6dc <_dtoa_r+0x6fc>
 800c5f0:	ec53 2b18 	vmov	r2, r3, d8
 800c5f4:	4911      	ldr	r1, [pc, #68]	; (800c63c <_dtoa_r+0x65c>)
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	f7f3 fe4e 	bl	8000298 <__aeabi_dsub>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	4630      	mov	r0, r6
 800c602:	4639      	mov	r1, r7
 800c604:	f7f4 fa72 	bl	8000aec <__aeabi_dcmplt>
 800c608:	2800      	cmp	r0, #0
 800c60a:	f43f af27 	beq.w	800c45c <_dtoa_r+0x47c>
 800c60e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c610:	1e6b      	subs	r3, r5, #1
 800c612:	930c      	str	r3, [sp, #48]	; 0x30
 800c614:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c618:	2b30      	cmp	r3, #48	; 0x30
 800c61a:	d0f8      	beq.n	800c60e <_dtoa_r+0x62e>
 800c61c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c620:	e04a      	b.n	800c6b8 <_dtoa_r+0x6d8>
 800c622:	bf00      	nop
 800c624:	0800e320 	.word	0x0800e320
 800c628:	0800e2f8 	.word	0x0800e2f8
 800c62c:	3ff00000 	.word	0x3ff00000
 800c630:	40240000 	.word	0x40240000
 800c634:	401c0000 	.word	0x401c0000
 800c638:	40140000 	.word	0x40140000
 800c63c:	3fe00000 	.word	0x3fe00000
 800c640:	4baf      	ldr	r3, [pc, #700]	; (800c900 <_dtoa_r+0x920>)
 800c642:	f7f3 ffe1 	bl	8000608 <__aeabi_dmul>
 800c646:	4606      	mov	r6, r0
 800c648:	460f      	mov	r7, r1
 800c64a:	e7ac      	b.n	800c5a6 <_dtoa_r+0x5c6>
 800c64c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c650:	9d00      	ldr	r5, [sp, #0]
 800c652:	4642      	mov	r2, r8
 800c654:	464b      	mov	r3, r9
 800c656:	4630      	mov	r0, r6
 800c658:	4639      	mov	r1, r7
 800c65a:	f7f4 f8ff 	bl	800085c <__aeabi_ddiv>
 800c65e:	f7f4 fa83 	bl	8000b68 <__aeabi_d2iz>
 800c662:	9002      	str	r0, [sp, #8]
 800c664:	f7f3 ff66 	bl	8000534 <__aeabi_i2d>
 800c668:	4642      	mov	r2, r8
 800c66a:	464b      	mov	r3, r9
 800c66c:	f7f3 ffcc 	bl	8000608 <__aeabi_dmul>
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	4630      	mov	r0, r6
 800c676:	4639      	mov	r1, r7
 800c678:	f7f3 fe0e 	bl	8000298 <__aeabi_dsub>
 800c67c:	9e02      	ldr	r6, [sp, #8]
 800c67e:	9f01      	ldr	r7, [sp, #4]
 800c680:	3630      	adds	r6, #48	; 0x30
 800c682:	f805 6b01 	strb.w	r6, [r5], #1
 800c686:	9e00      	ldr	r6, [sp, #0]
 800c688:	1bae      	subs	r6, r5, r6
 800c68a:	42b7      	cmp	r7, r6
 800c68c:	4602      	mov	r2, r0
 800c68e:	460b      	mov	r3, r1
 800c690:	d137      	bne.n	800c702 <_dtoa_r+0x722>
 800c692:	f7f3 fe03 	bl	800029c <__adddf3>
 800c696:	4642      	mov	r2, r8
 800c698:	464b      	mov	r3, r9
 800c69a:	4606      	mov	r6, r0
 800c69c:	460f      	mov	r7, r1
 800c69e:	f7f4 fa43 	bl	8000b28 <__aeabi_dcmpgt>
 800c6a2:	b9c8      	cbnz	r0, 800c6d8 <_dtoa_r+0x6f8>
 800c6a4:	4642      	mov	r2, r8
 800c6a6:	464b      	mov	r3, r9
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	f7f4 fa14 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6b0:	b110      	cbz	r0, 800c6b8 <_dtoa_r+0x6d8>
 800c6b2:	9b02      	ldr	r3, [sp, #8]
 800c6b4:	07d9      	lsls	r1, r3, #31
 800c6b6:	d40f      	bmi.n	800c6d8 <_dtoa_r+0x6f8>
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	4659      	mov	r1, fp
 800c6bc:	f000 fce8 	bl	800d090 <_Bfree>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	702b      	strb	r3, [r5, #0]
 800c6c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6c6:	f10a 0001 	add.w	r0, sl, #1
 800c6ca:	6018      	str	r0, [r3, #0]
 800c6cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f43f acd8 	beq.w	800c084 <_dtoa_r+0xa4>
 800c6d4:	601d      	str	r5, [r3, #0]
 800c6d6:	e4d5      	b.n	800c084 <_dtoa_r+0xa4>
 800c6d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800c6dc:	462b      	mov	r3, r5
 800c6de:	461d      	mov	r5, r3
 800c6e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6e4:	2a39      	cmp	r2, #57	; 0x39
 800c6e6:	d108      	bne.n	800c6fa <_dtoa_r+0x71a>
 800c6e8:	9a00      	ldr	r2, [sp, #0]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d1f7      	bne.n	800c6de <_dtoa_r+0x6fe>
 800c6ee:	9a07      	ldr	r2, [sp, #28]
 800c6f0:	9900      	ldr	r1, [sp, #0]
 800c6f2:	3201      	adds	r2, #1
 800c6f4:	9207      	str	r2, [sp, #28]
 800c6f6:	2230      	movs	r2, #48	; 0x30
 800c6f8:	700a      	strb	r2, [r1, #0]
 800c6fa:	781a      	ldrb	r2, [r3, #0]
 800c6fc:	3201      	adds	r2, #1
 800c6fe:	701a      	strb	r2, [r3, #0]
 800c700:	e78c      	b.n	800c61c <_dtoa_r+0x63c>
 800c702:	4b7f      	ldr	r3, [pc, #508]	; (800c900 <_dtoa_r+0x920>)
 800c704:	2200      	movs	r2, #0
 800c706:	f7f3 ff7f 	bl	8000608 <__aeabi_dmul>
 800c70a:	2200      	movs	r2, #0
 800c70c:	2300      	movs	r3, #0
 800c70e:	4606      	mov	r6, r0
 800c710:	460f      	mov	r7, r1
 800c712:	f7f4 f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c716:	2800      	cmp	r0, #0
 800c718:	d09b      	beq.n	800c652 <_dtoa_r+0x672>
 800c71a:	e7cd      	b.n	800c6b8 <_dtoa_r+0x6d8>
 800c71c:	9a08      	ldr	r2, [sp, #32]
 800c71e:	2a00      	cmp	r2, #0
 800c720:	f000 80c4 	beq.w	800c8ac <_dtoa_r+0x8cc>
 800c724:	9a05      	ldr	r2, [sp, #20]
 800c726:	2a01      	cmp	r2, #1
 800c728:	f300 80a8 	bgt.w	800c87c <_dtoa_r+0x89c>
 800c72c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c72e:	2a00      	cmp	r2, #0
 800c730:	f000 80a0 	beq.w	800c874 <_dtoa_r+0x894>
 800c734:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c738:	9e06      	ldr	r6, [sp, #24]
 800c73a:	4645      	mov	r5, r8
 800c73c:	9a04      	ldr	r2, [sp, #16]
 800c73e:	2101      	movs	r1, #1
 800c740:	441a      	add	r2, r3
 800c742:	4620      	mov	r0, r4
 800c744:	4498      	add	r8, r3
 800c746:	9204      	str	r2, [sp, #16]
 800c748:	f000 fd5e 	bl	800d208 <__i2b>
 800c74c:	4607      	mov	r7, r0
 800c74e:	2d00      	cmp	r5, #0
 800c750:	dd0b      	ble.n	800c76a <_dtoa_r+0x78a>
 800c752:	9b04      	ldr	r3, [sp, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	dd08      	ble.n	800c76a <_dtoa_r+0x78a>
 800c758:	42ab      	cmp	r3, r5
 800c75a:	9a04      	ldr	r2, [sp, #16]
 800c75c:	bfa8      	it	ge
 800c75e:	462b      	movge	r3, r5
 800c760:	eba8 0803 	sub.w	r8, r8, r3
 800c764:	1aed      	subs	r5, r5, r3
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	9304      	str	r3, [sp, #16]
 800c76a:	9b06      	ldr	r3, [sp, #24]
 800c76c:	b1fb      	cbz	r3, 800c7ae <_dtoa_r+0x7ce>
 800c76e:	9b08      	ldr	r3, [sp, #32]
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 809f 	beq.w	800c8b4 <_dtoa_r+0x8d4>
 800c776:	2e00      	cmp	r6, #0
 800c778:	dd11      	ble.n	800c79e <_dtoa_r+0x7be>
 800c77a:	4639      	mov	r1, r7
 800c77c:	4632      	mov	r2, r6
 800c77e:	4620      	mov	r0, r4
 800c780:	f000 fdfe 	bl	800d380 <__pow5mult>
 800c784:	465a      	mov	r2, fp
 800c786:	4601      	mov	r1, r0
 800c788:	4607      	mov	r7, r0
 800c78a:	4620      	mov	r0, r4
 800c78c:	f000 fd52 	bl	800d234 <__multiply>
 800c790:	4659      	mov	r1, fp
 800c792:	9007      	str	r0, [sp, #28]
 800c794:	4620      	mov	r0, r4
 800c796:	f000 fc7b 	bl	800d090 <_Bfree>
 800c79a:	9b07      	ldr	r3, [sp, #28]
 800c79c:	469b      	mov	fp, r3
 800c79e:	9b06      	ldr	r3, [sp, #24]
 800c7a0:	1b9a      	subs	r2, r3, r6
 800c7a2:	d004      	beq.n	800c7ae <_dtoa_r+0x7ce>
 800c7a4:	4659      	mov	r1, fp
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 fdea 	bl	800d380 <__pow5mult>
 800c7ac:	4683      	mov	fp, r0
 800c7ae:	2101      	movs	r1, #1
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f000 fd29 	bl	800d208 <__i2b>
 800c7b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	dd7c      	ble.n	800c8b8 <_dtoa_r+0x8d8>
 800c7be:	461a      	mov	r2, r3
 800c7c0:	4601      	mov	r1, r0
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f000 fddc 	bl	800d380 <__pow5mult>
 800c7c8:	9b05      	ldr	r3, [sp, #20]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	4606      	mov	r6, r0
 800c7ce:	dd76      	ble.n	800c8be <_dtoa_r+0x8de>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	9306      	str	r3, [sp, #24]
 800c7d4:	6933      	ldr	r3, [r6, #16]
 800c7d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c7da:	6918      	ldr	r0, [r3, #16]
 800c7dc:	f000 fcc4 	bl	800d168 <__hi0bits>
 800c7e0:	f1c0 0020 	rsb	r0, r0, #32
 800c7e4:	9b04      	ldr	r3, [sp, #16]
 800c7e6:	4418      	add	r0, r3
 800c7e8:	f010 001f 	ands.w	r0, r0, #31
 800c7ec:	f000 8086 	beq.w	800c8fc <_dtoa_r+0x91c>
 800c7f0:	f1c0 0320 	rsb	r3, r0, #32
 800c7f4:	2b04      	cmp	r3, #4
 800c7f6:	dd7f      	ble.n	800c8f8 <_dtoa_r+0x918>
 800c7f8:	f1c0 001c 	rsb	r0, r0, #28
 800c7fc:	9b04      	ldr	r3, [sp, #16]
 800c7fe:	4403      	add	r3, r0
 800c800:	4480      	add	r8, r0
 800c802:	4405      	add	r5, r0
 800c804:	9304      	str	r3, [sp, #16]
 800c806:	f1b8 0f00 	cmp.w	r8, #0
 800c80a:	dd05      	ble.n	800c818 <_dtoa_r+0x838>
 800c80c:	4659      	mov	r1, fp
 800c80e:	4642      	mov	r2, r8
 800c810:	4620      	mov	r0, r4
 800c812:	f000 fe0f 	bl	800d434 <__lshift>
 800c816:	4683      	mov	fp, r0
 800c818:	9b04      	ldr	r3, [sp, #16]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	dd05      	ble.n	800c82a <_dtoa_r+0x84a>
 800c81e:	4631      	mov	r1, r6
 800c820:	461a      	mov	r2, r3
 800c822:	4620      	mov	r0, r4
 800c824:	f000 fe06 	bl	800d434 <__lshift>
 800c828:	4606      	mov	r6, r0
 800c82a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d069      	beq.n	800c904 <_dtoa_r+0x924>
 800c830:	4631      	mov	r1, r6
 800c832:	4658      	mov	r0, fp
 800c834:	f000 fe6a 	bl	800d50c <__mcmp>
 800c838:	2800      	cmp	r0, #0
 800c83a:	da63      	bge.n	800c904 <_dtoa_r+0x924>
 800c83c:	2300      	movs	r3, #0
 800c83e:	4659      	mov	r1, fp
 800c840:	220a      	movs	r2, #10
 800c842:	4620      	mov	r0, r4
 800c844:	f000 fc46 	bl	800d0d4 <__multadd>
 800c848:	9b08      	ldr	r3, [sp, #32]
 800c84a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c84e:	4683      	mov	fp, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 818f 	beq.w	800cb74 <_dtoa_r+0xb94>
 800c856:	4639      	mov	r1, r7
 800c858:	2300      	movs	r3, #0
 800c85a:	220a      	movs	r2, #10
 800c85c:	4620      	mov	r0, r4
 800c85e:	f000 fc39 	bl	800d0d4 <__multadd>
 800c862:	f1b9 0f00 	cmp.w	r9, #0
 800c866:	4607      	mov	r7, r0
 800c868:	f300 808e 	bgt.w	800c988 <_dtoa_r+0x9a8>
 800c86c:	9b05      	ldr	r3, [sp, #20]
 800c86e:	2b02      	cmp	r3, #2
 800c870:	dc50      	bgt.n	800c914 <_dtoa_r+0x934>
 800c872:	e089      	b.n	800c988 <_dtoa_r+0x9a8>
 800c874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c87a:	e75d      	b.n	800c738 <_dtoa_r+0x758>
 800c87c:	9b01      	ldr	r3, [sp, #4]
 800c87e:	1e5e      	subs	r6, r3, #1
 800c880:	9b06      	ldr	r3, [sp, #24]
 800c882:	42b3      	cmp	r3, r6
 800c884:	bfbf      	itttt	lt
 800c886:	9b06      	ldrlt	r3, [sp, #24]
 800c888:	9606      	strlt	r6, [sp, #24]
 800c88a:	1af2      	sublt	r2, r6, r3
 800c88c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c88e:	bfb6      	itet	lt
 800c890:	189b      	addlt	r3, r3, r2
 800c892:	1b9e      	subge	r6, r3, r6
 800c894:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c896:	9b01      	ldr	r3, [sp, #4]
 800c898:	bfb8      	it	lt
 800c89a:	2600      	movlt	r6, #0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	bfb5      	itete	lt
 800c8a0:	eba8 0503 	sublt.w	r5, r8, r3
 800c8a4:	9b01      	ldrge	r3, [sp, #4]
 800c8a6:	2300      	movlt	r3, #0
 800c8a8:	4645      	movge	r5, r8
 800c8aa:	e747      	b.n	800c73c <_dtoa_r+0x75c>
 800c8ac:	9e06      	ldr	r6, [sp, #24]
 800c8ae:	9f08      	ldr	r7, [sp, #32]
 800c8b0:	4645      	mov	r5, r8
 800c8b2:	e74c      	b.n	800c74e <_dtoa_r+0x76e>
 800c8b4:	9a06      	ldr	r2, [sp, #24]
 800c8b6:	e775      	b.n	800c7a4 <_dtoa_r+0x7c4>
 800c8b8:	9b05      	ldr	r3, [sp, #20]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	dc18      	bgt.n	800c8f0 <_dtoa_r+0x910>
 800c8be:	9b02      	ldr	r3, [sp, #8]
 800c8c0:	b9b3      	cbnz	r3, 800c8f0 <_dtoa_r+0x910>
 800c8c2:	9b03      	ldr	r3, [sp, #12]
 800c8c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8c8:	b9a3      	cbnz	r3, 800c8f4 <_dtoa_r+0x914>
 800c8ca:	9b03      	ldr	r3, [sp, #12]
 800c8cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8d0:	0d1b      	lsrs	r3, r3, #20
 800c8d2:	051b      	lsls	r3, r3, #20
 800c8d4:	b12b      	cbz	r3, 800c8e2 <_dtoa_r+0x902>
 800c8d6:	9b04      	ldr	r3, [sp, #16]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	9304      	str	r3, [sp, #16]
 800c8dc:	f108 0801 	add.w	r8, r8, #1
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	9306      	str	r3, [sp, #24]
 800c8e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f47f af74 	bne.w	800c7d4 <_dtoa_r+0x7f4>
 800c8ec:	2001      	movs	r0, #1
 800c8ee:	e779      	b.n	800c7e4 <_dtoa_r+0x804>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	e7f6      	b.n	800c8e2 <_dtoa_r+0x902>
 800c8f4:	9b02      	ldr	r3, [sp, #8]
 800c8f6:	e7f4      	b.n	800c8e2 <_dtoa_r+0x902>
 800c8f8:	d085      	beq.n	800c806 <_dtoa_r+0x826>
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	301c      	adds	r0, #28
 800c8fe:	e77d      	b.n	800c7fc <_dtoa_r+0x81c>
 800c900:	40240000 	.word	0x40240000
 800c904:	9b01      	ldr	r3, [sp, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	dc38      	bgt.n	800c97c <_dtoa_r+0x99c>
 800c90a:	9b05      	ldr	r3, [sp, #20]
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	dd35      	ble.n	800c97c <_dtoa_r+0x99c>
 800c910:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c914:	f1b9 0f00 	cmp.w	r9, #0
 800c918:	d10d      	bne.n	800c936 <_dtoa_r+0x956>
 800c91a:	4631      	mov	r1, r6
 800c91c:	464b      	mov	r3, r9
 800c91e:	2205      	movs	r2, #5
 800c920:	4620      	mov	r0, r4
 800c922:	f000 fbd7 	bl	800d0d4 <__multadd>
 800c926:	4601      	mov	r1, r0
 800c928:	4606      	mov	r6, r0
 800c92a:	4658      	mov	r0, fp
 800c92c:	f000 fdee 	bl	800d50c <__mcmp>
 800c930:	2800      	cmp	r0, #0
 800c932:	f73f adbd 	bgt.w	800c4b0 <_dtoa_r+0x4d0>
 800c936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c938:	9d00      	ldr	r5, [sp, #0]
 800c93a:	ea6f 0a03 	mvn.w	sl, r3
 800c93e:	f04f 0800 	mov.w	r8, #0
 800c942:	4631      	mov	r1, r6
 800c944:	4620      	mov	r0, r4
 800c946:	f000 fba3 	bl	800d090 <_Bfree>
 800c94a:	2f00      	cmp	r7, #0
 800c94c:	f43f aeb4 	beq.w	800c6b8 <_dtoa_r+0x6d8>
 800c950:	f1b8 0f00 	cmp.w	r8, #0
 800c954:	d005      	beq.n	800c962 <_dtoa_r+0x982>
 800c956:	45b8      	cmp	r8, r7
 800c958:	d003      	beq.n	800c962 <_dtoa_r+0x982>
 800c95a:	4641      	mov	r1, r8
 800c95c:	4620      	mov	r0, r4
 800c95e:	f000 fb97 	bl	800d090 <_Bfree>
 800c962:	4639      	mov	r1, r7
 800c964:	4620      	mov	r0, r4
 800c966:	f000 fb93 	bl	800d090 <_Bfree>
 800c96a:	e6a5      	b.n	800c6b8 <_dtoa_r+0x6d8>
 800c96c:	2600      	movs	r6, #0
 800c96e:	4637      	mov	r7, r6
 800c970:	e7e1      	b.n	800c936 <_dtoa_r+0x956>
 800c972:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c974:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c978:	4637      	mov	r7, r6
 800c97a:	e599      	b.n	800c4b0 <_dtoa_r+0x4d0>
 800c97c:	9b08      	ldr	r3, [sp, #32]
 800c97e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	f000 80fd 	beq.w	800cb82 <_dtoa_r+0xba2>
 800c988:	2d00      	cmp	r5, #0
 800c98a:	dd05      	ble.n	800c998 <_dtoa_r+0x9b8>
 800c98c:	4639      	mov	r1, r7
 800c98e:	462a      	mov	r2, r5
 800c990:	4620      	mov	r0, r4
 800c992:	f000 fd4f 	bl	800d434 <__lshift>
 800c996:	4607      	mov	r7, r0
 800c998:	9b06      	ldr	r3, [sp, #24]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d05c      	beq.n	800ca58 <_dtoa_r+0xa78>
 800c99e:	6879      	ldr	r1, [r7, #4]
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	f000 fb35 	bl	800d010 <_Balloc>
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	b928      	cbnz	r0, 800c9b6 <_dtoa_r+0x9d6>
 800c9aa:	4b80      	ldr	r3, [pc, #512]	; (800cbac <_dtoa_r+0xbcc>)
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c9b2:	f7ff bb2e 	b.w	800c012 <_dtoa_r+0x32>
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	3202      	adds	r2, #2
 800c9ba:	0092      	lsls	r2, r2, #2
 800c9bc:	f107 010c 	add.w	r1, r7, #12
 800c9c0:	300c      	adds	r0, #12
 800c9c2:	f7fe fc9d 	bl	800b300 <memcpy>
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f000 fd32 	bl	800d434 <__lshift>
 800c9d0:	9b00      	ldr	r3, [sp, #0]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	9301      	str	r3, [sp, #4]
 800c9d6:	9b00      	ldr	r3, [sp, #0]
 800c9d8:	444b      	add	r3, r9
 800c9da:	9307      	str	r3, [sp, #28]
 800c9dc:	9b02      	ldr	r3, [sp, #8]
 800c9de:	f003 0301 	and.w	r3, r3, #1
 800c9e2:	46b8      	mov	r8, r7
 800c9e4:	9306      	str	r3, [sp, #24]
 800c9e6:	4607      	mov	r7, r0
 800c9e8:	9b01      	ldr	r3, [sp, #4]
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	4658      	mov	r0, fp
 800c9f0:	9302      	str	r3, [sp, #8]
 800c9f2:	f7ff fa67 	bl	800bec4 <quorem>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	3330      	adds	r3, #48	; 0x30
 800c9fa:	9004      	str	r0, [sp, #16]
 800c9fc:	4641      	mov	r1, r8
 800c9fe:	4658      	mov	r0, fp
 800ca00:	9308      	str	r3, [sp, #32]
 800ca02:	f000 fd83 	bl	800d50c <__mcmp>
 800ca06:	463a      	mov	r2, r7
 800ca08:	4681      	mov	r9, r0
 800ca0a:	4631      	mov	r1, r6
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	f000 fd99 	bl	800d544 <__mdiff>
 800ca12:	68c2      	ldr	r2, [r0, #12]
 800ca14:	9b08      	ldr	r3, [sp, #32]
 800ca16:	4605      	mov	r5, r0
 800ca18:	bb02      	cbnz	r2, 800ca5c <_dtoa_r+0xa7c>
 800ca1a:	4601      	mov	r1, r0
 800ca1c:	4658      	mov	r0, fp
 800ca1e:	f000 fd75 	bl	800d50c <__mcmp>
 800ca22:	9b08      	ldr	r3, [sp, #32]
 800ca24:	4602      	mov	r2, r0
 800ca26:	4629      	mov	r1, r5
 800ca28:	4620      	mov	r0, r4
 800ca2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ca2e:	f000 fb2f 	bl	800d090 <_Bfree>
 800ca32:	9b05      	ldr	r3, [sp, #20]
 800ca34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca36:	9d01      	ldr	r5, [sp, #4]
 800ca38:	ea43 0102 	orr.w	r1, r3, r2
 800ca3c:	9b06      	ldr	r3, [sp, #24]
 800ca3e:	430b      	orrs	r3, r1
 800ca40:	9b08      	ldr	r3, [sp, #32]
 800ca42:	d10d      	bne.n	800ca60 <_dtoa_r+0xa80>
 800ca44:	2b39      	cmp	r3, #57	; 0x39
 800ca46:	d029      	beq.n	800ca9c <_dtoa_r+0xabc>
 800ca48:	f1b9 0f00 	cmp.w	r9, #0
 800ca4c:	dd01      	ble.n	800ca52 <_dtoa_r+0xa72>
 800ca4e:	9b04      	ldr	r3, [sp, #16]
 800ca50:	3331      	adds	r3, #49	; 0x31
 800ca52:	9a02      	ldr	r2, [sp, #8]
 800ca54:	7013      	strb	r3, [r2, #0]
 800ca56:	e774      	b.n	800c942 <_dtoa_r+0x962>
 800ca58:	4638      	mov	r0, r7
 800ca5a:	e7b9      	b.n	800c9d0 <_dtoa_r+0x9f0>
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	e7e2      	b.n	800ca26 <_dtoa_r+0xa46>
 800ca60:	f1b9 0f00 	cmp.w	r9, #0
 800ca64:	db06      	blt.n	800ca74 <_dtoa_r+0xa94>
 800ca66:	9905      	ldr	r1, [sp, #20]
 800ca68:	ea41 0909 	orr.w	r9, r1, r9
 800ca6c:	9906      	ldr	r1, [sp, #24]
 800ca6e:	ea59 0101 	orrs.w	r1, r9, r1
 800ca72:	d120      	bne.n	800cab6 <_dtoa_r+0xad6>
 800ca74:	2a00      	cmp	r2, #0
 800ca76:	ddec      	ble.n	800ca52 <_dtoa_r+0xa72>
 800ca78:	4659      	mov	r1, fp
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	9301      	str	r3, [sp, #4]
 800ca80:	f000 fcd8 	bl	800d434 <__lshift>
 800ca84:	4631      	mov	r1, r6
 800ca86:	4683      	mov	fp, r0
 800ca88:	f000 fd40 	bl	800d50c <__mcmp>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	dc02      	bgt.n	800ca98 <_dtoa_r+0xab8>
 800ca92:	d1de      	bne.n	800ca52 <_dtoa_r+0xa72>
 800ca94:	07da      	lsls	r2, r3, #31
 800ca96:	d5dc      	bpl.n	800ca52 <_dtoa_r+0xa72>
 800ca98:	2b39      	cmp	r3, #57	; 0x39
 800ca9a:	d1d8      	bne.n	800ca4e <_dtoa_r+0xa6e>
 800ca9c:	9a02      	ldr	r2, [sp, #8]
 800ca9e:	2339      	movs	r3, #57	; 0x39
 800caa0:	7013      	strb	r3, [r2, #0]
 800caa2:	462b      	mov	r3, r5
 800caa4:	461d      	mov	r5, r3
 800caa6:	3b01      	subs	r3, #1
 800caa8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800caac:	2a39      	cmp	r2, #57	; 0x39
 800caae:	d050      	beq.n	800cb52 <_dtoa_r+0xb72>
 800cab0:	3201      	adds	r2, #1
 800cab2:	701a      	strb	r2, [r3, #0]
 800cab4:	e745      	b.n	800c942 <_dtoa_r+0x962>
 800cab6:	2a00      	cmp	r2, #0
 800cab8:	dd03      	ble.n	800cac2 <_dtoa_r+0xae2>
 800caba:	2b39      	cmp	r3, #57	; 0x39
 800cabc:	d0ee      	beq.n	800ca9c <_dtoa_r+0xabc>
 800cabe:	3301      	adds	r3, #1
 800cac0:	e7c7      	b.n	800ca52 <_dtoa_r+0xa72>
 800cac2:	9a01      	ldr	r2, [sp, #4]
 800cac4:	9907      	ldr	r1, [sp, #28]
 800cac6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800caca:	428a      	cmp	r2, r1
 800cacc:	d02a      	beq.n	800cb24 <_dtoa_r+0xb44>
 800cace:	4659      	mov	r1, fp
 800cad0:	2300      	movs	r3, #0
 800cad2:	220a      	movs	r2, #10
 800cad4:	4620      	mov	r0, r4
 800cad6:	f000 fafd 	bl	800d0d4 <__multadd>
 800cada:	45b8      	cmp	r8, r7
 800cadc:	4683      	mov	fp, r0
 800cade:	f04f 0300 	mov.w	r3, #0
 800cae2:	f04f 020a 	mov.w	r2, #10
 800cae6:	4641      	mov	r1, r8
 800cae8:	4620      	mov	r0, r4
 800caea:	d107      	bne.n	800cafc <_dtoa_r+0xb1c>
 800caec:	f000 faf2 	bl	800d0d4 <__multadd>
 800caf0:	4680      	mov	r8, r0
 800caf2:	4607      	mov	r7, r0
 800caf4:	9b01      	ldr	r3, [sp, #4]
 800caf6:	3301      	adds	r3, #1
 800caf8:	9301      	str	r3, [sp, #4]
 800cafa:	e775      	b.n	800c9e8 <_dtoa_r+0xa08>
 800cafc:	f000 faea 	bl	800d0d4 <__multadd>
 800cb00:	4639      	mov	r1, r7
 800cb02:	4680      	mov	r8, r0
 800cb04:	2300      	movs	r3, #0
 800cb06:	220a      	movs	r2, #10
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f000 fae3 	bl	800d0d4 <__multadd>
 800cb0e:	4607      	mov	r7, r0
 800cb10:	e7f0      	b.n	800caf4 <_dtoa_r+0xb14>
 800cb12:	f1b9 0f00 	cmp.w	r9, #0
 800cb16:	9a00      	ldr	r2, [sp, #0]
 800cb18:	bfcc      	ite	gt
 800cb1a:	464d      	movgt	r5, r9
 800cb1c:	2501      	movle	r5, #1
 800cb1e:	4415      	add	r5, r2
 800cb20:	f04f 0800 	mov.w	r8, #0
 800cb24:	4659      	mov	r1, fp
 800cb26:	2201      	movs	r2, #1
 800cb28:	4620      	mov	r0, r4
 800cb2a:	9301      	str	r3, [sp, #4]
 800cb2c:	f000 fc82 	bl	800d434 <__lshift>
 800cb30:	4631      	mov	r1, r6
 800cb32:	4683      	mov	fp, r0
 800cb34:	f000 fcea 	bl	800d50c <__mcmp>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	dcb2      	bgt.n	800caa2 <_dtoa_r+0xac2>
 800cb3c:	d102      	bne.n	800cb44 <_dtoa_r+0xb64>
 800cb3e:	9b01      	ldr	r3, [sp, #4]
 800cb40:	07db      	lsls	r3, r3, #31
 800cb42:	d4ae      	bmi.n	800caa2 <_dtoa_r+0xac2>
 800cb44:	462b      	mov	r3, r5
 800cb46:	461d      	mov	r5, r3
 800cb48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb4c:	2a30      	cmp	r2, #48	; 0x30
 800cb4e:	d0fa      	beq.n	800cb46 <_dtoa_r+0xb66>
 800cb50:	e6f7      	b.n	800c942 <_dtoa_r+0x962>
 800cb52:	9a00      	ldr	r2, [sp, #0]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d1a5      	bne.n	800caa4 <_dtoa_r+0xac4>
 800cb58:	f10a 0a01 	add.w	sl, sl, #1
 800cb5c:	2331      	movs	r3, #49	; 0x31
 800cb5e:	e779      	b.n	800ca54 <_dtoa_r+0xa74>
 800cb60:	4b13      	ldr	r3, [pc, #76]	; (800cbb0 <_dtoa_r+0xbd0>)
 800cb62:	f7ff baaf 	b.w	800c0c4 <_dtoa_r+0xe4>
 800cb66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f47f aa86 	bne.w	800c07a <_dtoa_r+0x9a>
 800cb6e:	4b11      	ldr	r3, [pc, #68]	; (800cbb4 <_dtoa_r+0xbd4>)
 800cb70:	f7ff baa8 	b.w	800c0c4 <_dtoa_r+0xe4>
 800cb74:	f1b9 0f00 	cmp.w	r9, #0
 800cb78:	dc03      	bgt.n	800cb82 <_dtoa_r+0xba2>
 800cb7a:	9b05      	ldr	r3, [sp, #20]
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	f73f aec9 	bgt.w	800c914 <_dtoa_r+0x934>
 800cb82:	9d00      	ldr	r5, [sp, #0]
 800cb84:	4631      	mov	r1, r6
 800cb86:	4658      	mov	r0, fp
 800cb88:	f7ff f99c 	bl	800bec4 <quorem>
 800cb8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cb90:	f805 3b01 	strb.w	r3, [r5], #1
 800cb94:	9a00      	ldr	r2, [sp, #0]
 800cb96:	1aaa      	subs	r2, r5, r2
 800cb98:	4591      	cmp	r9, r2
 800cb9a:	ddba      	ble.n	800cb12 <_dtoa_r+0xb32>
 800cb9c:	4659      	mov	r1, fp
 800cb9e:	2300      	movs	r3, #0
 800cba0:	220a      	movs	r2, #10
 800cba2:	4620      	mov	r0, r4
 800cba4:	f000 fa96 	bl	800d0d4 <__multadd>
 800cba8:	4683      	mov	fp, r0
 800cbaa:	e7eb      	b.n	800cb84 <_dtoa_r+0xba4>
 800cbac:	0800e221 	.word	0x0800e221
 800cbb0:	0800e131 	.word	0x0800e131
 800cbb4:	0800e19e 	.word	0x0800e19e

0800cbb8 <__sflush_r>:
 800cbb8:	898a      	ldrh	r2, [r1, #12]
 800cbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	0710      	lsls	r0, r2, #28
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	d458      	bmi.n	800cc78 <__sflush_r+0xc0>
 800cbc6:	684b      	ldr	r3, [r1, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	dc05      	bgt.n	800cbd8 <__sflush_r+0x20>
 800cbcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	dc02      	bgt.n	800cbd8 <__sflush_r+0x20>
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbda:	2e00      	cmp	r6, #0
 800cbdc:	d0f9      	beq.n	800cbd2 <__sflush_r+0x1a>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbe4:	682f      	ldr	r7, [r5, #0]
 800cbe6:	602b      	str	r3, [r5, #0]
 800cbe8:	d032      	beq.n	800cc50 <__sflush_r+0x98>
 800cbea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	075a      	lsls	r2, r3, #29
 800cbf0:	d505      	bpl.n	800cbfe <__sflush_r+0x46>
 800cbf2:	6863      	ldr	r3, [r4, #4]
 800cbf4:	1ac0      	subs	r0, r0, r3
 800cbf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbf8:	b10b      	cbz	r3, 800cbfe <__sflush_r+0x46>
 800cbfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbfc:	1ac0      	subs	r0, r0, r3
 800cbfe:	2300      	movs	r3, #0
 800cc00:	4602      	mov	r2, r0
 800cc02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc04:	6a21      	ldr	r1, [r4, #32]
 800cc06:	4628      	mov	r0, r5
 800cc08:	47b0      	blx	r6
 800cc0a:	1c43      	adds	r3, r0, #1
 800cc0c:	89a3      	ldrh	r3, [r4, #12]
 800cc0e:	d106      	bne.n	800cc1e <__sflush_r+0x66>
 800cc10:	6829      	ldr	r1, [r5, #0]
 800cc12:	291d      	cmp	r1, #29
 800cc14:	d82c      	bhi.n	800cc70 <__sflush_r+0xb8>
 800cc16:	4a2a      	ldr	r2, [pc, #168]	; (800ccc0 <__sflush_r+0x108>)
 800cc18:	40ca      	lsrs	r2, r1
 800cc1a:	07d6      	lsls	r6, r2, #31
 800cc1c:	d528      	bpl.n	800cc70 <__sflush_r+0xb8>
 800cc1e:	2200      	movs	r2, #0
 800cc20:	6062      	str	r2, [r4, #4]
 800cc22:	04d9      	lsls	r1, r3, #19
 800cc24:	6922      	ldr	r2, [r4, #16]
 800cc26:	6022      	str	r2, [r4, #0]
 800cc28:	d504      	bpl.n	800cc34 <__sflush_r+0x7c>
 800cc2a:	1c42      	adds	r2, r0, #1
 800cc2c:	d101      	bne.n	800cc32 <__sflush_r+0x7a>
 800cc2e:	682b      	ldr	r3, [r5, #0]
 800cc30:	b903      	cbnz	r3, 800cc34 <__sflush_r+0x7c>
 800cc32:	6560      	str	r0, [r4, #84]	; 0x54
 800cc34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc36:	602f      	str	r7, [r5, #0]
 800cc38:	2900      	cmp	r1, #0
 800cc3a:	d0ca      	beq.n	800cbd2 <__sflush_r+0x1a>
 800cc3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc40:	4299      	cmp	r1, r3
 800cc42:	d002      	beq.n	800cc4a <__sflush_r+0x92>
 800cc44:	4628      	mov	r0, r5
 800cc46:	f000 fd71 	bl	800d72c <_free_r>
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	6360      	str	r0, [r4, #52]	; 0x34
 800cc4e:	e7c1      	b.n	800cbd4 <__sflush_r+0x1c>
 800cc50:	6a21      	ldr	r1, [r4, #32]
 800cc52:	2301      	movs	r3, #1
 800cc54:	4628      	mov	r0, r5
 800cc56:	47b0      	blx	r6
 800cc58:	1c41      	adds	r1, r0, #1
 800cc5a:	d1c7      	bne.n	800cbec <__sflush_r+0x34>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d0c4      	beq.n	800cbec <__sflush_r+0x34>
 800cc62:	2b1d      	cmp	r3, #29
 800cc64:	d001      	beq.n	800cc6a <__sflush_r+0xb2>
 800cc66:	2b16      	cmp	r3, #22
 800cc68:	d101      	bne.n	800cc6e <__sflush_r+0xb6>
 800cc6a:	602f      	str	r7, [r5, #0]
 800cc6c:	e7b1      	b.n	800cbd2 <__sflush_r+0x1a>
 800cc6e:	89a3      	ldrh	r3, [r4, #12]
 800cc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc74:	81a3      	strh	r3, [r4, #12]
 800cc76:	e7ad      	b.n	800cbd4 <__sflush_r+0x1c>
 800cc78:	690f      	ldr	r7, [r1, #16]
 800cc7a:	2f00      	cmp	r7, #0
 800cc7c:	d0a9      	beq.n	800cbd2 <__sflush_r+0x1a>
 800cc7e:	0793      	lsls	r3, r2, #30
 800cc80:	680e      	ldr	r6, [r1, #0]
 800cc82:	bf08      	it	eq
 800cc84:	694b      	ldreq	r3, [r1, #20]
 800cc86:	600f      	str	r7, [r1, #0]
 800cc88:	bf18      	it	ne
 800cc8a:	2300      	movne	r3, #0
 800cc8c:	eba6 0807 	sub.w	r8, r6, r7
 800cc90:	608b      	str	r3, [r1, #8]
 800cc92:	f1b8 0f00 	cmp.w	r8, #0
 800cc96:	dd9c      	ble.n	800cbd2 <__sflush_r+0x1a>
 800cc98:	6a21      	ldr	r1, [r4, #32]
 800cc9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc9c:	4643      	mov	r3, r8
 800cc9e:	463a      	mov	r2, r7
 800cca0:	4628      	mov	r0, r5
 800cca2:	47b0      	blx	r6
 800cca4:	2800      	cmp	r0, #0
 800cca6:	dc06      	bgt.n	800ccb6 <__sflush_r+0xfe>
 800cca8:	89a3      	ldrh	r3, [r4, #12]
 800ccaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccae:	81a3      	strh	r3, [r4, #12]
 800ccb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb4:	e78e      	b.n	800cbd4 <__sflush_r+0x1c>
 800ccb6:	4407      	add	r7, r0
 800ccb8:	eba8 0800 	sub.w	r8, r8, r0
 800ccbc:	e7e9      	b.n	800cc92 <__sflush_r+0xda>
 800ccbe:	bf00      	nop
 800ccc0:	20400001 	.word	0x20400001

0800ccc4 <_fflush_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	690b      	ldr	r3, [r1, #16]
 800ccc8:	4605      	mov	r5, r0
 800ccca:	460c      	mov	r4, r1
 800cccc:	b913      	cbnz	r3, 800ccd4 <_fflush_r+0x10>
 800ccce:	2500      	movs	r5, #0
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	bd38      	pop	{r3, r4, r5, pc}
 800ccd4:	b118      	cbz	r0, 800ccde <_fflush_r+0x1a>
 800ccd6:	6983      	ldr	r3, [r0, #24]
 800ccd8:	b90b      	cbnz	r3, 800ccde <_fflush_r+0x1a>
 800ccda:	f000 f887 	bl	800cdec <__sinit>
 800ccde:	4b14      	ldr	r3, [pc, #80]	; (800cd30 <_fflush_r+0x6c>)
 800cce0:	429c      	cmp	r4, r3
 800cce2:	d11b      	bne.n	800cd1c <_fflush_r+0x58>
 800cce4:	686c      	ldr	r4, [r5, #4]
 800cce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d0ef      	beq.n	800ccce <_fflush_r+0xa>
 800ccee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ccf0:	07d0      	lsls	r0, r2, #31
 800ccf2:	d404      	bmi.n	800ccfe <_fflush_r+0x3a>
 800ccf4:	0599      	lsls	r1, r3, #22
 800ccf6:	d402      	bmi.n	800ccfe <_fflush_r+0x3a>
 800ccf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccfa:	f000 f91a 	bl	800cf32 <__retarget_lock_acquire_recursive>
 800ccfe:	4628      	mov	r0, r5
 800cd00:	4621      	mov	r1, r4
 800cd02:	f7ff ff59 	bl	800cbb8 <__sflush_r>
 800cd06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd08:	07da      	lsls	r2, r3, #31
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	d4e0      	bmi.n	800ccd0 <_fflush_r+0xc>
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	059b      	lsls	r3, r3, #22
 800cd12:	d4dd      	bmi.n	800ccd0 <_fflush_r+0xc>
 800cd14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd16:	f000 f90d 	bl	800cf34 <__retarget_lock_release_recursive>
 800cd1a:	e7d9      	b.n	800ccd0 <_fflush_r+0xc>
 800cd1c:	4b05      	ldr	r3, [pc, #20]	; (800cd34 <_fflush_r+0x70>)
 800cd1e:	429c      	cmp	r4, r3
 800cd20:	d101      	bne.n	800cd26 <_fflush_r+0x62>
 800cd22:	68ac      	ldr	r4, [r5, #8]
 800cd24:	e7df      	b.n	800cce6 <_fflush_r+0x22>
 800cd26:	4b04      	ldr	r3, [pc, #16]	; (800cd38 <_fflush_r+0x74>)
 800cd28:	429c      	cmp	r4, r3
 800cd2a:	bf08      	it	eq
 800cd2c:	68ec      	ldreq	r4, [r5, #12]
 800cd2e:	e7da      	b.n	800cce6 <_fflush_r+0x22>
 800cd30:	0800e254 	.word	0x0800e254
 800cd34:	0800e274 	.word	0x0800e274
 800cd38:	0800e234 	.word	0x0800e234

0800cd3c <std>:
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	b510      	push	{r4, lr}
 800cd40:	4604      	mov	r4, r0
 800cd42:	e9c0 3300 	strd	r3, r3, [r0]
 800cd46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd4a:	6083      	str	r3, [r0, #8]
 800cd4c:	8181      	strh	r1, [r0, #12]
 800cd4e:	6643      	str	r3, [r0, #100]	; 0x64
 800cd50:	81c2      	strh	r2, [r0, #14]
 800cd52:	6183      	str	r3, [r0, #24]
 800cd54:	4619      	mov	r1, r3
 800cd56:	2208      	movs	r2, #8
 800cd58:	305c      	adds	r0, #92	; 0x5c
 800cd5a:	f7fe fadf 	bl	800b31c <memset>
 800cd5e:	4b05      	ldr	r3, [pc, #20]	; (800cd74 <std+0x38>)
 800cd60:	6263      	str	r3, [r4, #36]	; 0x24
 800cd62:	4b05      	ldr	r3, [pc, #20]	; (800cd78 <std+0x3c>)
 800cd64:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd66:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <std+0x40>)
 800cd68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd6a:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <std+0x44>)
 800cd6c:	6224      	str	r4, [r4, #32]
 800cd6e:	6323      	str	r3, [r4, #48]	; 0x30
 800cd70:	bd10      	pop	{r4, pc}
 800cd72:	bf00      	nop
 800cd74:	0800db55 	.word	0x0800db55
 800cd78:	0800db77 	.word	0x0800db77
 800cd7c:	0800dbaf 	.word	0x0800dbaf
 800cd80:	0800dbd3 	.word	0x0800dbd3

0800cd84 <_cleanup_r>:
 800cd84:	4901      	ldr	r1, [pc, #4]	; (800cd8c <_cleanup_r+0x8>)
 800cd86:	f000 b8af 	b.w	800cee8 <_fwalk_reent>
 800cd8a:	bf00      	nop
 800cd8c:	0800ccc5 	.word	0x0800ccc5

0800cd90 <__sfmoreglue>:
 800cd90:	b570      	push	{r4, r5, r6, lr}
 800cd92:	1e4a      	subs	r2, r1, #1
 800cd94:	2568      	movs	r5, #104	; 0x68
 800cd96:	4355      	muls	r5, r2
 800cd98:	460e      	mov	r6, r1
 800cd9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd9e:	f000 fd15 	bl	800d7cc <_malloc_r>
 800cda2:	4604      	mov	r4, r0
 800cda4:	b140      	cbz	r0, 800cdb8 <__sfmoreglue+0x28>
 800cda6:	2100      	movs	r1, #0
 800cda8:	e9c0 1600 	strd	r1, r6, [r0]
 800cdac:	300c      	adds	r0, #12
 800cdae:	60a0      	str	r0, [r4, #8]
 800cdb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cdb4:	f7fe fab2 	bl	800b31c <memset>
 800cdb8:	4620      	mov	r0, r4
 800cdba:	bd70      	pop	{r4, r5, r6, pc}

0800cdbc <__sfp_lock_acquire>:
 800cdbc:	4801      	ldr	r0, [pc, #4]	; (800cdc4 <__sfp_lock_acquire+0x8>)
 800cdbe:	f000 b8b8 	b.w	800cf32 <__retarget_lock_acquire_recursive>
 800cdc2:	bf00      	nop
 800cdc4:	20003454 	.word	0x20003454

0800cdc8 <__sfp_lock_release>:
 800cdc8:	4801      	ldr	r0, [pc, #4]	; (800cdd0 <__sfp_lock_release+0x8>)
 800cdca:	f000 b8b3 	b.w	800cf34 <__retarget_lock_release_recursive>
 800cdce:	bf00      	nop
 800cdd0:	20003454 	.word	0x20003454

0800cdd4 <__sinit_lock_acquire>:
 800cdd4:	4801      	ldr	r0, [pc, #4]	; (800cddc <__sinit_lock_acquire+0x8>)
 800cdd6:	f000 b8ac 	b.w	800cf32 <__retarget_lock_acquire_recursive>
 800cdda:	bf00      	nop
 800cddc:	2000344f 	.word	0x2000344f

0800cde0 <__sinit_lock_release>:
 800cde0:	4801      	ldr	r0, [pc, #4]	; (800cde8 <__sinit_lock_release+0x8>)
 800cde2:	f000 b8a7 	b.w	800cf34 <__retarget_lock_release_recursive>
 800cde6:	bf00      	nop
 800cde8:	2000344f 	.word	0x2000344f

0800cdec <__sinit>:
 800cdec:	b510      	push	{r4, lr}
 800cdee:	4604      	mov	r4, r0
 800cdf0:	f7ff fff0 	bl	800cdd4 <__sinit_lock_acquire>
 800cdf4:	69a3      	ldr	r3, [r4, #24]
 800cdf6:	b11b      	cbz	r3, 800ce00 <__sinit+0x14>
 800cdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdfc:	f7ff bff0 	b.w	800cde0 <__sinit_lock_release>
 800ce00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce04:	6523      	str	r3, [r4, #80]	; 0x50
 800ce06:	4b13      	ldr	r3, [pc, #76]	; (800ce54 <__sinit+0x68>)
 800ce08:	4a13      	ldr	r2, [pc, #76]	; (800ce58 <__sinit+0x6c>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce0e:	42a3      	cmp	r3, r4
 800ce10:	bf04      	itt	eq
 800ce12:	2301      	moveq	r3, #1
 800ce14:	61a3      	streq	r3, [r4, #24]
 800ce16:	4620      	mov	r0, r4
 800ce18:	f000 f820 	bl	800ce5c <__sfp>
 800ce1c:	6060      	str	r0, [r4, #4]
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f000 f81c 	bl	800ce5c <__sfp>
 800ce24:	60a0      	str	r0, [r4, #8]
 800ce26:	4620      	mov	r0, r4
 800ce28:	f000 f818 	bl	800ce5c <__sfp>
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	60e0      	str	r0, [r4, #12]
 800ce30:	2104      	movs	r1, #4
 800ce32:	6860      	ldr	r0, [r4, #4]
 800ce34:	f7ff ff82 	bl	800cd3c <std>
 800ce38:	68a0      	ldr	r0, [r4, #8]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	2109      	movs	r1, #9
 800ce3e:	f7ff ff7d 	bl	800cd3c <std>
 800ce42:	68e0      	ldr	r0, [r4, #12]
 800ce44:	2202      	movs	r2, #2
 800ce46:	2112      	movs	r1, #18
 800ce48:	f7ff ff78 	bl	800cd3c <std>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	61a3      	str	r3, [r4, #24]
 800ce50:	e7d2      	b.n	800cdf8 <__sinit+0xc>
 800ce52:	bf00      	nop
 800ce54:	0800e168 	.word	0x0800e168
 800ce58:	0800cd85 	.word	0x0800cd85

0800ce5c <__sfp>:
 800ce5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5e:	4607      	mov	r7, r0
 800ce60:	f7ff ffac 	bl	800cdbc <__sfp_lock_acquire>
 800ce64:	4b1e      	ldr	r3, [pc, #120]	; (800cee0 <__sfp+0x84>)
 800ce66:	681e      	ldr	r6, [r3, #0]
 800ce68:	69b3      	ldr	r3, [r6, #24]
 800ce6a:	b913      	cbnz	r3, 800ce72 <__sfp+0x16>
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f7ff ffbd 	bl	800cdec <__sinit>
 800ce72:	3648      	adds	r6, #72	; 0x48
 800ce74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	d503      	bpl.n	800ce84 <__sfp+0x28>
 800ce7c:	6833      	ldr	r3, [r6, #0]
 800ce7e:	b30b      	cbz	r3, 800cec4 <__sfp+0x68>
 800ce80:	6836      	ldr	r6, [r6, #0]
 800ce82:	e7f7      	b.n	800ce74 <__sfp+0x18>
 800ce84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce88:	b9d5      	cbnz	r5, 800cec0 <__sfp+0x64>
 800ce8a:	4b16      	ldr	r3, [pc, #88]	; (800cee4 <__sfp+0x88>)
 800ce8c:	60e3      	str	r3, [r4, #12]
 800ce8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce92:	6665      	str	r5, [r4, #100]	; 0x64
 800ce94:	f000 f84c 	bl	800cf30 <__retarget_lock_init_recursive>
 800ce98:	f7ff ff96 	bl	800cdc8 <__sfp_lock_release>
 800ce9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cea4:	6025      	str	r5, [r4, #0]
 800cea6:	61a5      	str	r5, [r4, #24]
 800cea8:	2208      	movs	r2, #8
 800ceaa:	4629      	mov	r1, r5
 800ceac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ceb0:	f7fe fa34 	bl	800b31c <memset>
 800ceb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ceb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cebc:	4620      	mov	r0, r4
 800cebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cec0:	3468      	adds	r4, #104	; 0x68
 800cec2:	e7d9      	b.n	800ce78 <__sfp+0x1c>
 800cec4:	2104      	movs	r1, #4
 800cec6:	4638      	mov	r0, r7
 800cec8:	f7ff ff62 	bl	800cd90 <__sfmoreglue>
 800cecc:	4604      	mov	r4, r0
 800cece:	6030      	str	r0, [r6, #0]
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d1d5      	bne.n	800ce80 <__sfp+0x24>
 800ced4:	f7ff ff78 	bl	800cdc8 <__sfp_lock_release>
 800ced8:	230c      	movs	r3, #12
 800ceda:	603b      	str	r3, [r7, #0]
 800cedc:	e7ee      	b.n	800cebc <__sfp+0x60>
 800cede:	bf00      	nop
 800cee0:	0800e168 	.word	0x0800e168
 800cee4:	ffff0001 	.word	0xffff0001

0800cee8 <_fwalk_reent>:
 800cee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceec:	4606      	mov	r6, r0
 800ceee:	4688      	mov	r8, r1
 800cef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cef4:	2700      	movs	r7, #0
 800cef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cefa:	f1b9 0901 	subs.w	r9, r9, #1
 800cefe:	d505      	bpl.n	800cf0c <_fwalk_reent+0x24>
 800cf00:	6824      	ldr	r4, [r4, #0]
 800cf02:	2c00      	cmp	r4, #0
 800cf04:	d1f7      	bne.n	800cef6 <_fwalk_reent+0xe>
 800cf06:	4638      	mov	r0, r7
 800cf08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf0c:	89ab      	ldrh	r3, [r5, #12]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d907      	bls.n	800cf22 <_fwalk_reent+0x3a>
 800cf12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf16:	3301      	adds	r3, #1
 800cf18:	d003      	beq.n	800cf22 <_fwalk_reent+0x3a>
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	47c0      	blx	r8
 800cf20:	4307      	orrs	r7, r0
 800cf22:	3568      	adds	r5, #104	; 0x68
 800cf24:	e7e9      	b.n	800cefa <_fwalk_reent+0x12>
	...

0800cf28 <_localeconv_r>:
 800cf28:	4800      	ldr	r0, [pc, #0]	; (800cf2c <_localeconv_r+0x4>)
 800cf2a:	4770      	bx	lr
 800cf2c:	20000190 	.word	0x20000190

0800cf30 <__retarget_lock_init_recursive>:
 800cf30:	4770      	bx	lr

0800cf32 <__retarget_lock_acquire_recursive>:
 800cf32:	4770      	bx	lr

0800cf34 <__retarget_lock_release_recursive>:
 800cf34:	4770      	bx	lr

0800cf36 <__swhatbuf_r>:
 800cf36:	b570      	push	{r4, r5, r6, lr}
 800cf38:	460e      	mov	r6, r1
 800cf3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf3e:	2900      	cmp	r1, #0
 800cf40:	b096      	sub	sp, #88	; 0x58
 800cf42:	4614      	mov	r4, r2
 800cf44:	461d      	mov	r5, r3
 800cf46:	da07      	bge.n	800cf58 <__swhatbuf_r+0x22>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	602b      	str	r3, [r5, #0]
 800cf4c:	89b3      	ldrh	r3, [r6, #12]
 800cf4e:	061a      	lsls	r2, r3, #24
 800cf50:	d410      	bmi.n	800cf74 <__swhatbuf_r+0x3e>
 800cf52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf56:	e00e      	b.n	800cf76 <__swhatbuf_r+0x40>
 800cf58:	466a      	mov	r2, sp
 800cf5a:	f000 fe91 	bl	800dc80 <_fstat_r>
 800cf5e:	2800      	cmp	r0, #0
 800cf60:	dbf2      	blt.n	800cf48 <__swhatbuf_r+0x12>
 800cf62:	9a01      	ldr	r2, [sp, #4]
 800cf64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf6c:	425a      	negs	r2, r3
 800cf6e:	415a      	adcs	r2, r3
 800cf70:	602a      	str	r2, [r5, #0]
 800cf72:	e7ee      	b.n	800cf52 <__swhatbuf_r+0x1c>
 800cf74:	2340      	movs	r3, #64	; 0x40
 800cf76:	2000      	movs	r0, #0
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	b016      	add	sp, #88	; 0x58
 800cf7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cf80 <__smakebuf_r>:
 800cf80:	898b      	ldrh	r3, [r1, #12]
 800cf82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf84:	079d      	lsls	r5, r3, #30
 800cf86:	4606      	mov	r6, r0
 800cf88:	460c      	mov	r4, r1
 800cf8a:	d507      	bpl.n	800cf9c <__smakebuf_r+0x1c>
 800cf8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	6123      	str	r3, [r4, #16]
 800cf94:	2301      	movs	r3, #1
 800cf96:	6163      	str	r3, [r4, #20]
 800cf98:	b002      	add	sp, #8
 800cf9a:	bd70      	pop	{r4, r5, r6, pc}
 800cf9c:	ab01      	add	r3, sp, #4
 800cf9e:	466a      	mov	r2, sp
 800cfa0:	f7ff ffc9 	bl	800cf36 <__swhatbuf_r>
 800cfa4:	9900      	ldr	r1, [sp, #0]
 800cfa6:	4605      	mov	r5, r0
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f000 fc0f 	bl	800d7cc <_malloc_r>
 800cfae:	b948      	cbnz	r0, 800cfc4 <__smakebuf_r+0x44>
 800cfb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfb4:	059a      	lsls	r2, r3, #22
 800cfb6:	d4ef      	bmi.n	800cf98 <__smakebuf_r+0x18>
 800cfb8:	f023 0303 	bic.w	r3, r3, #3
 800cfbc:	f043 0302 	orr.w	r3, r3, #2
 800cfc0:	81a3      	strh	r3, [r4, #12]
 800cfc2:	e7e3      	b.n	800cf8c <__smakebuf_r+0xc>
 800cfc4:	4b0d      	ldr	r3, [pc, #52]	; (800cffc <__smakebuf_r+0x7c>)
 800cfc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cfc8:	89a3      	ldrh	r3, [r4, #12]
 800cfca:	6020      	str	r0, [r4, #0]
 800cfcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfd0:	81a3      	strh	r3, [r4, #12]
 800cfd2:	9b00      	ldr	r3, [sp, #0]
 800cfd4:	6163      	str	r3, [r4, #20]
 800cfd6:	9b01      	ldr	r3, [sp, #4]
 800cfd8:	6120      	str	r0, [r4, #16]
 800cfda:	b15b      	cbz	r3, 800cff4 <__smakebuf_r+0x74>
 800cfdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	f000 fe5f 	bl	800dca4 <_isatty_r>
 800cfe6:	b128      	cbz	r0, 800cff4 <__smakebuf_r+0x74>
 800cfe8:	89a3      	ldrh	r3, [r4, #12]
 800cfea:	f023 0303 	bic.w	r3, r3, #3
 800cfee:	f043 0301 	orr.w	r3, r3, #1
 800cff2:	81a3      	strh	r3, [r4, #12]
 800cff4:	89a0      	ldrh	r0, [r4, #12]
 800cff6:	4305      	orrs	r5, r0
 800cff8:	81a5      	strh	r5, [r4, #12]
 800cffa:	e7cd      	b.n	800cf98 <__smakebuf_r+0x18>
 800cffc:	0800cd85 	.word	0x0800cd85

0800d000 <malloc>:
 800d000:	4b02      	ldr	r3, [pc, #8]	; (800d00c <malloc+0xc>)
 800d002:	4601      	mov	r1, r0
 800d004:	6818      	ldr	r0, [r3, #0]
 800d006:	f000 bbe1 	b.w	800d7cc <_malloc_r>
 800d00a:	bf00      	nop
 800d00c:	2000003c 	.word	0x2000003c

0800d010 <_Balloc>:
 800d010:	b570      	push	{r4, r5, r6, lr}
 800d012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d014:	4604      	mov	r4, r0
 800d016:	460d      	mov	r5, r1
 800d018:	b976      	cbnz	r6, 800d038 <_Balloc+0x28>
 800d01a:	2010      	movs	r0, #16
 800d01c:	f7ff fff0 	bl	800d000 <malloc>
 800d020:	4602      	mov	r2, r0
 800d022:	6260      	str	r0, [r4, #36]	; 0x24
 800d024:	b920      	cbnz	r0, 800d030 <_Balloc+0x20>
 800d026:	4b18      	ldr	r3, [pc, #96]	; (800d088 <_Balloc+0x78>)
 800d028:	4818      	ldr	r0, [pc, #96]	; (800d08c <_Balloc+0x7c>)
 800d02a:	2166      	movs	r1, #102	; 0x66
 800d02c:	f000 fde8 	bl	800dc00 <__assert_func>
 800d030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d034:	6006      	str	r6, [r0, #0]
 800d036:	60c6      	str	r6, [r0, #12]
 800d038:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d03a:	68f3      	ldr	r3, [r6, #12]
 800d03c:	b183      	cbz	r3, 800d060 <_Balloc+0x50>
 800d03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d046:	b9b8      	cbnz	r0, 800d078 <_Balloc+0x68>
 800d048:	2101      	movs	r1, #1
 800d04a:	fa01 f605 	lsl.w	r6, r1, r5
 800d04e:	1d72      	adds	r2, r6, #5
 800d050:	0092      	lsls	r2, r2, #2
 800d052:	4620      	mov	r0, r4
 800d054:	f000 fb5a 	bl	800d70c <_calloc_r>
 800d058:	b160      	cbz	r0, 800d074 <_Balloc+0x64>
 800d05a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d05e:	e00e      	b.n	800d07e <_Balloc+0x6e>
 800d060:	2221      	movs	r2, #33	; 0x21
 800d062:	2104      	movs	r1, #4
 800d064:	4620      	mov	r0, r4
 800d066:	f000 fb51 	bl	800d70c <_calloc_r>
 800d06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d06c:	60f0      	str	r0, [r6, #12]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1e4      	bne.n	800d03e <_Balloc+0x2e>
 800d074:	2000      	movs	r0, #0
 800d076:	bd70      	pop	{r4, r5, r6, pc}
 800d078:	6802      	ldr	r2, [r0, #0]
 800d07a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d07e:	2300      	movs	r3, #0
 800d080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d084:	e7f7      	b.n	800d076 <_Balloc+0x66>
 800d086:	bf00      	nop
 800d088:	0800e1ab 	.word	0x0800e1ab
 800d08c:	0800e294 	.word	0x0800e294

0800d090 <_Bfree>:
 800d090:	b570      	push	{r4, r5, r6, lr}
 800d092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d094:	4605      	mov	r5, r0
 800d096:	460c      	mov	r4, r1
 800d098:	b976      	cbnz	r6, 800d0b8 <_Bfree+0x28>
 800d09a:	2010      	movs	r0, #16
 800d09c:	f7ff ffb0 	bl	800d000 <malloc>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	6268      	str	r0, [r5, #36]	; 0x24
 800d0a4:	b920      	cbnz	r0, 800d0b0 <_Bfree+0x20>
 800d0a6:	4b09      	ldr	r3, [pc, #36]	; (800d0cc <_Bfree+0x3c>)
 800d0a8:	4809      	ldr	r0, [pc, #36]	; (800d0d0 <_Bfree+0x40>)
 800d0aa:	218a      	movs	r1, #138	; 0x8a
 800d0ac:	f000 fda8 	bl	800dc00 <__assert_func>
 800d0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0b4:	6006      	str	r6, [r0, #0]
 800d0b6:	60c6      	str	r6, [r0, #12]
 800d0b8:	b13c      	cbz	r4, 800d0ca <_Bfree+0x3a>
 800d0ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0bc:	6862      	ldr	r2, [r4, #4]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0c4:	6021      	str	r1, [r4, #0]
 800d0c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0ca:	bd70      	pop	{r4, r5, r6, pc}
 800d0cc:	0800e1ab 	.word	0x0800e1ab
 800d0d0:	0800e294 	.word	0x0800e294

0800d0d4 <__multadd>:
 800d0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d8:	690e      	ldr	r6, [r1, #16]
 800d0da:	4607      	mov	r7, r0
 800d0dc:	4698      	mov	r8, r3
 800d0de:	460c      	mov	r4, r1
 800d0e0:	f101 0014 	add.w	r0, r1, #20
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	6805      	ldr	r5, [r0, #0]
 800d0e8:	b2a9      	uxth	r1, r5
 800d0ea:	fb02 8101 	mla	r1, r2, r1, r8
 800d0ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d0f2:	0c2d      	lsrs	r5, r5, #16
 800d0f4:	fb02 c505 	mla	r5, r2, r5, ip
 800d0f8:	b289      	uxth	r1, r1
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d100:	429e      	cmp	r6, r3
 800d102:	f840 1b04 	str.w	r1, [r0], #4
 800d106:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d10a:	dcec      	bgt.n	800d0e6 <__multadd+0x12>
 800d10c:	f1b8 0f00 	cmp.w	r8, #0
 800d110:	d022      	beq.n	800d158 <__multadd+0x84>
 800d112:	68a3      	ldr	r3, [r4, #8]
 800d114:	42b3      	cmp	r3, r6
 800d116:	dc19      	bgt.n	800d14c <__multadd+0x78>
 800d118:	6861      	ldr	r1, [r4, #4]
 800d11a:	4638      	mov	r0, r7
 800d11c:	3101      	adds	r1, #1
 800d11e:	f7ff ff77 	bl	800d010 <_Balloc>
 800d122:	4605      	mov	r5, r0
 800d124:	b928      	cbnz	r0, 800d132 <__multadd+0x5e>
 800d126:	4602      	mov	r2, r0
 800d128:	4b0d      	ldr	r3, [pc, #52]	; (800d160 <__multadd+0x8c>)
 800d12a:	480e      	ldr	r0, [pc, #56]	; (800d164 <__multadd+0x90>)
 800d12c:	21b5      	movs	r1, #181	; 0xb5
 800d12e:	f000 fd67 	bl	800dc00 <__assert_func>
 800d132:	6922      	ldr	r2, [r4, #16]
 800d134:	3202      	adds	r2, #2
 800d136:	f104 010c 	add.w	r1, r4, #12
 800d13a:	0092      	lsls	r2, r2, #2
 800d13c:	300c      	adds	r0, #12
 800d13e:	f7fe f8df 	bl	800b300 <memcpy>
 800d142:	4621      	mov	r1, r4
 800d144:	4638      	mov	r0, r7
 800d146:	f7ff ffa3 	bl	800d090 <_Bfree>
 800d14a:	462c      	mov	r4, r5
 800d14c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d150:	3601      	adds	r6, #1
 800d152:	f8c3 8014 	str.w	r8, [r3, #20]
 800d156:	6126      	str	r6, [r4, #16]
 800d158:	4620      	mov	r0, r4
 800d15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d15e:	bf00      	nop
 800d160:	0800e221 	.word	0x0800e221
 800d164:	0800e294 	.word	0x0800e294

0800d168 <__hi0bits>:
 800d168:	0c03      	lsrs	r3, r0, #16
 800d16a:	041b      	lsls	r3, r3, #16
 800d16c:	b9d3      	cbnz	r3, 800d1a4 <__hi0bits+0x3c>
 800d16e:	0400      	lsls	r0, r0, #16
 800d170:	2310      	movs	r3, #16
 800d172:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d176:	bf04      	itt	eq
 800d178:	0200      	lsleq	r0, r0, #8
 800d17a:	3308      	addeq	r3, #8
 800d17c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d180:	bf04      	itt	eq
 800d182:	0100      	lsleq	r0, r0, #4
 800d184:	3304      	addeq	r3, #4
 800d186:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d18a:	bf04      	itt	eq
 800d18c:	0080      	lsleq	r0, r0, #2
 800d18e:	3302      	addeq	r3, #2
 800d190:	2800      	cmp	r0, #0
 800d192:	db05      	blt.n	800d1a0 <__hi0bits+0x38>
 800d194:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d198:	f103 0301 	add.w	r3, r3, #1
 800d19c:	bf08      	it	eq
 800d19e:	2320      	moveq	r3, #32
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	4770      	bx	lr
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	e7e4      	b.n	800d172 <__hi0bits+0xa>

0800d1a8 <__lo0bits>:
 800d1a8:	6803      	ldr	r3, [r0, #0]
 800d1aa:	f013 0207 	ands.w	r2, r3, #7
 800d1ae:	4601      	mov	r1, r0
 800d1b0:	d00b      	beq.n	800d1ca <__lo0bits+0x22>
 800d1b2:	07da      	lsls	r2, r3, #31
 800d1b4:	d424      	bmi.n	800d200 <__lo0bits+0x58>
 800d1b6:	0798      	lsls	r0, r3, #30
 800d1b8:	bf49      	itett	mi
 800d1ba:	085b      	lsrmi	r3, r3, #1
 800d1bc:	089b      	lsrpl	r3, r3, #2
 800d1be:	2001      	movmi	r0, #1
 800d1c0:	600b      	strmi	r3, [r1, #0]
 800d1c2:	bf5c      	itt	pl
 800d1c4:	600b      	strpl	r3, [r1, #0]
 800d1c6:	2002      	movpl	r0, #2
 800d1c8:	4770      	bx	lr
 800d1ca:	b298      	uxth	r0, r3
 800d1cc:	b9b0      	cbnz	r0, 800d1fc <__lo0bits+0x54>
 800d1ce:	0c1b      	lsrs	r3, r3, #16
 800d1d0:	2010      	movs	r0, #16
 800d1d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d1d6:	bf04      	itt	eq
 800d1d8:	0a1b      	lsreq	r3, r3, #8
 800d1da:	3008      	addeq	r0, #8
 800d1dc:	071a      	lsls	r2, r3, #28
 800d1de:	bf04      	itt	eq
 800d1e0:	091b      	lsreq	r3, r3, #4
 800d1e2:	3004      	addeq	r0, #4
 800d1e4:	079a      	lsls	r2, r3, #30
 800d1e6:	bf04      	itt	eq
 800d1e8:	089b      	lsreq	r3, r3, #2
 800d1ea:	3002      	addeq	r0, #2
 800d1ec:	07da      	lsls	r2, r3, #31
 800d1ee:	d403      	bmi.n	800d1f8 <__lo0bits+0x50>
 800d1f0:	085b      	lsrs	r3, r3, #1
 800d1f2:	f100 0001 	add.w	r0, r0, #1
 800d1f6:	d005      	beq.n	800d204 <__lo0bits+0x5c>
 800d1f8:	600b      	str	r3, [r1, #0]
 800d1fa:	4770      	bx	lr
 800d1fc:	4610      	mov	r0, r2
 800d1fe:	e7e8      	b.n	800d1d2 <__lo0bits+0x2a>
 800d200:	2000      	movs	r0, #0
 800d202:	4770      	bx	lr
 800d204:	2020      	movs	r0, #32
 800d206:	4770      	bx	lr

0800d208 <__i2b>:
 800d208:	b510      	push	{r4, lr}
 800d20a:	460c      	mov	r4, r1
 800d20c:	2101      	movs	r1, #1
 800d20e:	f7ff feff 	bl	800d010 <_Balloc>
 800d212:	4602      	mov	r2, r0
 800d214:	b928      	cbnz	r0, 800d222 <__i2b+0x1a>
 800d216:	4b05      	ldr	r3, [pc, #20]	; (800d22c <__i2b+0x24>)
 800d218:	4805      	ldr	r0, [pc, #20]	; (800d230 <__i2b+0x28>)
 800d21a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d21e:	f000 fcef 	bl	800dc00 <__assert_func>
 800d222:	2301      	movs	r3, #1
 800d224:	6144      	str	r4, [r0, #20]
 800d226:	6103      	str	r3, [r0, #16]
 800d228:	bd10      	pop	{r4, pc}
 800d22a:	bf00      	nop
 800d22c:	0800e221 	.word	0x0800e221
 800d230:	0800e294 	.word	0x0800e294

0800d234 <__multiply>:
 800d234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d238:	4614      	mov	r4, r2
 800d23a:	690a      	ldr	r2, [r1, #16]
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	429a      	cmp	r2, r3
 800d240:	bfb8      	it	lt
 800d242:	460b      	movlt	r3, r1
 800d244:	460d      	mov	r5, r1
 800d246:	bfbc      	itt	lt
 800d248:	4625      	movlt	r5, r4
 800d24a:	461c      	movlt	r4, r3
 800d24c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d250:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d254:	68ab      	ldr	r3, [r5, #8]
 800d256:	6869      	ldr	r1, [r5, #4]
 800d258:	eb0a 0709 	add.w	r7, sl, r9
 800d25c:	42bb      	cmp	r3, r7
 800d25e:	b085      	sub	sp, #20
 800d260:	bfb8      	it	lt
 800d262:	3101      	addlt	r1, #1
 800d264:	f7ff fed4 	bl	800d010 <_Balloc>
 800d268:	b930      	cbnz	r0, 800d278 <__multiply+0x44>
 800d26a:	4602      	mov	r2, r0
 800d26c:	4b42      	ldr	r3, [pc, #264]	; (800d378 <__multiply+0x144>)
 800d26e:	4843      	ldr	r0, [pc, #268]	; (800d37c <__multiply+0x148>)
 800d270:	f240 115d 	movw	r1, #349	; 0x15d
 800d274:	f000 fcc4 	bl	800dc00 <__assert_func>
 800d278:	f100 0614 	add.w	r6, r0, #20
 800d27c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d280:	4633      	mov	r3, r6
 800d282:	2200      	movs	r2, #0
 800d284:	4543      	cmp	r3, r8
 800d286:	d31e      	bcc.n	800d2c6 <__multiply+0x92>
 800d288:	f105 0c14 	add.w	ip, r5, #20
 800d28c:	f104 0314 	add.w	r3, r4, #20
 800d290:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d294:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d298:	9202      	str	r2, [sp, #8]
 800d29a:	ebac 0205 	sub.w	r2, ip, r5
 800d29e:	3a15      	subs	r2, #21
 800d2a0:	f022 0203 	bic.w	r2, r2, #3
 800d2a4:	3204      	adds	r2, #4
 800d2a6:	f105 0115 	add.w	r1, r5, #21
 800d2aa:	458c      	cmp	ip, r1
 800d2ac:	bf38      	it	cc
 800d2ae:	2204      	movcc	r2, #4
 800d2b0:	9201      	str	r2, [sp, #4]
 800d2b2:	9a02      	ldr	r2, [sp, #8]
 800d2b4:	9303      	str	r3, [sp, #12]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d808      	bhi.n	800d2cc <__multiply+0x98>
 800d2ba:	2f00      	cmp	r7, #0
 800d2bc:	dc55      	bgt.n	800d36a <__multiply+0x136>
 800d2be:	6107      	str	r7, [r0, #16]
 800d2c0:	b005      	add	sp, #20
 800d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c6:	f843 2b04 	str.w	r2, [r3], #4
 800d2ca:	e7db      	b.n	800d284 <__multiply+0x50>
 800d2cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800d2d0:	f1ba 0f00 	cmp.w	sl, #0
 800d2d4:	d020      	beq.n	800d318 <__multiply+0xe4>
 800d2d6:	f105 0e14 	add.w	lr, r5, #20
 800d2da:	46b1      	mov	r9, r6
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d2e2:	f8d9 b000 	ldr.w	fp, [r9]
 800d2e6:	b2a1      	uxth	r1, r4
 800d2e8:	fa1f fb8b 	uxth.w	fp, fp
 800d2ec:	fb0a b101 	mla	r1, sl, r1, fp
 800d2f0:	4411      	add	r1, r2
 800d2f2:	f8d9 2000 	ldr.w	r2, [r9]
 800d2f6:	0c24      	lsrs	r4, r4, #16
 800d2f8:	0c12      	lsrs	r2, r2, #16
 800d2fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800d2fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d302:	b289      	uxth	r1, r1
 800d304:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d308:	45f4      	cmp	ip, lr
 800d30a:	f849 1b04 	str.w	r1, [r9], #4
 800d30e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d312:	d8e4      	bhi.n	800d2de <__multiply+0xaa>
 800d314:	9901      	ldr	r1, [sp, #4]
 800d316:	5072      	str	r2, [r6, r1]
 800d318:	9a03      	ldr	r2, [sp, #12]
 800d31a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d31e:	3304      	adds	r3, #4
 800d320:	f1b9 0f00 	cmp.w	r9, #0
 800d324:	d01f      	beq.n	800d366 <__multiply+0x132>
 800d326:	6834      	ldr	r4, [r6, #0]
 800d328:	f105 0114 	add.w	r1, r5, #20
 800d32c:	46b6      	mov	lr, r6
 800d32e:	f04f 0a00 	mov.w	sl, #0
 800d332:	880a      	ldrh	r2, [r1, #0]
 800d334:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d338:	fb09 b202 	mla	r2, r9, r2, fp
 800d33c:	4492      	add	sl, r2
 800d33e:	b2a4      	uxth	r4, r4
 800d340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d344:	f84e 4b04 	str.w	r4, [lr], #4
 800d348:	f851 4b04 	ldr.w	r4, [r1], #4
 800d34c:	f8be 2000 	ldrh.w	r2, [lr]
 800d350:	0c24      	lsrs	r4, r4, #16
 800d352:	fb09 2404 	mla	r4, r9, r4, r2
 800d356:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d35a:	458c      	cmp	ip, r1
 800d35c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d360:	d8e7      	bhi.n	800d332 <__multiply+0xfe>
 800d362:	9a01      	ldr	r2, [sp, #4]
 800d364:	50b4      	str	r4, [r6, r2]
 800d366:	3604      	adds	r6, #4
 800d368:	e7a3      	b.n	800d2b2 <__multiply+0x7e>
 800d36a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1a5      	bne.n	800d2be <__multiply+0x8a>
 800d372:	3f01      	subs	r7, #1
 800d374:	e7a1      	b.n	800d2ba <__multiply+0x86>
 800d376:	bf00      	nop
 800d378:	0800e221 	.word	0x0800e221
 800d37c:	0800e294 	.word	0x0800e294

0800d380 <__pow5mult>:
 800d380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d384:	4615      	mov	r5, r2
 800d386:	f012 0203 	ands.w	r2, r2, #3
 800d38a:	4606      	mov	r6, r0
 800d38c:	460f      	mov	r7, r1
 800d38e:	d007      	beq.n	800d3a0 <__pow5mult+0x20>
 800d390:	4c25      	ldr	r4, [pc, #148]	; (800d428 <__pow5mult+0xa8>)
 800d392:	3a01      	subs	r2, #1
 800d394:	2300      	movs	r3, #0
 800d396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d39a:	f7ff fe9b 	bl	800d0d4 <__multadd>
 800d39e:	4607      	mov	r7, r0
 800d3a0:	10ad      	asrs	r5, r5, #2
 800d3a2:	d03d      	beq.n	800d420 <__pow5mult+0xa0>
 800d3a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d3a6:	b97c      	cbnz	r4, 800d3c8 <__pow5mult+0x48>
 800d3a8:	2010      	movs	r0, #16
 800d3aa:	f7ff fe29 	bl	800d000 <malloc>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	6270      	str	r0, [r6, #36]	; 0x24
 800d3b2:	b928      	cbnz	r0, 800d3c0 <__pow5mult+0x40>
 800d3b4:	4b1d      	ldr	r3, [pc, #116]	; (800d42c <__pow5mult+0xac>)
 800d3b6:	481e      	ldr	r0, [pc, #120]	; (800d430 <__pow5mult+0xb0>)
 800d3b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d3bc:	f000 fc20 	bl	800dc00 <__assert_func>
 800d3c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3c4:	6004      	str	r4, [r0, #0]
 800d3c6:	60c4      	str	r4, [r0, #12]
 800d3c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d3cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3d0:	b94c      	cbnz	r4, 800d3e6 <__pow5mult+0x66>
 800d3d2:	f240 2171 	movw	r1, #625	; 0x271
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	f7ff ff16 	bl	800d208 <__i2b>
 800d3dc:	2300      	movs	r3, #0
 800d3de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	6003      	str	r3, [r0, #0]
 800d3e6:	f04f 0900 	mov.w	r9, #0
 800d3ea:	07eb      	lsls	r3, r5, #31
 800d3ec:	d50a      	bpl.n	800d404 <__pow5mult+0x84>
 800d3ee:	4639      	mov	r1, r7
 800d3f0:	4622      	mov	r2, r4
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f7ff ff1e 	bl	800d234 <__multiply>
 800d3f8:	4639      	mov	r1, r7
 800d3fa:	4680      	mov	r8, r0
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f7ff fe47 	bl	800d090 <_Bfree>
 800d402:	4647      	mov	r7, r8
 800d404:	106d      	asrs	r5, r5, #1
 800d406:	d00b      	beq.n	800d420 <__pow5mult+0xa0>
 800d408:	6820      	ldr	r0, [r4, #0]
 800d40a:	b938      	cbnz	r0, 800d41c <__pow5mult+0x9c>
 800d40c:	4622      	mov	r2, r4
 800d40e:	4621      	mov	r1, r4
 800d410:	4630      	mov	r0, r6
 800d412:	f7ff ff0f 	bl	800d234 <__multiply>
 800d416:	6020      	str	r0, [r4, #0]
 800d418:	f8c0 9000 	str.w	r9, [r0]
 800d41c:	4604      	mov	r4, r0
 800d41e:	e7e4      	b.n	800d3ea <__pow5mult+0x6a>
 800d420:	4638      	mov	r0, r7
 800d422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d426:	bf00      	nop
 800d428:	0800e3e8 	.word	0x0800e3e8
 800d42c:	0800e1ab 	.word	0x0800e1ab
 800d430:	0800e294 	.word	0x0800e294

0800d434 <__lshift>:
 800d434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d438:	460c      	mov	r4, r1
 800d43a:	6849      	ldr	r1, [r1, #4]
 800d43c:	6923      	ldr	r3, [r4, #16]
 800d43e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d442:	68a3      	ldr	r3, [r4, #8]
 800d444:	4607      	mov	r7, r0
 800d446:	4691      	mov	r9, r2
 800d448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d44c:	f108 0601 	add.w	r6, r8, #1
 800d450:	42b3      	cmp	r3, r6
 800d452:	db0b      	blt.n	800d46c <__lshift+0x38>
 800d454:	4638      	mov	r0, r7
 800d456:	f7ff fddb 	bl	800d010 <_Balloc>
 800d45a:	4605      	mov	r5, r0
 800d45c:	b948      	cbnz	r0, 800d472 <__lshift+0x3e>
 800d45e:	4602      	mov	r2, r0
 800d460:	4b28      	ldr	r3, [pc, #160]	; (800d504 <__lshift+0xd0>)
 800d462:	4829      	ldr	r0, [pc, #164]	; (800d508 <__lshift+0xd4>)
 800d464:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d468:	f000 fbca 	bl	800dc00 <__assert_func>
 800d46c:	3101      	adds	r1, #1
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	e7ee      	b.n	800d450 <__lshift+0x1c>
 800d472:	2300      	movs	r3, #0
 800d474:	f100 0114 	add.w	r1, r0, #20
 800d478:	f100 0210 	add.w	r2, r0, #16
 800d47c:	4618      	mov	r0, r3
 800d47e:	4553      	cmp	r3, sl
 800d480:	db33      	blt.n	800d4ea <__lshift+0xb6>
 800d482:	6920      	ldr	r0, [r4, #16]
 800d484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d488:	f104 0314 	add.w	r3, r4, #20
 800d48c:	f019 091f 	ands.w	r9, r9, #31
 800d490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d494:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d498:	d02b      	beq.n	800d4f2 <__lshift+0xbe>
 800d49a:	f1c9 0e20 	rsb	lr, r9, #32
 800d49e:	468a      	mov	sl, r1
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	6818      	ldr	r0, [r3, #0]
 800d4a4:	fa00 f009 	lsl.w	r0, r0, r9
 800d4a8:	4302      	orrs	r2, r0
 800d4aa:	f84a 2b04 	str.w	r2, [sl], #4
 800d4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4b2:	459c      	cmp	ip, r3
 800d4b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4b8:	d8f3      	bhi.n	800d4a2 <__lshift+0x6e>
 800d4ba:	ebac 0304 	sub.w	r3, ip, r4
 800d4be:	3b15      	subs	r3, #21
 800d4c0:	f023 0303 	bic.w	r3, r3, #3
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	f104 0015 	add.w	r0, r4, #21
 800d4ca:	4584      	cmp	ip, r0
 800d4cc:	bf38      	it	cc
 800d4ce:	2304      	movcc	r3, #4
 800d4d0:	50ca      	str	r2, [r1, r3]
 800d4d2:	b10a      	cbz	r2, 800d4d8 <__lshift+0xa4>
 800d4d4:	f108 0602 	add.w	r6, r8, #2
 800d4d8:	3e01      	subs	r6, #1
 800d4da:	4638      	mov	r0, r7
 800d4dc:	612e      	str	r6, [r5, #16]
 800d4de:	4621      	mov	r1, r4
 800d4e0:	f7ff fdd6 	bl	800d090 <_Bfree>
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	e7c5      	b.n	800d47e <__lshift+0x4a>
 800d4f2:	3904      	subs	r1, #4
 800d4f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4fc:	459c      	cmp	ip, r3
 800d4fe:	d8f9      	bhi.n	800d4f4 <__lshift+0xc0>
 800d500:	e7ea      	b.n	800d4d8 <__lshift+0xa4>
 800d502:	bf00      	nop
 800d504:	0800e221 	.word	0x0800e221
 800d508:	0800e294 	.word	0x0800e294

0800d50c <__mcmp>:
 800d50c:	b530      	push	{r4, r5, lr}
 800d50e:	6902      	ldr	r2, [r0, #16]
 800d510:	690c      	ldr	r4, [r1, #16]
 800d512:	1b12      	subs	r2, r2, r4
 800d514:	d10e      	bne.n	800d534 <__mcmp+0x28>
 800d516:	f100 0314 	add.w	r3, r0, #20
 800d51a:	3114      	adds	r1, #20
 800d51c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d520:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d524:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d528:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d52c:	42a5      	cmp	r5, r4
 800d52e:	d003      	beq.n	800d538 <__mcmp+0x2c>
 800d530:	d305      	bcc.n	800d53e <__mcmp+0x32>
 800d532:	2201      	movs	r2, #1
 800d534:	4610      	mov	r0, r2
 800d536:	bd30      	pop	{r4, r5, pc}
 800d538:	4283      	cmp	r3, r0
 800d53a:	d3f3      	bcc.n	800d524 <__mcmp+0x18>
 800d53c:	e7fa      	b.n	800d534 <__mcmp+0x28>
 800d53e:	f04f 32ff 	mov.w	r2, #4294967295
 800d542:	e7f7      	b.n	800d534 <__mcmp+0x28>

0800d544 <__mdiff>:
 800d544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d548:	460c      	mov	r4, r1
 800d54a:	4606      	mov	r6, r0
 800d54c:	4611      	mov	r1, r2
 800d54e:	4620      	mov	r0, r4
 800d550:	4617      	mov	r7, r2
 800d552:	f7ff ffdb 	bl	800d50c <__mcmp>
 800d556:	1e05      	subs	r5, r0, #0
 800d558:	d110      	bne.n	800d57c <__mdiff+0x38>
 800d55a:	4629      	mov	r1, r5
 800d55c:	4630      	mov	r0, r6
 800d55e:	f7ff fd57 	bl	800d010 <_Balloc>
 800d562:	b930      	cbnz	r0, 800d572 <__mdiff+0x2e>
 800d564:	4b39      	ldr	r3, [pc, #228]	; (800d64c <__mdiff+0x108>)
 800d566:	4602      	mov	r2, r0
 800d568:	f240 2132 	movw	r1, #562	; 0x232
 800d56c:	4838      	ldr	r0, [pc, #224]	; (800d650 <__mdiff+0x10c>)
 800d56e:	f000 fb47 	bl	800dc00 <__assert_func>
 800d572:	2301      	movs	r3, #1
 800d574:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57c:	bfa4      	itt	ge
 800d57e:	463b      	movge	r3, r7
 800d580:	4627      	movge	r7, r4
 800d582:	4630      	mov	r0, r6
 800d584:	6879      	ldr	r1, [r7, #4]
 800d586:	bfa6      	itte	ge
 800d588:	461c      	movge	r4, r3
 800d58a:	2500      	movge	r5, #0
 800d58c:	2501      	movlt	r5, #1
 800d58e:	f7ff fd3f 	bl	800d010 <_Balloc>
 800d592:	b920      	cbnz	r0, 800d59e <__mdiff+0x5a>
 800d594:	4b2d      	ldr	r3, [pc, #180]	; (800d64c <__mdiff+0x108>)
 800d596:	4602      	mov	r2, r0
 800d598:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d59c:	e7e6      	b.n	800d56c <__mdiff+0x28>
 800d59e:	693e      	ldr	r6, [r7, #16]
 800d5a0:	60c5      	str	r5, [r0, #12]
 800d5a2:	6925      	ldr	r5, [r4, #16]
 800d5a4:	f107 0114 	add.w	r1, r7, #20
 800d5a8:	f104 0914 	add.w	r9, r4, #20
 800d5ac:	f100 0e14 	add.w	lr, r0, #20
 800d5b0:	f107 0210 	add.w	r2, r7, #16
 800d5b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d5b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d5bc:	46f2      	mov	sl, lr
 800d5be:	2700      	movs	r7, #0
 800d5c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5c8:	fa1f f883 	uxth.w	r8, r3
 800d5cc:	fa17 f78b 	uxtah	r7, r7, fp
 800d5d0:	0c1b      	lsrs	r3, r3, #16
 800d5d2:	eba7 0808 	sub.w	r8, r7, r8
 800d5d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d5da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d5de:	fa1f f888 	uxth.w	r8, r8
 800d5e2:	141f      	asrs	r7, r3, #16
 800d5e4:	454d      	cmp	r5, r9
 800d5e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d5ea:	f84a 3b04 	str.w	r3, [sl], #4
 800d5ee:	d8e7      	bhi.n	800d5c0 <__mdiff+0x7c>
 800d5f0:	1b2b      	subs	r3, r5, r4
 800d5f2:	3b15      	subs	r3, #21
 800d5f4:	f023 0303 	bic.w	r3, r3, #3
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	3415      	adds	r4, #21
 800d5fc:	42a5      	cmp	r5, r4
 800d5fe:	bf38      	it	cc
 800d600:	2304      	movcc	r3, #4
 800d602:	4419      	add	r1, r3
 800d604:	4473      	add	r3, lr
 800d606:	469e      	mov	lr, r3
 800d608:	460d      	mov	r5, r1
 800d60a:	4565      	cmp	r5, ip
 800d60c:	d30e      	bcc.n	800d62c <__mdiff+0xe8>
 800d60e:	f10c 0203 	add.w	r2, ip, #3
 800d612:	1a52      	subs	r2, r2, r1
 800d614:	f022 0203 	bic.w	r2, r2, #3
 800d618:	3903      	subs	r1, #3
 800d61a:	458c      	cmp	ip, r1
 800d61c:	bf38      	it	cc
 800d61e:	2200      	movcc	r2, #0
 800d620:	441a      	add	r2, r3
 800d622:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d626:	b17b      	cbz	r3, 800d648 <__mdiff+0x104>
 800d628:	6106      	str	r6, [r0, #16]
 800d62a:	e7a5      	b.n	800d578 <__mdiff+0x34>
 800d62c:	f855 8b04 	ldr.w	r8, [r5], #4
 800d630:	fa17 f488 	uxtah	r4, r7, r8
 800d634:	1422      	asrs	r2, r4, #16
 800d636:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d63a:	b2a4      	uxth	r4, r4
 800d63c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d640:	f84e 4b04 	str.w	r4, [lr], #4
 800d644:	1417      	asrs	r7, r2, #16
 800d646:	e7e0      	b.n	800d60a <__mdiff+0xc6>
 800d648:	3e01      	subs	r6, #1
 800d64a:	e7ea      	b.n	800d622 <__mdiff+0xde>
 800d64c:	0800e221 	.word	0x0800e221
 800d650:	0800e294 	.word	0x0800e294

0800d654 <__d2b>:
 800d654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d658:	4689      	mov	r9, r1
 800d65a:	2101      	movs	r1, #1
 800d65c:	ec57 6b10 	vmov	r6, r7, d0
 800d660:	4690      	mov	r8, r2
 800d662:	f7ff fcd5 	bl	800d010 <_Balloc>
 800d666:	4604      	mov	r4, r0
 800d668:	b930      	cbnz	r0, 800d678 <__d2b+0x24>
 800d66a:	4602      	mov	r2, r0
 800d66c:	4b25      	ldr	r3, [pc, #148]	; (800d704 <__d2b+0xb0>)
 800d66e:	4826      	ldr	r0, [pc, #152]	; (800d708 <__d2b+0xb4>)
 800d670:	f240 310a 	movw	r1, #778	; 0x30a
 800d674:	f000 fac4 	bl	800dc00 <__assert_func>
 800d678:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d67c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d680:	bb35      	cbnz	r5, 800d6d0 <__d2b+0x7c>
 800d682:	2e00      	cmp	r6, #0
 800d684:	9301      	str	r3, [sp, #4]
 800d686:	d028      	beq.n	800d6da <__d2b+0x86>
 800d688:	4668      	mov	r0, sp
 800d68a:	9600      	str	r6, [sp, #0]
 800d68c:	f7ff fd8c 	bl	800d1a8 <__lo0bits>
 800d690:	9900      	ldr	r1, [sp, #0]
 800d692:	b300      	cbz	r0, 800d6d6 <__d2b+0x82>
 800d694:	9a01      	ldr	r2, [sp, #4]
 800d696:	f1c0 0320 	rsb	r3, r0, #32
 800d69a:	fa02 f303 	lsl.w	r3, r2, r3
 800d69e:	430b      	orrs	r3, r1
 800d6a0:	40c2      	lsrs	r2, r0
 800d6a2:	6163      	str	r3, [r4, #20]
 800d6a4:	9201      	str	r2, [sp, #4]
 800d6a6:	9b01      	ldr	r3, [sp, #4]
 800d6a8:	61a3      	str	r3, [r4, #24]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	bf14      	ite	ne
 800d6ae:	2202      	movne	r2, #2
 800d6b0:	2201      	moveq	r2, #1
 800d6b2:	6122      	str	r2, [r4, #16]
 800d6b4:	b1d5      	cbz	r5, 800d6ec <__d2b+0x98>
 800d6b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d6ba:	4405      	add	r5, r0
 800d6bc:	f8c9 5000 	str.w	r5, [r9]
 800d6c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d6c4:	f8c8 0000 	str.w	r0, [r8]
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	b003      	add	sp, #12
 800d6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6d4:	e7d5      	b.n	800d682 <__d2b+0x2e>
 800d6d6:	6161      	str	r1, [r4, #20]
 800d6d8:	e7e5      	b.n	800d6a6 <__d2b+0x52>
 800d6da:	a801      	add	r0, sp, #4
 800d6dc:	f7ff fd64 	bl	800d1a8 <__lo0bits>
 800d6e0:	9b01      	ldr	r3, [sp, #4]
 800d6e2:	6163      	str	r3, [r4, #20]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	6122      	str	r2, [r4, #16]
 800d6e8:	3020      	adds	r0, #32
 800d6ea:	e7e3      	b.n	800d6b4 <__d2b+0x60>
 800d6ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d6f4:	f8c9 0000 	str.w	r0, [r9]
 800d6f8:	6918      	ldr	r0, [r3, #16]
 800d6fa:	f7ff fd35 	bl	800d168 <__hi0bits>
 800d6fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d702:	e7df      	b.n	800d6c4 <__d2b+0x70>
 800d704:	0800e221 	.word	0x0800e221
 800d708:	0800e294 	.word	0x0800e294

0800d70c <_calloc_r>:
 800d70c:	b513      	push	{r0, r1, r4, lr}
 800d70e:	434a      	muls	r2, r1
 800d710:	4611      	mov	r1, r2
 800d712:	9201      	str	r2, [sp, #4]
 800d714:	f000 f85a 	bl	800d7cc <_malloc_r>
 800d718:	4604      	mov	r4, r0
 800d71a:	b118      	cbz	r0, 800d724 <_calloc_r+0x18>
 800d71c:	9a01      	ldr	r2, [sp, #4]
 800d71e:	2100      	movs	r1, #0
 800d720:	f7fd fdfc 	bl	800b31c <memset>
 800d724:	4620      	mov	r0, r4
 800d726:	b002      	add	sp, #8
 800d728:	bd10      	pop	{r4, pc}
	...

0800d72c <_free_r>:
 800d72c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d72e:	2900      	cmp	r1, #0
 800d730:	d048      	beq.n	800d7c4 <_free_r+0x98>
 800d732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d736:	9001      	str	r0, [sp, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f1a1 0404 	sub.w	r4, r1, #4
 800d73e:	bfb8      	it	lt
 800d740:	18e4      	addlt	r4, r4, r3
 800d742:	f000 fae3 	bl	800dd0c <__malloc_lock>
 800d746:	4a20      	ldr	r2, [pc, #128]	; (800d7c8 <_free_r+0x9c>)
 800d748:	9801      	ldr	r0, [sp, #4]
 800d74a:	6813      	ldr	r3, [r2, #0]
 800d74c:	4615      	mov	r5, r2
 800d74e:	b933      	cbnz	r3, 800d75e <_free_r+0x32>
 800d750:	6063      	str	r3, [r4, #4]
 800d752:	6014      	str	r4, [r2, #0]
 800d754:	b003      	add	sp, #12
 800d756:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d75a:	f000 badd 	b.w	800dd18 <__malloc_unlock>
 800d75e:	42a3      	cmp	r3, r4
 800d760:	d90b      	bls.n	800d77a <_free_r+0x4e>
 800d762:	6821      	ldr	r1, [r4, #0]
 800d764:	1862      	adds	r2, r4, r1
 800d766:	4293      	cmp	r3, r2
 800d768:	bf04      	itt	eq
 800d76a:	681a      	ldreq	r2, [r3, #0]
 800d76c:	685b      	ldreq	r3, [r3, #4]
 800d76e:	6063      	str	r3, [r4, #4]
 800d770:	bf04      	itt	eq
 800d772:	1852      	addeq	r2, r2, r1
 800d774:	6022      	streq	r2, [r4, #0]
 800d776:	602c      	str	r4, [r5, #0]
 800d778:	e7ec      	b.n	800d754 <_free_r+0x28>
 800d77a:	461a      	mov	r2, r3
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	b10b      	cbz	r3, 800d784 <_free_r+0x58>
 800d780:	42a3      	cmp	r3, r4
 800d782:	d9fa      	bls.n	800d77a <_free_r+0x4e>
 800d784:	6811      	ldr	r1, [r2, #0]
 800d786:	1855      	adds	r5, r2, r1
 800d788:	42a5      	cmp	r5, r4
 800d78a:	d10b      	bne.n	800d7a4 <_free_r+0x78>
 800d78c:	6824      	ldr	r4, [r4, #0]
 800d78e:	4421      	add	r1, r4
 800d790:	1854      	adds	r4, r2, r1
 800d792:	42a3      	cmp	r3, r4
 800d794:	6011      	str	r1, [r2, #0]
 800d796:	d1dd      	bne.n	800d754 <_free_r+0x28>
 800d798:	681c      	ldr	r4, [r3, #0]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	6053      	str	r3, [r2, #4]
 800d79e:	4421      	add	r1, r4
 800d7a0:	6011      	str	r1, [r2, #0]
 800d7a2:	e7d7      	b.n	800d754 <_free_r+0x28>
 800d7a4:	d902      	bls.n	800d7ac <_free_r+0x80>
 800d7a6:	230c      	movs	r3, #12
 800d7a8:	6003      	str	r3, [r0, #0]
 800d7aa:	e7d3      	b.n	800d754 <_free_r+0x28>
 800d7ac:	6825      	ldr	r5, [r4, #0]
 800d7ae:	1961      	adds	r1, r4, r5
 800d7b0:	428b      	cmp	r3, r1
 800d7b2:	bf04      	itt	eq
 800d7b4:	6819      	ldreq	r1, [r3, #0]
 800d7b6:	685b      	ldreq	r3, [r3, #4]
 800d7b8:	6063      	str	r3, [r4, #4]
 800d7ba:	bf04      	itt	eq
 800d7bc:	1949      	addeq	r1, r1, r5
 800d7be:	6021      	streq	r1, [r4, #0]
 800d7c0:	6054      	str	r4, [r2, #4]
 800d7c2:	e7c7      	b.n	800d754 <_free_r+0x28>
 800d7c4:	b003      	add	sp, #12
 800d7c6:	bd30      	pop	{r4, r5, pc}
 800d7c8:	20000238 	.word	0x20000238

0800d7cc <_malloc_r>:
 800d7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ce:	1ccd      	adds	r5, r1, #3
 800d7d0:	f025 0503 	bic.w	r5, r5, #3
 800d7d4:	3508      	adds	r5, #8
 800d7d6:	2d0c      	cmp	r5, #12
 800d7d8:	bf38      	it	cc
 800d7da:	250c      	movcc	r5, #12
 800d7dc:	2d00      	cmp	r5, #0
 800d7de:	4606      	mov	r6, r0
 800d7e0:	db01      	blt.n	800d7e6 <_malloc_r+0x1a>
 800d7e2:	42a9      	cmp	r1, r5
 800d7e4:	d903      	bls.n	800d7ee <_malloc_r+0x22>
 800d7e6:	230c      	movs	r3, #12
 800d7e8:	6033      	str	r3, [r6, #0]
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ee:	f000 fa8d 	bl	800dd0c <__malloc_lock>
 800d7f2:	4921      	ldr	r1, [pc, #132]	; (800d878 <_malloc_r+0xac>)
 800d7f4:	680a      	ldr	r2, [r1, #0]
 800d7f6:	4614      	mov	r4, r2
 800d7f8:	b99c      	cbnz	r4, 800d822 <_malloc_r+0x56>
 800d7fa:	4f20      	ldr	r7, [pc, #128]	; (800d87c <_malloc_r+0xb0>)
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	b923      	cbnz	r3, 800d80a <_malloc_r+0x3e>
 800d800:	4621      	mov	r1, r4
 800d802:	4630      	mov	r0, r6
 800d804:	f000 f996 	bl	800db34 <_sbrk_r>
 800d808:	6038      	str	r0, [r7, #0]
 800d80a:	4629      	mov	r1, r5
 800d80c:	4630      	mov	r0, r6
 800d80e:	f000 f991 	bl	800db34 <_sbrk_r>
 800d812:	1c43      	adds	r3, r0, #1
 800d814:	d123      	bne.n	800d85e <_malloc_r+0x92>
 800d816:	230c      	movs	r3, #12
 800d818:	6033      	str	r3, [r6, #0]
 800d81a:	4630      	mov	r0, r6
 800d81c:	f000 fa7c 	bl	800dd18 <__malloc_unlock>
 800d820:	e7e3      	b.n	800d7ea <_malloc_r+0x1e>
 800d822:	6823      	ldr	r3, [r4, #0]
 800d824:	1b5b      	subs	r3, r3, r5
 800d826:	d417      	bmi.n	800d858 <_malloc_r+0x8c>
 800d828:	2b0b      	cmp	r3, #11
 800d82a:	d903      	bls.n	800d834 <_malloc_r+0x68>
 800d82c:	6023      	str	r3, [r4, #0]
 800d82e:	441c      	add	r4, r3
 800d830:	6025      	str	r5, [r4, #0]
 800d832:	e004      	b.n	800d83e <_malloc_r+0x72>
 800d834:	6863      	ldr	r3, [r4, #4]
 800d836:	42a2      	cmp	r2, r4
 800d838:	bf0c      	ite	eq
 800d83a:	600b      	streq	r3, [r1, #0]
 800d83c:	6053      	strne	r3, [r2, #4]
 800d83e:	4630      	mov	r0, r6
 800d840:	f000 fa6a 	bl	800dd18 <__malloc_unlock>
 800d844:	f104 000b 	add.w	r0, r4, #11
 800d848:	1d23      	adds	r3, r4, #4
 800d84a:	f020 0007 	bic.w	r0, r0, #7
 800d84e:	1ac2      	subs	r2, r0, r3
 800d850:	d0cc      	beq.n	800d7ec <_malloc_r+0x20>
 800d852:	1a1b      	subs	r3, r3, r0
 800d854:	50a3      	str	r3, [r4, r2]
 800d856:	e7c9      	b.n	800d7ec <_malloc_r+0x20>
 800d858:	4622      	mov	r2, r4
 800d85a:	6864      	ldr	r4, [r4, #4]
 800d85c:	e7cc      	b.n	800d7f8 <_malloc_r+0x2c>
 800d85e:	1cc4      	adds	r4, r0, #3
 800d860:	f024 0403 	bic.w	r4, r4, #3
 800d864:	42a0      	cmp	r0, r4
 800d866:	d0e3      	beq.n	800d830 <_malloc_r+0x64>
 800d868:	1a21      	subs	r1, r4, r0
 800d86a:	4630      	mov	r0, r6
 800d86c:	f000 f962 	bl	800db34 <_sbrk_r>
 800d870:	3001      	adds	r0, #1
 800d872:	d1dd      	bne.n	800d830 <_malloc_r+0x64>
 800d874:	e7cf      	b.n	800d816 <_malloc_r+0x4a>
 800d876:	bf00      	nop
 800d878:	20000238 	.word	0x20000238
 800d87c:	2000023c 	.word	0x2000023c

0800d880 <__sfputc_r>:
 800d880:	6893      	ldr	r3, [r2, #8]
 800d882:	3b01      	subs	r3, #1
 800d884:	2b00      	cmp	r3, #0
 800d886:	b410      	push	{r4}
 800d888:	6093      	str	r3, [r2, #8]
 800d88a:	da08      	bge.n	800d89e <__sfputc_r+0x1e>
 800d88c:	6994      	ldr	r4, [r2, #24]
 800d88e:	42a3      	cmp	r3, r4
 800d890:	db01      	blt.n	800d896 <__sfputc_r+0x16>
 800d892:	290a      	cmp	r1, #10
 800d894:	d103      	bne.n	800d89e <__sfputc_r+0x1e>
 800d896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d89a:	f7fe ba53 	b.w	800bd44 <__swbuf_r>
 800d89e:	6813      	ldr	r3, [r2, #0]
 800d8a0:	1c58      	adds	r0, r3, #1
 800d8a2:	6010      	str	r0, [r2, #0]
 800d8a4:	7019      	strb	r1, [r3, #0]
 800d8a6:	4608      	mov	r0, r1
 800d8a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8ac:	4770      	bx	lr

0800d8ae <__sfputs_r>:
 800d8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b0:	4606      	mov	r6, r0
 800d8b2:	460f      	mov	r7, r1
 800d8b4:	4614      	mov	r4, r2
 800d8b6:	18d5      	adds	r5, r2, r3
 800d8b8:	42ac      	cmp	r4, r5
 800d8ba:	d101      	bne.n	800d8c0 <__sfputs_r+0x12>
 800d8bc:	2000      	movs	r0, #0
 800d8be:	e007      	b.n	800d8d0 <__sfputs_r+0x22>
 800d8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c4:	463a      	mov	r2, r7
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f7ff ffda 	bl	800d880 <__sfputc_r>
 800d8cc:	1c43      	adds	r3, r0, #1
 800d8ce:	d1f3      	bne.n	800d8b8 <__sfputs_r+0xa>
 800d8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d8d4 <_vfiprintf_r>:
 800d8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d8:	460d      	mov	r5, r1
 800d8da:	b09d      	sub	sp, #116	; 0x74
 800d8dc:	4614      	mov	r4, r2
 800d8de:	4698      	mov	r8, r3
 800d8e0:	4606      	mov	r6, r0
 800d8e2:	b118      	cbz	r0, 800d8ec <_vfiprintf_r+0x18>
 800d8e4:	6983      	ldr	r3, [r0, #24]
 800d8e6:	b90b      	cbnz	r3, 800d8ec <_vfiprintf_r+0x18>
 800d8e8:	f7ff fa80 	bl	800cdec <__sinit>
 800d8ec:	4b89      	ldr	r3, [pc, #548]	; (800db14 <_vfiprintf_r+0x240>)
 800d8ee:	429d      	cmp	r5, r3
 800d8f0:	d11b      	bne.n	800d92a <_vfiprintf_r+0x56>
 800d8f2:	6875      	ldr	r5, [r6, #4]
 800d8f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8f6:	07d9      	lsls	r1, r3, #31
 800d8f8:	d405      	bmi.n	800d906 <_vfiprintf_r+0x32>
 800d8fa:	89ab      	ldrh	r3, [r5, #12]
 800d8fc:	059a      	lsls	r2, r3, #22
 800d8fe:	d402      	bmi.n	800d906 <_vfiprintf_r+0x32>
 800d900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d902:	f7ff fb16 	bl	800cf32 <__retarget_lock_acquire_recursive>
 800d906:	89ab      	ldrh	r3, [r5, #12]
 800d908:	071b      	lsls	r3, r3, #28
 800d90a:	d501      	bpl.n	800d910 <_vfiprintf_r+0x3c>
 800d90c:	692b      	ldr	r3, [r5, #16]
 800d90e:	b9eb      	cbnz	r3, 800d94c <_vfiprintf_r+0x78>
 800d910:	4629      	mov	r1, r5
 800d912:	4630      	mov	r0, r6
 800d914:	f7fe fa68 	bl	800bde8 <__swsetup_r>
 800d918:	b1c0      	cbz	r0, 800d94c <_vfiprintf_r+0x78>
 800d91a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d91c:	07dc      	lsls	r4, r3, #31
 800d91e:	d50e      	bpl.n	800d93e <_vfiprintf_r+0x6a>
 800d920:	f04f 30ff 	mov.w	r0, #4294967295
 800d924:	b01d      	add	sp, #116	; 0x74
 800d926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d92a:	4b7b      	ldr	r3, [pc, #492]	; (800db18 <_vfiprintf_r+0x244>)
 800d92c:	429d      	cmp	r5, r3
 800d92e:	d101      	bne.n	800d934 <_vfiprintf_r+0x60>
 800d930:	68b5      	ldr	r5, [r6, #8]
 800d932:	e7df      	b.n	800d8f4 <_vfiprintf_r+0x20>
 800d934:	4b79      	ldr	r3, [pc, #484]	; (800db1c <_vfiprintf_r+0x248>)
 800d936:	429d      	cmp	r5, r3
 800d938:	bf08      	it	eq
 800d93a:	68f5      	ldreq	r5, [r6, #12]
 800d93c:	e7da      	b.n	800d8f4 <_vfiprintf_r+0x20>
 800d93e:	89ab      	ldrh	r3, [r5, #12]
 800d940:	0598      	lsls	r0, r3, #22
 800d942:	d4ed      	bmi.n	800d920 <_vfiprintf_r+0x4c>
 800d944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d946:	f7ff faf5 	bl	800cf34 <__retarget_lock_release_recursive>
 800d94a:	e7e9      	b.n	800d920 <_vfiprintf_r+0x4c>
 800d94c:	2300      	movs	r3, #0
 800d94e:	9309      	str	r3, [sp, #36]	; 0x24
 800d950:	2320      	movs	r3, #32
 800d952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d956:	f8cd 800c 	str.w	r8, [sp, #12]
 800d95a:	2330      	movs	r3, #48	; 0x30
 800d95c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800db20 <_vfiprintf_r+0x24c>
 800d960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d964:	f04f 0901 	mov.w	r9, #1
 800d968:	4623      	mov	r3, r4
 800d96a:	469a      	mov	sl, r3
 800d96c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d970:	b10a      	cbz	r2, 800d976 <_vfiprintf_r+0xa2>
 800d972:	2a25      	cmp	r2, #37	; 0x25
 800d974:	d1f9      	bne.n	800d96a <_vfiprintf_r+0x96>
 800d976:	ebba 0b04 	subs.w	fp, sl, r4
 800d97a:	d00b      	beq.n	800d994 <_vfiprintf_r+0xc0>
 800d97c:	465b      	mov	r3, fp
 800d97e:	4622      	mov	r2, r4
 800d980:	4629      	mov	r1, r5
 800d982:	4630      	mov	r0, r6
 800d984:	f7ff ff93 	bl	800d8ae <__sfputs_r>
 800d988:	3001      	adds	r0, #1
 800d98a:	f000 80aa 	beq.w	800dae2 <_vfiprintf_r+0x20e>
 800d98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d990:	445a      	add	r2, fp
 800d992:	9209      	str	r2, [sp, #36]	; 0x24
 800d994:	f89a 3000 	ldrb.w	r3, [sl]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 80a2 	beq.w	800dae2 <_vfiprintf_r+0x20e>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9a8:	f10a 0a01 	add.w	sl, sl, #1
 800d9ac:	9304      	str	r3, [sp, #16]
 800d9ae:	9307      	str	r3, [sp, #28]
 800d9b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d9b6:	4654      	mov	r4, sl
 800d9b8:	2205      	movs	r2, #5
 800d9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9be:	4858      	ldr	r0, [pc, #352]	; (800db20 <_vfiprintf_r+0x24c>)
 800d9c0:	f7f2 fc16 	bl	80001f0 <memchr>
 800d9c4:	9a04      	ldr	r2, [sp, #16]
 800d9c6:	b9d8      	cbnz	r0, 800da00 <_vfiprintf_r+0x12c>
 800d9c8:	06d1      	lsls	r1, r2, #27
 800d9ca:	bf44      	itt	mi
 800d9cc:	2320      	movmi	r3, #32
 800d9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9d2:	0713      	lsls	r3, r2, #28
 800d9d4:	bf44      	itt	mi
 800d9d6:	232b      	movmi	r3, #43	; 0x2b
 800d9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d9e2:	d015      	beq.n	800da10 <_vfiprintf_r+0x13c>
 800d9e4:	9a07      	ldr	r2, [sp, #28]
 800d9e6:	4654      	mov	r4, sl
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	f04f 0c0a 	mov.w	ip, #10
 800d9ee:	4621      	mov	r1, r4
 800d9f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9f4:	3b30      	subs	r3, #48	; 0x30
 800d9f6:	2b09      	cmp	r3, #9
 800d9f8:	d94e      	bls.n	800da98 <_vfiprintf_r+0x1c4>
 800d9fa:	b1b0      	cbz	r0, 800da2a <_vfiprintf_r+0x156>
 800d9fc:	9207      	str	r2, [sp, #28]
 800d9fe:	e014      	b.n	800da2a <_vfiprintf_r+0x156>
 800da00:	eba0 0308 	sub.w	r3, r0, r8
 800da04:	fa09 f303 	lsl.w	r3, r9, r3
 800da08:	4313      	orrs	r3, r2
 800da0a:	9304      	str	r3, [sp, #16]
 800da0c:	46a2      	mov	sl, r4
 800da0e:	e7d2      	b.n	800d9b6 <_vfiprintf_r+0xe2>
 800da10:	9b03      	ldr	r3, [sp, #12]
 800da12:	1d19      	adds	r1, r3, #4
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	9103      	str	r1, [sp, #12]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	bfbb      	ittet	lt
 800da1c:	425b      	neglt	r3, r3
 800da1e:	f042 0202 	orrlt.w	r2, r2, #2
 800da22:	9307      	strge	r3, [sp, #28]
 800da24:	9307      	strlt	r3, [sp, #28]
 800da26:	bfb8      	it	lt
 800da28:	9204      	strlt	r2, [sp, #16]
 800da2a:	7823      	ldrb	r3, [r4, #0]
 800da2c:	2b2e      	cmp	r3, #46	; 0x2e
 800da2e:	d10c      	bne.n	800da4a <_vfiprintf_r+0x176>
 800da30:	7863      	ldrb	r3, [r4, #1]
 800da32:	2b2a      	cmp	r3, #42	; 0x2a
 800da34:	d135      	bne.n	800daa2 <_vfiprintf_r+0x1ce>
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	1d1a      	adds	r2, r3, #4
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	9203      	str	r2, [sp, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	bfb8      	it	lt
 800da42:	f04f 33ff 	movlt.w	r3, #4294967295
 800da46:	3402      	adds	r4, #2
 800da48:	9305      	str	r3, [sp, #20]
 800da4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800db30 <_vfiprintf_r+0x25c>
 800da4e:	7821      	ldrb	r1, [r4, #0]
 800da50:	2203      	movs	r2, #3
 800da52:	4650      	mov	r0, sl
 800da54:	f7f2 fbcc 	bl	80001f0 <memchr>
 800da58:	b140      	cbz	r0, 800da6c <_vfiprintf_r+0x198>
 800da5a:	2340      	movs	r3, #64	; 0x40
 800da5c:	eba0 000a 	sub.w	r0, r0, sl
 800da60:	fa03 f000 	lsl.w	r0, r3, r0
 800da64:	9b04      	ldr	r3, [sp, #16]
 800da66:	4303      	orrs	r3, r0
 800da68:	3401      	adds	r4, #1
 800da6a:	9304      	str	r3, [sp, #16]
 800da6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da70:	482c      	ldr	r0, [pc, #176]	; (800db24 <_vfiprintf_r+0x250>)
 800da72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da76:	2206      	movs	r2, #6
 800da78:	f7f2 fbba 	bl	80001f0 <memchr>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	d03f      	beq.n	800db00 <_vfiprintf_r+0x22c>
 800da80:	4b29      	ldr	r3, [pc, #164]	; (800db28 <_vfiprintf_r+0x254>)
 800da82:	bb1b      	cbnz	r3, 800dacc <_vfiprintf_r+0x1f8>
 800da84:	9b03      	ldr	r3, [sp, #12]
 800da86:	3307      	adds	r3, #7
 800da88:	f023 0307 	bic.w	r3, r3, #7
 800da8c:	3308      	adds	r3, #8
 800da8e:	9303      	str	r3, [sp, #12]
 800da90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da92:	443b      	add	r3, r7
 800da94:	9309      	str	r3, [sp, #36]	; 0x24
 800da96:	e767      	b.n	800d968 <_vfiprintf_r+0x94>
 800da98:	fb0c 3202 	mla	r2, ip, r2, r3
 800da9c:	460c      	mov	r4, r1
 800da9e:	2001      	movs	r0, #1
 800daa0:	e7a5      	b.n	800d9ee <_vfiprintf_r+0x11a>
 800daa2:	2300      	movs	r3, #0
 800daa4:	3401      	adds	r4, #1
 800daa6:	9305      	str	r3, [sp, #20]
 800daa8:	4619      	mov	r1, r3
 800daaa:	f04f 0c0a 	mov.w	ip, #10
 800daae:	4620      	mov	r0, r4
 800dab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dab4:	3a30      	subs	r2, #48	; 0x30
 800dab6:	2a09      	cmp	r2, #9
 800dab8:	d903      	bls.n	800dac2 <_vfiprintf_r+0x1ee>
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d0c5      	beq.n	800da4a <_vfiprintf_r+0x176>
 800dabe:	9105      	str	r1, [sp, #20]
 800dac0:	e7c3      	b.n	800da4a <_vfiprintf_r+0x176>
 800dac2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dac6:	4604      	mov	r4, r0
 800dac8:	2301      	movs	r3, #1
 800daca:	e7f0      	b.n	800daae <_vfiprintf_r+0x1da>
 800dacc:	ab03      	add	r3, sp, #12
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	462a      	mov	r2, r5
 800dad2:	4b16      	ldr	r3, [pc, #88]	; (800db2c <_vfiprintf_r+0x258>)
 800dad4:	a904      	add	r1, sp, #16
 800dad6:	4630      	mov	r0, r6
 800dad8:	f7fd fcc8 	bl	800b46c <_printf_float>
 800dadc:	4607      	mov	r7, r0
 800dade:	1c78      	adds	r0, r7, #1
 800dae0:	d1d6      	bne.n	800da90 <_vfiprintf_r+0x1bc>
 800dae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dae4:	07d9      	lsls	r1, r3, #31
 800dae6:	d405      	bmi.n	800daf4 <_vfiprintf_r+0x220>
 800dae8:	89ab      	ldrh	r3, [r5, #12]
 800daea:	059a      	lsls	r2, r3, #22
 800daec:	d402      	bmi.n	800daf4 <_vfiprintf_r+0x220>
 800daee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daf0:	f7ff fa20 	bl	800cf34 <__retarget_lock_release_recursive>
 800daf4:	89ab      	ldrh	r3, [r5, #12]
 800daf6:	065b      	lsls	r3, r3, #25
 800daf8:	f53f af12 	bmi.w	800d920 <_vfiprintf_r+0x4c>
 800dafc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dafe:	e711      	b.n	800d924 <_vfiprintf_r+0x50>
 800db00:	ab03      	add	r3, sp, #12
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	462a      	mov	r2, r5
 800db06:	4b09      	ldr	r3, [pc, #36]	; (800db2c <_vfiprintf_r+0x258>)
 800db08:	a904      	add	r1, sp, #16
 800db0a:	4630      	mov	r0, r6
 800db0c:	f7fd ff52 	bl	800b9b4 <_printf_i>
 800db10:	e7e4      	b.n	800dadc <_vfiprintf_r+0x208>
 800db12:	bf00      	nop
 800db14:	0800e254 	.word	0x0800e254
 800db18:	0800e274 	.word	0x0800e274
 800db1c:	0800e234 	.word	0x0800e234
 800db20:	0800e3f4 	.word	0x0800e3f4
 800db24:	0800e3fe 	.word	0x0800e3fe
 800db28:	0800b46d 	.word	0x0800b46d
 800db2c:	0800d8af 	.word	0x0800d8af
 800db30:	0800e3fa 	.word	0x0800e3fa

0800db34 <_sbrk_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	4d06      	ldr	r5, [pc, #24]	; (800db50 <_sbrk_r+0x1c>)
 800db38:	2300      	movs	r3, #0
 800db3a:	4604      	mov	r4, r0
 800db3c:	4608      	mov	r0, r1
 800db3e:	602b      	str	r3, [r5, #0]
 800db40:	f000 f992 	bl	800de68 <_sbrk>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	d102      	bne.n	800db4e <_sbrk_r+0x1a>
 800db48:	682b      	ldr	r3, [r5, #0]
 800db4a:	b103      	cbz	r3, 800db4e <_sbrk_r+0x1a>
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
 800db50:	20003458 	.word	0x20003458

0800db54 <__sread>:
 800db54:	b510      	push	{r4, lr}
 800db56:	460c      	mov	r4, r1
 800db58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db5c:	f000 f8e2 	bl	800dd24 <_read_r>
 800db60:	2800      	cmp	r0, #0
 800db62:	bfab      	itete	ge
 800db64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db66:	89a3      	ldrhlt	r3, [r4, #12]
 800db68:	181b      	addge	r3, r3, r0
 800db6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db6e:	bfac      	ite	ge
 800db70:	6563      	strge	r3, [r4, #84]	; 0x54
 800db72:	81a3      	strhlt	r3, [r4, #12]
 800db74:	bd10      	pop	{r4, pc}

0800db76 <__swrite>:
 800db76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7a:	461f      	mov	r7, r3
 800db7c:	898b      	ldrh	r3, [r1, #12]
 800db7e:	05db      	lsls	r3, r3, #23
 800db80:	4605      	mov	r5, r0
 800db82:	460c      	mov	r4, r1
 800db84:	4616      	mov	r6, r2
 800db86:	d505      	bpl.n	800db94 <__swrite+0x1e>
 800db88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db8c:	2302      	movs	r3, #2
 800db8e:	2200      	movs	r2, #0
 800db90:	f000 f898 	bl	800dcc4 <_lseek_r>
 800db94:	89a3      	ldrh	r3, [r4, #12]
 800db96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db9e:	81a3      	strh	r3, [r4, #12]
 800dba0:	4632      	mov	r2, r6
 800dba2:	463b      	mov	r3, r7
 800dba4:	4628      	mov	r0, r5
 800dba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbaa:	f000 b817 	b.w	800dbdc <_write_r>

0800dbae <__sseek>:
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb6:	f000 f885 	bl	800dcc4 <_lseek_r>
 800dbba:	1c43      	adds	r3, r0, #1
 800dbbc:	89a3      	ldrh	r3, [r4, #12]
 800dbbe:	bf15      	itete	ne
 800dbc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800dbc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dbc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dbca:	81a3      	strheq	r3, [r4, #12]
 800dbcc:	bf18      	it	ne
 800dbce:	81a3      	strhne	r3, [r4, #12]
 800dbd0:	bd10      	pop	{r4, pc}

0800dbd2 <__sclose>:
 800dbd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbd6:	f000 b831 	b.w	800dc3c <_close_r>
	...

0800dbdc <_write_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4d07      	ldr	r5, [pc, #28]	; (800dbfc <_write_r+0x20>)
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	4608      	mov	r0, r1
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	602a      	str	r2, [r5, #0]
 800dbea:	461a      	mov	r2, r3
 800dbec:	f7f3 fc5e 	bl	80014ac <_write>
 800dbf0:	1c43      	adds	r3, r0, #1
 800dbf2:	d102      	bne.n	800dbfa <_write_r+0x1e>
 800dbf4:	682b      	ldr	r3, [r5, #0]
 800dbf6:	b103      	cbz	r3, 800dbfa <_write_r+0x1e>
 800dbf8:	6023      	str	r3, [r4, #0]
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	20003458 	.word	0x20003458

0800dc00 <__assert_func>:
 800dc00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc02:	4614      	mov	r4, r2
 800dc04:	461a      	mov	r2, r3
 800dc06:	4b09      	ldr	r3, [pc, #36]	; (800dc2c <__assert_func+0x2c>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	68d8      	ldr	r0, [r3, #12]
 800dc0e:	b14c      	cbz	r4, 800dc24 <__assert_func+0x24>
 800dc10:	4b07      	ldr	r3, [pc, #28]	; (800dc30 <__assert_func+0x30>)
 800dc12:	9100      	str	r1, [sp, #0]
 800dc14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc18:	4906      	ldr	r1, [pc, #24]	; (800dc34 <__assert_func+0x34>)
 800dc1a:	462b      	mov	r3, r5
 800dc1c:	f000 f81e 	bl	800dc5c <fiprintf>
 800dc20:	f000 f89f 	bl	800dd62 <abort>
 800dc24:	4b04      	ldr	r3, [pc, #16]	; (800dc38 <__assert_func+0x38>)
 800dc26:	461c      	mov	r4, r3
 800dc28:	e7f3      	b.n	800dc12 <__assert_func+0x12>
 800dc2a:	bf00      	nop
 800dc2c:	2000003c 	.word	0x2000003c
 800dc30:	0800e405 	.word	0x0800e405
 800dc34:	0800e412 	.word	0x0800e412
 800dc38:	0800e114 	.word	0x0800e114

0800dc3c <_close_r>:
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	4d06      	ldr	r5, [pc, #24]	; (800dc58 <_close_r+0x1c>)
 800dc40:	2300      	movs	r3, #0
 800dc42:	4604      	mov	r4, r0
 800dc44:	4608      	mov	r0, r1
 800dc46:	602b      	str	r3, [r5, #0]
 800dc48:	f000 f8d6 	bl	800ddf8 <_close>
 800dc4c:	1c43      	adds	r3, r0, #1
 800dc4e:	d102      	bne.n	800dc56 <_close_r+0x1a>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	b103      	cbz	r3, 800dc56 <_close_r+0x1a>
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	bd38      	pop	{r3, r4, r5, pc}
 800dc58:	20003458 	.word	0x20003458

0800dc5c <fiprintf>:
 800dc5c:	b40e      	push	{r1, r2, r3}
 800dc5e:	b503      	push	{r0, r1, lr}
 800dc60:	4601      	mov	r1, r0
 800dc62:	ab03      	add	r3, sp, #12
 800dc64:	4805      	ldr	r0, [pc, #20]	; (800dc7c <fiprintf+0x20>)
 800dc66:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc6a:	6800      	ldr	r0, [r0, #0]
 800dc6c:	9301      	str	r3, [sp, #4]
 800dc6e:	f7ff fe31 	bl	800d8d4 <_vfiprintf_r>
 800dc72:	b002      	add	sp, #8
 800dc74:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc78:	b003      	add	sp, #12
 800dc7a:	4770      	bx	lr
 800dc7c:	2000003c 	.word	0x2000003c

0800dc80 <_fstat_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d07      	ldr	r5, [pc, #28]	; (800dca0 <_fstat_r+0x20>)
 800dc84:	2300      	movs	r3, #0
 800dc86:	4604      	mov	r4, r0
 800dc88:	4608      	mov	r0, r1
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	602b      	str	r3, [r5, #0]
 800dc8e:	f000 f8bb 	bl	800de08 <_fstat>
 800dc92:	1c43      	adds	r3, r0, #1
 800dc94:	d102      	bne.n	800dc9c <_fstat_r+0x1c>
 800dc96:	682b      	ldr	r3, [r5, #0]
 800dc98:	b103      	cbz	r3, 800dc9c <_fstat_r+0x1c>
 800dc9a:	6023      	str	r3, [r4, #0]
 800dc9c:	bd38      	pop	{r3, r4, r5, pc}
 800dc9e:	bf00      	nop
 800dca0:	20003458 	.word	0x20003458

0800dca4 <_isatty_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4d06      	ldr	r5, [pc, #24]	; (800dcc0 <_isatty_r+0x1c>)
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	602b      	str	r3, [r5, #0]
 800dcb0:	f000 f8ba 	bl	800de28 <_isatty>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	d102      	bne.n	800dcbe <_isatty_r+0x1a>
 800dcb8:	682b      	ldr	r3, [r5, #0]
 800dcba:	b103      	cbz	r3, 800dcbe <_isatty_r+0x1a>
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	bd38      	pop	{r3, r4, r5, pc}
 800dcc0:	20003458 	.word	0x20003458

0800dcc4 <_lseek_r>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4d07      	ldr	r5, [pc, #28]	; (800dce4 <_lseek_r+0x20>)
 800dcc8:	4604      	mov	r4, r0
 800dcca:	4608      	mov	r0, r1
 800dccc:	4611      	mov	r1, r2
 800dcce:	2200      	movs	r2, #0
 800dcd0:	602a      	str	r2, [r5, #0]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	f000 f8b8 	bl	800de48 <_lseek>
 800dcd8:	1c43      	adds	r3, r0, #1
 800dcda:	d102      	bne.n	800dce2 <_lseek_r+0x1e>
 800dcdc:	682b      	ldr	r3, [r5, #0]
 800dcde:	b103      	cbz	r3, 800dce2 <_lseek_r+0x1e>
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	bd38      	pop	{r3, r4, r5, pc}
 800dce4:	20003458 	.word	0x20003458

0800dce8 <__ascii_mbtowc>:
 800dce8:	b082      	sub	sp, #8
 800dcea:	b901      	cbnz	r1, 800dcee <__ascii_mbtowc+0x6>
 800dcec:	a901      	add	r1, sp, #4
 800dcee:	b142      	cbz	r2, 800dd02 <__ascii_mbtowc+0x1a>
 800dcf0:	b14b      	cbz	r3, 800dd06 <__ascii_mbtowc+0x1e>
 800dcf2:	7813      	ldrb	r3, [r2, #0]
 800dcf4:	600b      	str	r3, [r1, #0]
 800dcf6:	7812      	ldrb	r2, [r2, #0]
 800dcf8:	1e10      	subs	r0, r2, #0
 800dcfa:	bf18      	it	ne
 800dcfc:	2001      	movne	r0, #1
 800dcfe:	b002      	add	sp, #8
 800dd00:	4770      	bx	lr
 800dd02:	4610      	mov	r0, r2
 800dd04:	e7fb      	b.n	800dcfe <__ascii_mbtowc+0x16>
 800dd06:	f06f 0001 	mvn.w	r0, #1
 800dd0a:	e7f8      	b.n	800dcfe <__ascii_mbtowc+0x16>

0800dd0c <__malloc_lock>:
 800dd0c:	4801      	ldr	r0, [pc, #4]	; (800dd14 <__malloc_lock+0x8>)
 800dd0e:	f7ff b910 	b.w	800cf32 <__retarget_lock_acquire_recursive>
 800dd12:	bf00      	nop
 800dd14:	20003450 	.word	0x20003450

0800dd18 <__malloc_unlock>:
 800dd18:	4801      	ldr	r0, [pc, #4]	; (800dd20 <__malloc_unlock+0x8>)
 800dd1a:	f7ff b90b 	b.w	800cf34 <__retarget_lock_release_recursive>
 800dd1e:	bf00      	nop
 800dd20:	20003450 	.word	0x20003450

0800dd24 <_read_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4d07      	ldr	r5, [pc, #28]	; (800dd44 <_read_r+0x20>)
 800dd28:	4604      	mov	r4, r0
 800dd2a:	4608      	mov	r0, r1
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	2200      	movs	r2, #0
 800dd30:	602a      	str	r2, [r5, #0]
 800dd32:	461a      	mov	r2, r3
 800dd34:	f000 f890 	bl	800de58 <_read>
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	d102      	bne.n	800dd42 <_read_r+0x1e>
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	b103      	cbz	r3, 800dd42 <_read_r+0x1e>
 800dd40:	6023      	str	r3, [r4, #0]
 800dd42:	bd38      	pop	{r3, r4, r5, pc}
 800dd44:	20003458 	.word	0x20003458

0800dd48 <__ascii_wctomb>:
 800dd48:	b149      	cbz	r1, 800dd5e <__ascii_wctomb+0x16>
 800dd4a:	2aff      	cmp	r2, #255	; 0xff
 800dd4c:	bf85      	ittet	hi
 800dd4e:	238a      	movhi	r3, #138	; 0x8a
 800dd50:	6003      	strhi	r3, [r0, #0]
 800dd52:	700a      	strbls	r2, [r1, #0]
 800dd54:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd58:	bf98      	it	ls
 800dd5a:	2001      	movls	r0, #1
 800dd5c:	4770      	bx	lr
 800dd5e:	4608      	mov	r0, r1
 800dd60:	4770      	bx	lr

0800dd62 <abort>:
 800dd62:	b508      	push	{r3, lr}
 800dd64:	2006      	movs	r0, #6
 800dd66:	f000 f82b 	bl	800ddc0 <raise>
 800dd6a:	2001      	movs	r0, #1
 800dd6c:	f000 f88a 	bl	800de84 <_exit>

0800dd70 <_raise_r>:
 800dd70:	291f      	cmp	r1, #31
 800dd72:	b538      	push	{r3, r4, r5, lr}
 800dd74:	4604      	mov	r4, r0
 800dd76:	460d      	mov	r5, r1
 800dd78:	d904      	bls.n	800dd84 <_raise_r+0x14>
 800dd7a:	2316      	movs	r3, #22
 800dd7c:	6003      	str	r3, [r0, #0]
 800dd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd82:	bd38      	pop	{r3, r4, r5, pc}
 800dd84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dd86:	b112      	cbz	r2, 800dd8e <_raise_r+0x1e>
 800dd88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd8c:	b94b      	cbnz	r3, 800dda2 <_raise_r+0x32>
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f000 f830 	bl	800ddf4 <_getpid_r>
 800dd94:	462a      	mov	r2, r5
 800dd96:	4601      	mov	r1, r0
 800dd98:	4620      	mov	r0, r4
 800dd9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd9e:	f000 b817 	b.w	800ddd0 <_kill_r>
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d00a      	beq.n	800ddbc <_raise_r+0x4c>
 800dda6:	1c59      	adds	r1, r3, #1
 800dda8:	d103      	bne.n	800ddb2 <_raise_r+0x42>
 800ddaa:	2316      	movs	r3, #22
 800ddac:	6003      	str	r3, [r0, #0]
 800ddae:	2001      	movs	r0, #1
 800ddb0:	e7e7      	b.n	800dd82 <_raise_r+0x12>
 800ddb2:	2400      	movs	r4, #0
 800ddb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ddb8:	4628      	mov	r0, r5
 800ddba:	4798      	blx	r3
 800ddbc:	2000      	movs	r0, #0
 800ddbe:	e7e0      	b.n	800dd82 <_raise_r+0x12>

0800ddc0 <raise>:
 800ddc0:	4b02      	ldr	r3, [pc, #8]	; (800ddcc <raise+0xc>)
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	6818      	ldr	r0, [r3, #0]
 800ddc6:	f7ff bfd3 	b.w	800dd70 <_raise_r>
 800ddca:	bf00      	nop
 800ddcc:	2000003c 	.word	0x2000003c

0800ddd0 <_kill_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4d07      	ldr	r5, [pc, #28]	; (800ddf0 <_kill_r+0x20>)
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	4608      	mov	r0, r1
 800ddda:	4611      	mov	r1, r2
 800dddc:	602b      	str	r3, [r5, #0]
 800ddde:	f000 f82b 	bl	800de38 <_kill>
 800dde2:	1c43      	adds	r3, r0, #1
 800dde4:	d102      	bne.n	800ddec <_kill_r+0x1c>
 800dde6:	682b      	ldr	r3, [r5, #0]
 800dde8:	b103      	cbz	r3, 800ddec <_kill_r+0x1c>
 800ddea:	6023      	str	r3, [r4, #0]
 800ddec:	bd38      	pop	{r3, r4, r5, pc}
 800ddee:	bf00      	nop
 800ddf0:	20003458 	.word	0x20003458

0800ddf4 <_getpid_r>:
 800ddf4:	f000 b810 	b.w	800de18 <_getpid>

0800ddf8 <_close>:
 800ddf8:	4b02      	ldr	r3, [pc, #8]	; (800de04 <_close+0xc>)
 800ddfa:	2258      	movs	r2, #88	; 0x58
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	f04f 30ff 	mov.w	r0, #4294967295
 800de02:	4770      	bx	lr
 800de04:	20003458 	.word	0x20003458

0800de08 <_fstat>:
 800de08:	4b02      	ldr	r3, [pc, #8]	; (800de14 <_fstat+0xc>)
 800de0a:	2258      	movs	r2, #88	; 0x58
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	f04f 30ff 	mov.w	r0, #4294967295
 800de12:	4770      	bx	lr
 800de14:	20003458 	.word	0x20003458

0800de18 <_getpid>:
 800de18:	4b02      	ldr	r3, [pc, #8]	; (800de24 <_getpid+0xc>)
 800de1a:	2258      	movs	r2, #88	; 0x58
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	f04f 30ff 	mov.w	r0, #4294967295
 800de22:	4770      	bx	lr
 800de24:	20003458 	.word	0x20003458

0800de28 <_isatty>:
 800de28:	4b02      	ldr	r3, [pc, #8]	; (800de34 <_isatty+0xc>)
 800de2a:	2258      	movs	r2, #88	; 0x58
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	2000      	movs	r0, #0
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	20003458 	.word	0x20003458

0800de38 <_kill>:
 800de38:	4b02      	ldr	r3, [pc, #8]	; (800de44 <_kill+0xc>)
 800de3a:	2258      	movs	r2, #88	; 0x58
 800de3c:	601a      	str	r2, [r3, #0]
 800de3e:	f04f 30ff 	mov.w	r0, #4294967295
 800de42:	4770      	bx	lr
 800de44:	20003458 	.word	0x20003458

0800de48 <_lseek>:
 800de48:	4b02      	ldr	r3, [pc, #8]	; (800de54 <_lseek+0xc>)
 800de4a:	2258      	movs	r2, #88	; 0x58
 800de4c:	601a      	str	r2, [r3, #0]
 800de4e:	f04f 30ff 	mov.w	r0, #4294967295
 800de52:	4770      	bx	lr
 800de54:	20003458 	.word	0x20003458

0800de58 <_read>:
 800de58:	4b02      	ldr	r3, [pc, #8]	; (800de64 <_read+0xc>)
 800de5a:	2258      	movs	r2, #88	; 0x58
 800de5c:	601a      	str	r2, [r3, #0]
 800de5e:	f04f 30ff 	mov.w	r0, #4294967295
 800de62:	4770      	bx	lr
 800de64:	20003458 	.word	0x20003458

0800de68 <_sbrk>:
 800de68:	4b04      	ldr	r3, [pc, #16]	; (800de7c <_sbrk+0x14>)
 800de6a:	6819      	ldr	r1, [r3, #0]
 800de6c:	4602      	mov	r2, r0
 800de6e:	b909      	cbnz	r1, 800de74 <_sbrk+0xc>
 800de70:	4903      	ldr	r1, [pc, #12]	; (800de80 <_sbrk+0x18>)
 800de72:	6019      	str	r1, [r3, #0]
 800de74:	6818      	ldr	r0, [r3, #0]
 800de76:	4402      	add	r2, r0
 800de78:	601a      	str	r2, [r3, #0]
 800de7a:	4770      	bx	lr
 800de7c:	20000240 	.word	0x20000240
 800de80:	20003460 	.word	0x20003460

0800de84 <_exit>:
 800de84:	e7fe      	b.n	800de84 <_exit>
	...

0800de88 <_init>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	bf00      	nop
 800de8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8e:	bc08      	pop	{r3}
 800de90:	469e      	mov	lr, r3
 800de92:	4770      	bx	lr

0800de94 <_fini>:
 800de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de96:	bf00      	nop
 800de98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de9a:	bc08      	pop	{r3}
 800de9c:	469e      	mov	lr, r3
 800de9e:	4770      	bx	lr
